[
  {
    "main_heading": "Installing",
    "sub_heading": "### Install with PyPi[#](#install-with-pypi)",
    "content": "You can install supabase-py via the terminal. (for > Python 3.7)\n\nPIPConda\n\nTerminal\n\n`     _10  pip install supabase      `\n\n* * *"
  },
  {
    "main_heading": "Initializing\n\nYou can initialize a new Supabase client using the `create_client()` method.\n\nThe Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.",
    "sub_heading": "### Parameters",
    "content": "*   supabase\\_urlRequiredstring\n    \n    The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n    \n*   supabase\\_keyRequiredstring\n    \n    The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n    \n*   optionsOptionalClientOptions\n    \n    Options to change the Auth behaviors.\n    \n    Details\n    \n\ncreate\\_client()With timeout option\n\n`     _10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)      `\n\n* * *"
  },
  {
    "main_heading": "Fetch data\n\n*   By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](/dashboard/project/_/settings/api)\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.\n*   `select()` can be combined with [Filters](/docs/reference/python/using-filters)\n    \n*   `select()` can be combined with [Modifiers](/docs/reference/python/using-modifiers)\n    \n*   `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform)\n     and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465)\n    .",
    "sub_heading": "### Parameters",
    "content": "*   columnsOptionalstring\n    \n    The columns to retrieve, defaults to `*`.\n    \n*   countOptionalCountMethod\n    \n    The property to use to get the count of rows returned.\n    \n\nGetting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Insert data",
    "sub_heading": "### Parameters",
    "content": "*   jsonRequireddict, list\n    \n    The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n    \n*   countOptionalCountMethod\n    \n    The property to use to get the count of rows returned.\n    \n*   returningOptionalReturnMethod\n    \n    Either 'minimal' or 'representation'. Defaults to 'representation'.\n    \n*   default\\_to\\_nullOptionalbool\n    \n    Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n    \n\nCreate a recordBulk create\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Update data\n\n*   `update()` should always be combined with [Filters](/docs/reference/python/using-filters)\n     to target the item(s) you wish to update.",
    "sub_heading": "### Parameters",
    "content": "*   jsonRequireddict, list\n    \n    The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n    \n*   countOptionalCountMethod\n    \n    The property to use to get the count of rows returned.\n    \n\nUpdating your dataUpdating JSON data\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Upsert data\n\n*   Primary keys must be included in the `values` dict to use upsert.",
    "sub_heading": "### Parameters",
    "content": "*   jsonRequireddict, list\n    \n    The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.\n    \n*   countOptionalCountMethod\n    \n    The property to use to get the count of rows returned.\n    \n*   returningOptionalReturnMethod\n    \n    Either 'minimal' or 'representation'. Defaults to 'representation'.\n    \n*   ignore\\_duplicatesOptionalbool\n    \n    Whether duplicate rows should be ignored.\n    \n*   on\\_conflictOptionalstring\n    \n    Specified columns to be made to work with UNIQUE constraint.\n    \n*   default\\_to\\_nullOptionalbool\n    \n    Make missing fields default to `null`. Otherwise, use the default value for the column. Only applies for bulk inserts.\n    \n\nUpsert your dataBulk Upsert your dataUpserting into tables with constraints\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Delete data\n\n*   `delete()` should always be combined with [filters](/docs/reference/python/using-filters)\n     to target the item(s) you wish to delete.\n*   If you use `delete()` with filters and you have [RLS](/docs/learn/auth-deep-dive/auth-row-level-security)\n     enabled, only rows visible through `SELECT` policies are deleted. Note that by default no rows are visible, so you need at least one `SELECT`/`ALL` policy that makes the rows visible.\n*   When using `delete().in_()`, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.",
    "sub_heading": "### Parameters",
    "content": "*   countOptionalCountMethod\n    \n    The property to use to get the count of rows returned.\n    \n*   returningOptionalReturnMethod\n    \n    Either 'minimal' or 'representation'. Defaults to 'representation'.\n    \n\nDelete recordsDelete multiple records\n\n`     _10  response = supabase.table('countries').delete().eq('id', 1).execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Call a Postgres function\n\nYou can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n`     _10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;      `",
    "sub_heading": "### Parameters",
    "content": "*   fnRequiredcallable\n    \n    The stored procedure call to be executed.\n    \n*   paramsOptionaldict of any\n    \n    Parameters passed into the stored procedure call.\n    \n*   getOptionaldict of any\n    \n    When set to `true`, `data` will not be returned. Useful if you only need the count.\n    \n*   headOptionaldict of any\n    \n    When set to `true`, the function will be called with read-only access mode.\n    \n*   countOptionalCountMethod\n    \n    Count algorithm to use to count rows returned by the function. Only applicable for [set-returning functions](https://www.postgresql.org/docs/current/functions-srf.html)\n    . `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the hood. `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. `\"estimated\"`: Uses exact count for low numbers and planned count for high numbers.\n    \n\nCall a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function\n\n`     _10  response = supabase.rpc(\"hello_world\").execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column is equal to a value\n\nMatch only rows where `column` is equal to `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valueRequiredany\n    \n    The value to filter by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column is not equal to a value\n\nMatch only rows where `column` is not equal to `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valueRequiredany\n    \n    The value to filter by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column is greater than a value\n\nMatch only rows where `column` is greather than `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valueRequiredany\n    \n    The value to filter by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Column is greater than or equal to a value\n\nMatch only rows where `column` is greater than or equal to `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valueRequiredany\n    \n    The value to filter by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column is less than a value\n\nMatch only rows where `column` is less than `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valueRequiredany\n    \n    The value to filter by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column is less than or equal to a value\n\nMatch only rows where `column` is less than or equal to `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valueRequiredany\n    \n    The value to filter by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column matches a pattern\n\nMatch only rows where `column` matches `pattern` case-sensitively.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The name of the column to apply a filter on\n    \n*   patternRequiredstring\n    \n    The pattern to match by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column matches a case-insensitive pattern\n\nMatch only rows where `column` matches `pattern` case-insensitively.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The name of the column to apply a filter on\n    \n*   patternRequiredstring\n    \n    The pattern to match by\n    \n\nWith \\`select()\\`\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column is a value\n\nMatch only rows where `column` IS `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The name of the column to apply a filter on\n    \n*   valueRequirednull | boolean\n    \n    The value to match by\n    \n\nChecking for nullness, True or False\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Column is in an array\n\nMatch only rows where `column` is included in the `values` array.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valuesRequiredarray\n    \n    The values to filter by\n    \n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Column contains every element in a value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   valuesRequiredobject\n    \n    The jsonb, array, or range value to filter with\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Contained by value\n\nOnly relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The jsonb, array, or range column to filter on\n    \n*   valueRequiredobject\n    \n    The jsonb, array, or range value to filter with\n    \n\nOn array columnsOn range columnsOn \\`jsonb\\` columns\n\n`     _10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Greater than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The range column to filter on\n    \n*   rangeRequiredarray\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Greater than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The range column to filter on\n    \n*   rangeRequiredstring\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Less than a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The range column to filter on\n    \n*   rangeRequiredarray\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Less than or equal to a range\n\nOnly relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The range column to filter on\n    \n*   rangeRequiredarray\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Mutually exclusive to a range\n\nOnly relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The range column to filter on\n    \n*   rangeRequiredarray\n    \n    The range to filter with\n    \n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "With a common element\n\nOnly relevant for array and range columns. Match only rows where `column` and `value` have an element in common.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The array or range column to filter on\n    \n*   valueRequiredIterable\\[Any\\]\n    \n    The array or range value to filter with\n    \n\nOn array columnsOn range columns\n\n`     _10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Match a string\n\nOnly relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n*   For more information, see [Postgres full text search](/docs/guides/database/full-text-search)\n    .",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The text or tsvector column to filter on\n    \n*   queryRequiredstring\n    \n    The query text to match with\n    \n*   optionsOptionalobject\n    \n    Named parameters\n    \n    Details\n    \n\nText searchBasic normalizationFull normalizationWebsearch\n\n`     _10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' & 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Match an associated value\n\nMatch only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.",
    "sub_heading": "### Parameters",
    "content": "*   queryRequireddict\n    \n    The object to filter with, with column names as keys mapped to their filter values\n    \n\nWith \\`select()\\`\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Match at least one filter\n\nor\\_() expects you to use the raw PostgREST syntax for the filter names and values.\n\n``     _10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`      ``",
    "sub_heading": "### Parameters",
    "content": "*   filtersRequiredstring\n    \n    The filters to use, following PostgREST syntax\n    \n*   reference\\_tableOptionalstring\n    \n    Set this to filter on referenced tables instead of the parent table\n    \n\nWith \\`select()\\`Use \\`or\\` with \\`and\\`Use \\`or\\` on referenced tables\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Match the filter\n\nfilter() expects you to use the raw PostgREST syntax for the filter values.\n\n``     _10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values      ``",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to filter on\n    \n*   operatorOptionalstring\n    \n    The operator to filter with, following PostgREST syntax\n    \n*   valueOptionalany\n    \n    The value to filter with, following PostgREST syntax\n    \n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Order the results\n\nOrder the query result by `column`.",
    "sub_heading": "### Parameters",
    "content": "*   columnRequiredstring\n    \n    The column to order by\n    \n*   descOptionalbool\n    \n    Whether the rows should be ordered in descending order or not.\n    \n*   foreign\\_tableOptionalstring\n    \n    Foreign table name whose results are to be ordered.\n    \n*   nullsfirstOptionalbool\n    \n    Order by showing nulls first\n    \n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Limit the number of rows returned",
    "sub_heading": "### Parameters",
    "content": "*   sizeRequirednumber\n    \n    The maximum number of rows to return\n    \n*   foreign\\_tableOptionalstring\n    \n    Set this to limit rows of foreign tables instead of the parent table.\n    \n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Limit the query to a range\n\nLimit the query result by starting at an offset (`from`) and ending at the offset (`from + to`). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.\n\nThe `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third and fourth rows of the query.",
    "sub_heading": "### Parameters",
    "content": "*   startRequirednumber\n    \n    The starting index from which to limit the result.\n    \n*   endRequirednumber\n    \n    The last index to which to limit the result.\n    \n*   foreign\\_tableOptionalstring\n    \n    Set this to limit rows of foreign tables instead of the parent table.\n    \n\nWith \\`select()\\`On a foreign table\n\n`     _10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()      `\n\nData source\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Using explain\n\nFor debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html)\n of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance)\n to enable the functionality on your project.",
    "sub_heading": "### Parameters",
    "content": "*   walOptionalboolean\n    \n    If `true`, include information on WAL record generation.\n    \n*   verboseOptionalboolean\n    \n    If `true`, the query identifier will be returned and `data` will include the output columns of the query.\n    \n*   settingsOptionalboolean\n    \n    If `true`, include information on configuration parameters that affect query planning.\n    \n*   formatOptionalboolean\n    \n    The format of the output, can be `\"text\"` (default) or `\"json\"`.\n    \n*   formatOptional\"text\" | \"json\"\n    \n    The format of the output, can be `\"text\"` (default) or `\"json\"`.\n    \n*   buffersOptionalboolean\n    \n    If `true`, include information on buffer usage.\n    \n*   analyzeOptionalboolean\n    \n    If `true`, the query will be executed and the actual run time will be returned.\n    \n\nGet the execution planGet the execution plan with analyze and verbose\n\n`     _10  response = supabase.table(\"countries\").select(\"*\").explain().execute()      `\n\nData source\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Create a new user\n\n*   By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://supabase.com/dashboard/project/_/auth/providers)\n    .\n*   **Confirm email** determines if users need to confirm their email address after signing up.\n    *   If **Confirm email** is enabled, a `user` is returned but `session` is null.\n    *   If **Confirm email** is disabled, both a `user` and a `session` are returned.\n*   By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/guides/auth/redirect-urls)\n    . You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://supabase.com/dashboard/project/_/auth/url-configuration)\n    .\n*   If sign\\_up() is called for an existing confirmed user:\n    *   When both **Confirm email** and **Confirm phone** (even when phone provider is disabled) are enabled in [your project](/dashboard/project/_/auth/providers)\n        , an obfuscated/fake user object is returned.\n    *   When either **Confirm email** or **Confirm phone** (even when phone provider is disabled) is disabled, the error message, `User already registered` is returned.\n*   To fetch the currently logged-in user, refer to [`get_user()`](/docs/reference/python/auth-getuser)\n    .",
    "sub_heading": "### Parameters",
    "content": "*   credentialsRequiredSignUpWithPasswordCredentials\n    \n    Details\n    \n\nSign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL\n\n`     _10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )      `\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Create an anonymous user\n\n*   Returns an anonymous user\n*   It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the `options` param.",
    "sub_heading": "### Parameters",
    "content": "*   credentialsRequiredSignInAnonymouslyCredentials\n    \n    Details\n    \n\nCreate an anonymous userCreate an anonymous user with custom user metadata\n\n`     _10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )      `\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Sign in a user\n\nLog in an existing user with an email and password or phone and password.\n\n*   Requires either an email and password or a phone number and password.",
    "sub_heading": "### Parameters",
    "content": "*   credentialsRequiredSignInWithPasswordCredentials\n    \n    Details\n    \n\nSign in with email and passwordSign in with phone and password\n\n`     _10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )      `\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Sign in with ID Token\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.",
    "sub_heading": "### Parameters",
    "content": "*   credentialsRequiredSignInWithIdTokenCredentials\n    \n    Details\n    \n\nSign In using ID Token\n\n`     _10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )      `\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Sign in a user through OTP\n\n*   Requires either an email or phone number.\n*   This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.\n*   If the user doesn't exist, `sign_in_with_otp()` will signup the user instead. To restrict this behavior, you can set `should_create_user` in `SignInWithPasswordlessCredentials.options` to `false`.\n*   If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.\n*   If you're using phone, you can configure whether you want the user to receive a OTP.\n*   The magic link's destination URL is determined by the [`SITE_URL`](/docs/guides/auth/redirect-urls)\n    .\n*   See [redirect URLs and wildcards](/docs/guides/auth/overview#redirect-urls-and-wildcards)\n     to add additional redirect URLs to your project.\n*   Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, [modify the magic link email template](https://supabase.com/dashboard/project/_/auth/templates)\n     to include `\\{\\{ .Token \\}\\}` instead of `\\{\\{ .ConfirmationURL \\}\\}`.",
    "sub_heading": "### Parameters",
    "content": "*   credentialsRequiredSignInWithPasswordCredentials\n    \n    Details\n    \n\nSign in with emailSign in with SMS OTPSign in with WhatsApp OTP\n\n`     _10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )      `\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Sign in a user through OAuth\n\n*   This method is used for signing in using a third-party provider.\n*   Supabase supports many different [third-party providers](/docs/guides/auth#configure-third-party-providers)\n    .",
    "sub_heading": "### Parameters",
    "content": "*   credentialsRequiredSignInWithOAuthCredentials\n    \n    Details\n    \n\nSign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes\n\n`     _10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })      `\n\n* * *"
  },
  {
    "main_heading": "Sign in a user through SSO\n\n*   Before you can call this method you need to [establish a connection](/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections)\n     to an identity provider. Use the [CLI commands](/docs/reference/cli/supabase-sso)\n     to do this.\n*   If you've associated an email domain to the identity provider, you can use the `domain` property to start a sign-in flow.\n*   In case you need to use a different way to start the authentication flow with an identity provider, you can use the `provider_id` property. For example:\n    *   Mapping specific user email addresses with an identity provider.\n    *   Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.",
    "sub_heading": "### Parameters",
    "content": "*   paramsRequiredSignInWithSSOCredentials\n    \n    Details\n    \n\nSign in with email domainSign in with provider UUID\n\n`     _10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})      `\n\nResponse\n\nNotes\n\n* * *"
  },
  {
    "main_heading": "Sign out a user\n\n*   In order to use the `sign_out()` method, the user needs to be signed in first.\n*   By default, `sign_out()` uses the global scope, which signs out all other sessions that the user is logged into as well.\n*   Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.",
    "sub_heading": "### Parameters",
    "content": "*   optionsOptionalSignOutOptions\n    \n    Details\n    \n\nSign out\n\n`     _10  response = supabase.auth.sign_out()      `\n\n* * *"
  },
  {
    "main_heading": "Verify and log in through OTP\n\n*   The `verify_otp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `email`, `recovery`, `invite` or `email_change` (`signup` and `magiclink` types are deprecated).\n*   The verification type used should be determined based on the corresponding auth method called before `verify_otp` to sign up / sign-in a user.\n*   The `TokenHash` is contained in the [email templates](/docs/guides/auth/auth-email-templates)\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See [this guide](/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr)\n     for more details.",
    "sub_heading": "### Parameters",
    "content": "*   paramsRequiredVerifyOtpParams\n    \n    Details\n    \n\nVerify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)\n\n`     _10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )      `\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Retrieve a new session\n\nReturns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\\_session() will attempt to retrieve it from get\\_session(). If the current session's refresh token is invalid, an error will be thrown.\n\n*   This method will refresh the session whether the current one is expired or not.",
    "sub_heading": "### Parameters",
    "content": "*   refresh\\_tokenOptionalstring\n    \n\nRefresh session using the current session\n\n`     _10  response = supabase.auth.refresh_session()      `\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Retrieve a user\n\n*   This method fetches the user object from the database instead of local session.\n*   This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.",
    "sub_heading": "### Parameters",
    "content": "*   jwtOptionalstring\n    \n    Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n    \n\nGet the logged in user with the current existing sessionGet the logged in user with a custom access token jwt\n\n`     _10  response = supabase.auth.get_user()      `\n\nResponse\n\n* * *"
  },
  {
    "main_heading": "Set the session data\n\nSets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.\n\n*   This method sets the session using an `access_token` and `refresh_token`.\n*   If successful, a `SIGNED_IN` event is emitted.",
    "sub_heading": "### Parameters",
    "content": "*   access\\_tokenRequiredstring\n    \n*   refresh\\_tokenRequiredstring\n    \n\nRefresh the session\n\n`     _10  response = supabase.auth.set_session(access_token, refresh_token)      `\n\nResponse\n\nNotes\n\n* * *"
  }
]