[
  {
    "chunk_id": "caf2cb98-3a86-456b-889d-33e0985d3746",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods to integrate Supabase's services into Python-based applications."
  },
  {
    "chunk_id": "ab75aecf-9205-4a21-9ccb-b4087d78028c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase Python library (supabase-py) using pip, the Python package installer. The library supports Python 3.7 and higher versions. The installation can be done either through the terminal or by using a conda environment."
  },
  {
    "chunk_id": "773dcefa-632a-4105-bfc4-8d6324dd3814",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The summary is:\n\nThe Supabase client is the primary interface to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and key as required parameters, and optionally accepts client options to customize the Auth behaviors. This client provides access to the full range of Supabase functionality."
  },
  {
    "chunk_id": "a3875348-4709-4c97-8fcf-15deb01d191c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve and paginate data. However, the `apikey` keyword should be avoided as a column name when using the Supabase Platform."
  },
  {
    "chunk_id": "e4197a43-f228-4357-9987-d0e49cfb8c63",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'insert data' section covers the parameters for the 'insert' function, which allows you to insert single or multiple rows into a table. The key parameters are 'jsonRequired' to specify the data to insert, 'countOptional' to get the count of rows returned, 'returningOptional' to control the response format, and 'default95to95nullOptional' to handle missing fields. The section also provides an example of how to use the 'insert' function to create a new record in the 'countries' table."
  },
  {
    "chunk_id": "df1628d5-0a2d-4e53-9a0b-1230512682fd",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to update data in a database table. It should be combined with filters to target specific rows to be updated. The `update()` method takes a dictionary or list of dictionaries as its parameter, representing the new values to be written, and an optional `count` parameter to retrieve the number of rows affected."
  },
  {
    "chunk_id": "e030375e-6c3e-451f-837a-43d9b7ebce5a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nUpsert data allows inserting or updating rows in a table, where the primary keys must be included in the values. The upsert operation supports various parameters such as returning the count of affected rows, specifying the return method, ignoring duplicates, handling conflicts with unique constraints, and defaulting missing fields to null."
  },
  {
    "chunk_id": "72c4ee6a-56ba-4faa-9ba7-095832659054",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data in Supabase, the `delete()` method should be used in combination with filters to target the specific items to be deleted. When using RLS (Row-Level Security), only rows visible through SELECT policies will be deleted. The `delete().in_()` method can be used to batch delete multiple records that share common criteria. The `returning` parameter can be used to specify the desired response format."
  },
  {
    "chunk_id": "86bab878-75c0-4422-83c0-bbec31f91b9a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis document describes how to call Postgres functions as Remote Procedure Calls (RPCs) from external applications. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The document provides examples and details the various parameters that can be used when calling Postgres functions, including options to control the count algorithm and read-only access mode."
  },
  {
    "chunk_id": "7861bf77-2ec8-43d9-99fd-fc10236cfe6b",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return rows that match specified conditions in Supabase's `select()`, `update()`, `upsert()`, and `delete()` queries, as well as for Postgres functions that return tables. Filters can be chained and applied to JSON columns, and the order of filter application is important for the desired outcome."
  },
  {
    "chunk_id": "c11dbe5e-d6e4-44f7-bc40-893a14dab2aa",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for this content is as follows:\n\nThe documentation describes how to filter a database table by a specific column value using the `eq()` method. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to match. This functionality is demonstrated in an example using the Supabase library to select rows from a \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "bdfcce10-10a7-4398-983e-b2f0d31826b4",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the `neq()` (not equal) function in Supabase to retrieve rows from a table where a specified column is not equal to a given value. The `neq()` function takes two parameters: the column name and the value to filter by."
  },
  {
    "chunk_id": "f6b2ef72-ffa7-4fc2-81c6-6d8e7a11ead1",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The given content describes a method to filter rows in a database table where the value in a specified column is greater than a provided value. The key parameters are the column name and the comparison value, and the example demonstrates how to use this functionality with the `select()` method in the Supabase library."
  },
  {
    "chunk_id": "489e17eb-661c-4f1b-8665-908df8718b4e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `gte()` method in Supabase filters a database table to include only rows where the specified `column` has a value greater than or equal to the provided `value`. This is a common data filtering operation used to retrieve records matching certain criteria."
  },
  {
    "chunk_id": "d960436f-9356-442d-8150-2de26d1d3270",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This feature allows filtering a database table to only include rows where the specified column has a value less than the provided value. The key parameters are the column name and the comparison value, and an example is shown using the Supabase library's `lt()` method to filter a \"countries\" table by the \"id\" column."
  },
  {
    "chunk_id": "65fc3e19-f4fb-444f-bcc3-92a9379e398f",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `lte()` function in the Supabase library is used to filter rows where the specified `column` is less than or equal to the provided `value`. This can be used in a `select()` query to retrieve the matching data, as shown in the example."
  },
  {
    "chunk_id": "96bc2414-8252-4d44-97df-cbe1bf114b8d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column matches a pattern\" feature allows filtering rows where a specified column matches a provided case-sensitive pattern. The key parameters are the column name and the pattern to match, and an example usage is shown with the `like()` method in a `select()` query."
  },
  {
    "chunk_id": "3bc639a3-4dcb-41d7-84dc-3a1159609fc1",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe documentation describes the `ilike` function in Supabase, which allows filtering a table column based on a case-insensitive pattern match. The `ilike` function takes two parameters: the column name and the pattern to match. This can be useful for performing case-insensitive searches on text data stored in a table."
  },
  {
    "chunk_id": "afbc8c59-7f30-4ca3-bb71-e833fdd33e83",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" feature allows filtering rows where a specified column matches a given value. The parameters include the column name and the value to match, which can be a null, boolean, or other data type. This feature is useful for querying a database table and selecting rows based on specific column values."
  },
  {
    "chunk_id": "2594ba55-497b-4f0c-8c5f-921de02c70c0",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes a filtering operation that selects rows from a database table where the value in a specified column is included in a provided array of values. The parameters include the column name to filter on and the array of values to match against. This functionality can be used with the `select()` method of the Supabase library to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "d98ead9a-6f40-4d25-9f20-b3c21ffe5fc4",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" filter is only applicable to jsonb, array, and range columns. It matches rows where the specified column contains every element present in the provided value. The filter takes two parameters: the column name and the value (an object, array, or range) to filter with. This is useful for querying data structures like tags, priorities, or other arrays/ranges stored in the database."
  },
  {
    "chunk_id": "aa4e28f4-b4e5-4f53-84f3-d01179155f90",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is applicable to jsonb, array, and range columns in a database. It allows filtering rows where every element in the specified column is contained within the provided value. This is useful for querying data with complex structures, such as finding classes that are held on specific days of the week."
  },
  {
    "chunk_id": "c8433572-f08e-40f8-9c12-3058a8bc9852",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Greater than a range' filter is used for range columns, matching only rows where every element in the specified column is greater than any element in the provided range. The filter takes two parameters: the column to filter on and the range to filter with. This can be used with the `select()` method, as shown in the example, to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "c5cb8164-c54a-49e7-8c56-8d5e38567e14",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the content about \"Greater than or equal to a range\" is as follows:\n\nThe \"range_gte\" filter is used to match rows in a range column where every element is either contained in the specified range or greater than any element in the range. This is useful for filtering data based on a range of values. The filter takes two parameters: the column name and the range to filter on, which can be specified as a list of strings."
  },
  {
    "chunk_id": "5fbde67a-bf7c-4d7a-9dc5-62b41259debd",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature allows filtering rows where every element in a specified column is less than any element in the provided range. It is used with range columns and takes two parameters: the column to filter on and the range to filter with. This can be useful for querying data where the values in a column must fall within a certain time or numeric range."
  },
  {
    "chunk_id": "2c580ff8-b486-49ab-b650-b10e6661ed89",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Less than or equal to a range' filter is used for range columns in Supabase. It matches only the rows where every element in the specified column is less than or equal to any element in the provided range. The filter takes two required parameters: the column name and the range to filter with."
  },
  {
    "chunk_id": "bde35466-b1b2-4cf9-b650-daa5c78caf40",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is used to filter range columns, where the column value must be mutually exclusive to the provided range, with no elements between the two ranges. It takes two parameters: the column name and the range to filter on. This functionality can be used in the `select()` method of a Supabase query to retrieve records that match the specified criteria."
  },
  {
    "chunk_id": "5ef59b83-3352-454b-8e9f-1a862d6f218d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"With a common element\" filter for array and range columns in a database table. It allows matching rows where the column value and the provided value have at least one element in common. The filter is useful for querying data with array or range data types, such as tags or severity levels, and can be applied using the `overlaps()` function."
  },
  {
    "chunk_id": "4a3f5fa1-f74d-409d-ac2b-1829683aeb82",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Match a string\" functionality in Supabase, which allows filtering text or tsvector columns based on a given query string. It supports various search options such as basic normalization, full normalization, and web search, and provides an example of how to use the `text_search()` function to perform a search on the \"content\" column of a \"texts\" table."
  },
  {
    "chunk_id": "54ec2708-d24e-4680-9ddf-d7d185dac042",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in the Supabase API allows you to filter a database table by matching the values in the `query` object to the corresponding column values in the table. This is a convenient shorthand for multiple `.eq()` calls, making it easier to apply complex filters. The `query` parameter is an object where the keys are column names and the values are the filter criteria."
  },
  {
    "chunk_id": "c63a037b-045c-4200-820b-38f1c08f93c9",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary discusses how to use the `not_` modifier in PostgREST to match rows that do not satisfy a given filter. This includes examples of using `not_.in_()` for filtering on a list of values and `not_.contains()` for filtering on array values. The summary also demonstrates using `not_.is_()` with the `select()` method to retrieve rows where the `name` column is not null."
  },
  {
    "chunk_id": "b75482bf-24f4-4a7f-8ebb-9d038f2c4a00",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the `or95()` function, which allows users to apply multiple filters to a PostgREST query using the `or_()` method. The function supports various filter types, including `in()`, `contains()`, and `containedBy()`, with specific syntax for array values. The summary also mentions using `or_()` with `and()` and on referenced tables."
  },
  {
    "chunk_id": "b0d1dfd0-cb03-4666-9a5e-88556fa99b32",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Summary:\n\nThe `filter()` method in the software documentation expects users to use the raw PostgREST syntax for the filter values, including using parentheses for `in` filters and curly braces for array values. The method takes three parameters: `column` (the column to filter on), `operator` (the filter operator to use), and `value` (the value to filter with). The summary also provides an example of using `filter()` on a foreign table to select data based on the `name` column."
  },
  {
    "chunk_id": "1731a6e4-f86e-4991-8de8-255ebc0aa6b9",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which only return rows that match certain conditions. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "5fe0e206-9aa3-484b-8dfa-efdfc57f09de",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe `order()` function in the Supabase library allows you to order the query results by a specific column. The function takes four parameters: `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the name of a foreign table whose results are to be ordered), and `nulls_first` (whether to show null values first). An example usage of the `order()` function is shown, where the results from the \"countries\" table are ordered by the \"name\" column in descending order."
  },
  {
    "chunk_id": "3cf3f9c8-1755-4b39-9f01-c306889d8738",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation provides information on how to limit the number of rows returned in a database query. It explains the `limit()` parameter, which takes a numeric argument to specify the maximum number of rows to return. Additionally, the `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table. An example query is provided to demonstrate the usage of the `limit()` function."
  },
  {
    "chunk_id": "3533d359-0019-4112-b079-75c8b3eefe5c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows returning only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, so `range(1, 3)` will include the second, third, and fourth rows of the query. Additionally, the `foreign_table` parameter can be used to limit rows of foreign tables instead of the parent table."
  },
  {
    "chunk_id": "b77f39f3-67bf-4f4e-9b91-48337b8b928a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve a single row of data from a Supabase table using the `select()` method with the `single()` modifier. This is useful when you only need to retrieve one record, as it returns the data as a single object rather than an array of objects, simplifying the response handling."
  },
  {
    "chunk_id": "82c93f22-3488-4815-bbd3-6a2de91e0a3f",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise overview of how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase client. This method returns the data as a single object instead of an array, which can be useful when expecting a single result. The example demonstrates how to use `select()` and `eq()` to retrieve a row from the \"countries\" table where the \"name\" column matches \"Albania\"."
  },
  {
    "chunk_id": "550118b1-8db5-4c14-984a-1f65e64c40f9",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The documentation describes how to retrieve data from a Supabase table as a CSV string. It provides an example of the Supabase API call to select all records from the \"countries\" table and return the data in CSV format."
  },
  {
    "chunk_id": "f1d9fd16-7222-4824-bb15-01883480cba0",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres allows developers to debug slow queries by generating an execution plan, which reveals information about how the query will be executed. This feature should be used cautiously as it can expose sensitive database details, so it's recommended to enable it only in testing environments. The `explain()` method supports various parameters such as `wal`, `verbose`, `settings`, `format`, `buffers`, and `analyze` to customize the output."
  },
  {
    "chunk_id": "583ca619-c4f9-4027-aff5-275a72114570",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, new users must verify their email address before logging in, but this can be disabled in the project settings. The `sign_up()` function returns a `user` object, and a `session` object if email confirmation is disabled. Existing confirmed users cannot sign up again - an obfuscated user object is returned if email and phone confirmation are enabled, or an error message is returned if either is disabled. The currently logged-in user can be fetched using the `get_user()` function."
  },
  {
    "chunk_id": "5f23ac04-299c-48bd-b8be-5ee8cb35180b",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of creating an anonymous user in the system. It explains that this feature returns an anonymous user, and it is recommended to set up a captcha to prevent abuse. The example code demonstrates how to create an anonymous user with custom user metadata, using the `supabase.auth.sign_in_anonymously()` function and passing an options object with a captcha token."
  },
  {
    "chunk_id": "7f9a023a-ae75-4889-9547-a6c2f6c8eca0",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes the sign-in process for an existing user, which requires either an email and password or a phone number and password. The summary covers the key technical details, including the required parameters (`credentialsRequiredSignInWithPasswordCredentials`) and an example code snippet for signing in with an email and password using the Supabase library."
  },
  {
    "chunk_id": "f135bfe3-e6aa-4c6d-9ac0-2453b53ee192",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase authentication API supports signing in with an OIDC ID token, which allows users to authenticate using an identity provider like Google. The `supabase.auth.sign_in_with_id_token()` function takes the provider name and the ID token as parameters, and returns the authentication response."
  },
  {
    "chunk_id": "8c8bcdef-032c-486a-8637-596628bfc4a8",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP feature allows users to authenticate without a password, by sending a one-time code to their email or phone number. It can be used for both sign-in and sign-up, with options to restrict user creation. The OTP can be configured to be sent as a magic link or a one-time code, with the destination URL determined by the project's SITE_URL. This feature provides a passwordless sign-in experience for users."
  },
  {
    "chunk_id": "f9c93a6c-7875-42ab-85ec-15effe8d424e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The method `sign_in_with_oauth()` is used to sign in a user through a third-party provider, such as GitHub, as supported by Supabase. This allows users to authenticate with Supabase using their existing third-party credentials, without the need to create a new account. The method takes a `provider` parameter to specify the third-party provider to use for authentication."
  },
  {
    "chunk_id": "e7293f7e-a9c1-4242-8b39-f05cf8609157",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the email domain or the provider ID to start the authentication flow. This allows integrating various identity providers and mapping specific user email addresses or other contextual information to the appropriate authentication mechanism."
  },
  {
    "chunk_id": "1855d730-2de6-432d-9cd2-eefcd5c704a7",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which will remain valid until it expires. The `sign_out()` method uses the global scope by default, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "1453962e-4cfc-4a9c-aa61-d5ce60536790",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify One-Time Passwords (OTPs) for user authentication. It supports various verification types like SMS, email, and phone number changes. The method takes in parameters like the email, token, and verification type, and returns a response. The TokenHash contained in the email templates can be used for sign-in with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "839c6a3c-1736-45de-8dba-c9d0bf6c6504",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with. If verified user data is required, the `get_user` method should be used instead. The method will also automatically refresh the session if the access token has expired."
  },
  {
    "chunk_id": "21519d59-288a-4f4e-9c1b-53c17ae7efb0",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "0aa1d53e-19fc-496b-9c70-c1ae86ab3534",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method 'get_user()' is used to fetch the user object from the database instead of the local session. This is useful for verifying the user's authorization by validating the access token JWT on the server. The method can be called with an optional JWT parameter, otherwise it uses the JWT from the current session."
  },
  {
    "chunk_id": "3cf59940-018c-4e55-ba86-9591e76e9250",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `set_session()` method sets the session data using an `access_token` and `refresh_token`. If the current session is expired or the tokens are invalid, the method will refresh the session. Upon successful setting of the session, a `SIGNED_IN` event is emitted. The method is used to refresh the session when the current session data is no longer valid."
  },
  {
    "chunk_id": "93858f8b-cda6-476c-9179-96bc936862d5",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers Multi-Factor Authentication (MFA) methods, specifically focusing on time-based one-time password (TOTP) as the supported 2nd factor. It allows users to enroll multiple TOTP factors for recovery, up to a maximum of 10, providing a more secure and convenient alternative to recovery codes."
  },
  {
    "chunk_id": "cf28168a-bcb7-4547-aff9-7b66188b71fe",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor using the Supabase Auth MFA API. The `mfa.enroll()` function is used to enroll a TOTP factor, which returns an `id` that can be used to create a challenge. The documentation also provides references to the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions for creating, verifying, and combining challenge and verification steps."
  },
  {
    "chunk_id": "8b604fa0-6d13-417d-af21-070d91de1c1c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` method can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "1b0cfa9b-9b7f-407d-8240-1d4e2cbca3c4",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions at `/docs/reference/python/auth-mfa-challenge`. The `supabase.auth.mfa.verify()` method is used to verify a challenge, requiring the `factor_id`, `challenge_id`, and `code` parameters."
  },
  {
    "chunk_id": "e0260f76-927e-4195-b1f1-06e8ec4d6f04",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To challenge and verify a user's multi-factor authentication (MFA) factor, the `challengeAndVerify()` function must be called, which executes the `mfa.challenge()` and `mfa.verify()` operations in a single step. This requires an enrolled MFA factor and the user-provided verification code."
  },
  {
    "chunk_id": "3bf33446-a2af-43cd-a234-ae2b2a57249d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the Supabase authentication API provides a `unenroll()` method that takes the `factor_id` as a parameter. This allows users to remove a specific MFA factor associated with their account, providing them control over their authentication settings."
  },
  {
    "chunk_id": "3379cadf-83fa-4493-9765-60d8b7d2fac2",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next level of authentication required, with AAL2 if the user has a verified factor, and AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "10cf9109-ef51-4020-8611-eab19b26cebd",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is:\n\nThe Supabase Edge Functions feature allows invoking server-side functions, which requires an Authorization header. When passing a body to the function, Supabase automatically sets the Content-Type header based on the data type, but this can be overridden. The summary provides a basic example of how to invoke a function named \"hello-world\" and pass a JSON-serialized body."
  },
  {
    "chunk_id": "e4d8339a-5867-4607-8b3c-5876fa582907",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, while listening to database changes is disabled for new projects due to performance and security concerns. Users can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The provided code snippet demonstrates how to subscribe to various Realtime events, such as broadcasting messages, presence sync, and database changes for a specific table or multiple events."
  },
  {
    "chunk_id": "f81da16d-02d9-40c6-aca1-bbb82a13ef95",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain Realtime service and database performance, as unused channels can degrade the system when more clients are subscribed. The `supabase.remove_channel()` function can be used to remove a specific channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "e01bd998-68af-4127-abd5-0fa7c6e6a6f9",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain the performance of the Realtime service and the database when listening to Postgres changes. Supabase automatically handles cleanup, but unused channels can degrade performance as more clients are subscribed. To remove all channels, use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "aa570f0f-0316-4b36-9c23-b9e4a6eccf9d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the content \"Retrieve all channels\" is:\n\nThe code `supabase.get_channels()` retrieves all the channels available in the Supabase system. This is a useful function for getting a complete list of channels that a user or application can interact with."
  },
  {
    "chunk_id": "ff87f76a-4021-4259-bcf2-340584926200",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is: The content describes how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It provides an example of subscribing to a channel, checking the subscription status, and then sending a broadcast message containing random cursor position data."
  },
  {
    "chunk_id": "ed083af5-bffe-4483-b923-edd35473ec37",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required permissions are `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more information on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "bae6a331-c9af-4882-b284-3d0de51b10a5",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` access on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more details on access control. The code snippet `_10 res = supabase.storage.get_bucket(name)` can be used to retrieve the specified bucket."
  },
  {
    "chunk_id": "be2cd35b-4338-41bc-a06d-9717c0061371",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the `select` permission is required on the `buckets` table, but no permissions are needed on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "b22841a1-a20c-49b7-8965-34d07e104ba3",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. The process is carried out using the `supabase.storage.delete_bucket(name)` function, and the Storage guide provides more information on access control."
  },
  {
    "chunk_id": "046bcf4f-8427-48de-b4ba-36d1a946aa0e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a Supabase storage bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. The `supabase.storage.empty_bucket()` function can be used to achieve this, as described in the Supabase Storage security and access control guide."
  },
  {
    "chunk_id": "e440dc6d-ee28-4ead-8d63-04a578e1ff2e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, you need the `insert` permission on the `objects` table. The MIME type should be specified for image or audio files, otherwise it defaults to `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired path on Supabase Storage, along with the appropriate `file_options` including the MIME type."
  },
  {
    "chunk_id": "b515be10-84e3-42e6-a634-4d79bfd76a29",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires the `select` permission on the `objects` table, but no permissions on the `buckets` table. The file is downloaded using the `supabase.storage.from_('bucket_name').download(source)` method, and the downloaded content is written to a local file."
  },
  {
    "chunk_id": "f0556c6f-8085-4bc6-bd02-20b71ec24f2f",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `select` permission is required on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "3720ff25-9651-48d3-8927-e62252514dd5",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file, path, and optional file options like cache control and upsert. Refer to the Supabase Storage guide for more details on access control."
  },
  {
    "chunk_id": "c4f4bf77-b363-4240-b75e-3b88ebf75051",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase, the user requires 'update' and 'select' permissions on the 'objects' table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` command. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "222520b9-40c0-40b6-91ec-07a091d7a217",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The storage guide provides more information on how access control works for Supabase storage."
  },
  {
    "chunk_id": "c57ad0f3-7d16-4762-aa2c-d94db8bfaa4c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are: no permissions for the `buckets` table, but `select` permissions for the `objects` table. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function can be used to generate a signed URL that allows time-limited access to a file stored in Supabase Storage."
  },
  {
    "chunk_id": "b0927223-30c7-4e8c-978e-ca4e5611c43d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in Supabase Storage, the bucket must be set to public either via the `updateBucket()` method or by manually making it public in the Supabase dashboard. No special permissions are required for the `buckets` or `objects` tables. The `get_public_url()` method can be used to retrieve the public URL for a specific file in a public bucket."
  },
  {
    "chunk_id": "7b428d73-35f0-4db1-9ec3-d10927ece2dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python client library `supabase-py` allows developers to interact with their Supabase Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. The library provides a comprehensive set of objects and methods to interact with the Supabase platform from Python applications."
  },
  {
    "chunk_id": "e5e10714-b7c3-4cb4-9473-a1c15c30c84c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation describes how to install the Supabase Python library (supabase-py) using the PyPi package manager. The installation can be done via the terminal using the `pip install supabase` command, and supports Python versions greater than 3.7. This allows developers to easily integrate the Supabase platform into their Python-based applications."
  },
  {
    "chunk_id": "602e2767-67fa-4785-9218-d974e035e830",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and key as required parameters, and optional client options to configure authentication behaviors. The Supabase client provides access to the full suite of Supabase functionality, making it the central entry point for developers working with the Supabase platform."
  },
  {
    "chunk_id": "1ce0eefb-7cf3-405d-b075-747533c98f18",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be changed in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, and the `apikey` keyword should be avoided as a column name. Pagination can be achieved using the `range()` query, and the `count` option can be used to retrieve the count of rows returned."
  },
  {
    "chunk_id": "c6ff7aa0-d7bf-4f29-b1a1-a518bbb5759e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe 'insert data' section describes the parameters for inserting data into a table, including the required JSON data, optional count and returning methods, and the ability to default missing fields to null. It provides an example of bulk inserting data into the 'countries' table using the Supabase library."
  },
  {
    "chunk_id": "47543df3-fdce-49ca-b4e3-f4553077b86d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation is used to update data in a table, and it must be combined with Filters to target the specific item(s) to be updated. The method takes a dictionary or list of values as its parameter, and an optional `count` parameter to get the count of rows returned. An example is provided that updates the \"name\" field of a record in the \"countries\" table where the \"id\" is 1."
  },
  {
    "chunk_id": "e5606f8a-a798-4799-953e-428dbeaf1fae",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `upsert` method in the provided software documentation allows inserting or updating data in a table. It requires including the primary keys in the `values` dict, and supports optional parameters like `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null`. An example is provided for upserting a row into a \"countries\" table."
  },
  {
    "chunk_id": "585c9fe3-777a-4891-9d97-339f75e90193",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` method in the Supabase API should be used with filters to target specific items for deletion. When using `delete()` with filters and row-level security (RLS) enabled, only rows visible through the defined `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple records in a single query by specifying an array of values, which is useful for batch deleting entries that share common criteria."
  },
  {
    "chunk_id": "5d21cf92-a1e4-471a-9395-c4ed4281e8a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Summary:\n\nThe content describes how to call Postgres functions as Remote Procedure Calls (RPCs) from an application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The summary provides details on the parameters that can be used when calling a Postgres function, including options for handling return data, setting read-only access, and using different count algorithms."
  },
  {
    "chunk_id": "9ebea15b-241f-41c8-9c70-2b39ac5a52b2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. They can also be applied to Postgres functions that return a table response. Filters can be chained, used to filter by values within JSON columns, and applied to foreign tables."
  },
  {
    "chunk_id": "22651697-1b51-4c65-8cde-ccc8849c7924",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The content describes how to filter a database table to match only rows where a specified column is equal to a given value. The key parameters are the column name and the value to filter by, which can be used with the `select()` function to execute the query."
  },
  {
    "chunk_id": "a348d6b3-7272-4b42-846b-b919512a8a60",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column is not equal to a value\" function allows you to filter a table by selecting only the rows where a specified column is not equal to a given value. The function takes two required parameters: the column to filter on and the value to filter by. This can be used with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "4e76b3e1-21d6-4d55-8557-03ad81e1191f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The provided content describes how to filter a database table to only include rows where the specified column has a value greater than the provided value. The key technical details include the use of the `gt()` function in the `select()` method, with the column name and value as parameters."
  },
  {
    "chunk_id": "625e8a1d-4c11-4188-afdd-7eb3ae787a06",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: \nThe `gte` (greater than or equal to) filter is used to match rows where the specified `column` has a value greater than or equal to the provided `value`. This is demonstrated in the example using the Supabase table \"countries\" and the \"id\" column."
  },
  {
    "chunk_id": "87e34262-17db-4a8a-9152-564acaa076c4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `lt()` function in Supabase is used to filter rows where the specified `column` is less than the provided `value`. This is demonstrated with an example query that selects all rows from the \"countries\" table where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "d910e86d-0cd3-4ec2-8122-cdbd9c26b104",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\nThe 'lte()' (less than or equal to) function in the Supabase API allows you to filter a database table to include only the rows where the specified column has a value less than or equal to the provided value. The 'columnRequired' parameter specifies the column to filter on, and the 'valueRequired' parameter specifies the value to compare against."
  },
  {
    "chunk_id": "b4af6498-20d1-486a-b6d3-a654d766b39b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering a table by checking if the values in a specified column match a given pattern. The pattern is case-sensitive, and the 'like' operator is used to perform the matching. This functionality is demonstrated with an example of selecting rows from a 'countries' table where the 'name' column contains 'Alba'."
  },
  {
    "chunk_id": "f1d780b7-88f1-4b14-8c1e-f88104bfcab8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This document describes a filter operation that matches rows where a specified column matches a case-insensitive pattern. The filter is applied using the `ilike()` function, which takes the column name and pattern as parameters. This functionality can be useful for performing case-insensitive searches on data stored in a table."
  },
  {
    "chunk_id": "94bc0068-cf3c-4c59-98a4-ffb3810f99eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe \"Column is a value\" feature allows filtering table rows where a specified column matches a given value, including checking for nullness, true, or false. The key parameters are the column name and the value to match, which can be null, boolean, or other data types."
  },
  {
    "chunk_id": "d83be57b-2ce1-4735-93be-0a9ffd1bc0ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `in_` function in the Supabase library allows filtering rows in a table based on whether the value in a specified column is included in a provided array of values. The `columnRequired` parameter specifies the column to filter on, and the `valuesRequired` parameter specifies the array of values to match against. This is demonstrated in an example query that selects rows from the \"countries\" table where the \"name\" column is one of \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "ae3ba2df-e1a5-4f65-8429-63c9b465bb0b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` operator is used to filter rows in a table where the specified column contains all the elements in the provided value. This is only applicable for columns of type `jsonb`, `array`, and `range`. The operator takes two parameters: the column name and the value to filter with, which must be a valid `jsonb`, `array`, or `range` object."
  },
  {
    "chunk_id": "49876fb7-a03c-481b-897e-d1261f245dd7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operation is applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. This is useful for filtering data based on the contents of these complex data types, such as filtering a classes table by the days a class is offered."
  },
  {
    "chunk_id": "f75c0546-539a-4a22-ab8b-937a45e3bd12",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" functionality is specific to range columns, allowing you to filter rows where every element in the specified column is greater than any element in the provided range. The parameters include the column name and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column is greater than the given date range."
  },
  {
    "chunk_id": "f2a6a53f-062b-4730-8d6d-07f37f37ddfb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"greater than or equal to a range\" filter is used with range columns to match rows where every element in the specified column is either contained in the given range or greater than any element in the range. The filter is applied using the `.range_gte()` method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "633d8b37-5a39-405c-bd84-f70e89b088a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the specified column is less than any element in the provided range. It takes two required parameters: the column name and the range to filter with. This can be useful for querying data based on time ranges or other numerical values."
  },
  {
    "chunk_id": "5cb2f691-2b30-4ddf-aae0-9346c8c3e500",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is used to filter rows in a range column, where every element in the column is less than or equal to any element in the provided range. It takes two required parameters: the column name and an array of range values. This functionality can be used with the `select()` method to retrieve rows that match the specified range criteria."
  },
  {
    "chunk_id": "234e33f9-8d60-4cbc-b211-6c8d2437e91a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Mutually exclusive to a range' feature is specifically for range columns, allowing you to filter rows where the column value is mutually exclusive to the provided range, meaning there can be no element between the two ranges. The key parameters are the column name and the range to filter with, as demonstrated in the example using the Supabase .range_adjacent() method."
  },
  {
    "chunk_id": "42fba793-012b-41b7-b496-110fc9e99b33",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides details on the \"With a common element\" filter option in Supabase, which is only applicable to array and range columns. This filter allows matching rows where the specified column and value have at least one element in common. The summary outlines the required parameters, `column` and `value`, and provides an example usage of this filter on an array column."
  },
  {
    "chunk_id": "c6b6b982-4a8e-4ecf-8e06-92b517a10929",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Match a string\" functionality in Supabase, which allows filtering rows in text or tsvector columns where the column matches the provided query string. This is useful for implementing Postgres full-text search, with options for text search, basic normalization, full normalization, and websearch. An example usage is provided, demonstrating how to select content from a \"texts\" table where the \"content\" column matches the query \"'eggs' & 'ham'\" with the \"english\" configuration."
  },
  {
    "chunk_id": "aa173344-58e8-469c-a894-62463de8b872",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows you to filter a database table by matching each column in the `query` object to its associated value. This is a convenient shorthand for multiple `.eq()` calls. The `match()` method takes a required `query` parameter, which is an object with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "c1afcd04-7709-472a-a9d4-a77fe0ad0787",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to use the `not_` operator in PostgREST filters to match rows that do not satisfy the given filter conditions. This includes examples of using `not_.in_()` for filtering on a list of values, and `not_.contains()` for filtering on array values. It also shows an example of using `not_.is_()` with the `select()` method to retrieve rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "48ed53c1-b000-44ad-9c32-5a3ac7651532",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the documentation expects the use of raw PostgREST syntax for filter names and values, including the use of parentheses for 'in' filters, curly braces for array values, and 'cs' and 'cd' for 'contains()' and 'containedBy()' filters, respectively. The function also supports referencing other tables for filtering."
  },
  {
    "chunk_id": "06f9352c-b12c-40c1-b8a5-158602c104af",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe filter() method in the software documentation expects the use of raw PostgREST syntax for the filter values. It supports various operators such as 'in' for filtering on a list of values, and 'cs' for filtering on an array column that contains specific elements. The method takes three parameters: the column to filter on, the operator to use, and the value to filter with, following the PostgREST syntax. An example is provided for using the filter() method on a foreign table to select data based on specific column values."
  },
  {
    "chunk_id": "9fc2732d-e260-419a-b567-1fe1f59014f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers allow you to change the format of the response (e.g., returning a CSV string) unlike filters which work on the row level. Modifiers must be specified after filters and some modifiers only apply for queries that return rows (e.g., `select()` or `rpc()` on a function that returns a table response)."
  },
  {
    "chunk_id": "378be4d9-57c4-4422-b589-43b308b81881",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes the 'order' function in the Supabase library, which allows ordering the query result by a specified column. The function takes parameters such as the column to order by, whether to order in descending order, the name of a foreign table to order, and whether to show nulls first. An example usage of the 'order' function is provided, demonstrating how to order a query on a 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "45947e7c-a637-44bc-a64b-abdcc364d679",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `limit()` function in the Supabase library allows developers to limit the number of rows returned from a database query. The `sizeRequired` parameter specifies the maximum number of rows to return, while the `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table. This feature is useful for optimizing database queries and improving response times, especially when working with large datasets."
  },
  {
    "chunk_id": "0c864c0e-f32b-4feb-a306-201d715e9ac0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in Supabase allows limiting the query result by specifying a starting offset (`from`) and an ending offset (`from + to`). This respects the query order and returns only the records within the specified range. The `from` and `to` values are zero-based and inclusive."
  },
  {
    "chunk_id": "648f5256-16a0-4e54-a665-92585546cf78",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The content discusses how to retrieve a single row of data from a database table using the Supabase library's `select()` method with the `limit(1)` and `single()` modifiers. This allows you to retrieve a single object instead of an array of objects, which can be more convenient for certain use cases."
  },
  {
    "chunk_id": "137ab7a6-21df-44f6-800a-8a6fb7fc1853",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary allows retrieving zero or one row of data from a database table using the `maybe_single()` method, which returns the data as a single object instead of an array of objects. This is demonstrated in the example code, which selects a row from the \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "eed51fb7-292b-4352-9b27-aaf3615654d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The documentation describes the \"Retrieve as a CSV\" feature, which allows returning the data from a Supabase table as a string in CSV format. This can be achieved by calling the `csv()` method on the `select()` query, as shown in the example code snippet."
  },
  {
    "chunk_id": "a906ab86-dc4e-46e4-8833-0ad9a99a161a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres allows you to view the execution plan of a query, which is useful for debugging slow queries. It can reveal sensitive information, so it's best to only enable it for testing environments. The `explain()` method supports various parameters, such as `walOptional`, `verbose`, `settings`, `format`, `buffers`, and `analyze`, which provide different levels of detail about the query execution."
  },
  {
    "chunk_id": "5b87238b-d556-416c-b002-0d1f1c4858a5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to create a new user in Supabase. By default, users need to verify their email address before logging in, but this can be disabled. The `sign_up()` function can be used to sign up a user with an email and password, a phone number and password, or additional user metadata. The returned response includes a `user` object, and a `session` object if email confirmation is disabled."
  },
  {
    "chunk_id": "fd8314e8-16db-4429-aed8-dd2f24ab8c27",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in anonymously using the Supabase library, passing in the captcha token as an option. The key technical points are the ability to create an anonymous user, the recommendation to use captcha for security, and the example code demonstrating the API call."
  },
  {
    "chunk_id": "c2495599-bd5c-42d8-ad9e-61e7b4898e6f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of signing in an existing user using either an email and password or a phone number and password. The required parameters include credentialsRequiredSignInWithPasswordCredentials, and the developer can use the supabase.auth.sign_in_with_password() function to authenticate the user with the provided credentials."
  },
  {
    "chunk_id": "1d604d03-3003-4dd9-a042-1ac796e24e31",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content provides information on signing in with an OIDC ID token using the Supabase authentication system. It describes the `sign_in_with_id_token()` function, which takes a provider and token as parameters, and returns a response object. This feature allows users to authenticate with an external identity provider, such as Google, without needing to manage user credentials directly."
  },
  {
    "chunk_id": "3efca8cf-3e1a-4208-97a8-d14d5ce3f4a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to sign in a user through a one-time password (OTP) sent to their email or phone number. This passwordless sign-in method can also create a new user account if the user doesn't already exist. The OTP can be configured to be sent as either a magic link or a one-time code. The magic link's destination URL is determined by the `SITE_URL`, and additional redirect URLs can be added to the project. The `sign_in_with_otp()` function is used to initiate the sign-in process, with options to control user creation and the email/SMS OTP delivery."
  },
  {
    "chunk_id": "f93ef317-d00c-42b6-9a06-7dace89c159b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThis method is used for signing in a user through a third-party OAuth provider. Supabase supports various third-party providers, and the `supabase.auth.sign_in_with_oauth()` function can be used to sign in with a specific provider, such as GitHub. The method takes in `credentialsRequiredSignInWithOAuthCredentials` as a parameter and can be used to sign in with specific scopes."
  },
  {
    "chunk_id": "03306de3-506c-4770-b91c-ee9e716de250",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the provided CLI commands. You can then use the `domain` property to start the sign-in flow, or the `provider_id` property to use a different method, such as mapping specific user email addresses or using company-specific hints to identify the identity provider. The `sign_in_with_sso()` method is used to initiate the SSO sign-in process."
  },
  {
    "chunk_id": "66d06eef-30b6-4963-90c4-ec188c345101",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user has signed in. This revokes the user's refresh token and deletes the JWT (JSON Web Token) from the client-side, although the JWT itself remains valid until it expires. Signing out also signs the user out of all other active sessions."
  },
  {
    "chunk_id": "b9d4ffa2-0cc1-472c-a809-ebe7e9d5886a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for user authentication, supporting various verification types like SMS, email, and password recovery. The verification type should match the corresponding auth method used previously. The `TokenHash` from the email templates can be used for signing in with a PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "3d3d096f-12f3-4bda-a954-b16834066106",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it can be tampered with. If verified user data is required, the `get_user()` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "7540287f-735e-4182-aa35-d41c178b21ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token parameter, and if not provided, it will attempt to retrieve the refresh token from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that a valid session is always available, even if the current session has expired."
  },
  {
    "chunk_id": "0b65285a-463d-4764-8bb7-48194fba2481",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. The method can be called with an optional access token JWT, and if none is provided, the JWT from the current session is used."
  },
  {
    "chunk_id": "b5d8f1b0-71a8-492e-8bc9-4d95ff8af66f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `setSession()` is used to set the session data by providing an `access_token` and `refresh_token`. If successful, a `SIGNED_IN` event is emitted. This method refreshes the session if it has expired, and throws an error if the tokens are invalid."
  },
  {
    "chunk_id": "431da9e6-1095-4357-84ec-7ddb1333fa18",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers Multi-Factor Authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. Supabase allows users to enroll multiple TOTP factors, up to 10, which provides a recovery mechanism without the need for separate recovery codes. This approach reduces the attack surface compared to storing multiple recovery codes."
  },
  {
    "chunk_id": "1342ff60-8761-419b-893c-535c65ddd02d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The documentation describes how to enroll a time-based, one-time password (TOTP) factor using the Supabase Python client library. The `mfa.enroll()` function is used to enroll a TOTP factor, and the returned `id` can be used to create and verify a challenge. Users can create and verify a challenge in a single step using the `mfa.challenge_and_verify()` function."
  },
  {
    "chunk_id": "419726a7-9bd0-4d8a-aba8-22578f359a76",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function is used to create a challenge for a factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "3f9da14b-046a-42f3-83d9-5fdf2496ebd3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions in the \"create a challenge\" documentation. The summary provides an example of how to verify a challenge by specifying the factor_id, challenge_id, and code parameters in the supabase.auth.mfa.verify() function."
  },
  {
    "chunk_id": "8c490dcc-2f5a-4f31-9308-87e4de563adc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify an MFA factor with a provided code."
  },
  {
    "chunk_id": "049c3728-9227-4c4b-acf6-d1ed2e28b944",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThis section explains how to unenroll a multi-factor authentication (MFA) factor from the Supabase auth service. The code snippet demonstrates the `supabase.auth.mfa.unenroll()` function, which takes the `factor_id` as a parameter to remove the specified MFA factor from the user's account."
  },
  {
    "chunk_id": "7075048b-1d77-46a5-9d2c-7c3ae80c1db0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next level of authentication required, which is `aal2` for a verified factor and `aal1` otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "d2cc3677-3921-403e-a7c3-648968b034c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "To invoke a Supabase Edge Function, you need to provide an Authorization header. The function automatically attaches the appropriate Content-Type header based on the request body type (e.g., Blob, ArrayBuffer, File, FormData, or String), but you can override this behavior by passing in your own Content-Type header. The summary demonstrates a basic invocation example where the function is called with a JSON payload."
  },
  {
    "chunk_id": "eab31318-3996-4c39-9bd3-7f40a0c47ddb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. Row-level security is not applied to delete statements, and only the primary key is sent to clients when RLS is enabled and replica identity is set to full. The provided code demonstrates how to subscribe to a channel, send a broadcast message, and handle received broadcasts."
  },
  {
    "chunk_id": "59199e29-3444-4a31-a8a3-4ec68bbd043c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Realtime channel is recommended to maintain performance and database efficiency, as unused channels can degrade service for more active clients. The `supabase.remove_channel(myChannel)` function can be used to remove a specific channel, and Supabase will automatically handle cleanup 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "95a6f438-1a93-4324-bd5a-3efc7d2f6e63",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the database. Supabase will automatically clean up unused channels after 30 seconds, but leaving them subscribed can cause degradation as more clients connect. The code to remove all channels is `_10 supabase.remove_all_channels()`."
  },
  {
    "chunk_id": "13430f6c-8050-4930-9d86-697d4d10800c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the provided content is:\n\nThe `supabase.get_channels()` function retrieves all available channels from the Supabase database. This is a fundamental operation for accessing and managing the channel data in the application."
  },
  {
    "chunk_id": "0a96c012-e6ac-4d05-a437-8de3d14250bf",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It provides an example of how to subscribe to a channel, and then send a broadcast message containing random cursor position data."
  },
  {
    "chunk_id": "d771373f-8ba8-4af7-8960-1821e9669170",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the necessary RLS policy permissions are: `insert` access to the `buckets` table, and no permissions required for the `objects` table. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "8d0d1297-7a8d-4500-abff-805dc5253950",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. The method to get a bucket is `supabase.storage.get_bucket(name)`. Refer to the Storage guide on access control for more information."
  },
  {
    "chunk_id": "d59a9de9-51dc-4140-8200-41dddddb7635",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the required permissions are `select` on the `buckets` table. No permissions are needed for the `objects` table. Refer to the Storage guide for details on access control."
  },
  {
    "chunk_id": "7ee10460-9f54-4d92-9620-d5eb8a958408",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, while no permissions are needed on the 'objects' table. The code to delete a bucket is `supabase.storage.delete_bucket(name)`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "87089311-504d-49ed-94be-055c5b8308ca",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires SELECT permissions on the 'buckets' table and SELECT and DELETE permissions on the 'objects' table. The storage guide provides information on how access control works. The code snippet demonstrates the supabase.storage.empty_bucket(name) function to empty a bucket."
  },
  {
    "chunk_id": "2ded0604-abea-404d-b133-d87c2ae3b37f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the required RLS policy permissions are to have 'insert' access to the 'objects' table. The appropriate MIME type should be specified, especially for media files, and if not provided, it defaults to 'text/html'. The file can be uploaded using the 'supabase.storage.from_(\"testbucket\").upload()' method, providing the file path, the desired storage path, and the file's content type."
  },
  {
    "chunk_id": "15199208-7a5b-4d99-8d34-4fff75b7c63d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table and `select` permissions for the `objects` table. The code snippet demonstrates how to download a file from a specified bucket using the Supabase storage API."
  },
  {
    "chunk_id": "2c17a816-fbde-4aa5-b233-ace79fce815f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions must include `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "9ca32194-7ac5-4006-ab8f-e1c8c0f02525",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in the Supabase storage, the user needs the `update` and `select` permissions on the `objects` table. The file can be updated by opening the file in binary mode and using the `supabase.storage.from_(\"bucket_name\").update()` method, which allows setting cache control options and upsert behavior."
  },
  {
    "chunk_id": "925f4fc8-8d58-4c73-b77b-43e116bea763",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase Storage, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code to move a file from 'public/avatar1.png' to 'private/avatar2.png' within the 'bucket_name' bucket is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Supabase Storage guide on access control for more information."
  },
  {
    "chunk_id": "43fec66a-113a-4301-838f-ff9b669eee47",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file from a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The user should refer to the Storage guide on access control to understand the necessary permissions. The code to delete a file is `supabase.storage.from_('bucket_name').remove('test.jpg')`."
  },
  {
    "chunk_id": "c4368f2a-6d76-449a-8440-05b1980d7e7f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, you need the `objects` table permissions set to `select`. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, and is useful for providing time-limited access to specific files in a storage bucket."
  },
  {
    "chunk_id": "5cdfa12c-62dd-4243-a364-7e3eae2d20b6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for a file stored in a Supabase Storage bucket, the bucket must be set to public, either through the updateBucket() function or the Supabase dashboard. No specific permissions are required for the buckets or objects tables. The public URL can be obtained using the get_public_url() function, passing in the bucket name and file path as arguments."
  },
  {
    "chunk_id": "e5cd6b1a-837c-4206-ace7-78263b9e11a9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functions to interact with the Supabase platform, including managing a Postgres database, listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. It serves as a convenient way for Python developers to leverage the capabilities of the Supabase ecosystem."
  },
  {
    "chunk_id": "99931f8d-0da5-440f-8977-cc8d911e2b83",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation covers the installation of the Supabase-py library, which can be installed via PyPi using the pip package manager. The installation is supported for Python versions greater than 3.7, and the provided example command demonstrates the installation process."
  },
  {
    "chunk_id": "05dbe751-a4ce-4141-b7b1-363791bd3ea1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optional client options to configure the authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the recommended way to work with the Supabase platform."
  },
  {
    "chunk_id": "2e642ee3-5166-41c0-a533-747b4d76c030",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Supabase platform provides a default limit of 1,000 rows per query, which can be adjusted in the project's API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, and the `apikey` column should be avoided as it is a reserved keyword. Key parameters include columns to retrieve and the property to use for row count."
  },
  {
    "chunk_id": "52cbbe26-798c-4f49-9368-8d57c36cb74a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Insert data\" section is as follows:\n\nThe `insert()` method in the Supabase client library allows inserting data into a table. It accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the data to be inserted. The `countOptional` and `returningOptional` parameters control the response format, and the `default95to95nullOptional` parameter can be used to set missing fields to `null` for bulk inserts."
  },
  {
    "chunk_id": "b4f02d0f-d705-4823-8d0c-98f11e1b906d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to modify existing data in a table. It must be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or list of dictionaries representing the new data to be inserted, and an optional `count` parameter to retrieve the number of rows affected."
  },
  {
    "chunk_id": "fe572149-ec7d-4896-ac17-4471a488e8bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe upsert operation in the Supabase API allows you to insert or update data in a table. Primary keys must be included in the `values` dict to use upsert. The API provides several parameters to control the behavior of the upsert operation, such as specifying the columns to handle unique constraints, defaulting missing fields to `null`, and controlling the response format. The upsert operation is useful for efficiently managing data in tables with constraints."
  },
  {
    "chunk_id": "71d10e0c-d995-463b-b9b1-6bffb3ad61b6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` function in Supabase should be used with filters to target specific items for deletion. When using `delete()` with RLS enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple rows at once by specifying an array of values, which is useful for batch deletions based on common criteria. The `count` and `returning` parameters can be used to control the response from the delete operation."
  },
  {
    "chunk_id": "2c80cf76-ae1e-494e-8440-73eed4832735",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. The key parameters for calling a Postgres function include the function name, optional parameters, options for returning data and read-only access, and count algorithms for set-returning functions."
  },
  {
    "chunk_id": "1d70de86-1b34-46a0-82ab-fe74473bfd7b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters in Supabase allow you to return only the rows that match certain conditions, and can be used with `select()`, `update()`, `upsert()`, and `delete()` queries, as well as Postgres functions that return a table response. Filters can be chained, and can be used to filter by values within JSON columns or on foreign tables."
  },
  {
    "chunk_id": "f935e915-b3b5-4a34-a526-2059cb9015fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table by a specific column being equal to a given value. The `eq()` method is used to specify the column and value to filter on, and the resulting data is returned as a response. The key parameters are the column name and the value to match against."
  },
  {
    "chunk_id": "609be775-4d1d-49ad-a6cc-6983fc43e68f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the 'neq' (not equal) filter, which allows matching rows where a specified column is not equal to a given value. The key parameters are the 'column' to filter on and the 'value' to compare against. When used with the 'select()' method, this filter can be applied to retrieve only the relevant rows from a database table."
  },
  {
    "chunk_id": "a49e0278-418a-4594-9558-e9b748c4fc57",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThis section explains how to filter a database table by a column value that is greater than a specified value. The `gt()` method is used with the `select()` function to achieve this, where the column name and value to filter by are passed as parameters."
  },
  {
    "chunk_id": "3c74aeca-f465-4eb7-ba3d-62c8e986350e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes a filter that selects rows where the value in the specified column is greater than or equal to a given value. The key parameters are the column name and the value to filter by. This filter can be used with the `select()` method, as shown in the example code."
  },
  {
    "chunk_id": "fa86d188-b61e-4a2f-9d70-b1b0d3a282dd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe column is less than a value filter allows you to match only rows where the specified column is less than the provided value. The required parameters are the column name and the value to filter by. This can be used with the `select()` method, as shown in the example, to retrieve only the rows that meet the filter criteria."
  },
  {
    "chunk_id": "337110e8-4ac3-42c9-b193-ac684d6c5574",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is as follows:\n\nThe documentation describes a filter operation that selects rows from a database table where the value in a specified column is less than or equal to a given value. The key parameters are the column name and the filter value. This functionality can be used in a `select()` query, as shown in the example."
  },
  {
    "chunk_id": "84f262c7-7b74-4d73-8ecd-684c13a8c9d0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering rows where a specified column matches a given regular expression pattern, case-sensitively. The parameters include the column name and the pattern to match, and the feature can be used with the `select()` function to retrieve only the matching rows, as demonstrated in the example."
  },
  {
    "chunk_id": "254f1354-2a23-4aaf-a782-ffd8ee30dbf4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe provided content describes the `ilike` function in Supabase, which allows for case-insensitive pattern matching on a specified column. The `ilike` function takes two parameters: the column name and the pattern to match. This functionality can be used in a `select()` query to filter rows where the column value matches the given pattern."
  },
  {
    "chunk_id": "ca1baad1-691b-433c-b860-afa5f89f0d70",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` function in Supabase allows filtering rows where a specified column is equal to a given value, including checking for null values. The function takes two parameters: the column name and the value to match, which can be null, true, or false. This is a useful tool for querying and filtering data in a Supabase table."
  },
  {
    "chunk_id": "5a4e4a27-278e-45bf-870a-c6ae4b73964c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes how to filter rows in a database table where the value in a specified column is included in a provided array of values. The `in_()` method is used with the `select()` function to perform this filtering operation, as demonstrated in the example code."
  },
  {
    "chunk_id": "953d5f9b-9079-49a4-9803-ca83c4ba007d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" operation is only applicable to jsonb, array, and range columns. It allows filtering rows where the specified column contains all the elements present in the provided value. The \"columnRequired\" parameter specifies the column to filter on, while the \"valuesRequired\" parameter holds the jsonb, array, or range value to filter with. This operation is useful for querying data structures like JSON, arrays, and ranges."
  },
  {
    "chunk_id": "497c5b70-1671-42b5-a685-e40cf59177f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" operator is used with jsonb, array, and range columns to match rows where every element in the column is contained within the specified value. The operator takes two parameters: the column name and the value to filter with. This is particularly useful for filtering on array and jsonb data types, allowing precise matching of the contents of these fields."
  },
  {
    "chunk_id": "57cb6ba3-4cab-4eb9-a0be-2d98c050f2c8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the specified range. The feature takes two parameters: the column to filter on and the range to compare against. This functionality can be used in the `select()` method of a Supabase query to return only the rows that match the specified criteria."
  },
  {
    "chunk_id": "e2c7a7d5-288c-41d1-b9eb-76edbbe74010",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is only applicable for range columns. It allows matching rows where every element in the specified column is either contained in the provided range or greater than any element in the range. The feature is configured with two parameters: the column name and the range to filter with, and can be used in a Supabase query to select relevant data."
  },
  {
    "chunk_id": "3bad1917-d634-4353-9d79-583eb7ba1910",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns, matching rows where every element in the specified column is less than any element in the provided range. The filter takes two required parameters: the column name and the range to filter with. This can be used in a Supabase query to select records where the \"during\" column is less than the specified range."
  },
  {
    "chunk_id": "959cfead-741b-44b5-9d6f-083b5ed2321b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the provided content is:\n\nThe \"Less than or equal to a range\" filter in Supabase is used to match rows where every element in a specified column is less than or equal to any element in a given range. The filter takes two required parameters: the column to filter on and the range to filter with. This functionality can be used in Supabase's `select()` method to efficiently query data based on a range of values in a particular column."
  },
  {
    "chunk_id": "9b6bae43-b3fe-4bad-95c0-5d4d412702bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers the 'Mutually exclusive to a range' functionality in the software documentation. It explains that this feature is only applicable for range columns, and it allows matching rows where the column value is mutually exclusive to the specified range, with no element between the two ranges. The summary outlines the required parameters, 'column' and 'range', and provides an example usage of the 'range_adjacent' function in the Supabase library."
  },
  {
    "chunk_id": "09387acf-5458-40f3-8581-47cf322d5d47",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"With a common element\" feature is only applicable for array and range columns. It allows filtering rows where the column and the provided value have at least one common element. The parameters include the column to filter on and the value to filter with, which can be an array or a range."
  },
  {
    "chunk_id": "9539cc86-70bb-490e-af0c-a8f5424807a5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Match a string' section discusses how to use the `text_search()` function in Supabase to filter rows in a text or tsvector column based on a query string. It provides details on the required parameters `column` and `query`, as well as optional parameters for customizing the text search behavior, such as specifying the text search configuration. The example demonstrates how to use the `text_search()` function to find rows where the 'content' column matches the query \"'eggs' & 'ham'\"."
  },
  {
    "chunk_id": "1147d4cf-e0ac-4d69-9415-a1b104cb3de5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in the provided software documentation allows filtering a table by matching each column in the `query` object to its associated value. This is a shorthand for multiple `eq()` calls, simplifying the process of applying complex filtering criteria. The `match()` function takes a dictionary `queryRequired` as its parameter, where the column names are the keys and their corresponding filter values are the values."
  },
  {
    "chunk_id": "1a74563c-ef1b-47a4-8fd0-47ff53f56253",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the usage of the `not_` operator in PostgREST filters, which allows matching rows that do not satisfy the given filter conditions. It demonstrates examples of using `not_.in_()` for excluding specific ID values and `not_.contains()` for excluding array values from the filter. The summary also includes an example of using `not_.is_()` to select rows where the `name` column is not null."
  },
  {
    "chunk_id": "972df751-934e-4341-8c46-a75ea8d4f99b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `or95()` method in the given context expects the use of raw PostgREST syntax for filter names and values, allowing for advanced filtering capabilities such as `in()`, `contains()`, and `containedBy()` operations. The method takes parameters for the filters to be applied and an optional reference table to filter on, enabling flexible querying across related data sources."
  },
  {
    "chunk_id": "77233002-8f9f-4ded-9ad8-08fa67713464",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the given context expects the use of raw PostgREST syntax for filter values. It supports various filtering operators such as `in` for filtering on a list of values, and `cs` for performing a contains search on an array column. The example demonstrates how to use `filter()` on a foreign table to select rows based on specific column values."
  },
  {
    "chunk_id": "7fb63514-ff46-4e52-9774-580065233540",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers in this context are used to change the format of the response, unlike filters which only return rows that match certain conditions. Modifiers must be specified after filters and can only be used for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "8c03b733-ec2c-49b4-84f1-107645c4815c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Order the results\" section describes how to order the query results by a specified column. It outlines the available parameters, including the column to order by, whether to order in descending order, the foreign table name, and whether to show nulls first. An example is provided demonstrating how to order the results of a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "1691217f-da56-48ee-bbd9-54f9f0c73c79",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on how to limit the number of rows returned in a database query. It specifies two key parameters: 'sizeRequired' to set the maximum number of rows to return, and 'foreign95table' to limit rows of a foreign table instead of the parent table. An example is provided demonstrating how to use the 'limit()' function with the 'select()' method on a foreign table."
  },
  {
    "chunk_id": "61857102-2518-48a8-83b3-b6c62d724e8a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` method in the query allows limiting the result set by specifying a starting index (`from`) and an ending index (`to`). This enables returning only a subset of the total records, which can be useful for pagination or efficiency. The `from` and `to` values are 0-based and inclusive, and can be applied to both the parent table and foreign tables."
  },
  {
    "chunk_id": "398ea66f-85fd-41a8-89bf-8c9c380fe4a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a database table using the Supabase library. It demonstrates the use of the `select()`, `limit()`, and `single()` methods to return a single object instead of an array of objects, which can be useful for certain use cases."
  },
  {
    "chunk_id": "5f5e7fda-b344-47cb-b2bc-b2a44389ffd8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes how to retrieve a single row of data from a database table using the Supabase library's `select()` and `maybe_single()` methods. This is useful when the query is expected to return at most one row, allowing the response to be returned as a single object instead of an array. The example demonstrates how to retrieve the country with the name \"Albania\" from the \"countries\" table."
  },
  {
    "chunk_id": "389dabd7-d875-4505-8f81-f40dcf18b63f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The provided code demonstrates how to retrieve data from a Supabase table as a CSV string. This functionality allows users to easily export and work with the data in a spreadsheet or other CSV-compatible application."
  },
  {
    "chunk_id": "c3266fd8-017d-4319-9ad9-382241b62195",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. However, `explain()` should be used cautiously as it can reveal sensitive database information, and it's recommended to only enable it for testing environments. Developers can follow the Performance Debugging Guide to enable the `explain()` functionality in their projects."
  },
  {
    "chunk_id": "b1ec7699-7054-4317-967b-a31522021a8d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "Summary:\n\nThe documentation outlines how to create a new user in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled. It also covers the behavior when signing up an existing confirmed user, and how to fetch the currently logged-in user. The documentation provides example code for signing up a user with an email and password."
  },
  {
    "chunk_id": "a7be3d65-d67c-4445-9adf-4e5e98819af5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It is recommended to set up a captcha to prevent abuse, and the captcha token can be passed in the `options` parameter. The function `supabase.auth.sign_in_anonymously()` can be used to create an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "8c998429-a25c-4961-9067-984cea258fbb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides a code example for signing in with email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "0020884f-0f2d-475d-bda6-f5b2ca2bd7ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes a feature that allows users to sign in using an OIDC ID token. This is supported by the authentication provider that must be enabled and configured. The feature is demonstrated through an example of signing in with a Google ID token using the Supabase library's `sign_in_with_id_token` method."
  },
  {
    "chunk_id": "677f876f-53db-4bb5-9566-6280d9473ab2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_with_otp()` function is used for passwordless sign-ins, where an OTP (one-time password) is sent to the user's email or phone number. If the user doesn't exist, the function will sign up the user as well. The behavior can be configured to restrict user creation. For email sign-ins, the user can receive either a magic link or an OTP, while for phone sign-ins, the user receives an OTP. The magic link's destination URL is determined by the `SITE_URL`, and additional redirect URLs can be added to the project."
  },
  {
    "chunk_id": "f12239dc-4fd0-421b-bb9e-63f4bb117139",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth, a common authentication method that allows users to sign in using a third-party provider. Supabase supports various third-party providers for this purpose. The method involves calling the `sign_in_with_oauth()` function, passing the desired provider as a parameter, to initiate the sign-in flow."
  },
  {
    "chunk_id": "17c1d223-5673-4d07-8eba-12aa55a43645",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the provided CLI commands. You can then use the `domain` property to start the sign-in flow, or the `provider_id` property to specify a different way to identify the identity provider, such as mapping specific user email addresses. The method `supabase.auth.sign_in_with_sso()` is used to initiate the SSO sign-in process."
  },
  {
    "chunk_id": "74115235-a6f0-42a7-890d-de82b6675506",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This method revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which will remain valid until it expires. The method can be used to sign out the user from the global scope, which will sign out all other sessions the user is logged into."
  },
  {
    "chunk_id": "ee7cea3d-70f4-4391-9b99-697e14b06127",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify One-Time Passwords (OTPs) for different authentication types, including SMS, email, and user account changes. The verification type should be determined based on the corresponding auth method used. The `TokenHash` from the email templates can be used to sign in users, and it can also be used with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "693b337e-b3b6-44e5-817f-46edf7c5dc69",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with. If verified user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "0603fc0b-a988-4c14-a03b-538b82ef20a5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.refresh_session()` retrieves a new session, regardless of the expiry status of the current session. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve the refresh token from the current session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "d5efc772-2d7b-4ed5-bed5-f22715a003fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `get_user()` is used to retrieve the user object from the database, rather than from the local session. This is useful for verifying the user's authorization, as it validates the user's access token (JWT) on the server. The method can be called with an optional JWT parameter, which will be used instead of the JWT from the current session."
  },
  {
    "chunk_id": "b4d06197-7a7c-40c4-9298-146d7636f79b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the session data using an `access_token` and `refresh_token`. If successful, it emits a `SIGNED_IN` event. This method is used to refresh the session when the current token is invalid, allowing the application to maintain a valid session."
  },
  {
    "chunk_id": "cd590f56-8abe-4ee2-84c1-68513469eaa5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Supabase implementation of Multi-Factor Authentication (MFA), which currently supports time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, which eliminates the need to store recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "508c4ab6-f488-4cee-9b8b-84ac1bd20c44",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "To enroll a TOTP (time-based one-time password) factor, use the `mfa.enroll()` method, passing `\"factor_type\": \"totp\"` and a `\"friendly_name\"` for the factor. The returned `id` can be used to create and verify MFA challenges using `mfa.challenge()`, `mfa.verify()`, or `mfa.challenge_and_verify()`."
  },
  {
    "chunk_id": "0a9fd084-58b8-4ac2-af8f-0f43227f9c9f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create an authentication challenge, an enrolled factor is required. The `mfa.challenge()` method can be used to initiate a challenge for a specific factor, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "226acc8d-3eca-44dc-8a8a-afb2c1fee857",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `supabase.auth.mfa.create()` function. The `supabase.auth.mfa.verify()` function is then used to verify a challenge by providing the `factor_id`, `challenge_id`, and the `code` received from the user."
  },
  {
    "chunk_id": "39d8027a-30f6-4453-949f-d18eabcb4870",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` method combines the `mfa.challenge()` and `mfa.verify()` operations into a single step, allowing you to challenge and verify a user's MFA code in one call."
  },
  {
    "chunk_id": "ac1c25a3-34f4-41e4-bd6d-bf8b1b3124cc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, use the `supabase.auth.mfa.unenroll()` method and provide the `factor_id` as a parameter. This allows users to remove a specific multi-factor authentication (MFA) factor from their account, which is useful for managing their security settings."
  },
  {
    "chunk_id": "f0a286a3-fef5-4904-92fc-4ac042aa61f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) measures the strength of an authentication mechanism in Supabase. AAL1 refers to a single-factor authentication (e.g., email and password), while AAL2 refers to two-factor authentication (e.g., TOTP). Users can check their current AAL and the next level they can achieve using the `supabase.auth.mfa.get_authenticator_assurance_level()` function."
  },
  {
    "chunk_id": "9c4a3c84-bfec-4334-83ac-e7458433562d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function by sending an HTTP request with an Authorization header. Automatically attaches a Content-Type header based on the data type, but allows overriding it. Provides an example of invoking a \"hello-world\" function with a body payload."
  },
  {
    "chunk_id": "a9d69d27-e58b-4c6d-a045-54c8e7020561",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Broadcast and Presence are enabled by default for all projects, but listening to database changes is disabled by default for new projects due to performance and security concerns.\n2. Developers can receive \"previous\" data for updates and deletes by setting the table's `REPLICA IDENTITY` to `FULL`.\n3. The code example demonstrates how to subscribe to a channel, send a broadcast message, and handle received broadcast messages in the Supabase Realtime API."
  },
  {
    "chunk_id": "268d15ba-4688-44a3-806c-afbd11f3f58c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Supabase channel is recommended to maintain performance of the Realtime service and database, as unused channels may degrade performance as more clients subscribe. The `supabase.remove_channel(myChannel)` function is used to remove a channel, which Supabase will automatically clean up 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "9e40605f-439b-4998-9683-5be8aab633fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the database, as unused channels can cause degradation as more clients subscribe. Supabase automatically handles cleanup 30 seconds after a client is disconnected, but developers can also explicitly remove all channels using the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "8218e242-b64e-40ac-8805-674218c49d44",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to retrieve all channels using the Supabase library. This functionality allows users to access and work with the complete set of available channels within the application or system."
  },
  {
    "chunk_id": "1f33de9e-0866-408f-bdb4-0f2ab2d5f5db",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided code snippet demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase realtime channel feature. The code subscribes to the 'room1' channel and, upon successful subscription, sends a broadcast message containing random cursor position data to all connected clients."
  },
  {
    "chunk_id": "86464ee7-c20a-46c1-bea1-9422424cab0b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` access to the `buckets` table and no permissions required for the `objects` table. Refer to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "973e2e09-a209-4a8f-ba44-c21079019eb9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` permissions on the `buckets` table, and no permissions required on the `objects` table. Refer to the Storage guide for details on access control. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "4d243bf5-bbb1-48f1-81b8-f1b3f913df3f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the RLS policy requires `select` permissions on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to list all buckets is `_10  res = supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "83dba42a-9148-408b-9faf-f0b89e2cee81",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the user requires `select` and `delete` permissions on the `buckets` table, but no permissions on the `objects` table. Refer to the Supabase Storage guide for more details on access control. The `supabase.storage.delete_bucket()` function can be used to delete a bucket."
  },
  {
    "chunk_id": "c4cd922d-6b7d-4f98-b2ec-aa20b84f635f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. Refer to the Storage guide for detailed information on access control. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "06437ce1-1a42-4d1f-9d6f-9f3af4e86b71",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file in Supabase, the user must have `insert` permissions on the `objects` table. The MIME type of the file should be specified, and if not provided, it defaults to `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file, path, and optional file options such as the content type."
  },
  {
    "chunk_id": "42f4d16d-4288-47eb-8f7b-7839afc088d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires 'select' permissions on the 'objects' table, but no permissions on the 'buckets' table. The process involves opening a destination file, downloading the file from the specified bucket using the Supabase storage API, and writing the downloaded content to the destination file."
  },
  {
    "chunk_id": "478370bd-b272-4820-9059-efd405c59003",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the required permissions are `select` on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "7df7c855-e58c-4532-b41c-363398db53c0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The file is updated by opening the local file, then using the `supabase.storage.from_()` method to update the file on the Supabase Storage, specifying the bucket name, file path, and optional file metadata such as cache control and upsert."
  },
  {
    "chunk_id": "c1d047ea-e2b6-4243-aa45-121f302cf088",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires `update` and `select` permissions on the `objects` table. The `move` function from the Supabase storage API can be used to relocate a file from one path to another within the same bucket."
  },
  {
    "chunk_id": "2f08f1ed-117a-44e7-83e4-22bba8381e16",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The `supabase.storage.from_('bucket_name').remove('test.jpg')` command can be used to delete a file from the specified bucket."
  },
  {
    "chunk_id": "96ccce73-c799-4bb6-90a0-fb400360c6da",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, you need the `select` permission on the `objects` table. The signed URL allows temporary access to a file in the specified bucket, and you can set the expiry duration for the URL. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "2c14f489-876d-4345-b224-ac1309da0bc9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public either via the `updateBucket()` function or by manually making the bucket public on the Supabase dashboard. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` function can then be used to retrieve the public URL for a given file path."
  },
  {
    "chunk_id": "265de699-2ea4-4000-b51a-f1ef4eb0e9c6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functionalities to interact with a Postgres database, including listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. It serves as a reference for all objects and methods available in the library, enabling developers to leverage the full capabilities of the Supabase platform using Python."
  },
  {
    "chunk_id": "7e56e8f5-0335-4617-94ca-a7ed5f66c0a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content describes how to install the Supabase Python library (supabase-py) using the PyPi package manager. It provides the specific terminal command to install the library, which is compatible with Python 3.7 and later versions. This information is important for developers who need to set up the Supabase library in their Python projects."
  },
  {
    "chunk_id": "b498c225-9d6c-47f3-9845-b50e64c0662f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. To initialize a new Supabase client, you need to provide the Supabase URL and Key, which are obtained from the project dashboard. The client can be customized using optional client options, such as modifying authentication behaviors."
  },
  {
    "chunk_id": "7006482e-b3b7-4e82-b136-fcc7166e52cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` is a reserved keyword that should be avoided as a column name. The `select()` function allows you to specify the columns to retrieve, and the `count` parameter can be used to get the count of rows returned."
  },
  {
    "chunk_id": "69fe0200-4b87-482e-b9d0-23558886d40f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content summarizes the parameters and usage of the \"insert\" function in the Supabase library. The function allows inserting a single row or multiple rows of data into a table, with options to specify the count method, return method, and whether to use null values for missing fields. The example code demonstrates inserting a record into the \"countries\" table."
  },
  {
    "chunk_id": "86e2add9-9c06-4201-8ec4-404128f2ae95",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library should be used in combination with filters to target the specific rows to be updated. The method accepts a dictionary or a list of dictionaries representing the new values to be inserted, and an optional `count` parameter to retrieve the count of updated rows."
  },
  {
    "chunk_id": "095e6559-eb33-4337-8f77-59e3d578a2b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'upsert' operation in this software documentation allows inserting or updating data in a table based on primary keys. Key parameters include 'values' (the data to insert), 'count' (the property to get the row count), 'returning' (the response format), 'ignore_duplicates' (whether to ignore duplicate rows), and 'default_to_null' (whether to use null values for missing fields in bulk inserts). Upserting is demonstrated with an example using the 'countries' table."
  },
  {
    "chunk_id": "92c8e78c-dd4b-465a-a2e5-1dada26ce231",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe `delete()` function in Supabase should always be combined with filters to target the specific items to be deleted. When using `delete()` with row-level security (RLS) enabled, only the rows visible through the `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by providing an array of values."
  },
  {
    "chunk_id": "ec7faf85-1f3f-459d-844f-bf63277f1b1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation provides details on calling Postgres functions as Remote Procedure Calls (RPCs) from anywhere. Key points include the function definition syntax, available parameters (e.g., callable function, parameters, read-only mode, count algorithm), and example usage demonstrating how to call a Postgres function without arguments and with arguments. These RPCs are useful when the underlying logic rarely changes, such as for password resets and updates."
  },
  {
    "chunk_id": "51d4517e-82b4-46d9-b650-ce3ed64eef61",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return rows from database queries based on certain conditions. They can be used with various query operations, including `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of filter application is important, as demonstrated in the examples provided."
  },
  {
    "chunk_id": "6ee537dc-c7ac-4395-a385-5bf71ff3b5c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `eq()` method in the Supabase library allows you to filter a database table by selecting only the rows where a specified column is equal to a provided value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to match. This functionality can be used in conjunction with the `select()` method to fetch the desired data from the table."
  },
  {
    "chunk_id": "e10609d6-36e3-4582-afdd-29cdb29fceab",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `neq()` method in Supabase allows filtering a table by a column that is not equal to a specified value. The method takes two parameters: the column name and the value to filter by. This is useful for quickly retrieving rows that do not match a certain criteria."
  },
  {
    "chunk_id": "09a6f798-596a-4ebc-91f9-4ba36ae5816e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a table by a column value that is greater than a specified value. It outlines the required parameters, `column` and `value`, and provides an example of using the `gt()` method with the `select()` function in Supabase to retrieve rows where the `id` column is greater than 2."
  },
  {
    "chunk_id": "c311d4c4-14e7-4423-bf9a-8d3dd1b5e7f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `gte()` method in Supabase filters a database table to only include rows where the specified column is greater than or equal to the provided value. The method takes two required parameters: the column name and the value to filter by."
  },
  {
    "chunk_id": "824b8a7c-dc7a-4c68-8cfd-e57458762320",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a table by selecting rows where a specified column has a value less than a given value. The parameters required are the column name and the filter value. An example is provided using the `lt()` method with the `select()` function in Supabase."
  },
  {
    "chunk_id": "e1f52cf9-64ea-4615-92e4-79fb738493d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the `lte()` (less than or equal to) function in Supabase to filter a database table by a specified column and value. The `lte()` function takes two parameters: the column name and the value to filter by, allowing you to retrieve only the rows where the column value is less than or equal to the provided value."
  },
  {
    "chunk_id": "58e2b892-195b-42da-815b-9350602b7c59",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"column matches a pattern\" feature allows filtering rows where the specified column matches the provided pattern case-sensitively. It takes two required parameters: \"column\" for the name of the column to filter on, and \"pattern\" for the pattern to match. This can be used in a query like `supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()` to select rows where the \"name\" column matches the pattern \"%Alba%\"."
  },
  {
    "chunk_id": "2da1b08d-5226-4f57-808d-8bdd140c0c09",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This function allows you to filter a table's rows by matching a case-insensitive pattern in a specified column. The two required parameters are the column name and the pattern to match against. This can be useful for performing case-insensitive searches on textual data stored in a database."
  },
  {
    "chunk_id": "9ce93337-b688-497a-992e-23573de18bed",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column is a value\" section describes a filter operation that matches rows where the specified column has the given value. The parameters include the column name and the value to match, which can be null, true, or false. This filter can be used to check for nullness or boolean values in a table."
  },
  {
    "chunk_id": "87cff6d8-0d35-4689-a2bf-57c3aa75e4fb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes the `in_()` function in Supabase, which allows filtering rows where a specific column's value is included in a provided array of values. The `in_()` function takes two required parameters: `column`, the column to filter on, and `values`, the array of values to match against."
  },
  {
    "chunk_id": "1568dacb-9a36-44dd-9e1d-be8bea4c699d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThis documentation describes the \"contains\" filter for columns in a Supabase database. This filter is applicable to columns of type jsonb, array, and range, and it matches rows where the column contains every element present in the provided value. The filter takes two parameters: the column name and the value to filter with, which can be a jsonb object, array, or range."
  },
  {
    "chunk_id": "4cf2cfc6-c4e9-4d15-a5c4-bd363f548617",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature applies to jsonb, array, and range columns. It allows matching rows where every element in the column is contained within the specified value. The parameters include the column name and the value to filter with. This is useful for querying data stored in these types of columns, such as filtering classes by the days of the week they are offered."
  },
  {
    "chunk_id": "29d3f1f6-318b-495c-834d-c9bb1ec9447e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature in the software allows users to filter rows in a table where the values in a specified column are greater than any element in a provided range. This is achieved by using the `.range_gt()` method, which takes the column name and an array of range values as parameters. This functionality is particularly useful for filtering data based on date or time ranges."
  },
  {
    "chunk_id": "23f06e02-c0a3-4c98-ae68-681cc4fb0a88",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is used for filtering range columns in a database table. It allows selecting rows where every element in the specified column is either contained within the given range or greater than any element in the range. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to retrieve the desired data."
  },
  {
    "chunk_id": "6d057154-eaf7-4aff-9405-42c4a0f2fca3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" option is used for range columns, allowing you to filter rows where every element in the specified column is less than any element in the provided range. The required parameters are the column name and the range array. This can be used in a Supabase query to filter a \"reservations\" table by a \"during\" column with a range of \"2000-01-01 15:00\" to \"2000-01-01 16:00\"."
  },
  {
    "chunk_id": "82ab81d7-04b3-4ac4-b1b4-c678ebadba92",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, matching rows where every element in the specified column is less than or equal to any element in the provided range. The filter takes two required parameters: the column to filter on and the range to filter with. This functionality can be used in a Supabase query to select rows where the \"during\" column is within a specified date range."
  },
  {
    "chunk_id": "2934fa0c-ff5d-42b8-bf2f-abed312a1d79",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is only applicable to range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The parameters include the column name and the range to filter with, as demonstrated in the example using the Supabase library."
  },
  {
    "chunk_id": "0fbc44bb-6f19-4dcb-8f03-8bc3d4db4c4d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"With a common element\" filter is only applicable to array and range columns. It matches rows where the specified column and value have at least one element in common. The filter takes two required parameters: the column to filter on and the value to filter with. This functionality is demonstrated in an example query using the Supabase library to filter an \"issues\" table by the \"tags\" column."
  },
  {
    "chunk_id": "9a9657fa-dbca-43c0-a531-e944d6b01494",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is a concise description of the \"Match a string\" functionality in Postgres full text search. It explains that this feature is only applicable to text and tsvector columns, allowing users to filter rows based on a matching query string. The summary also highlights the key parameters involved, such as the column to filter on and the query text to match."
  },
  {
    "chunk_id": "67e1062e-9edb-47aa-80be-b106c9579ce6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in Supabase allows you to filter data by matching a set of key-value pairs in the `query` parameter. This provides a concise way to apply multiple equality filters on a table, instead of using multiple `.eq()` calls. The `match()` method is often used in conjunction with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "f0767a06-fa66-4a56-8b74-df0133b042d0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The 'not_' operator in PostgREST syntax is used to match rows that don't satisfy the specified filter, such as excluding rows with specific IDs or array values. This is demonstrated in examples using the Supabase table 'countries', where the 'not_.is_' method is used to select rows where the 'name' column is not null."
  },
  {
    "chunk_id": "2066bc59-6aeb-426b-9de1-c6633779ec13",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the given context expects the use of raw PostgREST syntax for filter names and values, including the use of parentheses for 'in' filters, curly braces for array values, and 'cs' and 'cd' for 'contains()' and 'containedBy()' operations, respectively. The or() function can be used to combine multiple filters using 'or' logic, and it can also be used to filter on referenced tables."
  },
  {
    "chunk_id": "72b327e8-802d-457c-9594-d3f845ce249a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the provided code expects the use of raw PostgREST syntax for the filter values. It supports various operators like `in` and `contains` for filtering data, with the ability to use arrays as filter values. The example demonstrates how to use the `filter()` method on a foreign table to select data based on specific column values."
  },
  {
    "chunk_id": "81d1a001-7781-4c53-9f1d-a63c1e4766e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of a query response, in contrast to filters which only return rows matching certain conditions. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "2ddb20c2-984c-4c2d-9aff-612dc649e55f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order() function allows you to order the query results by a specified column, optionally in descending order and with nulls first. The key parameters are column (the column to order by), desc (whether to sort in descending order), and nullsfirst (whether to show nulls first). An example is shown for ordering the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "4d2c58a9-6c83-4c3c-abed-0c4c0a981553",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"limit()\" function in Supabase allows you to specify the maximum number of rows to return from a database query. You can apply this to both the parent table and foreign tables by using the \"foreign95table\" parameter. This is a useful feature for pagination or limiting the amount of data returned to improve performance."
  },
  {
    "chunk_id": "68d38c2b-5516-4077-a00a-7e3ac5439b29",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe content describes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows returning only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, and the range can be applied to both the parent table and foreign tables."
  },
  {
    "chunk_id": "2cb99a4b-20c9-48ac-a88f-67d2a203eef8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `single()` method in the Supabase library allows retrieving a single row of data from a table, instead of an array of objects. This is demonstrated in the example code `supabase.table(\"countries\").select(\"name\").limit(1).single().execute()`, which retrieves the first row of the \"name\" column from the \"countries\" table."
  },
  {
    "chunk_id": "3fb8d724-7ebb-4ac6-9508-3eb6e02d5e28",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the Supabase feature to retrieve a single row of data from a table, using the `maybe_single()` method on the `select()` query. This is useful when expecting at most one result, as it returns the data as a single object instead of an array of objects."
  },
  {
    "chunk_id": "9c30b342-c893-430d-942c-222a642dcbf5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise explanation of how to retrieve data from a Supabase table in CSV format. The `csv()` method is used to return the data as a string in CSV format, which can be useful for exporting or processing the data in a spreadsheet or other application that supports CSV files."
  },
  {
    "chunk_id": "b13253f6-12bd-493a-88d2-9c615a7de162",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. While `explain()` is not enabled by default for security reasons, it can be a valuable tool for debugging slow queries, but should be used carefully, especially in production environments."
  },
  {
    "chunk_id": "46ab6981-f5ef-4330-bcf5-f06fb5dfc4ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers how to create a new user in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled in the project settings. It also describes the different scenarios when a user is returned with or without a session, depending on the \"Confirm email\" setting. Additionally, it provides guidance on modifying the redirect URL after email confirmation and handling the case of an existing confirmed user."
  },
  {
    "chunk_id": "f0b56a0a-d2a3-497c-919b-f75aae7881b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes a function to create an anonymous user in the system. It returns an anonymous user, and it is recommended to set up a captcha to prevent abuse. The function accepts an optional captcha token in the `options` parameter to enable the captcha functionality."
  },
  {
    "chunk_id": "584fd8c8-c297-40b9-9912-24f1db0cfb91",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nExisting users can sign in with either an email and password or a phone number and password. The `supabase.auth.sign_in_with_password()` method is used to sign in a user, taking the email/phone and password as parameters. The method returns a response object containing the signed-in user's information."
  },
  {
    "chunk_id": "ff0ae879-e22b-4451-9a0c-163255d544c5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in with an OIDC ID token using the Supabase authentication provider. It provides an example of the `supabase.auth.sign_in_with_id_token()` function, which takes the provider name and the ID token as parameters. This feature allows users to authenticate with an external identity provider and access the Supabase platform using the provided ID token."
  },
  {
    "chunk_id": "a398a59e-4781-47cf-8385-4b539e054b98",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP feature allows users to authenticate without a password, by sending a one-time code to their email or phone number. This can be used for passwordless sign-in, and if the user doesn't exist, they will be automatically signed up. The method supports configuring whether to send a magic link or an OTP, and allows customizing the redirect URL. The implementation for magic links and OTPs is the same, with the option to modify the email template to send a one-time code instead of a confirmation URL."
  },
  {
    "chunk_id": "40a909ab-5e7a-44b9-9c6c-26de8cb043f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation covers signing in a user through OAuth, a third-party authentication method supported by Supabase. It provides parameters for the `sign_in_with_oauth()` function, which allows signing in with a specific provider (e.g., GitHub) and optionally requesting additional scopes. This OAuth integration enables users to authenticate with Supabase using their existing third-party credentials."
  },
  {
    "chunk_id": "51e08a88-453b-4f7c-af97-28c1e8012c86",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the CLI commands. You can then use the `domain` property to start the sign-in flow, or the `provider_id` property to use a different way to initiate the authentication flow, such as mapping specific user email addresses or using different hints to identify the identity provider. The `sign_in_with_sso()` method is used to perform the SSO sign-in."
  },
  {
    "chunk_id": "95f0c0cc-04a6-4d00-ac2e-ffb86515080c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which remains valid until it expires. Signing out using the global scope signs out all other sessions the user is logged into."
  },
  {
    "chunk_id": "9dc3ab2c-85c9-4b0d-9d03-8de56517efdb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and account recovery. The verification type should match the corresponding auth method used previously. The `TokenHash` contained in email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "846599a7-3526-4290-ada2-c5de0460af76",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source on the server, as it could be tampered with. If verified, trustworthy user data is required, the `get_user()` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "57431e51-d651-438d-918d-ab2de18f8ebe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It optionally accepts a refresh token, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that a valid session is always available, even if the current one has expired."
  },
  {
    "chunk_id": "b6c64e35-f031-4c95-bd3b-b4809a3a8107",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be called with an optional access token JWT, and if none is provided, the JWT from the current session is used."
  },
  {
    "chunk_id": "68dc0158-42da-40a0-a2d3-175fa4339d28",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the current session data using the provided `access_token` and `refresh_token`. It handles session refreshing and will throw an error if the tokens are invalid. If the operation is successful, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "1eff88ff-99b8-43e2-8de6-a3b81bcc584e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section on Auth MFA covers the methods used for Multi-Factor Authentication (MFA) in the Supabase platform. It specifically supports time-based one-time password (TOTP) as the second factor, allowing users to enroll multiple TOTP factors for recovery purposes, up to a limit of 10. This approach reduces the burden of managing recovery codes and decreases the attack surface compared to having a single backup TOTP factor."
  },
  {
    "chunk_id": "584767dd-803c-415d-923d-ca691a96dd1f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor using the Supabase Auth MFA API. The `mfa.enroll()` method is used to enroll a TOTP factor, which returns an `id` that can be used to create an MFA challenge. The documentation also provides references to the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` methods for creating, verifying, and combining the challenge and verification steps, respectively."
  },
  {
    "chunk_id": "97f44d7b-51eb-40e0-a76e-ff66c4bcecd5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "ef142899-d2f1-47b5-b059-40e4c9a49e49",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge by following the provided link. The summary provides an example of how to verify a challenge using the Supabase authentication API, where you need to supply the factor_id, challenge_id, and code to complete the verification process."
  },
  {
    "chunk_id": "e737c875-5dbc-4110-9a42-bac3b5417cd6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` methods in a single step, taking a factor ID and a code as input parameters."
  },
  {
    "chunk_id": "dc3b9b43-4dcd-4b47-b8a8-8ec24b70b9e3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to unenroll a factor from a Supabase authentication session using the `supabase.auth.mfa.unenroll()` function. The function takes a `\"factor_id\"` parameter, which is a unique identifier for the factor being unenrolled."
  },
  {
    "chunk_id": "04f4e348-7820-41d7-9a03-3cc0e10d45d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email/password, OAuth), while AAL2 refers to the second factor (e.g., TOTP). The `next_level` field indicates the next level of authentication required, with AAL2 if the user has a verified factor, or AAL1 otherwise. The `get_authenticator_assurance_level()` method can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "31c613ac-4f0c-4998-a95a-9402c6c85cce",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by making a request to the Supabase Functions service. Requires an Authorization header and automatically sets the Content-Type header based on the request body type. Provides options to override the default Content-Type and handle invocation errors."
  },
  {
    "chunk_id": "ee94a332-ebfe-4256-9995-38b799962eee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, and can listen to various events like broadcasts, presence changes, and database modifications through the Realtime API. The provided code example demonstrates how to subscribe to a channel, send a broadcast message, and handle incoming broadcast payloads."
  },
  {
    "chunk_id": "e9c7d48e-e75a-4d68-bb63-919ab2a74ac6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain project performance and database efficiency. The `supabase.remove_channel()` function is used to remove an unused channel, as Supabase automatically handles cleanup 30 seconds after a client disconnects, but leaving unused channels subscribed can degrade service as more clients connect simultaneously."
  },
  {
    "chunk_id": "8283c95f-9eea-45da-a612-c35da84b8baf",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused Realtime channels is recommended to maintain performance and database efficiency. Supabase automatically handles channel cleanup 30 seconds after client disconnection, but keeping unused channels can degrade performance as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all subscribed channels."
  },
  {
    "chunk_id": "28030d1d-e0d9-4092-90ac-0ff79d89c953",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The provided code snippet retrieves all channels from the Supabase service. This functionality allows users to access and work with the complete set of available channels, which is a common requirement in many application scenarios that involve channel-based data or communication."
  },
  {
    "chunk_id": "3b33b28c-1672-42f3-a739-7b64c83a3e50",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to broadcast a message to all connected clients in a specified channel using the Supabase Realtime API. It shows an example of subscribing to a channel, then sending a broadcast message with random cursor position data to all connected clients."
  },
  {
    "chunk_id": "597284fc-1ff0-4155-aa66-917fc5d9c46b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, you need the `insert` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for more information on Supabase's access control system. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "988e18f8-911c-49a7-bba7-250a702f4278",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for details on Supabase's access control system. The code to retrieve a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "9be272f3-98dd-43f3-9027-ef89debf386b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the RLS policy requires `select` permissions on the `buckets` table, but no permissions on the `objects` table. Refer to the Storage guide for more details on Supabase's access control system."
  },
  {
    "chunk_id": "c17e8b09-6e97-4786-ad5a-67b11abe4155",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the user requires `select` and `delete` permissions on the `buckets` table, but no permissions on the `objects` table. The `supabase.storage.delete_bucket(name)` function is used to perform the bucket deletion operation."
  },
  {
    "chunk_id": "175b4190-d281-4d91-ae4b-646459b065fb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty the specified bucket. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "52f66294-32e5-4984-b735-01ea420d2d13",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase storage, the user requires `insert` permissions on the `objects` table. The appropriate MIME type should be specified for the file, especially for images and audio, otherwise the default is `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and content type."
  },
  {
    "chunk_id": "a3402645-48a4-4c9a-bc9c-5d1266216663",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, you need 'select' permissions on the 'objects' table in the RLS policy. The download process involves using the Supabase storage client to fetch the file from the specified bucket and write it to the local destination."
  },
  {
    "chunk_id": "9e944b0f-ed52-41ce-bb95-043d88db87ca",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the `objects` table permissions require `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "84b52dcf-be3c-429e-b78f-bdd8d4eb82d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated by opening the file in binary mode and using the 'update' method of the 'supabase.storage.from_(\"bucket_name\")' object, specifying the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "5d261cf4-0b4d-40e1-bccb-d4d01c97cc9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase Storage, the user requires 'update' and 'select' permissions on the 'objects' table. The file can be moved using the `move()` method of the `supabase.storage.from_()` function, specifying the source and destination paths. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "708e6551-4788-4ace-9e38-4b07d636aee2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires \"delete\" and \"select\" permissions on the \"objects\" table. The provided example demonstrates how to remove the file \"test.jpg\" from the \"bucket_name\" bucket using the `supabase.storage.from_('bucket_name').remove('test.jpg')` method. Refer to the Supabase Storage guide for more details on configuring access control."
  },
  {
    "chunk_id": "2d92fce9-37b8-4935-8f49-51bb277e546a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the client requires `select` permissions on the `objects` table, but no permissions on the `buckets` table. The signed URL allows limited, time-restricted access to a specific file stored in the Supabase Storage service, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "c01c6bec-bae3-444f-96d1-b4358bc72048",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in Supabase Storage, the bucket must be set to public, either through the Supabase Dashboard or the updateBucket() API. No specific permissions are required on the buckets or objects tables. The get_public_url() function returns the public URL for the specified file path in a public bucket."
  },
  {
    "chunk_id": "ffe98c0c-00c3-4dd0-889a-5c15521f50a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functions to interact with a Postgres database, including listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. This reference document details every object and method available in the supabase-py library, making it a valuable resource for developers looking to integrate Supabase into their Python applications."
  },
  {
    "chunk_id": "ee707b74-ae67-48a5-bffc-4dab5d0b9a31",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase-py library using the pip package manager in your terminal. The recommended version is for Python 3.7 and above. The installation command is `pip install supabase`."
  },
  {
    "chunk_id": "a6ff6755-6c6b-4702-87ec-ed2f0969a70f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and key as required parameters, and optional client options to configure the authentication behavior. The Supabase client provides access to all the Supabase functionalities, making it the central entry point for developers to work with the Supabase platform."
  },
  {
    "chunk_id": "3206bf87-43b0-433b-92fe-8137c20b4125",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to customize data retrieval. The `apikey` is a reserved keyword in the Supabase Platform and should be avoided as a column name. The `select()` function supports optional parameters for specifying columns and count methods."
  },
  {
    "chunk_id": "a8f3714d-8ba7-4422-bfc4-0516864a7b16",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Insert data\" section is as follows:\n\nThe \"insert\" method allows inserting data into a table, with parameters for specifying the values to insert (as a single dictionary or a list of dictionaries), optionally specifying a count method and a returning method, and an option to set missing fields to null. The example demonstrates inserting a single record into the \"countries\" table."
  },
  {
    "chunk_id": "2accaafa-6ceb-4e4c-9dc1-9d7f22ab89cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation is used to update data in a table, and it must be combined with filters to target the specific items to be updated. The method accepts a dictionary or list of values to be inserted, and an optional parameter to specify the property to use for the row count. An example is provided demonstrating how to update the \"name\" column for a row with an \"id\" of 1 in the \"countries\" table."
  },
  {
    "chunk_id": "3e7bc414-24e0-4c1a-a56a-9e87bbbd335d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe upsert operation allows inserting or updating data in a table based on the provided primary keys. Primary keys must be included in the values dict to use upsert. The operation supports bulk upserts and handles tables with constraints, allowing users to specify columns to work with UNIQUE constraints and control the handling of missing fields."
  },
  {
    "chunk_id": "7521a781-c556-4c84-9211-c141b8d8a04e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` method in Supabase should always be combined with filters to target the specific items to be deleted. When using `delete()` with RLS (row-level security) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by specifying an array of values, which is useful for batch deleting entries that share common criteria."
  },
  {
    "chunk_id": "d48e513a-c84b-4365-9e89-0d6c350829f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. It provides details on the available parameters, including how to call a function without arguments, with arguments, in bulk, with filters, and in read-only mode, as well as different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "bee9077d-b8e4-426e-895e-6c292cef56d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match specific conditions, and can be used with various database operations like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of the filter and select operations in the query matters, as shown in the example code."
  },
  {
    "chunk_id": "64ad34ca-02b4-4815-bda2-297630a1f28c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is:\n\nThis documentation describes how to filter rows in a database table where a specified column is equal to a given value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library's `select()` method to retrieve rows from the \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "0843b1fb-6a77-45b7-b6c2-d3b1299954ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The code snippet demonstrates how to use the `neq()` method to filter a Supabase table, selecting only rows where the specified column is not equal to the provided value. The `columnRequired` and `valueRequired` parameters define the column and value to filter on, respectively."
  },
  {
    "chunk_id": "d6f54f26-4325-4626-90e4-717a8c3440b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a table in Supabase to only include rows where a specified column has a value greater than a given value. The required parameters are the column name and the value to filter by. An example is provided using the `gt()` method of the `select()` function to filter the \"countries\" table by rows where the \"id\" column is greater than 2."
  },
  {
    "chunk_id": "55aa4214-8053-48c8-9060-f2a06c35d475",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `gte()` function in the Supabase library allows you to filter a database table by selecting rows where a specified column is greater than or equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This functionality can be used in conjunction with the `select()` function to retrieve the filtered data."
  },
  {
    "chunk_id": "8c23afc6-5107-47cf-a8a3-232fa674015e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This filter allows you to select rows from a table where the value in a specified column is less than a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is demonstrated with the example `supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()`, which selects all rows from the \"countries\" table where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "2bc227aa-c24b-4b39-b9db-78553166377a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `lte()` function in Supabase's `select()` method allows you to filter rows where a specified column is less than or equal to a provided value. The function takes two parameters: the column name to filter on and the value to compare against."
  },
  {
    "chunk_id": "6bf2fd6e-f329-49e7-ad8f-cb4d7e20a5e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"Column matches a pattern\" feature allows filtering a table by checking if a specified column matches a provided pattern case-sensitively. The key parameters are the column name and the pattern to match, and an example is provided using the `like()` function in Supabase to filter the \"countries\" table by the \"name\" column."
  },
  {
    "chunk_id": "2d968466-b1bf-4cd3-a290-88f8f685b4f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `ilike()` function in Supabase allows you to perform a case-insensitive pattern match on a specified column. The `columnRequired` parameter specifies the name of the column to apply the filter on, while the `patternRequired` parameter defines the pattern to match. This functionality can be used in a `select()` query to filter rows where the column value matches the provided pattern."
  },
  {
    "chunk_id": "e4af601e-9d33-4869-9c9d-c612839e1118",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: 'The \"Column is a value\" feature allows filtering rows in a table where the specified column matches the provided value. It supports checking for nullness, true, or false values. This can be useful for querying and filtering data based on specific column criteria.'"
  },
  {
    "chunk_id": "aa1bde47-37ed-4ce9-86db-d5d568f865a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a filter operation on a database table where rows are matched based on the values in a specified column. The `in_()` function is used to filter the rows where the values in the `name` column are included in the provided `values` array (e.g., \"Albania\" or \"Algeria\"). This is a common technique for querying data in a tabular format."
  },
  {
    "chunk_id": "408e4830-aef4-4f5a-ad62-1530d9e110b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the content on \"Column contains every element in a value\" is as follows:\n\nThis feature is applicable to jsonb, array, and range columns. It allows filtering rows where the specified column contains all the elements present in the provided value. The parameters include the column name and the object (jsonb, array, or range) to filter with. Examples are provided for using this feature with array, range, and jsonb columns."
  },
  {
    "chunk_id": "29b20215-6c4e-483d-93dd-1281dd6b9b3f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' feature applies to jsonb, array, and range columns, allowing you to filter rows where every element in the specified column is contained within the provided value. The parameters include the column to filter on and the value to filter with. This can be useful for querying data structures like arrays or JSON objects, enabling more precise and targeted data retrieval."
  },
  {
    "chunk_id": "20365ca1-4c59-42dd-bb9a-bc204f2415ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is only applicable to range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The key parameters are the column name and the range to filter with, which can be used in a `select()` query to retrieve the filtered data."
  },
  {
    "chunk_id": "cb867c2a-5f2a-4d5f-8472-fa015781663b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" functionality is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. This can be implemented using the `.range_gte()` method, which takes the column name and the range value as parameters. This is useful for querying data based on a date or time range."
  },
  {
    "chunk_id": "5f5b92e0-3642-4a17-89e4-3d8077448ce9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" section explains a filter operation for range columns in a database. It allows matching rows where every element in the specified column is less than any element in the provided range. The key parameters are the column name and the range to filter with, and an example is provided using the Supabase library."
  },
  {
    "chunk_id": "3b744d09-95c9-4990-b31e-eb054f8a4685",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature allows you to filter a range column, matching only rows where every element in the column is less than or equal to any element in the specified range. The parameters include the column name and an array representing the range to filter with. This can be used, for example, to select all reservations where the \"during\" column is less than or equal to the given time range."
  },
  {
    "chunk_id": "cc29cf6a-cd9d-4bd5-8c61-0abba8aa120b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"mutually exclusive to a range\" feature is applicable to range columns, where it filters rows where the column value is mutually exclusive to the specified range, ensuring there are no elements between the two ranges. The parameters required are the column name and the range to filter with, as demonstrated in the example using the Supabase library's `range_adjacent()` method."
  },
  {
    "chunk_id": "9da1bfb6-409c-4b79-a84d-73b0b237db60",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis feature is only applicable to array and range columns. It allows filtering rows where the specified column and value have an element in common. The relevant parameters are the column to filter on and the value to filter with. Examples are provided for using this functionality on array and range columns."
  },
  {
    "chunk_id": "88a16754-a9e0-47a7-bf12-15a1ba85ee55",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"match a string\" feature is used to filter rows in text or tsvector columns where the column value matches the provided query string. It supports different types of text search, including basic normalization, full normalization, and websearch. This is useful for implementing advanced full-text search capabilities in a database."
  },
  {
    "chunk_id": "b477d181-59c3-4aec-8abb-3eaf84c4e8c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the `match()` method in a database query, which allows filtering rows where each column in the `query` keys matches its associated value. This is a shorthand for multiple `eq()` calls. The `match()` method takes a dictionary `queryRequired` as a parameter, with column names as keys and their filter values."
  },
  {
    "chunk_id": "4f657357-624b-4f50-be23-608d5f80875b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to use the `not_` operator in PostgREST filters to select rows that don't match the specified criteria, such as `not_.in_()` for array values and `not_.is_()` for null values. It demonstrates the usage of these operators in the context of the Supabase library's `select()` method."
  },
  {
    "chunk_id": "18c0610d-7d96-4e2b-b69d-14774e30e382",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation provides guidance on using the `or_()` method in the Supabase API to match at least one filter, including how to format the filter syntax (e.g., using parentheses for `in` filters, braces for array values, and `cs` or `cd` for `contains()` or `containedBy()`). It also explains the available parameters for the `or_()` method, such as `filtersRequired` and `reference95table`, and demonstrates how to combine `or_()` with `and_()` and apply filters to referenced tables."
  },
  {
    "chunk_id": "4f6b8bd5-7b9f-4f64-97ae-e91a34890883",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe filter() method in the documentation expects the use of raw PostgREST syntax for filter values, such as using parentheses for the 'in' filter and curly braces for array values. The method takes three parameters: column (required), operator (optional), and value (optional), following PostgREST syntax. An example is provided of using the filter() method on a foreign table to select rows where the 'name' column is in the list ('Algeria', 'Japan')."
  },
  {
    "chunk_id": "75138f9a-1142-4c39-9707-c9f8e39ab914",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow users to change the format of the response, rather than just filtering the rows. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "a5e80604-f43b-431b-9544-5c3a495547ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order method allows you to sort the query results by a specified column, with optional parameters to control the sort order (ascending/descending) and whether nulls should be ordered first or last. The example demonstrates ordering a query on the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "e38df93e-6f43-4429-9404-e23300fb4016",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'limit()' method in the Supabase API allows you to specify the maximum number of rows to return from a database query. You can apply this to the main table or to a foreign table by setting the 'foreign95table' parameter. This is useful for optimizing performance and limiting the amount of data returned to the client."
  },
  {
    "chunk_id": "1175dcea-4815-4dfb-9866-a08f9c2e5416",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe query result can be limited by specifying a range using the `from` and `to` parameters, which define the starting and ending offsets (inclusive) of the records to be returned. This allows restricting the output to a specific subset of the overall query result, respecting the order of the records. The `foreign_table` parameter can be used to limit the range on a foreign table instead of the parent table."
  },
  {
    "chunk_id": "ab577b8a-9e55-4dce-9f4f-0aea07792641",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `select().limit(1).single()` method in Supabase allows retrieving a single row of data from a table, returning the data as a single object instead of an array. This is useful when you only need to retrieve one row of data, as it simplifies the response and makes it easier to work with."
  },
  {
    "chunk_id": "8507a2eb-11cf-41a9-a990-1e49c9318c7d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve zero or one row of data using the Supabase library's `maybe_single()` method. This method returns the data as a single object instead of an array, simplifying the handling of cases where there is either zero or one matching row. The example provided demonstrates querying the \"countries\" table and retrieving the row where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "4c1ac3f9-5484-46f6-950b-0b5ff36c2667",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides information on the 'Retrieve as a CSV' feature, which allows users to return data from a Supabase table as a CSV string. This is demonstrated with an example code snippet that selects all columns from the 'countries' table and executes the CSV retrieval. The summary highlights the key functionality and use case of this feature."
  },
  {
    "chunk_id": "594485ca-1564-41e2-9c18-5638ca395ae6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and runtime analysis. While `explain()` is not enabled by default due to potential security risks, it can be a valuable tool for debugging slow queries, especially in a testing environment. The method supports various parameters to control the output format and level of detail."
  },
  {
    "chunk_id": "4da07f11-d59b-4b65-b089-03314d873ead",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To create a new user in Supabase, the `sign_up()` function is used, which returns both a `user` and a `session` object if email confirmation is disabled, or just a `user` object if it is enabled. The email confirmation setting and redirect URLs can be configured in the Supabase dashboard. Attempting to sign up an existing confirmed user will return either an obfuscated user object or an error message, depending on the confirmation settings."
  },
  {
    "chunk_id": "583ce8c3-b5b8-4c50-83a2-33debe653530",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe API method `supabase.auth.sign_in_anonymously()` returns an anonymous user. It is recommended to set up a CAPTCHA to prevent abuse, which can be passed in the `options` parameter. The response object contains the details of the anonymous user created."
  },
  {
    "chunk_id": "c74d39f2-d647-48cd-8f86-1cce2d31db8d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides code examples for signing in with email and password, and details the required `credentialsRequiredSignInWithPasswordCredentials` parameter."
  },
  {
    "chunk_id": "16dac77c-3ab5-4350-9c94-1652300eb2cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in with an OIDC ID token using the Supabase authentication API. It provides an example of the `sign_in_with_id_token()` function, which takes a provider and ID token as parameters. This functionality allows users to authenticate with the application using their identity provider's ID token, which can be useful for integrating with external authentication systems."
  },
  {
    "chunk_id": "55a36baa-db40-4d6a-8781-2292dc9af912",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to sign in a user through One-Time Password (OTP) using the Supabase authentication API. It supports signing in with either an email or phone number, and can optionally create a new user if the user doesn't exist. The OTP can be sent as either a magic link or a one-time code, and the destination URL for the magic link can be configured. The documentation also provides code samples and details on configuring various options for the sign-in process."
  },
  {
    "chunk_id": "09a57d5a-7fa4-40fe-8be8-c2c5a8f934da",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes a method for signing in a user through OAuth, a third-party authentication mechanism supported by Supabase. It provides a code example demonstrating how to sign in using the GitHub provider, and mentions that Supabase supports various third-party providers that can be configured. The key technical points are the use of OAuth for authentication and the availability of different third-party providers that can be integrated."
  },
  {
    "chunk_id": "613fb6c4-2299-48d3-af1a-2f0c553c4154",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the provided CLI commands. You can then start the authentication flow by either specifying the user's email domain or using a provider ID, which allows for more customized authentication scenarios like mapping specific user email addresses or using company-specific authentication hints."
  },
  {
    "chunk_id": "76762ca1-15e9-42d5-9d02-8f829e92ebf7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called, which revokes the user's refresh token and deletes the JWT from the client-side, although the JWT may still be valid until it expires. By default, `sign_out()` signs out all other sessions the user is logged into globally. The method does not actually revoke the JWT, which remains valid until it expires."
  },
  {
    "chunk_id": "5f60c8d8-aea5-4522-9c7e-669f7eec1f9e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify a one-time password (OTP) sent via SMS or email for user authentication. The verification type (e.g., `email`, `phone_change`, `recovery`) should match the corresponding auth method used earlier. The `TokenHash` from the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "b540be4d-7797-43c8-aabe-c2a49231dffb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source on the server, as it could be tampered with by the sender. If verified user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "efcccc1f-ec32-4e05-9b50-5879d068c087",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.refresh_session()` returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from `get95session()`. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether the current one is expired or not."
  },
  {
    "chunk_id": "e48787ca-4c08-41be-81f0-2108270150e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to get the logged-in user with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "5b4d6bd6-65aa-4239-8525-b1f54c303a7a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe `set_session` method sets the current session data using an `access_token` and `refresh_token`. If the session is expired, it will be refreshed to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "87de14e9-d792-4667-8a24-d7dd49edabef",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "Supabase's Auth MFA section provides methods for implementing Multi-Factor Authentication (MFA), currently supporting time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, which eliminates the need for separate recovery codes and reduces the attack surface compared to a single backup TOTP factor."
  },
  {
    "chunk_id": "29b57478-36c6-4f8f-a24d-c6ff5a69d4b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `mfa.enroll()` function enrolls a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` can be used to create a challenge, which can be verified using `mfa.verify()` or created and verified in a single step with `mfa.challenge_and_verify()`."
  },
  {
    "chunk_id": "7b03f5a6-2921-42bb-afe6-5895e015de9b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` method can be used to initiate a challenge, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "9224a8dd-0c3a-4534-8ce8-fa0998451dc3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `create a challenge` endpoint. The summary then provides an example of how to verify a challenge, which involves passing the `factor_id`, `challenge_id`, and `code` parameters to the `supabase.auth.mfa.verify()` function."
  },
  {
    "chunk_id": "b3a63645-faac-471d-9504-43e10548007d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled authentication factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking the factor ID and a verification code as input parameters."
  },
  {
    "chunk_id": "3a8a005a-c477-4e1e-b04a-240e0c521ca0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: To unenroll a factor in Supabase authentication, you can use the `supabase.auth.mfa.unenroll()` function and pass the `factor_id` of the factor you want to unenroll. This allows users to remove multifactor authentication factors they no longer need or want to use."
  },
  {
    "chunk_id": "3884ffa0-cc50-47ea-8c80-8939c0b4f02d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism. In Supabase, AAL1 refers to a single factor of authentication (e.g., email and password), while AAL2 refers to a second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next level of authentication required, which is AAL2 if the user has a verified factor, or AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "bf399fb1-6141-45b1-8c9d-4302306e20e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Functions feature allows invoking custom server-side functions. To do so, the client must provide an Authorization header. The function can accept a request body, which Supabase will automatically serialize and attach the appropriate Content-Type header. Developers can also manually set the Content-Type header. An example is provided to demonstrate invoking the \"hello-world\" function with a request body."
  },
  {
    "chunk_id": "b9a5cf86-91e0-4c6c-b738-2cdb9492f7c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary of the given content is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can enable it by managing Realtime's replication. The documentation also covers subscribing to different types of Realtime events, such as broadcasts, presence changes, and database updates, providing example code for handling these events."
  },
  {
    "chunk_id": "b3a832ff-dd6d-4b5f-94e6-66860256cfbb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Supabase channel is recommended to maintain performance of the Realtime service and the database, as unused channels can degrade performance when many clients are subscribed. The `supabase.remove_channel(myChannel)` function can be used to remove a channel, which Supabase will automatically clean up 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "78a7f8c7-479c-4322-8985-0bf9535ba6ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels from the Realtime service and Postgres database can help maintain performance. Supabase automatically cleans up disconnected channels, but excessive subscriptions may cause degradation. The `supabase.remove_all_channels()` function allows developers to remove all subscribed channels to optimize their application's resource usage."
  },
  {
    "chunk_id": "d55956aa-8bf0-4c00-8884-fd8723d60dd2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The provided code snippet demonstrates how to retrieve all channels using the Supabase library. This functionality is useful for applications that need to display or manage a list of available channels, such as in a chat or messaging system."
  },
  {
    "chunk_id": "6e21978c-41e1-417f-a3ed-8c5f8f2f7c31",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to broadcast a message to all connected clients in a Supabase channel. It provides an example of sending a message with cursor position data via the WebSocket channel, demonstrating the use of the `channel.send_broadcast()` method to publish messages to all subscribed clients."
  },
  {
    "chunk_id": "e06b3708-c84d-48ed-9d99-5ca12cb37d56",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the required permissions are `insert` access to the `buckets` table and no permissions for the `objects` table. Refer to the Storage guide for details on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "4f56eca0-5e40-4f76-92f4-12e38497b746",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "1680573a-c879-4e49-a2a4-62efd489cfac",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets in Supabase Storage, the user requires `select` permissions on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "f8d19e40-499d-49ce-81aa-d8ee30fce594",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the required RLS policy permissions are `select` and `delete` on the `buckets` table, while no permissions are required on the `objects` table. Refer to the Supabase Storage guide for more details on access control. The code to delete a bucket is `supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "602543c4-c440-44e7-a435-d206e872c0ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and `select` and `delete` on the `objects` table. Refer to the Storage guide for information on access control. The `supabase.storage.empty_bucket()` function can be used to empty a bucket."
  },
  {
    "chunk_id": "ddad15af-59d8-4cef-bfe9-f8bf73d9227c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file using the Supabase storage API, the following key points are important:\n- The user requires `insert` permissions on the `objects` table, but no permissions on the `buckets` table.\n- The appropriate MIME type should be specified, especially for images and audio files. If not provided, the default is `text/html`.\n- Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file contents, the desired storage path, and the file options including the MIME type."
  },
  {
    "chunk_id": "93b40fc3-57c4-4d0b-8f15-1f711b10180d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required Supabase RLS policy permissions are: no permissions for the `buckets` table and `select` permissions for the `objects` table. The download process involves opening a destination file and using the `supabase.storage.from_('bucket_name').download(source)` method to write the downloaded content to the file."
  },
  {
    "chunk_id": "dde64665-3ba6-4e82-a272-3c851a31a8e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `select` permission is required on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "846a1e07-cb18-4bb6-b0e0-7cfb4dc0fc41",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which allows specifying cache control options and upsert behavior."
  },
  {
    "chunk_id": "0f458db7-f1bb-40d0-ba9b-7f26988c2695",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires \"update\" and \"select\" permissions on the \"objects\" table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` function call. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "31901a6f-bcd9-44a0-b592-259d07c531a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files from a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The process involves using the `supabase.storage.from_('bucket_name').remove('file_name')` function, as demonstrated in the example code."
  },
  {
    "chunk_id": "9edd7fee-b8f4-4fd1-a6fb-e7e66a25c812",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required RLS policy permissions are: no permissions for the `buckets` table, and `select` permissions for the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, which allows controlled access to a specific file for a limited duration."
  },
  {
    "chunk_id": "05689f07-9786-40b0-80c1-649599505a82",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public, either through the updateBucket() method or the Supabase dashboard. No specific permissions are required in the buckets or objects tables. The public URL can be retrieved using the get_public_url() method, passing the file path as the argument."
  },
  {
    "chunk_id": "b9c9d391-6dc4-4a0a-8d27-16b61729adf6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functionalities to interact with a Postgres database, including listening to database changes, invoking Deno Edge Functions, building login and user management features, and managing large files. It serves as a reference for all available objects and methods in the Supabase Python library."
  },
  {
    "chunk_id": "c72d8521-c2bb-439d-9308-1135d0258224",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The provided content describes how to install the supabase-py library using PyPI, the Python package index. The installation can be done via the terminal using the pip package manager, either directly or through a Conda environment. This allows users to easily set up the library for their Python projects version 3.7 and above."
  },
  {
    "chunk_id": "9a31cc19-a48d-4e0e-9afa-c1562e159101",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and API key supplied when creating a new Supabase project. The client can be further configured with optional parameters to customize its behavior, such as the timeout option."
  },
  {
    "chunk_id": "cda03833-a675-48a6-8cca-5925cbeba72c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` keyword should be avoided as a column name. The `select()` function accepts optional parameters for specifying columns and count methods."
  },
  {
    "chunk_id": "97b6f93a-88ca-4fef-a9cf-e37df6a772ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section provides details on the parameters and usage of the `insert()` method in the Supabase library. It allows inserting a single row or multiple rows of data into a table, with options to specify the count method, return method, and handling of missing fields. The example demonstrates inserting a single row of data into the \"countries\" table."
  },
  {
    "chunk_id": "ad7be0d4-e841-4943-a88d-2c308c9e2c0f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library allows you to update data in a table. It should be used in combination with filters to target the specific row(s) you want to update. The `update()` method takes a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted. An optional `countOptional` parameter can be used to get the count of rows updated."
  },
  {
    "chunk_id": "7cae9373-251b-4320-aabb-3829df3f4de3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe upsert operation in the Supabase library allows inserting or updating data in a table, with the requirement that the primary keys must be included in the `values` dictionary. The operation supports various parameters such as `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null` to customize the behavior."
  },
  {
    "chunk_id": "66a86a2a-bd94-4d60-8639-c0a3f9fe7d0c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data, the `delete()` method must be combined with filters to target specific items. When using `delete()` with row-level security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple rows by specifying an array of values, which is useful for batch deletions. The `countOptionalCountMethod` and `returningOptionalReturnMethod` parameters can be used to control the response from the delete operation."
  },
  {
    "chunk_id": "0d004cc5-16ea-4f72-9434-0b05171b4aed",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis documentation explains how to call Postgres functions as Remote Procedure Calls (RPCs) from your application. Functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides details on the parameters for the `rpc()` function, including options for passing in parameters, getting the function return value, and controlling the row count algorithm."
  },
  {
    "chunk_id": "bba2be4e-1e0b-4482-b5f9-29594d39e85d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions, and can be used with various database operations like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other operations is important, as demonstrated in the correct and incorrect examples provided."
  },
  {
    "chunk_id": "3d4e9ce7-9651-47c0-8396-84a55cdf9a96",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The code snippet demonstrates how to filter a database table by checking if a column value is equal to a specified value. The `eq()` method is used to apply this filter, taking the column name and the desired value as parameters. This functionality is commonly used in data retrieval and analysis tasks."
  },
  {
    "chunk_id": "697bf349-f1c1-4438-af9f-05b1b832b600",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'neq()' function in Supabase is used to filter a table by a column that is not equal to a specified value. The 'columnRequiredstring' parameter specifies the column to filter on, and the 'valueRequiredany' parameter specifies the value to filter by. This allows retrieving data where a particular column does not match a given value."
  },
  {
    "chunk_id": "fc825d9a-48cb-47ba-8802-231ce1849873",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to filter a database table by a column value that is greater than a specified value. The `gt()` method is used with the `select()` function to achieve this, where `column` is the name of the column to filter on, and `value` is the comparison value. This functionality is useful for retrieving a subset of rows from a table based on a specific condition."
  },
  {
    "chunk_id": "75706262-1a26-4d3c-b415-97cc3aaee1f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for this section is: The `gte()` function in Supabase allows you to filter a table by a column that is greater than or equal to a specified value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is a common operation in data querying and analysis."
  },
  {
    "chunk_id": "e493348d-69d2-4aef-bbef-484febf3703c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe documentation describes how to filter a database table to include only rows where the specified column is less than the provided value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library, demonstrating the use of the `lt()` (less than) method to achieve this filtering."
  },
  {
    "chunk_id": "ec4420da-1d49-4f09-bac7-213e87b31690",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section describes the `lte()` function in Supabase, which allows you to filter a table by a column where the value is less than or equal to a specified value. The `lte()` function takes two parameters: the column name and the value to filter by. This can be useful for performing queries like `select()` where you only want to retrieve rows that match the specified condition."
  },
  {
    "chunk_id": "992528e4-c6a5-444e-8d33-9f9e947a3395",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is:\n\nThe \"Column matches a pattern\" feature allows filtering rows where a specified column matches a given pattern case-sensitively. The required parameters are the column name and the pattern to match, and it can be used in the `select()` function, as shown in the example."
  },
  {
    "chunk_id": "8e141a3e-6eac-4e41-b49d-ecb6e2bea5d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is:\n\nThe `ilike()` function in Supabase's `select()` method allows for case-insensitive pattern matching on a specified column. This can be used to filter rows where the column value matches the provided pattern, as shown in the example query that selects rows where the \"name\" column contains the string \"alba\"."
  },
  {
    "chunk_id": "3c460191-5cfc-43d5-9948-b900940c4f4f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for this chunk is:\n\nThe \"Column is a value\" feature allows filtering rows where a specified column matches a given value. The parameters include the column name and the value to match, which can be null, true, or false. This can be useful for checking for nullness or boolean values in the data."
  },
  {
    "chunk_id": "1fdfb53f-da6c-4604-907d-68cb5bed4103",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to filter a database table by checking if the values in a specific column are included in a provided array. This is demonstrated using the Supabase library's `select()` method and the `in_()` function to filter the \"countries\" table based on the \"name\" column."
  },
  {
    "chunk_id": "dcc7c26f-2304-4dd5-bc68-d777ebaea8ac",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the content provided is as follows:\n\nThe \"contains\" filter is only applicable to jsonb, array, and range columns. It matches rows where the specified column contains every element present in the provided value. The filter takes two parameters: the column to filter on, and the value (jsonb, array, or range) to filter with. This functionality is useful for querying data structures like tags, priorities, or other array/jsonb-based fields."
  },
  {
    "chunk_id": "2f58d6f4-3698-41cd-b125-9b08a4cf8c99",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the provided value. The parameters include the column name and the value to filter with. This feature is useful for performing complex queries on structured data types like arrays and JSON."
  },
  {
    "chunk_id": "c409dae6-19f5-4edd-9c40-b6091034ed80",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than a range' filter is used for range columns, matching only rows where every element in the specified column is greater than any element in the provided range. The filter takes two required parameters: the column to filter on and the range to filter with. This can be used in a `select()` query to filter the results accordingly."
  },
  {
    "chunk_id": "356136bc-21bf-4dc7-b575-c8951358d09c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The relevant parameters are the column name and the range to filter with. This functionality can be utilized in the Supabase .select() method to retrieve data that matches the specified range criteria."
  },
  {
    "chunk_id": "d6e0f0fc-bdee-416d-91ad-99133c894999",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" section describes a filter operation for range columns, where only rows with every element in the specified column being less than any element in the provided range are matched. The parameters include the column name and the range to filter with, and an example usage with the Supabase library's `range_lt()` method is provided."
  },
  {
    "chunk_id": "de30ddc6-27f1-42b1-ac40-afe931d3175a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is applicable to range columns, allowing you to filter rows where every element in the specified column is less than or equal to any element in the provided range. The parameters include the column to filter on and the range to filter with. This can be used in the `select()` method, as shown in the example, to retrieve data from a table based on the specified range criteria."
  },
  {
    "chunk_id": "c037c532-e335-49ea-ae56-fb94c4c97bbf",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The Mutually Exclusive to a Range feature in the documentation is used to filter rows in a range column, where the column value must be mutually exclusive to the provided range and there can be no element between the two ranges. This is achieved by using the `range_adjacent()` method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "2e70f1dc-0f30-42c7-b2ef-2ac78c4f47fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation discusses the \"With a common element\" filter, which is only applicable to array and range columns. This filter allows you to match rows where the column and the provided value have at least one element in common. The key parameters are the `column` to filter on and the `value` to filter with, which can be an iterable of any type."
  },
  {
    "chunk_id": "2f943147-f9ba-48af-9806-eb092c47778a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Match a string\" feature is used to filter rows in text or tsvector columns where the column value matches the provided query string. It supports various text search options such as basic normalization, full normalization, and websearch. This can be useful for implementing advanced full-text search functionality in a Postgres-based application."
  },
  {
    "chunk_id": "cf73a03b-1bc8-4181-b10b-e6d5db19ee3f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase client library allows you to filter a database table by matching each column in the `query` object to its associated value. This is a shorthand way of chaining multiple `.eq()` calls, making the filtering process more concise. The `match()` method takes a `queryRequired` object as its parameter, where the keys represent the column names and the values represent the desired filter values."
  },
  {
    "chunk_id": "a7b68e01-7f27-4cb4-8fda-718d9b91ec93",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `not_` operator in PostgREST filters to match rows that do not satisfy the filter criteria. It demonstrates how to use the `not_.in_()` and `not_.contains()` functions to filter out rows based on values in a column or in an array column, respectively. It also provides an example of using `not_.is_()` in a `select()` query to exclude rows where the 'name' column is null."
  },
  {
    "chunk_id": "f4b8f6ae-8a7f-48cb-b6a7-a15a4dafad88",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the provided code expects the use of raw PostgREST syntax for filter names and values. This includes using parentheses for the 'in' filter, curly braces for array values, and 'cs' and 'cd' for the 'contains()' and 'containedBy()' operators, respectively. The function also supports filtering on referenced tables using the 'reference95table' parameter."
  },
  {
    "chunk_id": "f4b027e8-db47-4afd-9dce-97957f2a0aa7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the provided software documentation expects users to use the raw PostgREST syntax for the filter values. This includes using parentheses for the `in` filter and backslashes for array values in the `contains()` operator. The method takes three parameters: the column to filter on, the operator to use, and the value to filter with, all following the PostgREST syntax. An example is provided demonstrating the use of `filter()` on a foreign table to select specific countries based on their names."
  },
  {
    "chunk_id": "e07aa9f7-b673-45ac-bf57-243968c1139a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and are applicable to queries that return rows, such as `select()` or `rpc()` on functions that return a table response."
  },
  {
    "chunk_id": "eb0cb70c-d25b-475e-905d-de06c9f40a63",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` function in Supabase allows you to order the query results by a specified column. The main parameters are `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the name of a foreign table whose results should be ordered), and `nulls_first` (whether to show null values first). This function can be used in a `select()` query on a foreign table to order the returned data."
  },
  {
    "chunk_id": "a19c9da9-a15a-44c2-be5e-4893f9b1b989",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe documentation describes how to limit the number of rows returned by a database query using the `limit()` method in the Supabase library. The `sizeRequired` parameter specifies the maximum number of rows to return, and the `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. An example is provided demonstrating how to limit the response to 1 row when querying the \"countries\" table."
  },
  {
    "chunk_id": "d9411b11-e55d-4909-8023-f62375533f13",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in the documentation allows limiting the query result by specifying a starting offset (`from`) and an ending offset (`to`). This respects the query order, and if there is no order clause, the range behavior may be unexpected. The `from` and `to` values are 0-based and inclusive, meaning the range `(1, 3)` will return the second, third, and fourth rows of the query. An optional `foreign_table` parameter can be used to limit the rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "616d78e1-2c60-4af1-a789-c5bb6cf25cb1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to retrieve a single row of data from the \"countries\" table using the Supabase library. The `select()` method is used to specify the desired column (\"name\"), `limit(1)` to return a single row, and `single()` to return the data as a single object instead of an array."
  },
  {
    "chunk_id": "b587de1a-3ed5-4902-aca5-a16b84eaa77e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a method to retrieve a single row of data from a database table, using the `maybe_single()` function in the Supabase library. This is useful when you expect to retrieve either zero or one row of data, as it simplifies the response handling compared to retrieving an array of objects."
  },
  {
    "chunk_id": "58f88c04-f1d8-4ebf-9e82-e2c8880b9658",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The 'Retrieve as a CSV' section describes how to return data from a Supabase table as a CSV string using the `csv()` method. This allows the data to be easily exported and shared in a comma-separated format, which is useful for further processing or integration with other systems."
  },
  {
    "chunk_id": "bd788af4-ec32-4f66-bc96-1ddf2275011f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. While `explain()` is not enabled by default due to security concerns, it can be useful for debugging slow queries, but should be used with caution in production environments."
  },
  {
    "chunk_id": "99fdbbb3-31a0-4f95-957c-3e79912f3a5f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the project's auth provider configuration determines whether a user needs to verify their email before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. The default redirect URL after email confirmation can be modified in the project's URL configuration. For existing confirmed users, signing up again will return an obfuscated user object if both \"Confirm email\" and \"Confirm phone\" are enabled, or a \"User already registered\" error if either is disabled."
  },
  {
    "chunk_id": "f6d970e8-92a9-40be-a335-36328767a1dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to create an anonymous user in the software system. It recommends setting up a captcha to prevent abuse, and provides a code example for signing in an anonymous user while passing a captcha token in the options parameter. The anonymous user creation is useful for scenarios where user authentication is required but a full user account is not necessary."
  },
  {
    "chunk_id": "02a79c5e-6ddb-4d3a-b8f6-cf9de415b282",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides sample code for signing in with email and password, and outlines the required parameters for the sign-in operation."
  },
  {
    "chunk_id": "68226d18-05ed-4110-a1ff-863d36e14094",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Sign in with ID Token\" functionality, which allows users to authenticate by providing an OIDC ID token. This feature requires the authentication provider to be enabled and configured. The provided code example demonstrates how to use the `supabase.auth.sign_in_with_id_token()` method to sign in with an ID token, typically obtained from a third-party identity provider like Google."
  },
  {
    "chunk_id": "b75951ba-238e-4b82-8df9-56f8895013c6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP method allows users to authenticate without a password, by sending a one-time code to their email or phone number. The `sign_in_with_otp()` function can be used to handle this flow, which will sign up new users if they don't already exist. Developers can configure the OTP delivery method (magic link or OTP) and restrict user creation if desired. The magic link's destination URL is determined by the `SITE_URL` setting, and additional redirect URLs can be added to the project."
  },
  {
    "chunk_id": "a1c15895-cdb1-4f1a-be8d-f571829cb110",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, which is a method for signing in using a third-party provider. Supabase supports various third-party providers for this purpose. The key technical point is the use of the `supabase.auth.sign_in_with_oauth()` function, which takes a provider (e.g., 'github') as a parameter and handles the OAuth sign-in process."
  },
  {
    "chunk_id": "074d6b56-517a-4ca8-8550-2ebfc09750ca",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using CLI commands. You can then use either the `domain` property to start a sign-in flow based on the associated email domain, or the `provider_id` property to use a different way to identify the identity provider, such as mapping specific user email addresses or using company-specific hints. The `sign_in_with_sso()` method is used to initiate the SSO sign-in process."
  },
  {
    "chunk_id": "f74a6f5b-e6b7-43c6-84ec-275b6b4110d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be used after the user is signed in. While this revokes the refresh token and removes the JWT from the client-side, the access token JWT remains valid until it expires, as Supabase Auth uses JWTs for authentication. By default, `sign_out()` signs out all other sessions the user is logged into."
  },
  {
    "chunk_id": "b81ca2d6-06f1-44a3-9adb-0a995acd4878",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for various authentication types, including SMS, email, and password changes. The verification type should be determined based on the corresponding auth method called before `verify_otp`. The `TokenHash` contained in the email templates can be used to sign in, and it can be used with the PKCE flow for server-side auth."
  },
  {
    "chunk_id": "fe849314-c979-4b39-b697-ab2b1f9d9399",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the current in-memory session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it can be tampered with by the sender. If verified user data is required, the `get_user` method should be called instead. Additionally, if the session has an expired access token, this method will use the refresh token to get a new session."
  },
  {
    "chunk_id": "2eedb0ce-0677-4b91-9c7a-d01b57f1da09",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method returns a new session regardless of the expiry status of the current session. It takes an optional refresh token, and if none is provided, it will attempt to retrieve it from the current session. If the refresh token is invalid, an error will be thrown. This method can be used to refresh the session whether it has expired or not."
  },
  {
    "chunk_id": "81e4da10-1be4-4ecc-8eeb-039f570c930e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. This method can be called with an optional access token JWT, or it will use the JWT from the current session if none is provided."
  },
  {
    "chunk_id": "fb00b06b-5c36-4d7c-add1-47227984f8b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the current session's access and refresh tokens, automatically refreshing the session if it has expired. If the tokens are invalid, an error is thrown. Upon successful session set, a `SIGNED_IN` event is emitted. This method is crucial for maintaining a valid session and user authentication state in the application."
  },
  {
    "chunk_id": "d5f044dc-3094-449f-b44e-d2ec2f815f14",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers multi-factor authentication (MFA) methods supported by the Supabase platform, specifically focusing on time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to a limit of 10, which provides a recovery mechanism without the need for separate recovery codes. This approach reduces the attack surface and simplifies user management compared to relying solely on recovery codes."
  },
  {
    "chunk_id": "4c278ab9-04a5-425b-82f2-fe6693872096",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` can be used to create a challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` methods. To create a challenge, see the `mfa.challenge()` method."
  },
  {
    "chunk_id": "0a88cc21-39c3-4df5-8e43-cb20926c84fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` method. The code example demonstrates how to create a challenge for a specific factor using the `supabase.auth.mfa.challenge()` method, where the `factor_id` parameter is provided."
  },
  {
    "chunk_id": "04eb7d08-3b05-49f1-8852-f76a8fdb8d8c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the provided `auth.mfa.create` function. The `auth.mfa.verify` function can then be used to verify a challenge by providing the `factor_id`, `challenge_id`, and the `code` received from the user."
  },
  {
    "chunk_id": "d35676f0-94e8-49d1-82b7-e21562e9eede",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor using a specific `factor_id` and `code`."
  },
  {
    "chunk_id": "f3edaca9-5977-4dcf-ba38-d05ca8bf24a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, the `supabase.auth.mfa.unenroll()` function is used, passing the `factor_id` as a parameter. This allows the user to remove a specific multi-factor authentication factor from their account, improving security and control over their authentication methods."
  },
  {
    "chunk_id": "fd806157-ad89-4a9f-ae9e-1ffb09876139",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the level of authentication the user can achieve, with AAL2 being the higher level."
  },
  {
    "chunk_id": "848a1860-52d9-481d-9d0a-12a15ef27b57",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function, which requires an Authorization header. The function automatically attaches the Content-Type header for common data types, but the behavior can be overridden by passing a custom Content-Type header. The function can be invoked with a request body, and the response can be handled for any errors that may occur."
  },
  {
    "chunk_id": "88a9d115-4717-44b7-8861-f63d69431c65",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary covers the following key points:\n\n1. By default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. This can be enabled by managing Realtime's replication.\n2. Clients can receive the \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL.\n3. Row-level security is not applied to delete statements, and when RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n4. The code example demonstrates how to subscribe to the \"room1\" channel, send a broadcast message, and handle received broadcast messages."
  },
  {
    "chunk_id": "8a98d213-380a-4c12-9e53-45afded37e76",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain performance of the Realtime service and the database. Removing unused channels can prevent degradation caused by too many simultaneous subscriptions. The `supabase.remove_channel()` function can be used to unsubscribe from a specific channel."
  },
  {
    "chunk_id": "3aac4911-3aee-4377-90f1-c00bff43a01d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically cleans up channels 30 seconds after a client is disconnected, but leaving unused channels can degrade performance as more clients are subscribed. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "cb8fd445-02f5-4628-8f3a-4297306ccf60",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the \"Retrieve all channels\" section is:\n\nThis code snippet retrieves all channels using the `supabase.get_channels()` function. This is a common operation to fetch all available channels from the Supabase database, which can be useful for displaying a list of channels or filtering content based on channel information."
  },
  {
    "chunk_id": "ce8f0c8d-196a-47fb-97ea-479c6d3b6140",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe provided code snippet demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It shows an example of subscribing to a channel, and then sending a broadcast message with random cursor position data to all clients connected to the 'room1' channel."
  },
  {
    "chunk_id": "c87ae409-8e48-4827-afc1-be8ecb6be734",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` permission on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for details on how access control works. The code to create a bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "b2b8f9b6-e868-49d9-b696-c66a34144559",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: \"select\" on the \"buckets\" table, and no permissions on the \"objects\" table. Refer to the Storage guide for details on how access control works. The code to get a bucket is `_10 res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "d32c6e11-d0d7-489b-b824-066a1da5a71d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for details on access control. The code to list buckets is `supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "8b56eb58-eb20-4c7b-8af5-74b699eef454",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. Refer to the Supabase Storage security guide for more information on access control. The code to delete a bucket is `supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "a98b41ee-4fb0-423d-871c-c302d3bab313",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for details on access control. The API call to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "88ac14c0-a45c-4d41-a47a-261963dad9d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The MIME type should be specified for media files, or it defaults to `text/html`. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired path on Supabase Storage, along with the appropriate `file_options` (e.g., `{\"content-type\": \"audio/mpeg\"}` for audio files)."
  },
  {
    "chunk_id": "8924ad09-be5e-4da6-bda6-45096aa35406",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are `select` access on the `objects` table. The download process involves using the Supabase storage client to fetch the file from the specified bucket and write it to a local destination."
  },
  {
    "chunk_id": "07c4b62b-4319-4f94-9e67-e16152ce584d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the user requires `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "f505f4e6-d669-4b1a-a1c2-5b902ca86db0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the 'supabase.storage.from_(\"bucket_name\").update()' method, which takes the file, path, and optional file options such as cache control and upsert settings."
  },
  {
    "chunk_id": "96ad0c75-77c0-45f5-956d-5f7284e0c305",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires `update` and `select` permissions on the `objects` table. The file can be moved using the `supabase.storage.from_('bucket_name').move()` function, providing the source and destination file paths. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "d2e349ea-793e-4d9d-bea1-24f3a3958b7a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase bucket, the required RLS policy permissions are 'delete' and 'select' on the 'objects' table. The Storage guide provides details on how access control works for these operations. The code snippet shows an example of removing the 'test.jpg' file from the 'bucket_name' bucket."
  },
  {
    "chunk_id": "66effe8e-1540-417c-bbf9-d7243407861b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are: no permissions for the `buckets` table, and `select` permission for the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, and provides time-limited access to the specified file stored in the Supabase storage bucket."
  },
  {
    "chunk_id": "c1e13991-ab5b-4789-a63e-6677ca53dcd7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve the public URL of an asset stored in a Supabase Storage bucket, the bucket must be set to public. The `buckets` and `objects` tables do not require any permissions. The public URL can be obtained using the `get_public_url()` method of the `supabase.storage.from_()` API."
  },
  {
    "chunk_id": "3a875cde-aa5b-4e87-84e5-a443e5ead151",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functionalities to interact with a Supabase-backed Postgres database, including querying the database, listening to changes, invoking Deno Edge Functions, implementing login and user management, and managing large files. This library serves as a powerful interface for developers to build applications leveraging the Supabase platform."
  },
  {
    "chunk_id": "9c24c66c-fee8-48c0-b030-8dbd8ec15f42",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase Python library (supabase-py) using pip, the standard Python package installer. The library supports Python 3.7 and later versions, and can be installed by running the command `pip install supabase` in the terminal or command prompt."
  },
  {
    "chunk_id": "0fa07f7b-d726-47d7-a6d4-9f8bfd32a106",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary way to interact with the Supabase ecosystem. It can be initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters, as well as optional client options to configure the authentication behavior. This client provides access to the full range of Supabase functionality, making it the essential starting point for working with the Supabase platform."
  },
  {
    "chunk_id": "6983890a-9c58-4f03-83ae-6d3818596ceb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content discusses the Fetch data functionality in Supabase. Key points include: 1) Supabase projects return a maximum of 1,000 rows by default, which can be changed in the API settings, and the `range()` query can be used for pagination; 2) the `select()` function can be combined with filters and modifiers; 3) `apikey` is a reserved keyword and should be avoided as a column name when using the Supabase Platform."
  },
  {
    "chunk_id": "f4f57854-a80c-4bfe-b29d-1174eefe4264",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Insert data\" section provides details on the parameters required for inserting data into a Supabase table, including the ability to insert a single row or multiple rows, as well as options for handling missing fields and controlling the response format. The example code demonstrates how to insert a single row into the \"countries\" table."
  },
  {
    "chunk_id": "2d93241c-cb31-4ef1-8fab-eea62f14ea4d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided documentation is used to update data in a database table. It must be combined with filters to target the specific item(s) to be updated. The method accepts either a dictionary for a single row update or a list for updating multiple rows. The `count` parameter can be used to get the count of rows returned by the update operation."
  },
  {
    "chunk_id": "3fb1e884-9c13-4461-94b5-fb096f2087f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Upsert data functionality allows you to insert new data or update existing data in a table based on primary keys. The primary keys must be included in the `values` dict to use upsert. The function supports various parameters such as `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null` to customize the behavior of the upsert operation."
  },
  {
    "chunk_id": "b9394f45-88c6-48ab-abb5-0a23fb600f1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation discusses the `delete()` function in Supabase, which should always be used with filters to target specific items for deletion. When using `delete()` with RLS enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows with a single query, and the `countOptionalCountMethod` and `returningOptionalReturnMethod` parameters can be used to customize the delete operation."
  },
  {
    "chunk_id": "88b8edc5-bb61-42ec-8d3b-e313fbc4cda3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. It provides details on the function parameters, including the stored procedure call, optional parameters, and count algorithms for set-returning functions. The example demonstrates how to call a Postgres function without arguments using the Supabase library."
  },
  {
    "chunk_id": "332e9471-2e4f-4cd2-b2f1-90c0dd0aa933",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow users to return only rows from a database that match certain conditions, which can be applied to select, update, upsert, and delete queries. Filters can also be used on Postgres functions that return a table response. The order of applying filters and other query methods is important, as demonstrated by the code examples provided."
  },
  {
    "chunk_id": "4b11c06c-6cf4-42e5-9acb-47f75293fcb1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThis documentation describes how to filter a database table by a specific column value. The `eq()` method is used to match only the rows where the given `column` is equal to the specified `value`. This is demonstrated with an example of selecting all rows from the \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "9dff3235-77c5-4847-bb62-b008667939d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided documentation describes how to filter a table in Supabase by selecting rows where a specified column is not equal to a given value. The `neq()` method is used to perform this operation, with the column name and comparison value passed as parameters."
  },
  {
    "chunk_id": "a798a1ce-55da-49aa-9509-6102db89d8f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provided allows users to filter a database table by selecting rows where a specified column has a value greater than a provided value. The key parameters are the column to filter on and the value to filter by, which can be used with the `select()` and `gt()` methods in a Supabase query."
  },
  {
    "chunk_id": "db930efa-b7c1-493f-807a-d5bedc9e1167",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `gte()` function in Supabase allows you to filter a database table by a column value that is greater than or equal to a specified value. The `columnRequiredstring` parameter specifies the column to filter on, and the `valueRequiredany` parameter specifies the value to filter by. This is a common operation in database querying and can be useful for tasks like retrieving records that meet a certain criteria."
  },
  {
    "chunk_id": "b9546bc1-1fb5-4e49-87a0-8a0e5ec769b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a database query operation that filters rows where the value in a specified column is less than a given value. The key parameters are the column to filter on and the value to use for the comparison. This functionality is demonstrated using the `lt()` method in the Supabase library, which can be chained with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "c17c286c-a1e2-4bd2-aee0-f8392d7f136c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for this section is:\n\nThe `lte()` function in Supabase allows you to filter a database table by a column value that is less than or equal to a specified `value`. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This query functionality is useful for quickly retrieving a subset of rows based on a numerical or date-based column condition."
  },
  {
    "chunk_id": "4207f4b0-05b9-4d21-86b0-fa8b4119671a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Column matches a pattern\" feature allows filtering a table's rows based on a specified column matching a given pattern, case-sensitively. The required parameters are the column name and the pattern to match, and the feature can be used in conjunction with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "1fd2d147-069a-4ca4-b1f6-75a334732ab9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe function `ilike()` is used to perform a case-insensitive pattern match on the specified column. The `columnRequired` parameter specifies the name of the column to apply the filter on, and the `patternRequired` parameter specifies the pattern to match. This functionality can be used in a `select()` query to filter the data based on a case-insensitive pattern match."
  },
  {
    "chunk_id": "c2bebc9e-2aa3-4e54-9900-7af3ebd7c450",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` function allows filtering a table by checking if a column's value matches a specified value, including checking for null values. The function takes two parameters: the column name and the value to match, which can be a boolean or null. This is a useful tool for data exploration and filtering in a database."
  },
  {
    "chunk_id": "2ef9f8e5-3287-4728-b798-6bdf4e189b42",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the `in_()` function in the Supabase library, which allows filtering rows where a specified column has a value included in a provided array. The `columnRequired` and `valuesRequired` parameters define the column to filter on and the values to filter by, respectively. This functionality is demonstrated in an example query that selects all rows from the \"countries\" table where the \"name\" column is one of \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "7c9249f8-bd3b-4e12-87ca-733d92a5f4ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `contains()` function in Supabase, which allows filtering rows where a column contains every element in a provided value. This is specifically relevant for `jsonb`, `array`, and `range` columns. The function takes two parameters: the column to filter on and the value to filter with, which must be a `jsonb`, `array`, or `range` type."
  },
  {
    "chunk_id": "1e9b8985-d8de-47bd-886f-d39fd59bbc2c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes the 'contained by value' operator, which is applicable to jsonb, array, and range columns. This operator matches rows where every element in the specified column is contained within the provided value. The summary includes the parameters required for this operator, as well as an example of its usage in a Supabase query to filter a 'classes' table on the 'days' column."
  },
  {
    "chunk_id": "fb3dfda4-36a9-4e7b-9726-cc17fc6fb159",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used with range columns to match rows where every element in the column is greater than any element in the specified range. The relevant parameters are the column name and the range to filter with, which can be used in a `select()` query to filter the data accordingly."
  },
  {
    "chunk_id": "559a41eb-9783-45d4-ab8c-143db6340789",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The \"greater than or equal to a range\" filter is used for range columns in a database table. It matches rows where every element in the specified column is either contained in the given range or greater than any element in the range. The parameters required are the column name and the range to filter with."
  },
  {
    "chunk_id": "b8b7d118-7a19-409f-97e0-eddb80401bfa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the column is less than any element in the provided range. The parameters include the column name and an array of range values. This can be used in a Supabase query to filter the \"during\" column of the \"reservations\" table to only include rows where the values are less than the given range."
  },
  {
    "chunk_id": "4fe896d5-bac9-4c30-ae9f-1c0c5db46370",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers the \"Less than or equal to a range\" functionality in the software documentation. It states that this feature is only relevant for range columns and allows matching rows where every element in the specified column is less than any element in the provided range. The key parameters are the column to filter on and the range to filter with, which can be used in a `range_lte()` query to retrieve the relevant data."
  },
  {
    "chunk_id": "de568543-7236-4846-9581-fc2e30de2c76",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Mutually exclusive to a range\" feature is only applicable to range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The parameters include the column name and the range to filter with."
  },
  {
    "chunk_id": "85ab4537-2718-4668-80dd-87a04e14f6fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'With a common element' filter is applicable to array and range columns, allowing you to match rows where the 'column' and 'value' have an element in common. The 'columnRequired' parameter specifies the array or range column to filter on, while the 'valueRequired' parameter specifies the array or range value to filter with. This feature is demonstrated in the Supabase example, where the 'overlaps' function is used to filter the 'issues' table based on the 'tags' column."
  },
  {
    "chunk_id": "eaffcc96-e019-4ad5-ab07-41e6c63250b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Match a string\" feature is used to filter rows in text or tsvector columns where the column matches the given query string. It provides options for basic normalization, full normalization, and websearch, and can be used for Postgres full-text search. For example, the provided code snippet demonstrates how to perform a text search on the \"content\" column with the query \"'eggs' & 'ham'\", using the \"english\" configuration."
  },
  {
    "chunk_id": "af532edd-77e9-4fc8-932b-0dcf42d7e9a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided example allows you to filter a database table by matching each column in the `query` object to its associated value. This is a concise way to perform multiple equality checks (`eq()`) in a single operation. The `match()` method takes a dictionary `queryRequired` as a parameter, where the column names are the keys and their filter values are the values."
  },
  {
    "chunk_id": "c9ec103a-1b29-4444-9b7e-5559c95d4376",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to use the `not_` operator in PostgREST to select rows that do not match the given filter. This includes examples for filtering based on the `in` operation and array values. It also shows how to use the `not_.is_` operator with Supabase to select rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "3bb02ee1-7333-4dc2-b1eb-3042862c8642",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `or95()` function in the documentation allows you to use the raw PostgREST syntax to apply multiple filters, including `in`, `contains`, and `containedBy` filters. The `filtersRequired` parameter takes the filter expression, and the optional `reference95table` parameter can be used to filter on referenced tables instead of the parent table. The `or()` function can be used in conjunction with `and()` to build complex filter expressions."
  },
  {
    "chunk_id": "2de5dffd-5f5e-478d-aedc-be4545b76cd3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe filter() method in the provided example expects the use of raw PostgREST syntax for the filter values. It supports various filtering operations, such as 'in' for filtering on a list of values, and 'cs' for checking if an array column contains specific elements. The examples demonstrate how to use the filter() method with a foreign table, specifying the column, operator, and value to filter on."
  },
  {
    "chunk_id": "8c7c49a6-5e3d-4e49-84ed-f6941b90e173",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate on the row level. Modifiers must be specified after filters and are applicable to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "ef471334-3272-4bc8-9925-4ac7fbc664d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to order the results of a query by a specified column. The key parameters are `column` (the column to order by), `desc` (whether to sort in descending order), `foreign_table` (the name of the foreign table whose results are to be ordered), and `nulls_first` (to order by showing nulls first). An example is provided demonstrating how to use the `.order()` method to sort the results of a `select()` query on a foreign table."
  },
  {
    "chunk_id": "9430bebb-4133-4b78-b296-9e5a35a2aca2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe \"Limit the number of rows returned\" feature allows you to specify the maximum number of rows to be returned in a database query. This is done by using the `limit()` function, which takes a `number` parameter to set the maximum number of rows. Additionally, the `foreign95table` parameter can be used to limit the rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "fbf3e6c2-d18c-44b0-927e-146cf1cb1073",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` method allows limiting the query result by specifying a starting offset (`from`) and an ending offset (`from + to`). This respects the query order, and if no order clause is present, the range behavior could be unexpected. The `from` and `to` values are 0-based and inclusive, meaning the range `(1, 3)` will return the second, third, and fourth rows of the query. Additionally, the `foreign_table` parameter can be used to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "16700db1-2dc2-44af-acd0-fcf48cc26c40",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe code snippet demonstrates how to retrieve a single row of data from a \"countries\" table in Supabase using the `select()`, `limit(1)`, and `single()` methods. This allows the response to be returned as a single object instead of an array of objects, simplifying data access and processing."
  },
  {
    "chunk_id": "5e1ab752-a3fb-4ca6-8947-4a8ee3d1bc1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve zero or one row of data from a table using the `maybe_single()` method in the Supabase client. This is useful when you expect at most one row to match the query, as it returns the data as a single object instead of an array of objects, simplifying the handling of the response."
  },
  {
    "chunk_id": "0ff577e3-abca-4eb3-9f28-c0ef6bf95e0a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the \"Retrieve as a CSV\" functionality in the software documentation. It explains that this feature allows users to return data from a table as a string in CSV format, which can be useful for further data processing and analysis. The summary also includes an example code snippet demonstrating how to use this feature."
  },
  {
    "chunk_id": "6b111a3d-ea47-4ebd-b7d5-37977c959050",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to get the execution plan of a query, which is useful for debugging slow queries. It can be enabled for production use by implementing additional security measures, such as a `pre-request` function. The `explain()` method supports various parameters to configure the output, including options to include information on WAL record generation, configuration parameters, buffer usage, and actual run time."
  },
  {
    "chunk_id": "56c6fc1b-7ac5-4d83-96fe-fd8130cd99c8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, users must verify their email address before logging in. Disabling the \"Confirm email\" setting in the project dashboard determines whether a user and session are returned upon sign-up, or if only a user is returned. The redirect URL upon email confirmation can also be modified in the project settings."
  },
  {
    "chunk_id": "e52335d1-b65a-4689-86ce-6e5e2e1dc691",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in anonymously using the `supabase.auth.sign_in_anonymously()` method, passing in a captcha token as an option. The anonymous user can have custom metadata associated with their account."
  },
  {
    "chunk_id": "2097d86d-af86-48fb-8a7f-07c443c131b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of signing in an existing user using either an email and password or a phone number and password. It provides code examples for signing in with email and password, and specifies the required parameters, including the `credentialsRequiredSignInWithPasswordCredentials` parameter."
  },
  {
    "chunk_id": "5ee03ef3-9d34-4786-bc74-0ab3104e4ad4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers signing in with an OIDC ID token, which allows users to authenticate using an ID token from an enabled and configured authentication provider. The key steps involve passing the provider name and the ID token to the `supabase.auth.sign_in_with_id_token()` function, which returns the authenticated user's response."
  },
  {
    "chunk_id": "09b7c57b-819a-4887-ae1b-039e9bde1d1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_with_otp()` function allows users to sign in without a password by sending a one-time password (OTP) to their email or phone number. This method can also be used to sign up new users. Developers can configure whether the user should receive a magic link or an OTP, and whether new users should be created automatically. The magic link's destination URL is determined by the `SITE_URL` configuration, and additional redirect URLs can be added to the project."
  },
  {
    "chunk_id": "d2199588-fe41-4f0b-8232-ca94295c1b2e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. The key steps involve calling the `supabase.auth.sign_in_with_oauth()` method and specifying the desired provider, such as GitHub. This approach allows users to authenticate with Supabase using their existing third-party credentials, simplifying the sign-in process."
  },
  {
    "chunk_id": "83818ae5-98a5-4d30-9688-391421269129",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, users must first establish a connection to an identity provider using CLI commands. The `domain` or `provider_id` property can be used to start the authentication flow, allowing for scenarios like mapping specific email addresses to an identity provider or using different hints to identify the appropriate provider."
  },
  {
    "chunk_id": "48a1d36a-c8fd-4a8a-a649-0caa87f7bffc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the refresh token and deletes the JWT from the client-side, though the access token JWT remains valid until it expires. Signing out using the global scope signs out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "b2c2b182-3bd6-4e0b-b46b-af82e544de11",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, including SMS, email, and account changes. The verification type should match the corresponding auth method used previously, and the `TokenHash` from the email templates can be used for server-side auth with the PKCE flow. The method takes in required parameters such as the email, token, and type, and returns a response."
  },
  {
    "chunk_id": "c749904a-51e7-447f-9a97-2a24fb41833a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with. If verified user data is required, the `get_user()` method should be used instead. Additionally, the method will automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "5b99588d-a900-4078-8500-fdcfe5ea7c33",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` returns a new session, regardless of the expiry status of the current session. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve it from the `get_session()` method. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session whether the current one is expired or not."
  },
  {
    "chunk_id": "66f047f1-0b04-4067-aecb-48f5cdd0e8fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis method retrieves the user object from the database rather than the local session, which is useful for verifying the user's authorization by validating their access token JWT on the server. The method takes an optional JWT parameter, and if none is provided, it uses the JWT from the current session."
  },
  {
    "chunk_id": "cb067abd-5570-4838-9a78-02b9afd286d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the current session data using an `access_token` and `refresh_token`. If successful, a `SIGNED_IN` event is emitted. This method automatically refreshes the session if the current one is expired, or throws an error if the tokens are invalid."
  },
  {
    "chunk_id": "ab7339c5-3cd5-4e12-bda1-42d8a6248a7b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers methods for Multi-Factor Authentication (MFA) in Supabase, with a focus on time-based one-time password (TOTP) as the second factor. Supabase supports enrolling multiple TOTP factors, up to 10, to provide users with a recovery option without the need for separate recovery codes. This approach reduces the attack surface and simplifies the user experience compared to managing recovery codes."
  },
  {
    "chunk_id": "83dcdd2e-cecb-4d9e-b7eb-c562365284b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `mfa.enroll()` function is used to enroll a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` can be used to create a challenge, which can be verified using `mfa.verify()` or created and verified in a single step with `mfa.challenge_and_verify()`."
  },
  {
    "chunk_id": "757b281b-641c-4c74-b95d-735771831dfd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `supabase.auth.mfa.challenge()` function is used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "c6df0503-5b3b-4b31-ae4b-ab69c5ac2579",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a previously created challenge, the `supabase.auth.mfa.verify()` method is used, providing the `factor_id`, `challenge_id`, and the `code` entered by the user. This allows the application to validate the challenge and authenticate the user's multi-factor authentication (MFA) process."
  },
  {
    "chunk_id": "af0522f8-d1d9-4f3e-ae0d-eee5f0c56868",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` methods in a single step, allowing the user to generate and validate a one-time code for the specified MFA factor."
  },
  {
    "chunk_id": "aac9acfa-54d0-410d-bab6-bb0eea7d5dcc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: This section describes how to unenroll a factor from Supabase authentication using the `supabase.auth.mfa.unenroll()` method, which takes the `factor_id` as an argument. Unenrolling a factor allows users to remove a specific multi-factor authentication method from their account."
  },
  {
    "chunk_id": "204f92fa-f1d6-4d4a-ac01-b2457900873f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism. In Supabase, `aal1` refers to having the first factor of authentication (e.g., email and password or OAuth sign-in), while `aal2` refers to the second factor (e.g., a time-based, one-time-password). The `next_level` field indicates the next level of authentication required, which is `aal2` if the user has a verified factor, or `aal1` otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to get the AAL details of a session."
  },
  {
    "chunk_id": "4d6bf3a9-73d3-4cd4-a2b7-b1aa7fc5c440",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "To invoke a Supabase Edge Function, you need to include an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type of the request body, but you can override this behavior by providing your own Content-Type header. You can pass custom headers and a request body when invoking the function, as shown in the example."
  },
  {
    "chunk_id": "04b7a702-7013-4d81-aeb1-34dedb17f2a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The code example demonstrates how to subscribe to a channel, send broadcast messages, and handle received broadcast events."
  },
  {
    "chunk_id": "31ba3e78-c203-49fb-beb3-7844cf07d045",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain project performance by reducing unused channels, which can cause degradation as more clients are simultaneously subscribed. The `supabase.remove_channel()` function can be used to remove a channel, and Supabase will automatically handle the cleanup 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "eeb44c74-8c87-4374-9291-33dc00ce7da3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused Realtime channels can improve project performance and reduce database load. The Supabase platform automatically cleans up disconnected channels after 30 seconds, but it's recommended to remove all channels manually using the `supabase.remove_all_channels()` method to maintain optimal service performance."
  },
  {
    "chunk_id": "ed15dea8-d574-4b63-9f95-051444f5b7bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to retrieve all channels using the Supabase library. This functionality allows developers to access and work with the full set of channels available in the application."
  },
  {
    "chunk_id": "33596ab0-5fcf-41c5-83cd-8b95989c0fb2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe code demonstrates how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and upon successful subscription, it sends a broadcast message containing randomly generated x and y coordinates."
  },
  {
    "chunk_id": "f3e02b58-1150-4a1e-b76f-4b8954fd6d75",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the user requires the `insert` permission on the `buckets` table. No permissions are needed on the `objects` table. Refer to the Storage guide for details on access control. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "097992bc-6e3a-4f7a-9364-5975a271d151",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the RLS policy permissions required are: `select` permissions on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more details on how access control works. The code to retrieve a bucket is `_10 res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "1aced42e-4be4-4fdf-8662-4419244b98b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. The Supabase Storage guide provides details on how access control works for these operations."
  },
  {
    "chunk_id": "9525df89-4845-4cf8-9087-53b39d2ea5c0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. Refer to the Storage guide for details on access control. The code to delete a bucket is `_10 res = supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "7422c46e-111a-4ed2-9c39-78a4b51400c8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. The Storage guide provides more information on how access control works for this operation."
  },
  {
    "chunk_id": "44e12794-caba-47e7-a864-2209cbb83559",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the required RLS policy permissions are: no permissions for the `buckets` table, but `insert` permissions for the `objects` table. The appropriate MIME type should be specified when uploading images or audio, otherwise it defaults to `text/html`. Files can be uploaded using the `supabase.storage.from_().upload()` method, passing the file content, storage path, and optional file options."
  },
  {
    "chunk_id": "ee623cf4-aa2d-44c8-a13b-fc797e39150f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires `select` permissions on the `objects` table. The code snippet demonstrates downloading a file from a Supabase storage bucket and saving it to a local destination file."
  },
  {
    "chunk_id": "1bcc4be3-0f5b-417b-a970-bd45140b20a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the user requires `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "ca041788-57d0-4424-b59a-1a472ca1e4d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in the Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file, path, and optional file options such as cache control and upsert. Refer to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "7a57167f-7a73-473c-a3cf-47c9021ed0cf",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are \"update\" and \"select\" on the \"objects\" table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` function. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "6a8ac177-9490-404d-814b-1d046443da50",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase bucket, the user requires 'delete' and 'select' permissions on the 'objects' table, but no permissions are needed on the 'buckets' table. The Storage guide provides details on how access control works for these operations."
  },
  {
    "chunk_id": "b0ffe59c-b48f-4d3d-8193-075725eadf45",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions must include `select`. The signed URL provides time-limited access to a file in the specified Supabase storage bucket, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "6744466c-5bb3-478f-bd7f-20e6aaf16749",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for a file in Supabase Storage, the bucket must be set to public either through the updateBucket() method or the Supabase dashboard. No table permissions are required for public access. The public URL can be accessed using the get_public_url() method, which takes the file path as a parameter."
  },
  {
    "chunk_id": "65e1b9d9-db5e-4a0e-93b2-15a3f49eef01",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python client library, supabase-py, allows developers to interact with their Supabase Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods for interacting with the Supabase platform from Python applications."
  },
  {
    "chunk_id": "3ad8b3fc-b656-4fc9-83a8-72a3d90f66af",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation outlines how to install the Supabase-py library, which can be done using the Python package manager pip for Python versions 3.7 and above. The installation command is provided, allowing users to quickly set up the library in their development environment."
  },
  {
    "chunk_id": "f5434063-79bf-48ee-9581-dcfb81f699b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and Key, and accepts optional client options to customize the authentication behavior. The client provides a convenient way to access all the functionality offered by Supabase, making it the entry point for developers working with the Supabase platform."
  },
  {
    "chunk_id": "884361a0-4f77-4d14-bc34-9e1f8f010b8b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects return a maximum of 1,000 rows by default, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, and the `apikey` keyword should be avoided as a column name. Key parameters include the columns to retrieve and the count method to use for the returned rows."
  },
  {
    "chunk_id": "66685c38-c1b6-44e6-bfe2-d11062a0f165",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Insert data\" section is as follows:\n\nThe 'insert' method in the Supabase client library allows you to insert data into a table. The method takes a dictionary or a list of dictionaries as the 'jsonRequired' parameter, representing the data to be inserted. Additional optional parameters include 'countOptional' to specify the property to use for the row count, 'returningOptional' to control the response format, and 'default95to95nullOptional' to set missing fields to null. The provided example demonstrates how to insert a single row into the 'countries' table."
  },
  {
    "chunk_id": "62db3ada-f28b-489c-8c85-da758204c196",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to modify existing data in a table. It must be combined with filters to target the specific item(s) to be updated. The `update()` method accepts a dictionary or a list of dictionaries as the data to be inserted, and an optional `count` parameter to retrieve the number of rows affected."
  },
  {
    "chunk_id": "9cec72b9-d1f6-4856-9879-d732221fb394",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Upsert data\" section is as follows:\n\nThe \"upsert\" operation allows inserting or updating data in a table, with primary keys included in the `values` dict. Key parameters include `jsonRequired` for the data to insert, `countOptional` for the row count, `returningOptional` for the response format, `ignore95duplicates` to handle duplicates, `on95conflict` to handle UNIQUE constraints, and `default95to95null` to set missing fields to null. Examples demonstrate upsert usage for a \"countries\" table."
  },
  {
    "chunk_id": "73fc6e03-8e7a-4483-8379-318f58e97381",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data, the `delete()` function must be combined with filters to target specific records. When using RLS, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple records at once by providing an array of values. The `countOptional` and `returningOptional` parameters can be used to control the count and return behavior of the delete operation."
  },
  {
    "chunk_id": "bcd15c90-5f3b-45c9-a6a1-6042d25846aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": ""
  },
  {
    "chunk_id": "a0fc61af-c8ba-469a-aaf6-34e92f2474a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase queries (select, update, upsert, delete) and Postgres function table responses. Filters can be chained together for complex conditional logic, and can be used to filter by values within JSON columns or across foreign tables."
  },
  {
    "chunk_id": "4285a22b-6d51-4e0d-b42b-3b5f45ba23d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to filter a database table by matching rows where a specified column is equal to a given value. The key parameters are the column name and the value to filter by. This functionality is demonstrated using the Supabase library's `select()` and `eq()` methods to retrieve rows from the \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "d9baa383-601e-49dc-b1a2-0ab031b907b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This describes a filter operation that matches rows where the value in the specified column is not equal to the provided value. The key parameters are the column to filter on and the value to filter by. This can be used with the select() function to retrieve rows that do not match the specified value."
  },
  {
    "chunk_id": "5ad79fdf-ee44-46a0-a8f7-2616b5c62274",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to select only rows where a specified column has a value greater than a given value. The key parameters are the column name and the comparison value. This functionality is demonstrated using the Supabase library's `gt()` method."
  },
  {
    "chunk_id": "4641e4f6-d76c-4a2b-be70-1effaf56d90b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThis section describes how to filter a database table by selecting only the rows where a specific column has a value greater than or equal to a specified value. The required parameters are the column name and the value to filter by. An example is provided using the Supabase library's `gte()` method to select rows where the \"id\" column is greater than or equal to 2."
  },
  {
    "chunk_id": "5e2c5f7f-5423-4e2f-b5c3-8dd24eb19171",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column has a value less than a given value. The key parameters are the column to filter on and the value to filter by. An example is provided using the Supabase library's `lt()` method to select rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "0d70ad64-deb8-4181-87f4-84782b9e4331",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe content describes a filter operation that selects rows where a specified column is less than or equal to a given value. The filter is used with the `lte()` method in the `select()` operation, and the key parameters are the column name and the comparison value."
  },
  {
    "chunk_id": "cb9f595e-23dd-43ca-9955-f7b5ffc7a2a9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis feature allows filtering a table's rows where a specified column matches a given case-sensitive pattern. The `column` parameter specifies the column to filter on, and the `pattern` parameter defines the pattern to match. This functionality can be used in a `select()` query, for example, to retrieve only rows where the \"name\" column contains the substring \"Alba\"."
  },
  {
    "chunk_id": "9c81c1b5-1f8b-4550-9e62-afeb8eff0b30",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `ilike()` function in Supabase's `select()` method allows you to filter rows where a specified column matches a case-insensitive pattern. The `columnRequired` parameter specifies the column name, and the `patternRequired` parameter defines the pattern to match against. This functionality is useful for performing case-insensitive text searches on database tables."
  },
  {
    "chunk_id": "5ac65780-d7c0-4824-b60d-cb8a8fe9dd2d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The column filter checks if the value in a specified column matches the provided value, which can be null, true, or false. This allows users to filter data rows based on the contents of a particular column. The summary provides the key parameters (column name and value) and an example usage of the `is_()` function to check for null values."
  },
  {
    "chunk_id": "35c4b6c3-dc3e-4217-9273-faadb4155594",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes a method to filter rows in a table where the value in a specified column is included in a provided array of values. This is demonstrated through an example using the Supabase library's `select()` method with the `in_()` function to filter the \"countries\" table by the \"name\" column."
  },
  {
    "chunk_id": "9becf97c-809a-4c12-8841-aadaddaa90d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Column contains every element in a value\" feature is only applicable to jsonb, array, and range columns. It allows filtering rows where the specified column contains every element present in the provided value. The parameters required are the column name and the value to filter with, which can be a jsonb object, array, or range."
  },
  {
    "chunk_id": "eb197354-e0a4-424b-b1c8-83d9942e8ee5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` filter is used to match rows where every element in the specified `column` (jsonb, array, or range) is contained within the `value` (jsonb, array, or range) provided. This is useful for filtering data based on the contents of array, range, or JSON columns. For example, it can be used to find all classes that are held on a specific set of weekdays."
  },
  {
    "chunk_id": "0773f792-37f5-41b2-816c-9368e2ae71e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is applicable only for range columns. It matches rows where every element in the specified column is greater than any element in the provided range. The filter is configured by passing the column name and the range to be compared against as parameters."
  },
  {
    "chunk_id": "93b220e4-84bf-400f-902e-a2de5d9fcf64",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than or equal to a range' operation is used to filter rows in a range column, where each element in the column is either contained in the specified range or greater than any element in the range. The parameters include the column name and the range to filter with. This operation can be used in the `select()` method of a Supabase query to retrieve rows matching the specified criteria."
  },
  {
    "chunk_id": "be44fe78-4183-4f35-ab39-731ee33f4b59",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used for range columns, allowing you to filter rows where every element in the specified column is less than any element in the provided range. The key parameters are the column name and the range to filter with. This functionality can be used in the `select()` method of the Supabase client library, as shown in the example."
  },
  {
    "chunk_id": "12e258ce-6d2f-4011-9a29-7f0149540821",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is used to filter rows in a range column, where every element in the column is less than or equal to any element in the provided range. The key parameters are the column name and the range to filter with. This functionality can be used in the `select()` method of the Supabase client library to retrieve rows that match the specified criteria."
  },
  {
    "chunk_id": "a19e9ffd-1ed1-4470-b392-8bd695748677",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is used to filter range columns, where the column value must be mutually exclusive to the specified range, meaning there can be no element between the two ranges. The key parameters are the column name and the range to filter with, which can be used in the `range_adjacent` method of the Supabase query builder."
  },
  {
    "chunk_id": "f3e8dbcd-97a5-4658-b773-35f6a99f0af1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This feature is only relevant for array and range columns. It allows filtering rows where the column and the value have an element in common. The required parameters are the column to filter on and the array or range value to filter with. This can be used, for example, to filter issues where the tags column overlaps with the values [\"is:closed\", \"severity:high\"]."
  },
  {
    "chunk_id": "75ced1b1-58e1-42a5-999e-bca10911198d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `text_search` function in the Supabase library allows you to perform advanced full-text search on text and tsvector columns in a PostgreSQL database. It supports various search modes, normalization options, and custom configuration parameters to customize the search behavior."
  },
  {
    "chunk_id": "b1f88433-604f-45a5-85c4-9b0e7aa711aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows you to filter a table by matching each column in the `query` object to its associated value. This is a shorthand way of chaining multiple `.eq()` calls. The `match()` method takes a `query` object as a parameter, where the keys are the column names and the values are the filter values to match."
  },
  {
    "chunk_id": "641e25ea-4b9a-4ed0-857a-2dc6bda162ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the usage of the `not_` operator in Supabase queries to match rows that don't satisfy a given filter. It shows examples of using `not_.in_()` for filtering on IDs and `not_.contains()` for filtering on array values. Additionally, it demonstrates how to use `not_.is_()` within a `select()` operation to retrieve rows where a column value is not null."
  },
  {
    "chunk_id": "e9c466cb-787b-4418-9339-a253867ae4cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the Supabase client library allows you to use the raw PostgREST syntax for filters, including the ability to use the 'in' and 'contains' operators. The filtersRequired parameter specifies the filters to apply, and the optional reference95table parameter allows filtering on referenced tables instead of the parent table. The or() function can be used with the and() function to combine multiple filters."
  },
  {
    "chunk_id": "450ffcba-ef38-4f75-877a-06e01f6e3dd1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in Supabase expects the use of raw PostgREST syntax for filter values. It supports various operators such as `in` and `cs` (contains) for filtering columns and array values. The example demonstrates how to use `filter()` on a foreign table to select rows where the `name` column is in the specified list."
  },
  {
    "chunk_id": "32fe5c1c-2c8e-4402-856b-d4ae7b38ee6d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "3b387882-57e8-49f2-8074-4370c5c7e433",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the 'Order the results' functionality in a software documentation. It explains how to order the query results by a specified column, with optional parameters to control the order direction (ascending/descending), whether to order nulls first, and the ability to order results from a foreign table. The example demonstrates ordering the 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "f6ab6764-fbe7-44ba-99f9-f54c2b1eb70c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `limit()` function is used to limit the number of rows returned from a database query. The `sizeRequired` parameter specifies the maximum number of rows to return, while the `foreign95table` parameter allows limiting rows of foreign tables instead of the parent table. An example is provided where the `limit(1)` function is used to retrieve only the first row from the \"countries\" table."
  },
  {
    "chunk_id": "99685b59-b9aa-4ee9-aac1-64736e958696",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to limit the query result by specifying a range using the `from` and `to` parameters. The range is 0-based and inclusive, allowing you to return only the records within the specified range. This is useful for pagination or retrieving a subset of the query results."
  },
  {
    "chunk_id": "d0d461a3-c3fb-408e-b61f-ea0df2146cef",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a method to retrieve a single row of data from a database table using the Supabase library. The `select()` method is used to specify the columns to retrieve, and the `limit(1)` and `single()` methods ensure that only one row is returned as an object, rather than an array of objects."
  },
  {
    "chunk_id": "646b1548-f7b7-4e9f-82c5-84240eca9c11",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided code snippet demonstrates how to use the `maybe_single()` method in the Supabase library to retrieve zero or one row of data from the \"countries\" table, where the \"name\" column matches \"Albania\". This approach returns a single object instead of an array, which can be more convenient when dealing with a single result."
  },
  {
    "chunk_id": "91ba4b41-c340-46d7-958f-6c7c0f62221e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides information on how to retrieve data from a Supabase table in CSV format. It shows an example of using the `csv()` method to execute a SQL `select` query and return the data as a CSV string. This functionality is useful for exporting tabular data from the database in a format that can be easily consumed by other applications or users."
  },
  {
    "chunk_id": "ba601fe0-fbdf-4a05-83bc-a8beabdefb4b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to debug slow queries by providing the execution plan of a query, including information on WAL record generation, configuration parameters, and buffer usage. While `explain()` is not enabled by default due to potential security concerns, it can be enabled with additional protection in production environments. The method supports various parameters to control the output format and the level of detail, such as returning the actual run time of the query with the `analyze` option."
  },
  {
    "chunk_id": "f7360daa-f604-4595-a1fa-fb7c0a3b2248",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers the process of creating a new user in the system. It explains that by default, the user needs to verify their email address before logging in, but this can be disabled by the project owner. It also discusses the behavior when sign_up() is called for an existing confirmed user, where a different response is returned depending on the project's configuration. Finally, it provides sample code for signing up a user with an email and password."
  },
  {
    "chunk_id": "f251b284-ea91-49e1-a525-65e3d9952efd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `supabase.auth.sign_in_anonymously()` function returns an anonymous user. It is recommended to set up captcha for anonymous sign-ins to prevent abuse, and the captcha token can be passed in the `options` parameter. The function creates an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "8e917e92-6fb6-419f-82ea-12e890957053",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary for the \"Sign in a user\" section is as follows:\n\nThe documentation describes how to log in an existing user using either an email and password or a phone number and password. It provides an example of signing in with email and password using the Supabase authentication API, specifying the required \"credentialsRequiredSignInWithPasswordCredentials\" parameter."
  },
  {
    "chunk_id": "3747191a-1899-47f2-97a0-075cf8314a73",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to sign in to an application using an OIDC ID token. It specifies that the authentication provider must be enabled and configured, and provides an example code snippet to demonstrate the sign-in process. The key technical points are the use of the `supabase.auth.sign_in_with_id_token()` method, which takes a provider and token as parameters, and the resulting response object."
  },
  {
    "chunk_id": "dd2eb8fa-f265-4ac4-8ee7-5bb571fb9a43",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_with_otp()` function is used for passwordless sign-ins where a one-time password (OTP) is sent to the user's email or phone number. If the user doesn't exist, the function will sign them up instead. Users can receive either a magic link or an OTP, and the destination URL for the magic link is determined by the `SITE_URL`. The function takes in either an email or phone number, and allows configuring whether a user should be created if they don't already exist."
  },
  {
    "chunk_id": "224d8dfd-5262-40b0-a1d7-7bf299064b3a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The method allows signing in a user through a third-party OAuth provider, which Supabase supports for various providers. It takes in `credentialsRequiredSignInWithOAuthCredentials` as a parameter and can be used for sign-in with scopes, with or without redirection."
  },
  {
    "chunk_id": "eca2c88e-9208-40d2-beb2-667bc129e76d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the associated email domain or the provider ID to initiate the authentication flow. This allows for more flexible sign-in options, such as mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "f9cf6234-b577-4d63-b2a4-116bd2acf471",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This method revokes the refresh token and deletes the JWT from the client-side, but does not revoke the valid JWT until it expires. The `sign_out()` method uses the global scope by default, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "bd0cbd33-aee9-42cd-86b4-582158ec132b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and account changes. The verification type should be determined based on the authentication method used previously. The `TokenHash` contained in email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "13608c08-e9db-42e8-bda1-57d6d9675846",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with. If verified, trustworthy user data is required, the `get_user` method should be called instead. The method will also use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "7cc5951b-c671-4b91-9051-e8ec366337d5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the existing session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "fd6c4538-810f-4604-a3ec-7496df8673ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` fetches the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. This method can be used to either retrieve the logged-in user with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "36be541c-1cb9-4b99-a1b4-09844dc7ab93",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `setSession()` sets the session data by taking an `access_token` and `refresh_token` as parameters. If the session is expired or the tokens are invalid, the method will handle refreshing the session. Upon successful execution, a `SIGNED_IN` event is emitted. This method is used to maintain a valid session for the application."
  },
  {
    "chunk_id": "f339e49a-da52-4827-bd83-e1548a6a50e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers Multi-Factor Authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors, up to 10, for improved security and recovery, eliminating the need for separate recovery codes."
  },
  {
    "chunk_id": "fea74df3-769a-4c51-99b9-5c44794e2957",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is:\n\nEnroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the `supabase.auth.mfa.enroll()` function. The returned `id` can be used to create and verify MFA challenges using the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "32002aef-5c14-4a0b-a4c5-859c831a8cb7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which takes the factor_id as a parameter."
  },
  {
    "chunk_id": "90578514-6193-4ede-acab-89bd9640c9be",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `supabase.auth.mfa.create()` function. Then, you can verify the challenge by providing the `factor_id`, `challenge_id`, and `code` in the `supabase.auth.mfa.verify()` function. This allows you to confirm the validity of a multi-factor authentication challenge."
  },
  {
    "chunk_id": "df2319ed-13ed-4604-a022-79d90e40a547",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` methods in a single step, allowing the user to challenge and verify a factor by providing the `factor_id` and `code`."
  },
  {
    "chunk_id": "15133800-da18-4439-8ca2-8e89a1866c0b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: This section describes how to unenroll a factor from Supabase authentication using the `supabase.auth.mfa.unenroll()` function, which takes the `factor_id` as a parameter. Unenrolling a factor removes it from the user's list of enrolled multi-factor authentication methods, allowing them to manage their security settings."
  },
  {
    "chunk_id": "1416aa14-96b3-4016-8c62-788657ddf2d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the required AAL level, which is AAL2 for a verified factor and AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` method can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "f8cff33f-453b-422a-9b4d-76b5fac7cdad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Function invocation requires an Authorization header. It automatically sets the Content-Type header for commonly used data types, but allows overriding this behavior by passing a custom Content-Type header. To invoke a function, you call `supabase.functions.invoke()` with the function name and an optional request body."
  },
  {
    "chunk_id": "65b436a0-e0d0-46ed-bc5f-393851d4a35a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The documentation discusses Supabase's real-time features, including broadcast, presence, and database change listening. It explains how to enable and configure these features, including setting the table's REPLICA IDENTITY to FULL to receive previous data for updates and deletes. The documentation also provides sample code for subscribing to a channel, sending a broadcast message, and handling received broadcast payloads."
  },
  {
    "chunk_id": "a4bca5ef-6d17-44d3-9c30-67e80aa8ed91",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Supabase channel is recommended to maintain the performance of your Realtime service and database, as unused channels can degrade performance. The `supabase.remove_channel()` function can be used to remove a specified channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "fbb6a756-5718-4f53-b8d8-b52059026b67",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused Realtime channels is recommended to maintain performance and database efficiency. Supabase automatically handles channel cleanup 30 seconds after a client disconnects, but keeping too many unused channels can degrade the system. To remove all channels, use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "7379ca2a-2ceb-4389-835f-c709f12ff083",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The provided code snippet demonstrates how to retrieve all channels using the Supabase client library. This functionality allows developers to access and manage the complete set of channels available in the application, which is a fundamental requirement for many channel-based features and integrations."
  },
  {
    "chunk_id": "5100ea79-d574-499a-9449-cb584fe16185",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It provides an example code snippet that demonstrates how to subscribe to a channel, and then send a broadcast message containing random cursor position data."
  },
  {
    "chunk_id": "3e554505-f7c9-4b7b-a332-8079face3a33",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the user requires the `insert` permission on the `buckets` table. No permissions are needed for the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "db8493b4-9570-4f0a-9c02-40a4f7773981",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` permissions on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for details on how access control works. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "41e0ac7d-be99-4918-bfda-9d4bc9302b70",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the `supabase.storage.list_buckets()` function is used. This requires `select` permissions on the `buckets` table, but no permissions on the `objects` table. Refer to the Storage guide for more information on Supabase storage access control."
  },
  {
    "chunk_id": "c69f929a-f840-4f2d-b6d5-2cb201f4de34",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, while no permissions are needed for the 'objects' table. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "98e5f852-82bc-4aaf-be24-8dfb641b77ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty the specified bucket. Refer to the Storage guide for more details on Supabase's access control system."
  },
  {
    "chunk_id": "67fac4f3-726f-4d43-9e4c-3e2d28b73369",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the `objects` table permissions require `insert` access. The appropriate MIME type should be specified for the file, such as `audio/mpeg` for audio files. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and desired storage path."
  },
  {
    "chunk_id": "02405b36-7bd2-464c-882a-15887739e869",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions on the `buckets` table, and `select` permissions on the `objects` table. The process involves using the Supabase storage client to download the file from a specified bucket and write the contents to a local destination."
  },
  {
    "chunk_id": "9cbaa9c9-294c-48b6-a387-c1f44c5169af",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a bucket, the required permissions are 'select' on the 'objects' table. The code to achieve this is `supabase.storage.from_('bucket_name').list()`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "d36c2141-af36-4bfa-9185-d382652b2506",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file is updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which allows specifying the file, path, and optional cache control and upsert parameters."
  },
  {
    "chunk_id": "4144ed71-a9e1-4aca-bdbb-f701e75d1cb7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires 'update' and 'select' permissions on the 'objects' table. The code example demonstrates how to move a file from the 'public/avatar1.png' location to the 'private/avatar2.png' location within the specified 'bucket_name' bucket. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "bcad1fbe-0597-4c3e-ba1b-b766d74f2faa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase bucket, the user requires `delete` and `select` permissions on the `objects` table, but no permissions on the `buckets` table. The `supabase.storage.from_('bucket_name').remove('test.jpg')` command can be used to delete a file from the specified bucket."
  },
  {
    "chunk_id": "a38407ba-df99-409e-8e9e-2b6b30402e82",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the user requires 'select' permissions on the 'objects' table. The signed URL allows temporary access to a file in the specified storage bucket, with an expiration duration set by the user. This functionality is useful for securely sharing access to files without exposing the underlying storage credentials."
  },
  {
    "chunk_id": "8c169dfa-a06d-4d4e-832e-ca8522f78116",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public. No specific permissions are required for the `buckets` or `objects` tables. The `supabase.storage.from_('bucket_name').get_public_url('path/to/file.jpg')` method returns the public URL for the specified file, which can be used to access the asset without authentication."
  },
  {
    "chunk_id": "48c2ed04-57f0-4df3-a02a-02ba50576c86",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Supabase Python client library, supabase-py, provides a comprehensive set of functionalities for interacting with a Postgres database, including listening to database changes, invoking Deno Edge Functions, building login and user management, and managing large files. The library offers a reference documentation detailing all available objects and methods for developers to leverage Supabase's capabilities in their Python applications."
  },
  {
    "chunk_id": "bca5ffda-5c23-44ef-b0e1-2b36ca7cc160",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: The documentation provides instructions for installing the supabase-py library using PyPi, the Python package index. The installation can be done through the terminal using the pip command, which is suitable for Python versions 3.7 and above."
  },
  {
    "chunk_id": "ac0f4c46-706d-4f25-9892-390891fa529d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the entry point to the Supabase functionality, allowing easy interaction with the Supabase ecosystem. It can be initialized using the `create_client()` method, which requires the Supabase URL and Key obtained from the project dashboard. The client can also be configured with optional parameters to customize the authentication behavior."
  },
  {
    "chunk_id": "9b2ee1bf-a29a-448e-9b34-a7f344c0bc70",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Supabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. Pagination can be achieved using the `range()` function.\n2. The `select()` function can be combined with filters and modifiers to customize the data retrieval.\n3. The `apikey` keyword should be avoided as a column name when using the Supabase Platform."
  },
  {
    "chunk_id": "6886eeff-e549-4b0e-9657-2506193d9aab",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Insert data\" section describes the parameters for inserting data into a table using the Supabase library. It covers the `jsonRequired` parameter for passing a single row or multiple rows, the optional `countOptional` and `returningOptional` parameters for controlling the response, and the `default95to95nullOptional` parameter for handling missing fields during bulk inserts. The summary also includes an example of inserting a single row into the \"countries\" table."
  },
  {
    "chunk_id": "ed87818b-af04-4567-a8db-920d91a67af1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation updates data in a table, and it must be combined with filters to target the specific items to be updated. The method accepts a dictionary or a list of dictionaries representing the new values to be inserted, and an optional `count` parameter to get the count of rows returned."
  },
  {
    "chunk_id": "b889b061-7080-4f12-a27e-6ff9a6228218",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe upsert operation in the Supabase API allows inserting or updating data in a table, with the primary keys included in the `values` dict. Key parameters include `jsonRequired` for the data to insert, `countOptional` for row count, `returningOptional` for response format, `ignore95duplicates` to handle duplicates, `on95conflict` to handle unique constraints, and `default95to95null` to set missing fields to null. Example usage includes upserting a single row or multiple rows into a \"countries\" table."
  },
  {
    "chunk_id": "8eb36cb7-97d3-4f4e-bcbb-2f59d1bc39e3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "To delete data in Supabase, the `delete()` method should always be combined with filters to target the specific items to be deleted. When using `delete().in_()`, an array of values can be provided to delete multiple rows with a single query, which is useful for batch deletions. Additionally, the delete operation is subject to any row-level security (RLS) policies in place, which may restrict the rows that are visible and can be deleted."
  },
  {
    "chunk_id": "de4902e6-e244-4880-bdf1-c7158fad1cb4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. It provides details on the various parameters that can be used when calling a Postgres function, including options to pass in parameters, control the response data, and specify different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "f9839706-e362-429c-ab9f-10f326488a1c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only rows that match specific conditions in SQL queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can be chained together, and they can be applied to Postgres functions that return a table response. The order of applying filters matters, as demonstrated in the example code."
  },
  {
    "chunk_id": "8db9a980-be18-4d79-99b6-024cde53d726",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The 'eq()' method in the 'select()' function is used to filter a database table and return only the rows where a specified column is equal to a given value. The 'columnRequired' parameter specifies the column to filter on, and the 'valueRequired' parameter specifies the value to filter by."
  },
  {
    "chunk_id": "471202e0-7bc9-457f-a08d-9b36875ecc9b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section explains how to filter a database table to only include rows where a specified column is not equal to a given value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library's `neq()` function to select all rows where the \"name\" column is not equal to \"Albania\"."
  },
  {
    "chunk_id": "09ca124d-e0a0-4455-bede-d4ab80e20960",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary describes a database query that filters rows where a specified column is greater than a given value. The key parameters are the column name and the value to filter by. This functionality is demonstrated with an example using the Supabase library's `gt()` method to filter a \"countries\" table by an \"id\" column greater than 2."
  },
  {
    "chunk_id": "8516b1fb-51a6-4dac-bae3-990fe1c2e933",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a table in Supabase by selecting rows where a specific column is greater than or equal to a given value. The required parameters are the column name and the value to filter by, and the `gte()` method can be used to apply this filter in a `select()` query."
  },
  {
    "chunk_id": "5c142d94-cc09-4cbc-9718-02c557515a2b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column is less than a value\" feature allows filtering data where a specified column has a value less than the provided value. It takes two parameters: the column to filter on and the value to compare against. This can be used with the `select()` function to retrieve only the matching rows, as shown in the example."
  },
  {
    "chunk_id": "9f0d6737-4f38-40ca-b8c7-6e16a6668bfb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `lte()` method in Supabase's `select()` function allows you to filter rows where a specified `column` is less than or equal to a given `value`. This is a useful feature for querying tabular data and limiting the results to only the relevant rows."
  },
  {
    "chunk_id": "94f745ea-f2c6-4636-af6a-b4b15c95aad8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `like()` method in the Supabase client library allows filtering a table by matching a column value against a specified pattern, case-sensitively. The `columnRequired` parameter specifies the name of the column to filter, and the `patternRequired` parameter specifies the pattern to match. This feature can be useful for performing complex queries and filtering data based on pattern matching."
  },
  {
    "chunk_id": "be0be79b-9477-4794-9eef-628626c31b4b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `ilike()` function in Supabase allows you to perform a case-insensitive pattern match on a specified column. The `columnRequired` parameter specifies the column to filter, and the `patternRequired` parameter defines the pattern to match. This functionality is useful for implementing flexible search capabilities in your application."
  },
  {
    "chunk_id": "31d42a94-413c-4f58-b039-09025b58b997",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the provided content is:\n\nThe \"Column is a value\" feature allows filtering rows based on the value of a specified column, including checking for null, true, or false values. It takes two required parameters: the column name and the value to match against."
  },
  {
    "chunk_id": "00e7fd05-b3d5-455c-a40c-f54dfabeb4a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes a column filter that matches rows where the specified column's value is included in a given array of values. The `in_()` function is used to apply this filter in the `select()` query, allowing the user to filter the data based on the values in the specified column."
  },
  {
    "chunk_id": "bc907a6e-a45f-4bd6-bd9c-b152912fddf6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'contains' method in the Supabase API is used to filter rows where the specified column contains every element in the provided jsonb, array, or range value. This is particularly useful for filtering on columns that store complex data types like JSON, arrays, and ranges. The method takes two parameters: the column name to filter on, and the value to filter with."
  },
  {
    "chunk_id": "71ecc413-c11d-468d-ad43-64bc6c40e922",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is applicable to jsonb, array, and range columns in the database. It allows filtering rows where every element in the specified column is contained within the given value, which can be another jsonb object, array, or range. This is useful for querying data structures like arrays or JSON objects stored in database columns."
  },
  {
    "chunk_id": "c5b5a1c0-df66-4bbb-ac26-22ca00b18df4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the specified range. The required parameters are the column name and the range to filter with. This functionality can be used in the Supabase .select() method to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "cbd087e4-8061-42c9-bee6-df6ebb385a21",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Greater than or equal to a range' feature is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The parameters required are the column name and the range to filter with. This functionality can be used with the `range_gte()` method in the Supabase client library to select rows that match the specified criteria."
  },
  {
    "chunk_id": "b4aa87de-6da5-4d07-9e25-2a9be8c1b4af",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the column is less than any element in the specified range. The required parameters are the column name and an array representing the range to filter with. This can be used in a Supabase query to select records where the \"during\" column is less than the given time range."
  },
  {
    "chunk_id": "79d984ca-4bb8-4a10-a13e-d1e2bbdd6a12",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, matching only rows where every element in the specified column is less than or equal to any element in the provided range. It takes a column name and an array of range values as parameters, and can be used in a Supabase query to filter the data accordingly."
  },
  {
    "chunk_id": "15155259-19be-4ff7-928c-4d10d56056c7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The 'mutually exclusive to a range' feature is used for range columns, where it matches rows where the column value is mutually exclusive to the provided range, with no element between the two ranges. The key parameters are the column name and the range to filter with, which can be used in a `select()` query to retrieve the relevant data."
  },
  {
    "chunk_id": "d03b5ac8-e96a-4915-b920-37fe234a1896",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis feature is only applicable to array and range columns. It allows filtering rows where the specified column and value have at least one element in common. The parameters include the column to filter on and the array or range value to filter with. Example usage is shown for filtering an \"issues\" table by overlapping tags."
  },
  {
    "chunk_id": "5a9294e3-a62f-4fde-bf11-41eed789314f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content discusses the \"Match a string\" functionality in Supabase, which is relevant for text and tsvector columns. It allows filtering rows where the specified column matches the given query string, leveraging Postgres full-text search capabilities. The summary includes the required parameters (column and query) and the available options for text search, normalization, and websearch."
  },
  {
    "chunk_id": "dbf73b1f-a52d-41bd-ab33-fb62b3eb4f28",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided code allows you to filter a table by matching the values in the `query` object to the corresponding columns in the table. This is a shorthand way of applying multiple `.eq()` filters. The `match()` method takes a `queryRequired` parameter, which is an object with the column names as keys and their associated filter values."
  },
  {
    "chunk_id": "d152adc4-98fe-4f65-ab4f-e78c99bdcdef",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to use the `not_` operator in PostgREST filters to match only rows that do not satisfy the filter conditions. Examples are provided for using `not_.in_()` to filter out specific IDs and `not_.contains()` to filter out specific array values. Additionally, the documentation demonstrates how to use the `not_.is_()` filter with the Supabase library to select all rows where the `name` column is not null."
  },
  {
    "chunk_id": "2c9f05bd-64ae-4fc2-a557-f82f7365f729",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in Supabase expects the use of raw PostgREST syntax for filter names and values, including the use of parentheses for 'in' filters, curly braces for array values, and 'cs' and 'cd' for 'contains()' and 'containedBy()' filters, respectively. The or() function can be used to combine multiple filters, and it can also be applied to referenced tables."
  },
  {
    "chunk_id": "b9e5e6d7-4f7d-42d7-940e-5f97f11659f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the use of the `filter()` method in the Supabase client library, which allows for applying PostgreSQL-style filters to data retrieved from a table. The key points are that `filter()` expects the filter values to be specified using the raw PostgreSQL syntax, such as using parentheses for the `in` operator and curly braces for array values. The method takes a column name, an optional operator, and an optional value as parameters. An example is provided demonstrating how to use `filter()` when querying a foreign table to retrieve countries with names in the set `(\"Algeria\", \"Japan\")`."
  },
  {
    "chunk_id": "d798ca39-1d05-43bf-ba5b-14cd981a1e6e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response, such as returning a CSV string, rather than filtering the rows. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "703a42cf-7d99-4e6c-b306-3ab5f24fb59c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe \"Order the results\" section explains how to order the query results by a specified column. It provides parameters for ordering, including the column to order by, whether to order in descending order, a foreign table name to order, and whether to show nulls first. The example code demonstrates how to order the results of a `select()` query on a foreign table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "bdeb057e-fcde-426c-be2d-7f05f55385fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `select()` method in Supabase allows limiting the number of rows returned from a database table using the `limit()` parameter, which specifies the maximum number of rows to retrieve. Additionally, the `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table."
  },
  {
    "chunk_id": "c6525a04-3f27-4638-8582-318c8f401a13",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in the query limits the result set to a specific range of records, defined by a starting offset (`from`) and ending offset (`from + to`). This allows retrieving a subset of the full query result, which can be useful for paging or efficient data retrieval. The `from` and `to` values are 0-based and inclusive, so `range(1, 3)` will return the second, third, and fourth rows of the query. An optional `foreign_table` parameter can be used to limit the range on a foreign table instead of the parent table."
  },
  {
    "chunk_id": "6fe6eb52-ba61-4c3e-b618-7f9949846221",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary summarizes how to retrieve a single row of data from a table using the Supabase library's `select()` function, by setting the `limit` parameter to 1 and using the `single()` method to return the data as a single object instead of an array of objects."
  },
  {
    "chunk_id": "3c12db71-5cef-4fb8-b2b7-10a01558cb9e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `maybe_single()` method is used to retrieve zero or one row of data from the \"countries\" table in Supabase, where the \"name\" column equals \"Albania\". This ensures that the response is returned as a single object instead of an array, making it easier to handle the data."
  },
  {
    "chunk_id": "87913129-c6d3-4cce-88d7-77670511d5d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides instructions on how to retrieve data from a Supabase table as a CSV file. It demonstrates the code to execute this operation, which returns the data as a string in CSV format. This functionality allows users to easily export and download data from the Supabase database in a commonly used file format."
  },
  {
    "chunk_id": "9b428015-ce6c-4118-82e1-eca5d9bc40d5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. While explain is not enabled by default due to potential security concerns, it can be useful for debugging slow queries, and can be enabled with additional safeguards in production environments."
  },
  {
    "chunk_id": "8a814782-8ca1-4e65-b61d-8b4af4d9614f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To create a new user in Supabase, the \"Confirm email\" setting determines if users need to confirm their email address after signing up. If enabled, a user is returned but the session is null; if disabled, both a user and session are returned. By default, users are redirected to the SITE_URL upon email confirmation, which can be modified. Attempting to sign up an existing confirmed user will return an obfuscated/fake user object or a \"User already registered\" error, depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "ae47d506-96ec-4b67-97ff-610a565e1dd0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the ability to create an anonymous user in the system. It is recommended to set up a captcha to prevent abuse, and the captcha token can be passed in the options parameter. The code example demonstrates how to sign in anonymously and create an anonymous user with custom metadata."
  },
  {
    "chunk_id": "a36e7ae5-6a99-43a4-8bbd-a424a866989c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user with either an email and password or a phone number and password. It provides sample code for signing in a user with email and password credentials, and indicates that the `supabase.auth.sign_in_with_password()` function is used for this purpose."
  },
  {
    "chunk_id": "9ef580fc-cfcb-400e-bd4d-b24df68d45d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Sign in with ID Token\" feature, which allows users to sign in using an OIDC ID token. The authentication provider must be enabled and configured. The feature is demonstrated with an example of signing in using a Google ID token."
  },
  {
    "chunk_id": "234a8b0d-f6e4-44db-bd9a-024385d06451",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the process of signing in a user through One-Time Password (OTP) authentication. It requires an email or phone number, and can be used for passwordless sign-ins. The `sign_in_with_otp()` function is used, which can also sign up a new user if they don't exist. The method allows configuring the OTP delivery mechanism (email or SMS) and can be customized to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "70b7e811-9242-4fb7-aef0-46c374035f7c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It provides a code example for signing in with the GitHub provider, and mentions that Supabase supports various other third-party providers that can be configured. The key parameters and functionality for signing in with OAuth are outlined."
  },
  {
    "chunk_id": "a8528772-539a-4aa2-a50d-3bc32fc72905",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the CLI commands. You can then use the `domain` or `provider_id` properties to start the authentication flow, which is useful for mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "37958554-8ac9-4c37-99d9-eb79815a7e2e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method is used, which revokes the refresh token and deletes the JWT from the client-side. However, the access token JWT will remain valid until it expires, as Supabase Auth uses JWTs for authentication. The `sign_out()` method by default signs out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "ddfebcdd-0061-4dc6-8570-63d87c917cd9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for various authentication types, including SMS, email, and account changes. The verification type should match the corresponding auth method used previously. The `TokenHash` from the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "c8e4d91b-d621-4ad4-ac75-b02d72a571da",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it can be tampered with by the sender. If verified, trustworthy user data is required, the `get_user()` method should be used instead. The method also handles session refresh when the access token has expired."
  },
  {
    "chunk_id": "f7e1d0ee-7e11-4aa5-832e-24992fdfebff",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The Retrieve a new session method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the get95session() method. If the current session's refresh token is invalid, an error will be thrown. This method ensures the session is refreshed whether the current one is expired or not."
  },
  {
    "chunk_id": "f1085e88-3ca6-4b59-889d-159b36af6c55",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method fetches the user object from the database instead of the local session, and is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to get the logged-in user with either the current existing session or a custom access token JWT."
  },
  {
    "chunk_id": "8d6bfd29-1ad1-4e5d-8d79-806aea1396e2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the session data using an `access_token` and `refresh_token`. If successful, a `SIGNED_IN` event is emitted. This method handles session refreshing and will throw an error if the refresh token or access token is invalid."
  },
  {
    "chunk_id": "fa45df90-aef9-4a94-881b-5973386bc782",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Auth MFA (Multi-Factor Authentication) functionality provided by Supabase, which currently supports time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, eliminating the need to store recovery codes and reducing the attack surface compared to a single backup TOTP factor."
  },
  {
    "chunk_id": "12f847de-a4f0-4078-a258-a783d8bee60d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to enroll a TOTP (time-based one-time password) factor for multi-factor authentication using the Supabase Python client library. It explains that the `id` returned from the `mfa.enroll()` function should be used to create a challenge, which can then be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "71971147-9867-4fa5-b1d9-db222aec2e7a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which checks the validity of the challenge."
  },
  {
    "chunk_id": "c7384a87-a5d6-4d24-9190-b7659b2010c0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge by following the instructions in the \"/docs/reference/python/auth-mfa-challenge\" document. The code example demonstrates how to verify a challenge by providing the `factor_id`, `challenge_id`, and `code` parameters to the `supabase.auth.mfa.verify()` function."
  },
  {
    "chunk_id": "5f3c54c4-dff9-442e-93f2-002a418086f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking a factor_id and a code as parameters."
  },
  {
    "chunk_id": "887c1c31-d4bb-44ed-a9a2-2fdfab4fe6f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the Supabase `auth.mfa.unenroll()` method is used, with the `factor_id` parameter specifying the ID of the factor to be unenrolled. This allows users to remove a previously enrolled MFA factor from their account, simplifying authentication when the factor is no longer needed."
  },
  {
    "chunk_id": "376f95a4-d7db-42bc-800b-4a4d512ad3c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL 1 refers to the first factor of authentication (e.g., email and password), while AAL 2 refers to the second factor (e.g., time-based one-time password). The `next_level` field indicates the AAL that the user has verified, with `aal2` being the higher level."
  },
  {
    "chunk_id": "a61abf79-52f8-42a5-b947-087a57856425",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by making a request to the function endpoint. Requires an Authorization header, and automatically attaches the appropriate Content-Type header based on the request body type. Provides error handling and the ability to pass custom headers. Example usage demonstrates invoking a \"hello-world\" function with a JSON payload."
  },
  {
    "chunk_id": "b28294f7-7861-4802-aa31-5922f6b5a4ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can turn on listening to database changes by managing Realtime's replication and setting the table's REPLICA IDENTITY to FULL to receive previous data for updates and deletes. The code example demonstrates how to subscribe to a channel, send a broadcast message, and handle received broadcast messages."
  },
  {
    "chunk_id": "467ac0ec-89f9-4490-a9ee-2ca114c914b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain performance, as unused channels can degrade the Realtime service and database. The `supabase.remove_channel()` function allows removing a specific channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "de31e32a-e26e-41c9-a321-e84ad8870727",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. The `supabase.remove_all_channels()` function can be used to remove all subscribed channels, which Supabase will automatically clean up 30 seconds after a client is disconnected, preventing potential performance degradation from excessive channel subscriptions."
  },
  {
    "chunk_id": "fd8dd022-028f-42a5-8579-69c220ec446b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code `supabase.get_channels()` retrieves all channels from the Supabase platform. This is a useful function for retrieving a list of all available channels, which can be important for various application features or administrative tasks."
  },
  {
    "chunk_id": "88d6c859-8112-4a55-8043-979204da2b5c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It provides an example of sending a \"cursor-pos\" broadcast message containing random x and y coordinates. This functionality allows for real-time collaboration and coordination among connected clients in a shared channel or application."
  },
  {
    "chunk_id": "e8a7e57d-2dbe-438e-9bf0-23951157b3a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the user requires the `insert` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Supabase Storage guide for more information on access control. The Supabase storage create_bucket() function is used to create a new bucket."
  },
  {
    "chunk_id": "34ecfa39-88d6-44da-a467-b9f616ae2dfb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more details on how access control works. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "36943fcb-fcbe-44a7-bae1-122596aea626",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the `select` permission is required on the `buckets` table. No permissions are needed for the `objects` table. Refer to the storage security and access control guide for more information on how to configure permissions."
  },
  {
    "chunk_id": "8a44e0f9-4975-4de1-b487-9115948d31f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the user requires `select` and `delete` permissions on the `buckets` table. No permissions are required on the `objects` table. The code to delete a bucket is `supabase.storage.delete_bucket(name)`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "3fe942a9-8e1c-469c-b920-3cd4d5f8a386",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The Supabase storage guide provides details on how access control works for these operations."
  },
  {
    "chunk_id": "70ac855f-e91a-47c0-8691-337cc2f67a6f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires 'insert' permissions on the 'objects' table. The appropriate MIME type should be specified, especially for images or audio files, otherwise the default is 'text/html'. The file can be uploaded using the 'supabase.storage.from_().upload()' method, providing the file path and optional file options such as content type."
  },
  {
    "chunk_id": "1b1ba22e-b51d-4769-8873-568e41a1f8ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required permissions are to have 'select' access on the 'objects' table. The file can be downloaded using the Supabase storage client, which provides a method to download the file from a specified bucket and write it to a local destination."
  },
  {
    "chunk_id": "ef9c213e-cfa3-46c7-b01d-b2d3f5c6948a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are to have `select` access on the `objects` table. The code to perform this action is `supabase.storage.from_('bucket_name').list()`. Refer to the Supabase Storage guide for more details on access control."
  },
  {
    "chunk_id": "13bb6e2a-273d-495a-b8ad-43f997e4c513",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the Supabase storage client, specifying the bucket name, file path, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "e40476c1-2783-4823-b56f-0dbb8b4f732e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code to perform the move operation is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "ebeab9ad-ec77-449b-aefa-b96c4ac8599a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The 'buckets' table permissions are not required. The access control for storage is explained in the Storage guide."
  },
  {
    "chunk_id": "d5a98bb8-898c-4396-8b85-bb280430b78b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the necessary RLS policy permissions are to have `select` access on the `objects` table, but no permissions are required on the `buckets` table. The signed URL is generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, which allows secure, time-limited access to a specific file in the storage bucket."
  },
  {
    "chunk_id": "16177082-6921-4839-8820-284ef632b2f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for a file in a Supabase storage bucket, the bucket must be set to public, either via the `updateBucket()` function or the Supabase dashboard. No specific permissions are required on the `buckets` or `objects` tables. The public URL can be obtained using the `get_public_url()` method of the `supabase.storage.from_()` function."
  },
  {
    "chunk_id": "630156c6-680c-404a-86ff-7f6a56010b6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library is Supabase's Python client that provides functionality to interact with a Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management features, and manage large files. This library serves as a comprehensive reference for all available objects and methods in the supabase-py package."
  },
  {
    "chunk_id": "a79d5d68-fa10-4339-9234-24fc28ef7e90",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase-py library using pip for Python 3.7 and above. The library can be installed via the terminal using the command `pip install supabase`."
  },
  {
    "chunk_id": "530814a1-fd03-4ddb-b8c8-359d4c479dbf",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the main entry point for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and Key. Additionally, optional client options can be provided to customize the authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the primary tool for developers working with the Supabase platform."
  },
  {
    "chunk_id": "6bb91e10-4751-46fa-b7d3-ffccf9f62e2a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Fetch data section covers the key points regarding data retrieval in Supabase projects. It discusses the default limit of 1,000 rows, which can be adjusted in the API settings, and the use of the `range()` function for pagination. It also highlights the ability to combine `select()` with filters and modifiers, while cautioning against the use of the reserved keyword `apikey` as a column name."
  },
  {
    "chunk_id": "5bca3d6d-4921-4a7b-980f-e9bd0c568737",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `insert` function in the provided documentation allows you to insert data into a table. It accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, where each dictionary represents a row to be inserted. The `countOptional` and `returningOptional` parameters control the count and return method of the inserted rows, respectively. The `default95to95nullOptional` parameter, when set to `True`, makes missing fields default to `null`."
  },
  {
    "chunk_id": "eb7b93fc-e49a-4159-9b2b-6bab3ad5a76a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to update data in a table, and should always be combined with filters to target the specific item(s) to be updated. The method takes a dictionary or list of dictionaries as input, representing the new values to be inserted. An optional `count` parameter can be used to retrieve the number of rows affected by the update operation."
  },
  {
    "chunk_id": "c348774a-9c1d-4c86-8a5c-b32c7bfe8bb1",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe Upsert data function in the Supabase API allows inserting or updating data in a table based on primary keys. It supports bulk upsert operations and handling of unique constraints, with options to control the response format and handling of missing fields."
  },
  {
    "chunk_id": "8a94d642-c8fe-4834-b49b-55bb69a84a9d",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` function in the Supabase API should always be used in combination with filters to target specific records for deletion. When using `delete()` with row-level security (RLS) enabled, only rows visible through `SELECT` policies will be deleted, so at least one `SELECT`/`ALL` policy is required. The `delete().in_()` method can be used to delete multiple records at once by providing an array of values."
  },
  {
    "chunk_id": "119251ab-534c-4f0a-b1fe-203851307d91",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to call Postgres functions as Remote Procedure Calls (RPCs) from an application. Postgres functions are useful for encapsulating reusable database logic, such as password resets and updates. The documentation provides details on the parameters that can be passed to the `supabase.rpc()` function, including options for controlling the execution mode, count algorithm, and handling of return values."
  },
  {
    "chunk_id": "1e6900c3-04c3-4b97-9a8d-7dbe4f23209d",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other operations like `select()` matters, as shown in the example code."
  },
  {
    "chunk_id": "39bdae0a-14f8-43ce-acbe-cabdbbded479",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided content describes how to filter a database table by a specific column being equal to a given value, using the `eq()` method of the `select()` function. The key parameters are the `column` to filter on and the `value` to compare against, and the example demonstrates filtering the \"countries\" table to get rows where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "5406c010-6891-43b1-8892-c27d41d1055a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis documentation describes the 'neq' (not equal) filter operation in Supabase, which allows you to match rows where a specified column is not equal to a given value. The parameters include the column name and the value to filter by. This can be used in conjunction with the 'select' method to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "92146e3c-b6fc-4517-ac92-6ef447e4935e",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a filter operation that selects rows from a table where a specified column has a value greater than a given value. The `gt()` method is used with the `select()` function to achieve this filtering. The key parameters are the column name and the value to filter by."
  },
  {
    "chunk_id": "02419da1-2fff-429d-b1ed-1d3f586e602d",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis method filters a database table to only include rows where the specified column has a value greater than or equal to the provided value. The two required parameters are the column name and the value to filter by. This functionality can be used with the Supabase library's `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "743786c5-e6c8-4968-9c49-642456c185b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `lt()` function in Supabase allows filtering a database table to include only rows where the specified column has a value less than the provided value. The function takes two required parameters: the column name and the value to filter by. This can be used in conjunction with the `select()` function to retrieve the filtered data."
  },
  {
    "chunk_id": "f0c9283b-1e25-4409-a18e-7fe96aef2992",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe documentation describes how to filter a database table by a column value, specifically where the column value is less than or equal to a specified value. The key parameters are the column name and the value to filter by. This functionality is demonstrated using the Supabase library's `lte()` method to select rows where the \"id\" column is less than or equal to 2."
  },
  {
    "chunk_id": "b3fb7ce6-41c1-4787-bbae-cced34c94a0a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering rows where a specified column matches a given pattern case-sensitively. The key parameters are 'column' (the name of the column to filter on) and 'pattern' (the pattern to match). This can be used in a query like `supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()` to select rows where the 'name' column matches the pattern '%Alba%'."
  },
  {
    "chunk_id": "a2de9273-b396-4328-9e40-160069911f61",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given documentation is as follows:\n\nThe documentation describes a method to filter rows in a database table where a specified column matches a given case-insensitive pattern. The method takes two parameters: the column name and the pattern to match. This functionality is demonstrated with an example using the Supabase library's `ilike()` function to select rows from a \"countries\" table where the \"name\" column contains the substring \"alba\"."
  },
  {
    "chunk_id": "b7804761-4b07-45da-a7a0-790a23c6f108",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' section describes a filter that matches rows where a specified column has a given value. The parameters include the column name and the value to match, which can be null, true, or false. This filter can be useful for querying a table based on specific column values."
  },
  {
    "chunk_id": "fbd7606f-c5d6-4490-b879-90ccc48252b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the \"in\" filter in the Supabase library, which allows matching rows where the value in a specified column is included in a provided array of values. The key parameters are the column name and the array of values to filter by. This functionality can be used in the `select()` method to retrieve filtered data from a table."
  },
  {
    "chunk_id": "41518525-63a3-49fa-88b7-79b65fe4609a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" operation is only relevant for jsonb, array, and range columns. It matches rows where the specified column contains every element in the provided value. The parameters for this operation are the column to filter on and the value to filter with, which must be a jsonb object, array, or range."
  },
  {
    "chunk_id": "ccd7a4ac-289b-4157-aecf-aff374e1f83d",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' feature is only applicable to jsonb, array, and range columns. It allows you to match rows where every element in the specified column is contained within the provided value. The parameters include the column to filter on and the value to filter with. This can be useful for querying data that is stored in array or jsonb formats."
  },
  {
    "chunk_id": "04f1a50e-4536-4d79-9251-d24b844819cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column is greater than any element in the provided range. The key parameters are the column name and the range to filter with. This can be used in a Supabase query to select only the rows where the \"during\" column is greater than the specified range."
  },
  {
    "chunk_id": "8101ffd1-d818-4322-963d-b65ea98d878f",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Greater than or equal to a range\" section is as follows:\n\nThe \"range_gte()\" method in the Supabase library is used to filter rows in a table where the values in a specified column are either contained within a given range or greater than any element in that range. This is particularly relevant for range columns, allowing you to select rows where the column values meet the specified criteria."
  },
  {
    "chunk_id": "0af007a5-edcb-40b5-8f3c-ea5e62406f75",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature allows filtering rows where every element in the specified column is less than any element in the provided range. It takes two parameters: the column to filter on and the range to filter with. This is useful for range-based filtering, such as filtering reservations by a time range."
  },
  {
    "chunk_id": "58382814-bfb1-44a8-ae0a-66ba0b165494",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The content summarizes the \"Less than or equal to a range\" filter in Supabase, a range column filter that matches rows where every element in the specified column is less than any element in the provided range. The filter takes two required parameters: \"column\" (the range column to filter on) and \"range\" (the range to filter with). This filter can be used in Supabase's `select()` method to query data."
  },
  {
    "chunk_id": "b7712bb4-3a92-4eec-8719-dc021ff47780",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Mutually exclusive to a range\" feature is specific to range columns, allowing you to filter rows where the column value is mutually exclusive to the provided range, with no element between the two ranges. The required parameters are the column name and the range to filter on, which can be used in the `range_adjacent()` function of the Supabase query builder."
  },
  {
    "chunk_id": "8b6f24c7-505f-4745-ad90-fccc4479c8c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation discusses the \"With a common element\" filter, which is only applicable to array and range columns. It allows you to match rows where the column and the provided value have at least one element in common. The parameters for this filter are the column to filter on and the value to filter with. Examples are provided for using this filter on both array and range columns."
  },
  {
    "chunk_id": "91749226-6287-43dc-96b4-97afb5c53d59",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Match a string\" feature, which is only relevant for text and tsvector columns. This feature allows filtering rows where the specified column matches the given query string, using Postgres full-text search functionality. The summary includes the key parameters (column and query) and an example usage of the text_search function."
  },
  {
    "chunk_id": "7c31ee05-6e3c-4904-93ec-668e0fc36db1",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase client library allows you to filter a table by matching each column in the `query` object to its associated value. This is a convenient shorthand for chaining multiple `.eq()` calls. The `match()` method takes a `query` object as a parameter, where the keys represent the column names and the values represent the filter criteria."
  },
  {
    "chunk_id": "4f5c51a3-3c04-4029-97bb-988a74d7cdc4",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content explains how to use the `not_` operator in PostgREST to match rows that do not satisfy a given filter. Examples are provided for filtering based on `in` and `contains` operations. Additionally, the summary demonstrates how to use the `not_.is_` operator with the `select()` method to retrieve rows where the `name` column is not null."
  },
  {
    "chunk_id": "d5bf211d-5935-4b68-ad37-6ba65ccc21a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content discusses the `or95()` function in the Supabase client library, which allows matching at least one filter using the PostgREST syntax. It provides examples of using `or_()` with `in()`, `contains()`, and `containedBy()` filters, as well as guidance on using `or()` with `and()` and on referenced tables. The summary highlights the key technical points around the `or95()` function and its usage in the Supabase client library."
  },
  {
    "chunk_id": "2651732b-5a21-4f12-bfdc-dafdf2ff522f",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'filter()' method in the software documentation expects the use of raw PostgREST syntax for filter values, such as using parentheses for 'in' filters and backslashes for array values. The 'filter()' method takes three parameters: the column to filter on, the operator to use (following PostgREST syntax), and the value to filter with. The summary also includes an example of using 'filter()' with 'select()' on a foreign table."
  },
  {
    "chunk_id": "85756809-1b2c-4e0a-8a00-f4969d0df8a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and are applicable to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "a7d0b6d0-1e34-4091-8794-090a34c9ceb3",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes the \"Order the results\" functionality, which allows ordering the query results by a specified column. The key parameters are: \"column\" (the column to order by), \"desc\" (whether to sort in descending order), \"foreign_table\" (name of the foreign table to order), and \"nulls_first\" (whether to show null values first). An example is provided demonstrating how to order the results of a \"select()\" query on a foreign table."
  },
  {
    "chunk_id": "43f1fa46-d9a6-4d4d-a490-5f814aaab625",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'limit()' function in the Supabase library allows you to specify the maximum number of rows to be returned from a database query. This is useful for pagination or when you only need a subset of the available data. The 'limit()' function can be applied to both the parent table and any foreign tables referenced in the query."
  },
  {
    "chunk_id": "bda299ed-8793-49c0-aae8-b79843c43143",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the functionality of limiting a query result by specifying a range of offsets. The `from` and `to` parameters define the starting and ending indices of the subset of records to be returned, allowing for efficient paging of large result sets. This feature respects the query order, and can be applied to both the parent table and foreign tables."
  },
  {
    "chunk_id": "9673c0dc-1852-40fb-9454-c7464a64efc1",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The code snippet demonstrates how to retrieve a single row of data from the \"countries\" table in a Supabase database using the `select()`, `limit(1)`, and `single()` methods. This allows you to retrieve the \"name\" column from a single row of data instead of an array of objects, which can be useful when you only need to retrieve a single record."
  },
  {
    "chunk_id": "e7190b2c-3945-459a-8573-bd1110a3d206",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a method to retrieve zero or one row of data from a Supabase table using the `maybe_single()` function. This is useful when you expect at most one result, and you want the response to be a single object instead of an array. The example demonstrates retrieving the row where the \"name\" column is \"Albania\"."
  },
  {
    "chunk_id": "efd58e94-bf64-44b9-a6e1-5c62557151d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides information on how to retrieve data from a Supabase table as a CSV string. It shows an example of how to use the `.csv()` method to execute a query and return the data in CSV format. This functionality is useful for exporting data from the database in a structured, comma-separated format for further processing or analysis."
  },
  {
    "chunk_id": "b1b51e8a-abc0-4372-b15e-4c67414accdf",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres allows developers to view the execution plan of a query, which is useful for debugging slow queries. It can reveal sensitive information about the database, so it's recommended to only enable it in testing environments. The `explain()` method supports various parameters, such as `verbose`, `settings`, `format`, and `analyze`, to customize the output and include additional details like buffer usage and actual runtime."
  },
  {
    "chunk_id": "0837b864-9364-496a-8921-649d2e60db7b",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user in Supabase, the \"confirm email\" setting determines whether a user session is returned immediately after sign-up or if the user must first confirm their email. If \"confirm email\" is disabled, both a user and session are returned. Existing users attempting to sign up again will receive an obfuscated/fake user object if \"confirm email\" and \"confirm phone\" are both enabled, or a \"user already registered\" error if either is disabled."
  },
  {
    "chunk_id": "f59de462-2cb1-4c38-af22-6f2727904ecf",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in anonymously using the Supabase library, passing in the captcha token as an option. The anonymous user can have custom metadata associated with it."
  },
  {
    "chunk_id": "cfe5e835-1884-4669-bc21-7b8f9f3bdc72",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary for the \"Sign in a user\" section is as follows:\n\nExisting users can sign in with their email and password or phone number and password. The `supabase.auth.sign_in_with_password()` function is used to sign in a user, taking either an email and password or phone number and password as parameters. The function returns a response object containing the authenticated user's information."
  },
  {
    "chunk_id": "d0d4b1a0-4a61-4f49-9326-b5250914b5d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nAllows signing in with an OIDC ID token, where the authentication provider used must be enabled and configured. The `supabase.auth.sign_in_with_id_token()` method is used to sign in with an ID token, passing in the provider name (e.g., \"google\") and the token value."
  },
  {
    "chunk_id": "0f5590c6-b346-4782-abef-5412092f20b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation outlines the process of signing in a user through a one-time password (OTP) sent to their email or phone number. This passwordless sign-in method can be used to both sign in existing users or create new users on the fly. Developers can configure whether to send users a magic link or an OTP, and can customize the destination URL for the magic link. The implementation of magic links and OTPs is shared, allowing developers to easily switch between the two."
  },
  {
    "chunk_id": "127c0ee3-fe34-416d-8f6d-ebef46e0dbbc",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. The `sign_in_with_oauth()` function is used to authenticate the user, and it supports various third-party providers that can be configured. The summary covers the main functionality and significance of this authentication method."
  },
  {
    "chunk_id": "bb88dc2d-f5c0-4ce2-8829-30af744c5f29",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the provided CLI commands. You can initiate the sign-in flow by either using the email domain associated with the identity provider or by specifying the provider ID, which allows for more customized authentication scenarios such as mapping specific user email addresses or using additional context like company-specific pages or IP addresses."
  },
  {
    "chunk_id": "ee03f82d-dd3c-4b84-94b9-8c72f7ba4789",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. By default, this signs out all other sessions the user is logged into. Since Supabase Auth uses JWTs, the access token will remain valid until it expires, even after signing out, but the refresh token is revoked and the JWT is deleted from the client-side."
  },
  {
    "chunk_id": "547e1eaf-1bc4-42cf-ba9e-0d57c1462e8a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for user authentication. It supports various verification types, such as SMS, email, recovery, invite, and email change. The verification type should match the corresponding auth method used previously to sign up or sign in a user. The `TokenHash` contained in email templates can be used for sign-in and server-side auth with the PKCE flow."
  },
  {
    "chunk_id": "e12b9637-cc2a-4184-a7fa-c8c3f2c539b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with. If trustworthy user information is required, the `get_user()` method should be used instead. The method also handles expired access tokens by using the refresh token to obtain a new session."
  },
  {
    "chunk_id": "eef06b5c-62c1-41c7-a72a-b8fd73e9007b",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it has expired or not."
  },
  {
    "chunk_id": "8489afc4-a1de-4604-87d6-a125b21ab8e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the user object from the database instead of the local session, and is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to get the logged-in user either with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "2dda4b0c-af01-4920-ad0b-461550939092",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the session data for the current session, handling session refreshing and token validation. It takes an `access_token` and `refresh_token` as parameters, and upon successful execution, emits a `SIGNED_IN` event. This functionality is critical for maintaining a valid session and user authentication in the application."
  },
  {
    "chunk_id": "b8456f01-b618-4a45-9734-64ee528e411e",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers the Multi-Factor Authentication (MFA) methods supported by Supabase, which currently include time-based one-time password (TOTP) as the second factor. Supabase allows users to enroll multiple TOTP factors, up to a limit of 10, which provides a recovery mechanism without the need for separate recovery codes. This approach reduces the attack surface and provides a more user-friendly MFA experience."
  },
  {
    "chunk_id": "291a72d9-3653-496f-9741-04dc9fec7cd8",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The documentation describes how to enroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase Python library. The `mfa.enroll()` function is used to enroll a TOTP factor, and the returned `id` can be used to create and verify MFA challenges using the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "fa4b179b-edfa-4772-953c-8634651985e9",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create an MFA challenge, an enrolled factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "6fd086d8-113d-4920-8583-239b387c7350",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `supabase.auth.mfa.create()` function. The `supabase.auth.mfa.verify()` function is then used to verify a challenge by providing the `factor_id`, `challenge_id`, and the `code` received from the user."
  },
  {
    "chunk_id": "5112a104-2248-4895-a934-5c8c1be9f17f",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` method executes both the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to provide a code to verify the challenge for a specific factor."
  },
  {
    "chunk_id": "f04d45b7-1611-43e1-a285-47661d6ddb5e",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary describes how to unenroll a multi-factor authentication (MFA) factor from a Supabase application. The code snippet demonstrates the use of the `supabase.auth.mfa.unenroll()` function, which takes the `factor_id` as a parameter to remove the specified MFA factor from the user's account."
  },
  {
    "chunk_id": "5ab052e0-8ee9-419d-9582-229fe3623a7b",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, either AAL1 or AAL2, based on the user's verified factors."
  },
  {
    "chunk_id": "5f1f9ca0-3bb3-46fb-9000-7745534380d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is:\n\nInvokes a Supabase Edge Function by making a request with an Authorization header. The function automatically attaches a Content-Type header based on the request body type, but this can be overridden. The function can be invoked with a request body, and the response can be handled to manage any errors."
  },
  {
    "chunk_id": "2099c280-8681-423d-8d6f-421ef859b1b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can enable database change listening by managing Realtime's replication, and receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The code snippet demonstrates how to subscribe to a channel, send broadcast messages, and handle received broadcast payloads."
  },
  {
    "chunk_id": "7b5af098-2e83-48ac-9beb-7cbd45d541e0",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain performance of the Realtime service and database, as unused channels may cause degradation with more simultaneous clients. The `supabase.remove_channel()` function allows removing a specific channel, which Supabase will automatically clean up 30 seconds after a client disconnects."
  },
  {
    "chunk_id": "9845277d-edcf-4e74-ab93-14f6e0ce1411",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels from the Realtime service and Postgres database can improve project performance. Supabase automatically cleans up channels 30 seconds after a client disconnects, but maintaining too many unused channels can degrade performance as more clients subscribe. To remove all channels, use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "fa5b80d5-a944-4767-b358-c4bfc88f5c60",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to retrieve all channels using the Supabase library. This functionality allows users to access and work with the complete set of available channels in the application."
  },
  {
    "chunk_id": "71cba4f9-b8c8-469f-aa3e-bf0eaabb2337",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe code demonstrates how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. The message is sent via WebSocket, and the example shows how to subscribe to the channel and send a random cursor position as the broadcast message."
  },
  {
    "chunk_id": "5fde51f5-3eb0-4bd0-82a4-c417ac8b8b30",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, you need the `insert` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for details on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "75e32027-0be8-4aac-93dd-6fe3a738d994",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: select permissions on the buckets table, and no permissions on the objects table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "adfe338b-ebdf-4f31-ac5b-10cb16d7e16a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to list buckets is `_10  res = supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "045c08b4-d383-48c0-aac6-ed2189f03bfc",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "5579709e-0cbe-4d54-aed8-37e83d93123d",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. The `supabase.storage.empty_bucket()` function can be used to empty a bucket, and the Storage guide provides information on how access control works."
  },
  {
    "chunk_id": "a6723eb5-5e8f-46a4-a7fa-91822e292eac",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The appropriate MIME type should be specified for media files, otherwise it defaults to `text/html`. The file can be uploaded using the `supabase.storage.from_().upload()` method, providing the file path and optional file options such as the content type."
  },
  {
    "chunk_id": "8af10833-2b9f-4fcd-9bee-cfecbc36b2ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires `select` permissions on the `objects` table. The code snippet demonstrates how to download a file from a Supabase storage bucket and write the contents to a local file."
  },
  {
    "chunk_id": "2cf741ff-cdd4-4da9-b75f-90b8e8682d29",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions must have `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "90eedbb9-101c-4142-a08f-df45f11d09e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, you need the following permissions: `update` and `select` on the `objects` table. The process involves opening the local file, then using the `supabase.storage.from_(\"bucket_name\").update()` method to update the file on Supabase Storage, specifying the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "b86fd902-9f5b-4782-b6cd-72cebc22d2ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code to perform the move operation is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Supabase Storage guide for more details on access control."
  },
  {
    "chunk_id": "8d6a6dea-412d-4e78-9bff-78dc57dde619",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The `buckets` table permissions are not required. Refer to the Supabase Storage guide for more details on access control and permissions management."
  },
  {
    "chunk_id": "96430266-0d04-4564-ada8-303f5dc4f814",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are: no permissions for the `buckets` table, and `select` permissions for the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, which allows access to a specific file in the storage bucket for a limited time period."
  },
  {
    "chunk_id": "2190a5fc-4231-4b97-83b5-7b1cc6723d01",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for a file in a Supabase Storage bucket, the bucket must be set to public either through the updateBucket() API or the Supabase dashboard. No specific permissions are required on the buckets or objects tables. The public URL can be obtained using the get_public_url() method, passing in the bucket name and file path."
  },
  {
    "chunk_id": "a3d1802c-3819-4bcc-93d6-978c047b16bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with a Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods for integrating Supabase's services into Python applications."
  },
  {
    "chunk_id": "5bbd5df0-dab5-47a7-ae26-fb621ff256a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: You can install the Supabase Python library (supabase-py) via pip, the standard package installer for Python. The library requires Python version 3.7 or higher. The installation can be done using the terminal or a Python environment like Conda."
  },
  {
    "chunk_id": "effec17b-1a07-4a21-8caa-1afd5e1252e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the entry point to the Supabase ecosystem, allowing developers to interact with the platform's functionality. It can be initialized using the `create_client()` method, which requires the Supabase URL and key, and optionally allows customizing the authentication behavior. The client can be used to access the various Supabase services, such as the database, storage, and authentication."
  },
  {
    "chunk_id": "e17a9f64-b56e-4710-8da3-3eaf1d1fb39c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects by default return a maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, with the `apikey` keyword being reserved for the Supabase Platform. Key parameters include columns to retrieve and the count method to use, enabling pagination, filtering, and querying of JSON data and referenced tables."
  },
  {
    "chunk_id": "6dadaf23-858d-4d92-9de2-a09b532163e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is:\n\nThe `insert` function in the provided documentation allows you to insert data into a table. It accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the data to be inserted. The function also supports optional parameters like `countOptional` to get the count of rows returned, `returningOptional` to control the response format, and `default95to95nullOptional` to handle missing fields during bulk inserts."
  },
  {
    "chunk_id": "207849bd-590a-44c6-bb5c-b5432462fc60",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` function in the documentation is used to update data in a table, and it must be combined with filters to target the specific items to be updated. The function accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted. An optional `countOptionalCountMethod` parameter can be used to retrieve the count of rows affected by the update operation."
  },
  {
    "chunk_id": "d448bcb9-be55-402a-8c21-9b40ca555084",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe upsert operation in the Supabase API allows inserting or updating data in a table based on the primary key. Primary keys must be included in the `values` dictionary to use upsert. The operation supports various parameters, such as specifying the column to get the row count, the return method, handling duplicates, and setting default values for missing fields in bulk inserts."
  },
  {
    "chunk_id": "7835c15b-5b5e-4cd8-849d-04a0116e7070",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` operation in Supabase should always be combined with filters to target the specific items to be deleted. When using `delete()` with filters and Row-Level Security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by providing an array of values."
  },
  {
    "chunk_id": "e7ea3a7e-1092-48fb-9747-fa004e29245f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nYou can call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. The `supabase.rpc()` method is used to call a Postgres function, which supports various parameters like `params`, `get`, `head`, and `count` to control the function execution and return values."
  },
  {
    "chunk_id": "28651e9c-493c-4eaa-9c1e-816dbdde83b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively retrieve, update, upsert, or delete rows from a database table based on specified conditions. Filters can be applied to various Supabase query methods, and can even be used with Postgres functions that return a table response. The order of applying filters and other query methods is important, as demonstrated by the correct and incorrect examples provided."
  },
  {
    "chunk_id": "f9d5c126-8c4d-4a52-be53-4508ed70016c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table by checking if a specific column is equal to a given value. The `eq()` method is used to perform this filter, taking the column name and the value to match as parameters. This can be useful for retrieving rows that satisfy a particular condition."
  },
  {
    "chunk_id": "4e496ad7-c3d6-4d74-a7fc-ef35c7d69389",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `neq()` function in Supabase allows you to filter a table by selecting only the rows where a specified column is not equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is a common operation in data querying and can be useful for excluding certain rows from the result set."
  },
  {
    "chunk_id": "58c620da-0368-46ae-b699-4eb70415b280",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides instructions on how to filter a database table to include only rows where a specified column has a value greater than a given value. It outlines the required parameters, \"column\" and \"value\", and provides an example of how to use the `gt()` method with the `select()` function in the Supabase library to achieve this filtering."
  },
  {
    "chunk_id": "b5fe2aa4-19f3-4138-a51d-38bf60b228ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `gte()` function in Supabase is used to filter a database table where the value in a specified column is greater than or equal to a provided value. The function takes two parameters: the column name and the value to filter by. This can be used in conjunction with the `select()` function to retrieve only the rows matching the filter criteria."
  },
  {
    "chunk_id": "885bfe1e-da9d-4960-b5c3-8f350c6de59b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table by selecting only rows where a specified column is less than a given value. The required parameters are the column name and the value to filter by. An example is provided using the Supabase library's `lt()` method to select rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "c7593c3c-24e9-4e06-8637-2e7e566c8c8c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This code snippet demonstrates how to filter a database table where the value in a specified column is less than or equal to a given value. The `lte()` function is used to apply this filter, with the column name and the value to filter by as parameters."
  },
  {
    "chunk_id": "1dbe61fa-3e75-404d-923b-91694130b5a5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Column matches a pattern\" feature allows filtering a table by checking if a specific column's value matches a given case-sensitive regular expression pattern. The key parameters are the column name and the pattern to match, and this functionality can be used with the `select()` method to retrieve only the rows where the specified column matches the provided pattern."
  },
  {
    "chunk_id": "8bf6d431-9b7f-4bf2-ab7b-28a6e99055b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `ilike()` function in the Supabase API allows you to perform a case-insensitive pattern match on a specified column. The `columnRequiredstring` parameter specifies the column to filter, and the `patternRequiredstring` parameter defines the pattern to match against. This functionality is useful for implementing flexible search and filtering capabilities in your application."
  },
  {
    "chunk_id": "c38a15cd-8760-4849-9050-56957ba98610",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'Column is a value' feature allows filtering rows where a specified column matches a given value, including checking for nullness, true, or false. The required parameters are the column name and the value to match, which can be null, boolean, or any other data type."
  },
  {
    "chunk_id": "4ab6103c-2c42-453a-a580-fe626f15214f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to filter rows in a database table where a specific column value is included in a provided array of values. The `in_()` method in the Supabase client library is used to perform this operation, which can be applied to the `select()` query."
  },
  {
    "chunk_id": "fa9afad4-7898-47ae-bd53-85ee45d2d80b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe `contains()` function in Supabase is used to filter rows where the specified column contains every element in the provided value. This is particularly relevant for `jsonb`, `array`, and `range` columns. The function takes two parameters: the column name and the value to filter with, which can be a `jsonb`, array, or range."
  },
  {
    "chunk_id": "8123a414-60d2-4ef7-b8a2-fbb09c40983e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` operator is used to filter rows in a database table where the elements in the specified column (e.g., jsonb, array, or range) are fully contained within the provided value. This is useful for querying data structures like JSON, arrays, and number ranges to find records that match a specific set of values or intervals."
  },
  {
    "chunk_id": "10de06da-ab92-4846-93c4-e63604c34cdf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature in the documentation is applicable to range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The parameters include the column name and the range to filter with, as demonstrated in the example using the `range_gt()` method in a Supabase query."
  },
  {
    "chunk_id": "550e7885-9628-4c66-9667-bb63195047ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature allows filtering rows in a range column where each element is either contained within the specified range or greater than any element in the range. It takes two required parameters: the column name and the range to filter with. This can be useful for querying data based on date/time ranges."
  },
  {
    "chunk_id": "3ba9a160-bc54-4b75-962e-647d5d41ea41",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the column is less than any element in the specified range. The parameters required are the column to filter on and the range to filter with. This functionality can be applied using the `range_lt()` method in the Supabase query builder."
  },
  {
    "chunk_id": "2148a968-deaa-4d33-bf2d-683d1f60dd05",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is applicable only for range columns. It allows you to filter rows where every element in the specified column is less than or equal to any element in the provided range. The parameters required are the column name and the range to filter with, which can be used in a `select()` query."
  },
  {
    "chunk_id": "79cd9664-4dd9-4663-8160-e6cee9ac834f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers the \"Mutually exclusive to a range\" feature, which is applicable only for range columns. It allows filtering rows where the column value is mutually exclusive to the provided range, meaning there can be no element between the two ranges. The parameters include the column name and the range to filter with, as demonstrated in the example using the `range_adjacent()` method in a Supabase query."
  },
  {
    "chunk_id": "1b8dc6f3-3e1d-4e3c-abc2-dc35ade11974",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'With a common element' filter is only applicable to array and range columns. It matches rows where the 'column' and 'value' parameters have at least one element in common. This filter is useful for searching across array-based data, such as tags in an 'issues' table, to find rows where the tags overlap with the provided values."
  },
  {
    "chunk_id": "358a8822-689c-4657-9e92-41c52f874eff",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content discusses the \"Match a string\" feature, which is used to filter text and tsvector columns in a database. This feature allows you to match rows where the specified column matches the query string, with options for configuring the text search behavior. The example demonstrates how to use the `text_search` method in the Supabase client library to perform a full-text search on the \"content\" column."
  },
  {
    "chunk_id": "45b5d91c-d380-4076-8fc4-8a6c7961e0c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase client library allows you to filter a database table by matching rows where each column in the `query` object is equal to its associated value. This is a convenient shorthand for writing multiple `.eq()` calls. The `match()` method takes a `queryRequired` object as a parameter, where the keys are column names and the values are the filter values to match."
  },
  {
    "chunk_id": "628569f9-e0c1-4d76-a0dc-7058d129cdbd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes how to use the `not_` operator in PostgREST filters to select rows that do not match the specified criteria, such as not being in a given set of IDs or not containing certain array values. It also demonstrates using `not_.is_` to select rows where a column is not null when using the `select()` function."
  },
  {
    "chunk_id": "7a315b47-ede6-4218-bb0f-dc47a0078a9d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the documentation expects the use of raw PostgREST syntax for filter names and values, such as using parentheses for 'in' filters, curly braces for array values, and 'cs' or 'cd' for 'contains()' or 'containedBy()' operations. The function also supports filtering on referenced tables by setting the 'reference95table' parameter. The or() function can be used with the select() function to combine multiple filters with the 'or' operator, or to filter on referenced tables."
  },
  {
    "chunk_id": "f70e67a2-b713-4f18-aab5-e67b9422311d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `filter()` method in the Supabase client library allows you to apply filters to your queries using the PostgREST syntax. It supports various operators like `in`, `cs` (contains), and can handle array values. The summary also includes an example of using `filter()` on a foreign table to select data based on the `name` column."
  },
  {
    "chunk_id": "95d641a2-88e6-4290-94ef-354d684292e9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "fb7f15a5-1d27-443b-9fcb-19026f375df4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe order() method in the Supabase client library allows you to order the query results by a specified column. The parameters include the column name, a boolean to determine whether the order should be descending, an optional foreign table name, and a boolean to control whether null values are shown first. This functionality is demonstrated in an example where the \"countries\" table is queried and ordered by the \"name\" column in descending order."
  },
  {
    "chunk_id": "344d3422-127c-4f07-aefb-81d8439e4d36",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'limit()' function in the Supabase API allows you to limit the number of rows returned from a database query. The 'sizeRequired' parameter specifies the maximum number of rows to return, and the 'foreignTable' parameter can be used to limit rows from a foreign table instead of the parent table. This is a useful feature for optimizing database queries and reducing response size."
  },
  {
    "chunk_id": "0142df0e-2701-46c6-9f11-4f40fcd74da0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function allows limiting the query result to a specified range of records, defined by a starting offset (`from`) and an ending offset (`from + to`). This respects the query order, and if no order clause is specified, the range behavior may be unpredictable. The `from` and `to` parameters are 0-based and inclusive, allowing selection of specific rows within the result set. An optional `foreign_table` parameter can be used to limit the range to a foreign table instead of the parent table."
  },
  {
    "chunk_id": "7a3a4acf-e8f7-4a64-8be6-53a547009951",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is:\n\nThe `select().limit(1).single()` method in Supabase can be used to retrieve a single row of data from a table, returning the data as a single object instead of an array of objects. This is useful when you only need to retrieve a single record, as it eliminates the need to access the first element of an array."
  },
  {
    "chunk_id": "85fafa2f-3eb2-4f40-ba33-68b9e82b8f77",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase library. This is useful when you expect at most one matching result, as it returns the data as a single object instead of an array. The example demonstrates querying the \"countries\" table and filtering for a specific name."
  },
  {
    "chunk_id": "7d052f42-0e9c-4b0a-bd7f-1ee68dc6d918",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides the ability to retrieve data from a Supabase table as a CSV string. The `csv()` method is used to format the response data as a CSV, which can be useful for exporting or further processing the data in a tabular format."
  },
  {
    "chunk_id": "57f15a0c-a8b7-403c-9d77-2edb32f8d621",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres allows developers to view the execution plan of a query, which is useful for debugging slow queries. However, `explain()` should be used cautiously as it can reveal sensitive database information. To enable `explain()` in production, a pre-request function can be used for additional protection. The `explain()` method supports various parameters such as `analyze`, `verbose`, and `format` to control the output and behavior of the query plan."
  },
  {
    "chunk_id": "e64d3ff1-3986-449e-93f6-36bc02ed5e76",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nTo create a new user, the \"Confirm email\" setting in the project's auth providers determines whether a user needs to confirm their email address before logging in. If \"Confirm email\" is enabled, a user is returned but the session is null, while if it's disabled, both a user and a session are returned. Additional redirect URLs can be configured for the confirmed email redirect."
  },
  {
    "chunk_id": "0b666092-b478-402a-b369-968a40a52fc5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The function `supabase.auth.sign_in_anonymously()` creates an anonymous user, which is recommended to be set up with a captcha token to prevent abuse. It returns an anonymous user with custom user metadata, which can be passed in the `options` parameter."
  },
  {
    "chunk_id": "30a11de5-e24f-4ce6-b838-4de779f4feb9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user by providing either an email and password or a phone number and password. It includes example code for signing in with email and password, and specifies the required `credentialsRequiredSignInWithPasswordCredentials` parameter for the sign-in operation."
  },
  {
    "chunk_id": "4dfb6207-8b04-4bf6-94c2-18200b4bbbb0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to sign in using an OIDC ID token. It requires the authentication provider to be enabled and configured. The `sign_in_with_id_token()` method is used, passing the provider name and the ID token as parameters, to authenticate the user."
  },
  {
    "chunk_id": "b234481d-d1cd-4f98-811b-f7e3b88adfd2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation covers signing in a user through One-Time Passwords (OTPs), which can be sent to the user's email or phone number. It explains that the `sign_in_with_otp()` method can be used for passwordless sign-ins, and can also create a new user if they don't exist. Developers can configure the OTP delivery method and customize the magic link's destination URL. The summary also notes that magic links and OTPs share the same implementation, and provides an example of the `sign_in_with_otp()` function call."
  },
  {
    "chunk_id": "a931031c-9368-4e96-a5d6-08c3885458ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation explains how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It provides a code example for signing in using the GitHub provider, and mentions that Supabase supports various third-party providers that can be configured. The key technical point is the `supabase.auth.sign_in_with_oauth()` method, which allows developers to integrate third-party authentication into their Supabase-powered applications."
  },
  {
    "chunk_id": "9922fd51-de18-4ad2-8d45-86bd1bd42eb3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the provided CLI commands. You can then initiate the sign-in flow by specifying either the associated email domain or the provider ID, which allows for more customized authentication scenarios like mapping specific user email addresses or using different identification hints."
  },
  {
    "chunk_id": "ab609c35-913e-4fcf-9114-139dccd19f78",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is already signed in. While this revokes the refresh token and deletes the JWT from the client-side, the access token JWT remains valid until it expires, as Supabase Auth uses JWTs for authentication. The `sign_out()` method by default signs out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "392f3400-718a-4fa6-bb1d-ab3d0611364d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for user authentication, supporting different verification types such as SMS, email, and phone number changes. The verification type should match the corresponding authentication method used previously. The `TokenHash` contained in email templates can be used for sign-in with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "28bbe74c-8bd1-4b91-a26e-28e051562dd4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified user data is required, the `get_user()` method should be used instead. Additionally, the method will automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "6f2590bd-2c0f-4848-8f1f-b4d6ef72733b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` retrieves a new session, regardless of the current session's expiry status. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve the current session's refresh token. If the current refresh token is invalid, an error will be thrown. This method ensures that a valid session is always available, even if the current one has expired."
  },
  {
    "chunk_id": "c4b8fa0f-01e1-46af-8f7a-0881d4cc1fb8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The `supabase.auth.get_user()` method fetches the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. This method can be called with an optional access token JWT, otherwise it will use the JWT from the current session."
  },
  {
    "chunk_id": "722e380e-c119-4ded-84a0-4db795e70973",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `set_session()` method sets the session data using an `access_token` and `refresh_token`. If the current session is expired, it will refresh the session to obtain a new session. If the refresh token or access token is invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "668453fd-64ed-4527-a63f-63d5e3aa1c88",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers methods for Multi-Factor Authentication (MFA), specifically focusing on time-based one-time password (TOTP) as the supported 2nd factor. It allows users to enroll multiple TOTP factors, up to 10, for recovery purposes, reducing the need to store recovery codes and improving the security by diversifying the authentication factors."
  },
  {
    "chunk_id": "903c718a-e1cd-403d-a293-feeeeca07182",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nCurrently, the only supported `factor_type` for enrolling a multi-factor authentication (MFA) factor is `totp` (time-based one-time password). The returned `id` from the `mfa.enroll()` function should be used to create an MFA challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "4558a20d-787a-4190-b45f-38779911c968",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which allows users to authenticate using a multi-factor authentication method."
  },
  {
    "chunk_id": "8bb61a81-8913-4046-ab6f-a08b907077da",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. The `supabase.auth.mfa.verify()` function can then be used to verify a challenge by providing the `factor_id`, `challenge_id`, and the `code` received from the user."
  },
  {
    "chunk_id": "fe26a9f3-6823-4284-8d5d-58737308d9f8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` calls in a single step, allowing users to challenge and verify a factor with a code, such as `'123456'`, and the factor's ID, like `'34e770dd-9ff9-416c-87fa-43b31d7ef225'`."
  },
  {
    "chunk_id": "51c295b4-b2aa-49b9-a636-b303c7c66ebc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the Supabase authentication API provides the `unenroll()` function, which takes the `factor_id` as an argument. This allows users to remove a specific MFA factor from their account, providing them more control over their security settings."
  },
  {
    "chunk_id": "60c2a753-c308-4046-ab7f-f5ac5a089a78",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the required AAL level, with AAL2 returned if the user has a verified factor, and AAL1 returned otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "8027f78e-5558-4be8-89dd-4fe63702ad7e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function by making an authenticated request and automatically attaching the appropriate Content-Type header based on the payload type. Supports passing a request body, which can be a Blob, ArrayBuffer, File, FormData, or JSON, and allows overriding the default Content-Type header if needed. Provides an example of invoking the \"hello-world\" function with a custom request body."
  },
  {
    "chunk_id": "6987b2bb-cbe5-4225-a03a-7fc4ad0299f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Developers can enable full replication to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The provided code demonstrates how to subscribe to various Realtime events, such as broadcasts, presence changes, and specific table updates, and how to handle the received data."
  },
  {
    "chunk_id": "e0b0b9cf-c28d-47a1-ad19-e6911a4caaf2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain Realtime service and database performance, as unused subscriptions can degrade the system. The `supabase.remove_channel()` function can be used to remove a specific channel, which Supabase will automatically clean up 30 seconds after the client disconnects."
  },
  {
    "chunk_id": "758052a5-6383-4293-bc5b-45935408e452",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain performance of the Realtime service and the database, as unsubscribed channels can degrade performance when more clients are simultaneously subscribed. To remove all channels, use the `supabase.remove_all_channels()` method, which Supabase will automatically handle 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "388c76b9-abdd-49d8-9a65-a28b8cb9386e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code retrieves all channels from the Supabase service. This functionality allows users to access and work with the full list of available channels, which is an essential capability for many applications that interact with a channel-based system."
  },
  {
    "chunk_id": "ae2a1457-bb22-4da3-a5a4-2322e890c3f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nBroadcasts a message to all connected clients in a Supabase channel. The example code demonstrates how to subscribe to a channel, and then use the `send_broadcast()` method to send a message containing random cursor position data to all subscribed clients."
  },
  {
    "chunk_id": "a475717c-8307-4d8b-85ab-dbcd697c1e96",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` permission on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide on access control for more information. The `create_bucket()` function is used to create a new bucket."
  },
  {
    "chunk_id": "b26230fe-b060-4393-8039-72617676f68d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` access on the `buckets` table, and no permissions required on the `objects` table. Refer to the Storage guide for more information on access control. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "d47277b2-d882-4c6e-8faf-4dda9e4a2759",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. The Storage guide provides more information on how access control works in Supabase."
  },
  {
    "chunk_id": "362765f6-404f-427f-b650-442e5a98677b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the required RLS policy permissions are: `select` and `delete` on the `buckets` table, and no permissions on the `objects` table. The delete bucket operation is performed using the `supabase.storage.delete_bucket(name)` function."
  },
  {
    "chunk_id": "0964644b-83aa-4ad7-af07-803fba23963d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires 'select' permissions on the 'buckets' table and 'select' and 'delete' permissions on the 'objects' table. The `supabase.storage.empty_bucket(name)` function can be used to empty the specified bucket. Refer to the Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "e29e144a-9d8b-4fce-994c-5f04b05a2bb4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the `objects` table requires `insert` permissions. The MIME type should be specified for file types like images or audio, otherwise it defaults to `text/html`. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired path on Supabase Storage, along with the appropriate file options."
  },
  {
    "chunk_id": "cc6ed502-da56-44bf-bc01-f040e21182f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are 'select' on the 'objects' table, but no permissions are needed on the 'buckets' table. The code snippet demonstrates how to download a file from a Supabase storage bucket by specifying the source file path and writing the downloaded content to a local destination file."
  },
  {
    "chunk_id": "c46afcf6-79f9-42aa-a01c-fd46db781924",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the `objects` table permissions require `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "1acae115-af51-41e2-a788-f54a4cc78fd7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in the Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file can be updated by opening the file in binary mode and using the `supabase.storage.from_(\"bucket_name\").update()` method, specifying the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "70a83148-84bf-4ed4-b3b4-aafd2ae938ce",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code to move a file from 'public/avatar1.png' to 'private/avatar2.png' within the 'bucket_name' bucket is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "5598f8c3-8d60-40e1-8fae-c97df4f60903",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table, but no permissions are needed on the 'buckets' table. The process involves using the `supabase.storage.from_('bucket_name').remove('file.jpg')` function."
  },
  {
    "chunk_id": "4ccc9563-e413-474b-9e82-09509f29b1e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions require `select` access, but no permissions are needed for the `buckets` table. The signed URL is generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, and the access control details are described in the Storage guide."
  },
  {
    "chunk_id": "d12be82d-af26-46f5-ba4f-bb770ae01432",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve the public URL of an asset in a Supabase Storage bucket, the bucket must be set to public either through the updateBucket() method or the Supabase dashboard. No specific permissions are required in the buckets or objects tables. The public URL can be obtained using the get_public_url() method, which takes the path to the asset as an argument."
  },
  {
    "chunk_id": "24e556fa-15f3-4000-963e-3f6eac311d2a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of tools to interact with a Supabase Postgres database. It allows developers to perform various operations, such as querying the database, listening to changes, invoking Deno Edge Functions, managing user authentication, and handling large file uploads and downloads, all within a Python environment."
  },
  {
    "chunk_id": "cd23233c-722e-46b6-ab9a-2fb4597a6202",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: \n\nThe documentation provides instructions for installing the Supabase-py library, which can be done using the pip package manager for Python versions greater than 3.7. The installation command `pip install supabase` is provided, allowing users to easily set up the library on their systems."
  },
  {
    "chunk_id": "ecafa5ec-de9c-485e-bc5c-3457eca8bea5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters, and optional client options to customize the authentication behavior. The initialization process is demonstrated in a code example that retrieves the Supabase URL and key from environment variables."
  },
  {
    "chunk_id": "c2fe0604-9df5-4c41-bba8-68044a798ef7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Supabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `range()` query can be used to paginate through the data.\n2. The `select()` function can be combined with filters and modifiers to customize the data retrieval. The `apikey` is a reserved keyword and should be avoided as a column name.\n3. The `select()` function supports various parameters, such as specifying the columns to retrieve and the method to use for counting the rows returned."
  },
  {
    "chunk_id": "683a6d71-40fe-437b-8430-395faa6f704f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the parameters for the `insert()` method in a software library, which allows users to insert data into a table. The method accepts a dictionary or a list of dictionaries as the data to be inserted, and provides optional parameters to control the response, such as the count of rows returned and whether to return a minimal or full representation of the inserted data. It also includes an example of how to use the `insert()` method to create a new record in a \"countries\" table."
  },
  {
    "chunk_id": "a73b7ef9-11ef-438b-89c2-575cdf3b7c28",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to update data in a table, and should always be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or list of data to be inserted, and an optional `CountMethod` parameter to retrieve the count of rows affected."
  },
  {
    "chunk_id": "3e602d2b-8617-473e-855a-dd22edcb11c4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Upsert data\" section is as follows:\n\nThe `upsert()` method allows you to insert or update data in a table. Primary keys must be included in the `values` dict to use upsert. The method supports bulk inserts, handling of duplicate rows, and specifying columns to work with unique constraints. It also provides options to control the response, such as returning the count of affected rows or a minimal representation."
  },
  {
    "chunk_id": "bb7b9cae-885d-4954-99da-d8711f4c509c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "To delete data in Supabase, the `delete()` method should be used in conjunction with filters to target the specific items to be deleted. When using `delete()` with filters and row-level security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by specifying an array of values."
  },
  {
    "chunk_id": "a368045b-8e0e-4264-b96d-f83c6ae7aea0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to call Postgres functions as Remote Procedure Calls, which are useful for executing database logic from anywhere. It provides information on the parameters for the function call, such as the required function name, optional parameters, and options for read-only access and row counting algorithms. The summary also includes example code for calling a Postgres function without arguments."
  },
  {
    "chunk_id": "b3d9ddd9-8387-48d7-997f-920e9d42e90c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions, and can be used in various database operations like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response, and can be chained together to create more complex conditional statements."
  },
  {
    "chunk_id": "91d74660-fec1-4867-b73b-bfe29a3004ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column is equal to a given value. It provides the parameters for the `eq()` function, which takes the column name and the value to filter by. An example is given using the Supabase library to select all rows from the \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "2d545d85-9eb5-467d-80ac-84bc1092896e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Column is not equal to a value\" functionality allows filtering rows where a specified column does not match a given value. It takes two parameters: the column name to filter on and the value to filter by. This can be used with the `select()` method, as shown in the example, to retrieve data that does not match the specified criteria."
  },
  {
    "chunk_id": "839eb73f-5569-41a0-81e6-a244fc0da2aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The documentation describes how to filter a database table by selecting only rows where a specified column has a value greater than a given value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `gt()` method."
  },
  {
    "chunk_id": "63e03f9b-da72-4c6a-a4a5-2760c1e71ffd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a table by selecting rows where a specific column is greater than or equal to a given value. The parameters required are the column name and the value to filter by. This can be used with the `select()` method, as shown in the example."
  },
  {
    "chunk_id": "a0443880-14cf-4bd8-ac5a-752058582b15",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter rows in a database table where the value of a specified column is less than a given value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library's `lt()` method to select rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "b834f75d-d995-466a-a7d2-06d9ceb727bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to filter a database table by a column value, keeping only rows where the column is less than or equal to a specified value. The 'lte()' method is used to apply this filter, with the column name and value passed as parameters."
  },
  {
    "chunk_id": "d3d566cc-032f-4def-aa03-198fab357747",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering rows in a table where a specific column matches a given pattern case-sensitively. The required parameters are the column name and the pattern to match. This functionality can be used in a Supabase query to select rows where the 'name' column contains the substring 'Alba', for example."
  },
  {
    "chunk_id": "7a2daf7d-efa0-4e24-bc94-e34f812b6037",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `ilike()` function in the Supabase API allows you to perform a case-insensitive pattern match on a specified column. The `columnRequired` parameter specifies the name of the column to apply the filter on, and the `patternRequired` parameter is the pattern to match against. This can be useful for searching text-based data in a more flexible and user-friendly way."
  },
  {
    "chunk_id": "73881200-38d5-4c05-ac65-57e6b7f00a43",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' section explains how to filter rows in a database table where a specific column matches a given value. It outlines the required parameters, 'column' and 'value', which can be used to check for null, true, or false conditions. The example provided demonstrates how to apply this filter using the Supabase library."
  },
  {
    "chunk_id": "53abf51d-b8ef-4e2b-9259-229d8b166449",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This documentation describes the \"in_\" filter, which allows matching rows where the value in the specified column is included in the provided array of values. The key parameters are the column name and the array of values to filter by. This functionality is demonstrated in an example using the Supabase library to select rows from a \"countries\" table where the \"name\" column matches either \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "1e6b1203-22d2-4ea0-a050-4acb47b3d53f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Column contains every element in a value\" section is as follows:\n\nThis feature is applicable to jsonb, array, and range columns. It allows filtering rows where the specified column contains every element in the provided value. The parameters include the column name and the jsonb, array, or range value to filter with. Examples are provided for using this filter on array, range, and jsonb columns."
  },
  {
    "chunk_id": "65d80226-4985-4742-a520-48fec9861fe1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"contained by value\" feature, which is applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the provided value. The summary includes the required parameters, columnand value, and provides an example usage for a jsonb column."
  },
  {
    "chunk_id": "4a15b6d2-ff0b-4b92-9113-f51271738de4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" functionality is used for filtering range columns in a database table. It allows you to match only the rows where every element in the specified column is greater than any element in the provided range. The key parameters are the column name and the range to filter with, as demonstrated in the example using the Supabase library."
  },
  {
    "chunk_id": "ad627f88-a5f4-4fc2-9d76-5916da1626a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than or equal to a range' filter is used for range columns to match rows where every element in the column is either contained in the specified range or greater than any element in the range. It takes two required parameters: 'column', the range column to filter on, and 'range', the range to filter with. This is a useful feature for querying data with date/time ranges."
  },
  {
    "chunk_id": "f1058c32-6840-4788-9518-cff74bb20154",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is only applicable to range columns, and it matches rows where every element in the specified column is less than any element in the given range. The filter takes two required parameters: the column name and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column is less than the specified range."
  },
  {
    "chunk_id": "fd937885-fb3e-4f15-86d8-161b561277ea",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Less than or equal to a range\" section is as follows:\n\nThe \"less than or equal to a range\" filter is used to match rows where every element in the specified column is less than or equal to any element in the provided range. It takes two parameters: the column to filter on and the range to filter with. This filter can be used in the `select()` method of a Supabase query to retrieve data that falls within the specified range."
  },
  {
    "chunk_id": "7da01305-d08d-4461-990b-7c843a0f936f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Mutually exclusive to a range' feature is specific to range columns, allowing you to filter rows where the column value is mutually exclusive to the provided range. This means there can be no element between the column value and the range. The required parameters are the column name and the range to filter with, which can be used in a `select()` query to retrieve the relevant data."
  },
  {
    "chunk_id": "c5e3a826-cf99-4673-ab19-bf483b79c4f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis feature is only applicable to array and range columns. It allows filtering rows where the given column and value have at least one element in common. The two required parameters are the column to filter on and the value to filter with. This can be useful for operations such as filtering a table of issues by tags that contain specific values."
  },
  {
    "chunk_id": "37aeaf7e-a1bf-4ed1-901e-5019f22241d4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Match a string\" section discusses the use of the `text_search` function in Supabase to filter rows in a text or tsvector column based on a query string. It highlights the parameters required, such as the column name and the query text, as well as the optional parameters for configuring the text search, such as the normalization and search mode. An example usage of the `text_search` function is provided, demonstrating how to filter the \"content\" column of a \"texts\" table for rows matching the query \"'eggs' & 'ham'\" with the \"english\" configuration."
  },
  {
    "chunk_id": "579e0e58-f790-43c9-9344-8fb569ba4259",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided example filters a database table to only return rows where each column in the `query` parameter keys (e.g., `id` and `name`) has an equal associated value. This is a concise way to apply multiple equality filters on a table, instead of chaining multiple `.eq()` calls."
  },
  {
    "chunk_id": "447bfeca-e7ed-45fd-b4cf-9febbd2d6748",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes how to use the `not_` operator in PostgREST to match rows that do not satisfy a given filter. It provides examples of using `not_.in_()` for filtering based on a list of values, and `not_.contains()` for filtering based on array values. The summary also shows an example of using `not_.is_()` with the `select()` method to retrieve rows where a column is not null."
  },
  {
    "chunk_id": "64bc641e-83cd-4eba-b41f-ed6cc10da499",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The or95() function in the documentation allows you to use the raw PostgREST syntax to apply multiple filters, which can include the 'in' filter with a list of values, as well as the 'contains' and 'containedBy' filters for array-type columns. The or95() function can be used with the select() function to filter data from a table, and it can also be used to filter on referenced tables."
  },
  {
    "chunk_id": "a4a1f0d1-5a42-4b91-bc94-2a19324986a9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the PostgREST API expects the use of raw PostgREST syntax for filter values. This includes using parentheses `()` for the `in` operator and backslashed curly braces `\\{\\}` for array values. The `filter()` method takes three parameters: `column` (the column to filter on), `operator` (the filter operator), and `value` (the filter value). An example is provided demonstrating how to use `filter()` on a foreign table to select rows where the `name` column is in the set `(\"Algeria\",\"Japan\")`."
  },
  {
    "chunk_id": "10d649da-1b4b-4dce-b695-c79941ad277c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level to return only matching rows. Modifiers must be specified after filters and are applicable for queries that return a table response, such as `select()` or `rpc()`."
  },
  {
    "chunk_id": "57484231-2a5d-438f-9645-5f4f8519bb56",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on how to order the results of a query by a specified column. The `order()` method takes parameters for the column to order by, whether to sort in descending order, and options to order nulls first. An example is provided showing how to order the results of a select query on a foreign table."
  },
  {
    "chunk_id": "63e1b0a2-448f-43f8-aa36-fac1a1779977",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `limit()` method is used to specify the maximum number of rows to return from a database query. The `sizeRequired` parameter sets the maximum number of rows, while the `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table. This functionality is demonstrated in the example of querying the \"countries\" table and returning a single row."
  },
  {
    "chunk_id": "b527927e-1c7c-4715-8dc1-a8c2dba04bad",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes how to limit the query result by specifying a range using the `from` and `to` parameters. The `from` and `to` values are zero-based and inclusive, allowing you to retrieve a specific subset of the query results. This feature is useful for paging through large result sets or limiting the data returned to the client."
  },
  {
    "chunk_id": "4f39ddcc-1f08-46ad-890b-0bce1b9bd7b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of how to retrieve a single row of data using the Supabase `select()` function with the `limit(1)` and `single()` parameters. This approach returns the data as a single object instead of an array of objects, which can be useful in certain scenarios where you only need to retrieve a single record."
  },
  {
    "chunk_id": "01c08638-680c-4d54-8d5c-1c92ccf39732",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of the Supabase `maybe_single()` method, which allows retrieving zero or one row of data from a table. It demonstrates how to use this method in a Supabase query to retrieve a single object instead of an array of objects, which is useful when expecting at most one result."
  },
  {
    "chunk_id": "6f5a10b0-4a91-43b9-ab70-c245c8aaf4e2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe documentation describes the \"Retrieve as a CSV\" functionality, which allows returning the data from a Supabase table as a string in CSV format. This can be achieved using the `.csv()` method after the `.select()` operation, as shown in the example code. This feature is useful for quickly exporting data from a Supabase table in a widely-supported format for further processing or analysis."
  },
  {
    "chunk_id": "cecb4fc4-eba1-467c-8d0b-02426ed988d0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe Postgres `EXPLAIN` command can be used to debug slow queries by providing the execution plan for a query. It can be enabled in Supabase by using the `explain()` method, which supports various parameters like `walOptional`, `verbose`, `settings`, `format`, `buffers`, and `analyze` to customize the output. Enabling `explain()` is recommended for testing environments, and additional protection should be used in production to avoid revealing sensitive information."
  },
  {
    "chunk_id": "ce3b444f-502e-4e64-b252-d88e861f9f1d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers creating a new user in Supabase. It explains that by default, users need to verify their email before logging in, which can be disabled. It also discusses the behavior when signing up an existing confirmed user, where an obfuscated user object or an error message is returned depending on the email and phone confirmation settings. The documentation provides example code for signing up a user with an email and password, and notes that the `get_user()` function can be used to fetch the currently logged-in user."
  },
  {
    "chunk_id": "731a6af7-0edf-4e52-8a32-5dec381a081d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a CAPTCHA to prevent abuse when signing in anonymously, and provides an example of how to use the `supabase.auth.sign_in_anonymously()` function with the `options` parameter to include a CAPTCHA token. The anonymous user creation is useful for allowing users to interact with the system without providing any personal credentials."
  },
  {
    "chunk_id": "f6fc38d2-084b-4518-8eaa-fe283d7c5458",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes the process of signing in an existing user with either an email and password or a phone number and password. It includes the required parameters, an example code snippet for signing in with email and password, and a response object. The key technical points are the supported sign-in methods, the required input credentials, and the response object structure."
  },
  {
    "chunk_id": "b8ec7212-d965-40ff-8c97-3e13fa0c41eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content provides information on signing in with an OIDC ID token, which allows users to authenticate using an ID token from an authentication provider. The key steps involve calling the `supabase.auth.sign_in_with_id_token()` function, providing the authentication provider and the ID token as parameters. The response from this function call is then returned, which can be used to complete the sign-in process."
  },
  {
    "chunk_id": "e9d8e573-7caa-4b68-9c51-c470654008b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_with_otp()` function is used for passwordless sign-in, where a one-time password (OTP) is sent to the user's email or phone number. If the user doesn't exist, this function will sign up the user. The OTP can be configured to be a magic link or a one-time code. The magic link's destination URL is determined by the `SITE_URL`, and additional redirect URLs can be added to the project. The function takes a `SignInWithPasswordlessCredentials` object as a parameter, which includes the user's email or phone number and optional configuration options."
  },
  {
    "chunk_id": "8d38311a-e815-4d01-b336-e6d760226d92",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content discusses signing in a user through OAuth, a common third-party authentication method supported by Supabase. It explains that the `sign_in_with_oauth()` method is used for this purpose, and provides an example of signing in using the GitHub provider. The key parameters and capabilities of this method, such as redirecting the user and specifying scopes, are also outlined."
  },
  {
    "chunk_id": "78c1deb2-f115-4afc-95a0-c0410a095c68",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, the developer must first establish a connection to an identity provider using the CLI commands. The `domain` property can be used to start the sign-in flow if the email domain has been associated with the identity provider, or the `provider_id` property can be used to specify a different way to initiate the authentication flow, such as mapping specific user email addresses or using other identifying hints. The `sign_in_with_sso()` method is used to perform the SSO sign-in operation."
  },
  {
    "chunk_id": "f7cdfb1f-eb1c-4098-a4e4-18d16efe10f1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the user's refresh token and deletes the JWT from the client-side, but does not revoke the existing JWT, which remains valid until it expires. By default, `sign_out()` signs out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "ec64a724-12b6-4677-94e4-cfcec2a3b786",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, including SMS, email, and account changes. The verification type should match the corresponding auth method used previously. The `TokenHash` contained in email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "89d26061-96df-4d4d-a413-232cfe714871",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source on the server, as it could be tampered with by the sender. If trustworthy user data is required, the `get_user()` method should be used instead. The method also handles session refresh if the access token has expired."
  },
  {
    "chunk_id": "78142be3-1335-42ee-8bba-1b1720e0dcb2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if one is not provided, it will attempt to retrieve it from `get95session()`. If the current session's refresh token is invalid, an error will be thrown. This method ensures that a fresh session is always returned, even if the current one has expired."
  },
  {
    "chunk_id": "c3476017-e422-4e8f-bb08-f38e8749581a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be called with an optional access token JWT, or the JWT from the current session will be used."
  },
  {
    "chunk_id": "2dd4a0f1-6f9f-48b4-98c0-cd67e764d382",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session()` sets the session data by taking an `access_token` and `refresh_token` as parameters. If the current session is expired or the tokens are invalid, the method will handle refreshing the session. Upon successful execution, a `SIGNED_IN` event is emitted. This method is used to refresh the session and maintain user authentication."
  },
  {
    "chunk_id": "b4ff9e3d-a803-4bca-aa11-dce095d0f9f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Auth MFA (Multi-Factor Authentication) functionality provided by Supabase, which currently supports time-based one-time password (TOTP) as the 2nd factor. Users can enroll up to 10 TOTP factors for recovery, reducing the burden of storing recovery codes and the attack surface compared to having a single backup factor."
  },
  {
    "chunk_id": "df1cacd8-1c20-4f92-9b78-455cf01b32cf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The provided content describes how to enroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase Python client. The `mfa.enroll()` function is used to enroll a TOTP factor, which returns an `id` that can be used to create and verify challenges. The documentation also includes references to related functions for creating, verifying, and combining the challenge and verification steps."
  },
  {
    "chunk_id": "06fff687-7c95-4e5c-ac09-642d1b902437",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for a multi-factor authentication (MFA) factor, the user must first have an enrolled factor. The `mfa.challenge()` function is used to initiate the challenge, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "8d22a34b-fd55-4803-a1eb-58d9e05155e0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `supabase.auth.mfa.verify()` method, providing the `factor_id`, `challenge_id`, and `code` parameters. This allows users to authenticate a multi-factor authentication (MFA) challenge for a specific factor associated with their account."
  },
  {
    "chunk_id": "caf905c1-7369-4197-9e45-9d29eb04161f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking a factor ID and a verification code as input."
  },
  {
    "chunk_id": "13144ff7-618b-4e0f-bb86-052be9cc8377",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, you can use the `supabase.auth.mfa.unenroll()` function, passing in the `factor_id` of the factor you want to unenroll. This function allows you to remove a specific multi-factor authentication factor from a user's account, which can be useful for managing user authentication settings."
  },
  {
    "chunk_id": "e9c5d149-350e-490e-a5f5-2eff53a0d31b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) in Supabase is a measure of the strength of an authentication mechanism. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor of authentication, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the minimum AAL required for the user's session."
  },
  {
    "chunk_id": "3baefc01-fdcf-4145-94ae-eb10fa1bc259",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary for the given content is:\n\nInvokes a Supabase Edge Function by making a request to the Supabase Functions service. Requires an Authorization header, and automatically attaches Content-Type headers for common data types. Supports passing a request body and custom headers to the function."
  },
  {
    "chunk_id": "155d4fc3-014c-441c-bad4-d94b63d82681",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, while listening to database changes is disabled due to performance and security concerns. Developers can enable full replica identity to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The document also provides code examples for subscribing to various Realtime events, such as broadcasts, presence changes, and database updates."
  },
  {
    "chunk_id": "5c2d4314-c738-487c-86fa-37ce40461f46",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain performance of the Realtime service and database, as unused channels can degrade performance when more clients are subscribed. The `supabase.remove_channel()` function can be used to unsubscribe from a channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "a6c7202a-6fcf-4303-9479-d68bcd204433",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically cleans up channels 30 seconds after a client disconnects, but excessive unused channels can degrade the system. The `supabase.remove_all_channels()` method can be used to remove all channels."
  },
  {
    "chunk_id": "4abf6994-ac4b-4c26-bf25-109a399726f8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is:\n\nThe 'get_channels()' function retrieves all the channels in the Supabase database. This allows users to access and work with the full list of available channels programmatically."
  },
  {
    "chunk_id": "9fdadc0d-7713-4388-b7df-7c3801b8b806",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe content describes how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It provides an example of subscribing to a channel, then sending a broadcast message with random cursor position data."
  },
  {
    "chunk_id": "a197c144-39a7-487c-9694-f189c2ec4c19",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, you need the `insert` permission on the `buckets` table. You do not need any permissions on the `objects` table. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "c81207c7-96e2-4565-b094-3a1f2c74ca32",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: 'select' on the 'buckets' table, and no permissions required on the 'objects' table. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "30bfedce-7e2d-47e2-a520-6bc9401f568f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "11e58daa-ee50-4b1e-b97f-5327361fa959",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the user requires `select` and `delete` permissions on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for details on access control. The code to delete a bucket is `supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "0ae523b4-852a-4da8-af3d-42971b6a25d4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty a bucket, and the Storage guide provides information on how access control works."
  },
  {
    "chunk_id": "81449d93-9a36-49cc-8680-61ac40dbdbb6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user must have the `insert` permission on the `objects` table. The appropriate MIME type should be specified, defaulting to `text/html` if not provided. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, which takes the file, the desired storage path, and optional file options such as the content type."
  },
  {
    "chunk_id": "8bb2e742-8acb-495e-ad32-3b48a6e8968a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table, and `select` permissions for the `objects` table. The summary provides instructions for downloading a file using the Supabase storage API, where the file is read from the source location and written to the specified destination."
  },
  {
    "chunk_id": "4d63a8bd-c912-4556-99e6-0b9741b54bf4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, you need the `select` permission on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files, and the Storage guide provides details on configuring access control."
  },
  {
    "chunk_id": "2366055d-d95f-465b-b915-e4cfcf6b38e2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated by opening the local file, then using the Supabase storage client to update the file on the Supabase storage, specifying the bucket name, file path, and optional file options like cache control."
  },
  {
    "chunk_id": "58d7e0fb-0086-4a61-8d6f-3a6805490498",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are: 'objects' table permissions for 'update' and 'select'. The code to move a file from 'public/avatar1.png' to 'private/avatar2.png' within the 'bucket_name' bucket is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Storage guide for details on Supabase access control."
  },
  {
    "chunk_id": "6a0a9462-2f30-4ae0-8020-fd3e7c5c5e4c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires \"delete\" and \"select\" permissions on the \"objects\" table, but no permissions on the \"buckets\" table. The Storage guide provides more information on how access control works."
  },
  {
    "chunk_id": "b36d8437-63be-434c-ba75-b252b9a531d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are: no permissions for the `buckets` table, and `select` permissions for the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, and is useful for granting temporary, secure access to private storage objects."
  },
  {
    "chunk_id": "a6c5fe7b-b42a-427d-a212-b07d7930ed3c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve the public URL of an asset in a Supabase Storage bucket, the bucket must be set to public. This can be done via the `updateBucket()` API or by selecting \"Make public\" in the Supabase Dashboard. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` function can then be used to retrieve the public URL of a file stored in the public bucket."
  },
  {
    "chunk_id": "7c50b884-68e5-4788-a527-5e92dd77ecce",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with a Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods to work with Supabase's features, making it a powerful tool for building Python-based applications that leverage Supabase's capabilities."
  },
  {
    "chunk_id": "ecede4af-d97a-47cb-9692-fa50eb97cd78",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase Python client (supabase-py) using pip, the Python package installer. The package supports Python versions greater than 3.7. The installation command is `pip install supabase`."
  },
  {
    "chunk_id": "ebda56b9-d98c-4157-8a1a-1da1c4606a3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary entry point for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and API key. The client can be customized with optional parameters to configure authentication behaviors."
  },
  {
    "chunk_id": "169fc842-7a00-46f7-8360-1cfe38c452fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` column should be avoided as it is a reserved keyword in the Supabase Platform. The `select()` function supports parameters to specify columns and count methods for the retrieved data."
  },
  {
    "chunk_id": "b30d7b3b-c591-45af-86ed-45bb43a09a08",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe 'insert' function in the documentation allows users to insert data into a table. It accepts a dictionary or a list of dictionaries as the 'jsonRequired' parameter, representing the data to be inserted. Additionally, it supports optional parameters such as 'countOptional' to get the count of rows returned, 'returningOptional' to specify the response format, and 'default95to95nullOptional' to handle missing fields during bulk inserts."
  },
  {
    "chunk_id": "e21623a1-5867-47a9-8da0-2291c33dc3ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation is used to update data in a table, and it must be combined with filters to target the specific item(s) to be updated. The method takes a dictionary or a list of dictionaries as input, representing the new values to be inserted, and an optional `count` parameter to retrieve the count of updated rows."
  },
  {
    "chunk_id": "d6443412-3f86-40fa-8b91-503ac508b38e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The key technical points are:\n1) Primary keys must be included in the `values` dict to use upsert.\n2) Upsert supports bulk operations, with options to control the returned data and handle duplicates or missing values.\n3) Upsert can be used to insert or update data in tables with unique constraints."
  },
  {
    "chunk_id": "566c78f7-730a-4c4b-8f4a-7566e640cb2b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` method in the Supabase client library should always be used with filters to target specific records for deletion. When using RLS (Row-Level Security), only rows visible through `SELECT` policies will be deleted. The `delete().in_()` method can be used to delete multiple records in a single query by specifying an array of values. The `countOptional` and `returningOptional` parameters can be used to control the response from the delete operation."
  },
  {
    "chunk_id": "b15a5238-77fc-4cff-8417-fb0f01c95ceb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to call Postgres functions as Remote Procedure Calls (RPCs) from an application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides details on the parameters used to call a Postgres function, including options for passing arguments, filtering, and read-only access mode. It also includes an example of calling a simple \"Hello World\" Postgres function."
  },
  {
    "chunk_id": "8802cb05-d3b3-4b26-a208-b4cdf26d457c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specified conditions in select, update, upsert, and delete queries. They can be used on Postgres functions that return table responses, and can be chained to apply multiple conditions. The order of applying filters and other query methods is important, as demonstrated by the correct and incorrect examples provided."
  },
  {
    "chunk_id": "5773f588-68c8-4a38-97fe-58e3376a691f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'eq()' method in Supabase allows filtering a table by a column's value, matching only rows where the specified column is equal to the provided value. The method takes two required parameters: 'column', the name of the column to filter on, and 'value', the value to filter by. This functionality can be used in conjunction with the 'select()' method to retrieve the filtered data."
  },
  {
    "chunk_id": "7511754b-7a3a-4218-8bf7-da2d147e4bf0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe `neq()` function in Supabase allows you to filter a table by selecting only the rows where a specified column is not equal to a given value. The required parameters are the column name and the value to filter by. This can be used in a `select()` query to retrieve the desired data."
  },
  {
    "chunk_id": "9e13f932-2c87-4e6b-98ae-e02f6d017db0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation section describes how to filter a database table by selecting rows where a specified column has a value greater than a given value. The key parameters are the column name and the comparison value. An example is provided using the Supabase library's `select()` and `gt()` (greater than) methods."
  },
  {
    "chunk_id": "6fb85be0-9855-4d53-81d7-1ceb883fe12b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column is greater than or equal to a value\" feature allows filtering rows where the specified column has a value greater than or equal to the provided value. The key parameters are the column name and the value to filter by. This can be used in the `select()` method, as shown in the example of filtering the \"countries\" table by rows where the \"id\" column is greater than or equal to 2."
  },
  {
    "chunk_id": "cbc2ab30-510d-4bda-969a-3c1e611c8d7a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a table by a column with values less than a specified value. The `lt()` method is used to apply the \"less than\" filter, with the column name and comparison value as parameters. This allows retrieving only the rows where the specified column has a value less than the provided value."
  },
  {
    "chunk_id": "59e3a96a-5d9b-4f69-961a-47ee03bb7fb8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `lte()` method in Supabase's `select()` query filters the data to include only rows where the specified `column` is less than or equal to the provided `value`. This is a common filtering operation used to retrieve a subset of data based on a comparison with a target value."
  },
  {
    "chunk_id": "c3c41760-6686-4186-9bfc-9d5bd99369f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"column matches a pattern\" feature allows filtering rows where a specified column matches a given pattern case-sensitively. It takes two required parameters: the column name and the pattern to match. This functionality can be used with the `select()` method, as demonstrated in the example."
  },
  {
    "chunk_id": "f6b54987-1eb5-4ba6-b8d5-e6d820724a08",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `ilike()` function in the Supabase library allows you to perform a case-insensitive pattern match on a specified column. It takes two parameters: the column name and the pattern to match, and returns rows where the column value matches the pattern."
  },
  {
    "chunk_id": "1c73e846-b6b9-48f2-bf64-0d0390957241",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the provided content is:\n\nThe \"Column is a value\" feature allows filtering rows based on a specific column's value, including checking for null, true, or false values. The key parameters are the column name and the value to match, enabling precise data filtering and retrieval within a table."
  },
  {
    "chunk_id": "102a0806-a0bd-4d3f-9e50-9c7870288dc0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a parameter called `column` that filters rows based on whether the values in that column are included in the provided `values` array. This can be used with the `in_()` method in the Supabase library to filter a table by selecting only the rows where the specified column contains one of the given values."
  },
  {
    "chunk_id": "aa35bf8f-95f0-4f92-a659-9ff60804c284",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"contains\" operator is only applicable to jsonb, array, and range columns. It allows filtering rows where the column contains every element present in the provided value. The parameters include the column name and the value to filter with, which can be a jsonb object, array, or range."
  },
  {
    "chunk_id": "dc599b9e-d615-4fd3-b934-09b582e36bbd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operation is relevant for jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The operation takes two parameters: the column to filter on and the value to filter with. This can be useful for querying data where the column contains a set of elements, such as a list of days of the week."
  },
  {
    "chunk_id": "8e5f793e-43d8-4592-8783-5cdc2d713834",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than a range' filter is used for range columns, matching only rows where every element in the specified column is greater than any element in the provided range. The key parameters are the column to filter on and the range to compare against. This filter can be used in a Supabase query to select records where the 'during' column is greater than the given date range."
  },
  {
    "chunk_id": "107bd0fc-906e-4911-8df0-59646bf7ed76",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is used to filter a range column in a table, where each element in the column must either be contained in the specified range or greater than any element in the range. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to select only the relevant rows."
  },
  {
    "chunk_id": "acc485b1-61a2-4f7b-b230-6894ff046107",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows where the values in a range column are less than any element in the specified range. It requires two parameters: the column to filter on and the range to filter with. This can be used in conjunction with the `select()` method to retrieve data that matches the specified criteria."
  },
  {
    "chunk_id": "83d94e05-bdb8-4db6-96e2-164cd246b640",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is applicable only for range columns. It matches rows where every element in the specified column is less than or equal to any element in the provided range. The filter is configured using the `range_lte()` method, which takes the column name and the range array as parameters."
  },
  {
    "chunk_id": "b4a44e3d-8397-48b2-8c9a-7093256984d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Mutually exclusive to a range' feature is applicable only for range columns in a database. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The feature is configured through the 'range_adjacent' method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "81e740ac-d896-4c0f-a694-b2c16bed98d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"With a common element\" filter is only applicable to array and range columns. It matches rows where the specified column and value have at least one element in common. The filter can be used in Supabase queries to filter data, such as selecting titles from the \"issues\" table where the \"tags\" column overlaps with the values \"is:closed\" and \"severity:high\"."
  },
  {
    "chunk_id": "831e8082-f4a0-4781-affc-219f2036f5b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes the \"Match a string\" functionality, which allows filtering rows in text or tsvector columns based on a provided query string. It provides details on the required parameters (column and query) and optional parameters (options), and includes an example usage with the Supabase library."
  },
  {
    "chunk_id": "f9534b08-c425-418b-b566-808104ecd2a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows you to filter rows where each column in the `query` keys is equal to its associated value, providing a concise way to apply multiple `.eq()` filters. The `query` parameter is a dictionary with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "2de460bc-f3e9-40a6-a8f8-4df4155abd89",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content explains how to use the 'not_' operator in PostgREST to match rows that don't satisfy a given filter. Examples are provided for filtering on 'in' and 'contains' operations. The 'not_' operator is also demonstrated with the 'select()' function to retrieve rows where the 'name' column is not 'null'."
  },
  {
    "chunk_id": "13c9a5ab-c50e-4623-9301-3ede647865d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `or_()` method in Supabase to match at least one filter, following the PostgREST syntax. It explains how to use `in()`, `contains()`, and `containedBy()` filters, and provides example code demonstrating the usage of `or_()` with `and()` and on referenced tables."
  },
  {
    "chunk_id": "07f9d020-95af-4dd7-af2d-c6fc7f911c9b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'filter()' method in the provided software documentation expects the use of raw PostgREST syntax for the filter values. It supports various filtering operations, such as 'in' for a list of values and 'contains' for array values. The example demonstrates how to use the 'filter()' method on a foreign table to retrieve data with specific name values."
  },
  {
    "chunk_id": "1cac1d8e-0fab-403d-aeb1-ca2fdce59370",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, in contrast to filters which operate at the row level. Modifiers must be specified after filters and some modifiers only apply to queries that return row-based responses, such as `select()` or `rpc()` on a function that returns a table."
  },
  {
    "chunk_id": "262a4e1f-4492-4c30-866e-80bdf304c67a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` function allows sorting the query results by a specified column, with options to sort in descending order, include foreign table columns, and order by showing nulls first. This is demonstrated in the example of selecting all columns from the \"countries\" table and ordering the results by the \"name\" column in descending order."
  },
  {
    "chunk_id": "fb603b78-6745-48aa-a4b5-92affe15e01e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the number of rows returned in a database query using the `limit()` method. The `sizeRequired` parameter specifies the maximum number of rows to return, and the optional `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. An example is provided to demonstrate the usage of `limit()` with the Supabase library."
  },
  {
    "chunk_id": "3957c063-aa98-4dfe-ba16-e4fdc855534c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe Limit function in the query allows restricting the result set to a specified range, defined by a starting offset (`from`) and an ending offset (`from + to`). This can be useful for pagination or retrieving a subset of records. The range is 0-based and inclusive, and can also be applied to foreign tables. Omitting an explicit ordering clause may lead to unexpected behavior when using the range function."
  },
  {
    "chunk_id": "995df3df-ab42-4824-b6ec-f7530bf9332b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: To retrieve a single row of data from the \"countries\" table, use the `select()` method with `limit(1)` and `single()` to return the data as a single object instead of an array. This is useful when you only need to retrieve a single record, reducing the amount of data returned and simplifying the response."
  },
  {
    "chunk_id": "b3071ab9-f932-4e23-abd3-738a3ae2a42e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a database table using the `maybe_single()` method in the Supabase library. This is useful when you expect to retrieve at most one row of data that matches a specific condition, such as filtering by a unique column like \"name\". The response is returned as a single object instead of an array of objects."
  },
  {
    "chunk_id": "4b07736d-40bb-468a-974e-bd1eaa30db5e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Retrieve as a CSV\" section describes how to return data from a Supabase table as a string in CSV format. It provides an example of the code to execute this operation (`supabase.table(\"countries\").select(\"*\").csv().execute()`), and notes that the response will be the data in CSV format."
  },
  {
    "chunk_id": "3d08d830-e853-4384-a4fb-0db5171e3a52",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres allows you to get the execution plan of a query, which is useful for debugging slow queries. It can reveal sensitive information, so it's best to only enable it for testing environments. The `explain()` method supports various parameters like `verbose`, `settings`, `format`, `buffers`, and `analyze` to control the output and execution of the query."
  },
  {
    "chunk_id": "dc0ecd50-b5d6-48b0-9cad-37f961d103a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the Supabase project dashboard determines whether a user needs to confirm their email address before logging in. If \"Confirm email\" is disabled, both a user and a session are returned; if enabled, only a user is returned until email confirmation. The default redirect URL after email confirmation can be modified in the project settings. Existing confirmed users will receive an obfuscated/fake user object if both \"Confirm email\" and \"Confirm phone\" are enabled, or a \"User already registered\" error if either is disabled."
  },
  {
    "chunk_id": "7d15ceaa-33fc-4665-8298-f26332900d77",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the functionality to create an anonymous user in the system. It recommends setting up captcha for anonymous sign-ins to prevent abuse, and provides an example of how to create an anonymous user with custom user metadata using the `supabase.auth.sign_in_anonymously()` function, passing in the captcha token as an option."
  },
  {
    "chunk_id": "8c7b0978-6a46-49f8-8087-d723dbb0eb4f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides example code for signing in with email and password, and outlines the required `credentialsRequiredSignInWithPasswordCredentials` parameter. The sign-in process allows users to authenticate and access the application's functionality."
  },
  {
    "chunk_id": "81518a02-4944-4376-b02f-d548064141a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in with an OIDC ID token using the Supabase authentication provider. The `sign_in_with_id_token()` method is used, taking the provider name (e.g., \"google\") and the ID token as parameters. This allows users to authenticate with the application using a trusted external identity provider, simplifying the sign-in process."
  },
  {
    "chunk_id": "eaad9e8a-f3f6-481f-a53c-0570766560c5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Sign in a user through OTP\" section is as follows:\n\nThe OTP (One-Time Password) sign-in method allows users to authenticate without a password, by sending a code to their email or phone number. This method can be used for both signing up new users and signing in existing ones. Developers can configure whether a magic link or an OTP is sent, as well as control the behavior of creating new users. The OTP sign-in implementation supports both email and SMS/WhatsApp channels, and the destination URL for magic links can be customized using the project's SITE_URL and redirect URL settings."
  },
  {
    "chunk_id": "72a36cb1-df3d-4565-b7ef-ed55366d38f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes the method for signing in a user through the Supabase OAuth integration. It explains that this method is used for signing in users using a third-party provider, and Supabase supports various third-party providers. The summary includes the parameters and code example for signing in with a third-party provider, such as GitHub, using the `supabase.auth.sign_in_with_oauth()` function."
  },
  {
    "chunk_id": "6c90ef46-2658-415c-acda-70ab42ddf1e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the `domain` property to start the sign-in flow for an associated email domain, or the `provider_id` property to use a different way to identify the identity provider, such as mapping specific user email addresses or using company-specific information."
  },
  {
    "chunk_id": "dbf6338c-d847-4ea4-8b7b-bc32c4539bdf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user has already signed in. Signing out revokes the user's refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which will remain valid until it expires. The `sign_out()` method uses the global scope by default, signing out the user from all other sessions as well."
  },
  {
    "chunk_id": "f2034dc7-c5bf-479d-9e52-16b7ccda06db",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, including SMS, email, and password recovery. The verification type should be determined based on the corresponding auth method called before `verify_otp`. The `TokenHash` contained in the email templates can be used to sign in, and it can also be used with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "e178f974-0a43-4d56-8d50-c2591edacd73",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data on the server, as it could be tampered with. If verified user data is required, the `get_user` method should be used instead. Additionally, the method will automatically refresh the session if the access token has expired."
  },
  {
    "chunk_id": "9e87b089-1a5d-4a6e-b4bb-ff4422e7d3ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the refresh token is invalid, an error will be thrown. This method ensures that a valid session is always available, even if the current one has expired."
  },
  {
    "chunk_id": "db176a86-8e7e-445d-9316-48bf88f1487b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the user object from the database instead of the local session, which is useful for verifying user authorization by validating the provided access token JWT on the server. It can be called with an optional JWT parameter, otherwise it uses the JWT from the current session."
  },
  {
    "chunk_id": "225603c4-e2de-4c76-aceb-1f04c8fc7a7d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the current session data using an `access_token` and `refresh_token`. If the session is expired or the tokens are invalid, the method will refresh the session and obtain new tokens. Upon successful execution, a `SIGNED_IN` event is emitted. This functionality is crucial for maintaining a valid user session and handling token expiration in the application."
  },
  {
    "chunk_id": "80dd096c-f9cc-45d1-9528-90e0352aa5e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Auth MFA (Multi-Factor Authentication) functionality provided by Supabase. It currently supports time-based one-time password (TOTP) as the second factor, allowing users to enroll multiple TOTP factors for recovery, up to a limit of 10. This approach reduces the burden of storing recovery codes and decreases the attack surface compared to having a single backup TOTP factor."
  },
  {
    "chunk_id": "193224fa-a0a8-4515-a752-aca11a5abfea",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The content summarizes the process of enrolling a TOTP (time-based one-time password) factor for multi-factor authentication (MFA) in the Supabase platform. It explains that the `mfa.enroll()` method is used to enroll a TOTP factor, and the returned `id` should be used to create a challenge. The documentation also provides references to the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` methods for creating, verifying, and combining the challenge and verification steps."
  },
  {
    "chunk_id": "af01a334-5fe1-4298-87d9-fa6a161d064d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for multi-factor authentication (MFA), an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which takes the `factor_id` as an input parameter."
  },
  {
    "chunk_id": "edb156f6-bc02-4a7d-ae92-0409f47c065b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge for a MFA factor, you need to call the `supabase.auth.mfa.verify()` method with the `factor_id`, `challenge_id`, and `code` parameters. This allows you to authenticate a user's identity by verifying a previously created challenge."
  },
  {
    "chunk_id": "e61e61ce-d6af-459c-9b9b-cdc5fb3d60d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking in the `factor_id` and `code` as parameters. This allows for efficient two-factor authentication by combining the challenge and verification processes."
  },
  {
    "chunk_id": "69423246-9479-4f15-b3ef-e04dc2536652",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, the code `supabase.auth.mfa.unenroll()` is used, passing the `\"factor_id\"` as a parameter. This allows the user to remove a specific multi-factor authentication factor from their account, providing more control over their security settings."
  },
  {
    "chunk_id": "292411f7-e34c-43b3-bea2-622c768deef9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 represents authentication with a single factor such as email and password, while AAL2 represents two-factor authentication with a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, either AAL1 or AAL2, based on the user's verified authentication factors."
  },
  {
    "chunk_id": "04f3cc7f-f72a-4a33-91c4-187ddd1fae9c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by making a request with an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type, but this can be overridden. The function can be invoked with a request body, and error handling can be implemented. Example usage is provided."
  },
  {
    "chunk_id": "8806ce4f-2bb9-496f-adb3-9951a98d25eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "Summary:\n\nThe documentation covers the basics of subscribing to a channel in the Supabase Realtime API. It explains that by default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. The guide also discusses how to receive previous data for updates and deletes, and how row-level security (RLS) is applied. It provides example code for subscribing to a channel, sending a broadcast message, and handling the received broadcast."
  },
  {
    "chunk_id": "89968eed-7dd4-4fec-a1ba-80f9d5433f9f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel from the Realtime service is recommended to maintain performance and database load. Supabase automatically cleans up unused channels 30 seconds after a client disconnects, but having too many subscribed channels can degrade the service. The `supabase.remove_channel(myChannel)` function can be used to remove a specific channel."
  },
  {
    "chunk_id": "b8faab34-e271-4916-b3cc-7065f691afbe",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain Realtime service performance and database efficiency by reducing unused subscriptions. Supabase automatically cleans up disconnected channels after 30 seconds, but excessive unused channels can degrade performance as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "d8ca79a2-bb6c-40dc-a4bd-6f2be4a116de",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code snippet `_10 channels = supabase.get_channels()` retrieves all the channels available in the Supabase platform. This function is useful for getting a list of all the channels that can be accessed or managed within the application."
  },
  {
    "chunk_id": "f9f05b8b-9135-42c4-b3e2-d5af7d7ca930",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe code snippet demonstrates how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and when the subscription is successful, it sends a broadcast message containing randomly generated cursor position coordinates."
  },
  {
    "chunk_id": "040f5910-1e90-4796-bc4c-a6f53ec72d02",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the user requires `insert` permissions on the `buckets` table, but no permissions on the `objects` table. The Storage guide provides details on how access control works for storage operations."
  },
  {
    "chunk_id": "43ce1132-c4f6-440d-a497-40210919e873",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to get a bucket is `_10 res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "f36eb17c-41b6-42b8-a588-df244884e7a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on how access control works. The code to list buckets is `supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "ef14afc1-e051-4fa0-927d-ed166ef08eac",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are required on the `objects` table. The storage guide provides more information on how access control works."
  },
  {
    "chunk_id": "d4e224dd-9786-447f-821b-b2e8f48e14e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket in Supabase, the user requires SELECT permissions on the `buckets` table and SELECT and DELETE permissions on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty the specified bucket. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "f6918097-1266-4410-bcfc-78797f68c51c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the required RLS policy permissions are `insert` access to the `objects` table. The MIME type should be specified for media files, defaulting to `text/html` if not provided. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file contents and optional file options such as the content type."
  },
  {
    "chunk_id": "9de10aa8-8a87-4a9b-ab02-312ad536337f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: \"objects\" table with \"select\" permissions. The file can be downloaded using the Supabase storage API, where the source file is specified, and the contents are written to the destination file."
  },
  {
    "chunk_id": "d7dd5bc5-7931-43d7-bc90-839c61aefe30",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions of `select` are required. The API call `supabase.storage.from_('bucket_name').list()` can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "1204215f-fa2e-4a83-96b0-2a2a259f0d7c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file, the required Supabase permissions are 'update' and 'select' on the 'objects' table. The file is updated by opening the local file, then using the Supabase storage client to update the file on the Supabase storage backend, specifying the file, path, and optional cache control and upsert settings."
  },
  {
    "chunk_id": "a8759f75-5578-441e-8595-7061d0b746fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase, the user requires `update` and `select` permissions on the `objects` table. The `move()` method is used to relocate a file from one location to another within the same storage bucket, e.g., from `'public/avatar1.png'` to `'private/avatar2.png'`. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "1cf1f430-6981-42a5-9489-2490ae2d2509",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').remove('test.jpg')` command can be used to delete a specific file from the bucket. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "0731ad39-f611-4928-ab55-299560c3d248",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are `select` access on the `objects` table. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function is used to generate a time-limited, signed URL for accessing a file in the specified storage bucket."
  },
  {
    "chunk_id": "eb4275ee-ef7d-49df-8f81-04318247cfad",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public either through the `updateBucket()` function or the Supabase dashboard. The `buckets` and `objects` tables require no permissions. The `get_public_url()` function can be used to retrieve the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "a740f962-dd99-443a-8e0a-a7ee0903fd6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Supabase Python client library, supabase-py, provides a comprehensive set of functionality for interacting with a Supabase Postgres database, including querying the database, listening to real-time changes, invoking Deno Edge Functions, managing user authentication and authorization, and handling large file uploads and downloads. The library is well-documented and available on GitHub, making it a useful tool for developers working with Supabase in Python."
  },
  {
    "chunk_id": "4ccb1fa2-b508-4529-a6c3-6f3b187f2776",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase Python library (supabase-py) using pip, the Python package installer. This library is compatible with Python 3.7 and later versions. The installation command for the supabase library is `pip install supabase`."
  },
  {
    "chunk_id": "a5a12e1a-a453-42e0-8ec9-626b5c5a1fd6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>import os    from supabase import create_client, Client        url: str = os.environ.get(\"SUPABASE_URL\")    key: str = os.environ.get(\"SUPABASE_KEY\")    supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters, as well as an optional `ClientOptions` object to configure authentication behavior. This client provides access to the full range of Supabase functionalities."
  },
  {
    "chunk_id": "884ec933-0d21-46e8-ab81-620e5eacac64",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data. The `apikey` keyword should be avoided as a column name when using the Supabase Platform. Key parameters include the columns to retrieve and the count method to use for the returned rows."
  },
  {
    "chunk_id": "89a57f16-94c1-4001-92ee-03a551eea66d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>response = (    supabase.table(\"countries\")    .insert({\"id\": 1, \"name\": \"Denmark\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the parameters for the 'insert' function in the Supabase library, which allows inserting single or multiple rows of data into a table. The key parameters include `jsonRequired` for the data to be inserted, `countOptional` for getting the count of inserted rows, `returningOptional` for specifying the response format, and `default95to95nullOptional` to control the handling of missing fields. The content also includes an example of how to use the 'insert' function to create a new record in the 'countries' table."
  },
  {
    "chunk_id": "9362e77a-5d8d-4a9d-be50-52d577fdd231",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>response = (    supabase.table(\"countries\")    .update({\"name\": \"Australia\"})    .eq(\"id\", 1)    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to modify existing data in a database table. It must be combined with filters to target the specific items to be updated. The method takes a dictionary or list of dictionaries as input, representing the new values to be inserted. The `count` parameter can be used to retrieve the number of rows affected by the update operation."
  },
  {
    "chunk_id": "d072f4a0-6dc3-4b2a-89fc-d9ad84d34460",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>response = (    supabase.table(\"countries\")    .upsert({\"id\": 1, \"name\": \"Australia\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe upsert operation allows inserting or updating data in a table based on the primary key values provided. Primary keys must be included in the `values` dict for upsert to work. The operation supports parameters such as `count` to get the row count, `returning` to specify the response format, and options to handle duplicate rows and null values."
  },
  {
    "chunk_id": "a2b0d4da-899f-49be-9cba-575f9b5a8cd2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The delete() function in Supabase should be used with filters to target specific items for deletion. When using RLS (Row Level Security), only rows visible through SELECT policies will be deleted. The delete().in_() method can be used to delete multiple records at once, where an array of values is provided to target entries that share common criteria."
  },
  {
    "chunk_id": "176713f9-daae-4900-8856-686f819453b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>create or replace function hello_world() returns text as $$    select 'Hello world';    $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The document describes how to call Postgres functions as Remote Procedure Calls, which are useful for database logic that rarely changes, such as password resets and updates. It provides details on the parameters that can be passed to the `supabase.rpc()` function, including options for specifying the function call, parameters, read-only mode, and count algorithms for set-returning functions."
  },
  {
    "chunk_id": "baad648c-bffc-49bb-9c56-4c4c12669422",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code># Correct    response = (    supabase.table(\"cities\")    .select(\"name, country_id\")    .eq(\"name\", \"Bali\")    .execute()    )        # Incorrect    response = (    supabase.table(\"cities\")    .eq(\"name\", \"Bali\")    .select(\"name, country_id\")    .execute()    )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase queries, including `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return table responses. The order of applying filters and other query methods is important, as demonstrated in the example code."
  },
  {
    "chunk_id": "a2054c8a-f69e-4b32-94d7-31cf747ca3e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section explains how to filter a table to return only rows where a specified column is equal to a given value. The `eq()` function is used to perform this filtering, with the column name and value being the two required parameters."
  },
  {
    "chunk_id": "d5e3fa39-a4c1-4fff-b2ff-10462f0a875d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `neq()` function in Supabase is used to filter rows where the specified column is not equal to the provided value. It takes two required parameters: `column` (the column to filter on) and `value` (the value to filter by). This can be used in a `select()` query to retrieve only the rows that match the given condition."
  },
  {
    "chunk_id": "857c40e9-86e3-4fc2-86e3-0585cef8fa6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The content describes how to filter a database table to include only rows where a specified column has a value greater than a provided value. This can be achieved using the `gt()` method in the Supabase library, which takes the column name and the comparison value as parameters."
  },
  {
    "chunk_id": "f62880e6-2eb5-47ea-ac09-4463d40e5237",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `gte()` method is used to filter rows where the specified `column` is greater than or equal to the given `value`. This is demonstrated in an example using the `supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()` query, which retrieves all rows where the 'id' column is greater than or equal to 2."
  },
  {
    "chunk_id": "75f90502-6b30-4329-b563-db3673fd0b21",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `lt()` method in Supabase allows filtering rows where a specified `column` has a value less than the provided `value`. This is demonstrated with an example that selects all rows from the \"countries\" table where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "e5336177-c725-467f-8ebc-dc377c48ed95",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `lte()` function in the Supabase library is used to filter a database table by selecting only rows where a specified column is less than or equal to a given value. The `columnRequiredstring` parameter specifies the column to filter on, and the `valueRequiredany` parameter specifies the value to filter by."
  },
  {
    "chunk_id": "c5e582fe-2192-4c76-9b4b-7df25c8cfe52",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering rows where a specified column matches a given regular expression pattern. It takes two required parameters: 'column' (the name of the column to filter) and 'pattern' (the pattern to match). This can be used in a `select()` query to filter the data, such as `supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\")`."
  },
  {
    "chunk_id": "848f590f-a20b-4de1-bd5b-db96063aa7d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis feature allows filtering rows where the specified column matches a case-insensitive pattern. The two required parameters are the column name and the pattern to match. This can be used with the `select()` method, for example to filter the \"countries\" table where the \"name\" column contains \"alba\" (case-insensitive)."
  },
  {
    "chunk_id": "983428ce-ebd8-4a06-ba7a-1a961aadbb21",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' feature allows filtering rows where a specified column matches a given value, including checking for nullness, true, or false. The key parameters are 'column' (the name of the column to filter on) and 'value' (the value to match). This functionality can be useful for targeted data retrieval and analysis tasks."
  },
  {
    "chunk_id": "df76aa1f-98c0-4de2-89c1-bacafa944142",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .in_(\"name\", [\"Albania\", \"Algeria\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The code snippet demonstrates how to filter a table in Supabase by a specific column, where the column value must be included in a provided array of values. This functionality is useful for efficiently querying and retrieving data that matches the specified criteria."
  },
  {
    "chunk_id": "1154f361-7ae3-4ede-9408-1420b8af94e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>response = (    supabase.table(\"issues\")    .select(\"*\")    .contains(\"tags\", [\"is:open\", \"priority:low\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe `contains` operator is only applicable to `jsonb`, `array`, and `range` columns. It allows filtering rows where the specified column contains every element present in the provided `value`. The `columnRequired` parameter specifies the column to filter on, and the `valuesRequired` parameter provides the `jsonb`, `array`, or `range` value to filter with."
  },
  {
    "chunk_id": "7b4f4d1e-777c-46f2-a804-f19b7fe5397a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>response = (    supabase.table(\"classes\")    .select(\"name\")    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is:\n\nThe \"contained by value\" operation is applicable to jsonb, array, and range columns in a database. It allows filtering rows where every element in the specified column is contained within the provided value. This can be useful for querying data stored in these complex data types, such as filtering a list of class schedules to only include those that occur on a specific set of days."
  },
  {
    "chunk_id": "07c53c48-d9b2-4976-a29b-a3eb5d56a90b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is specific to range columns in Supabase. It allows you to filter rows where every element in the specified column is greater than any element in the given range. The parameters required are the column name and the range to filter with."
  },
  {
    "chunk_id": "7584891c-5c1b-49fe-b660-7cbf54ad50bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"greater than or equal to a range\" feature is used to filter range columns in a database table, matching only rows where every element in the specified column is either contained within the given range or greater than any element in the range. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to retrieve the desired data."
  },
  {
    "chunk_id": "3f10fae5-397d-4269-b18f-048c7b5e27bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter range columns, matching only rows where every element in the specified column is less than any element in the provided range. The key parameters are the column to filter on and the range to filter with. This functionality is demonstrated in the example using the Supabase `range_lt()` method."
  },
  {
    "chunk_id": "00509531-ec65-4e39-84f6-264051277172",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provided here describes a database query filter that selects rows where every element in a specified column is less than or equal to any element in a given range. This is useful for filtering data based on a range of values in a column, such as a date range. The filter is applied using the `range_lte()` method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "a6250e84-14af-4081-bfe9-8f475177d9ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"mutually exclusive to a range\" feature is specific to range columns and allows filtering rows where the column value is mutually exclusive to the provided range, meaning there can be no element between the two ranges. The parameters are the column name and the range to filter on, and this functionality can be used with the `range_adjacent()` method in a Supabase query."
  },
  {
    "chunk_id": "a417261b-9f34-4d90-8e5c-eedb21a9572b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>response = (    supabase.table(\"issues\")    .select(\"title\")    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is about the \"with a common element\" filter in Supabase, which is used to match rows where a specified column and a provided value have an element in common. This is applicable for array and range columns. The parameters include the column to filter on and the value to filter with, and examples are provided for using this filter on array and range columns."
  },
  {
    "chunk_id": "8b021308-e388-4aba-b29e-0faaf8fcca50",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>response = (    supabase.table(\"texts\")    .select(\"content\")    .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Match a string\" feature is used to filter text or tsvector columns in a database table, where the column value matches the provided query string. It supports various text search options like basic normalization, full normalization, and websearch. This can be useful for implementing full-text search functionality in PostgreSQL-based applications."
  },
  {
    "chunk_id": "0be266eb-3601-4811-a095-8c919af16445",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .match({\"id\": 2, \"name\": \"Albania\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in the Supabase library allows you to filter a table by matching the values in the `query` dictionary to the corresponding column values in the table. This is a shorthand way of applying multiple `.eq()` filters to the same query. The `match()` function takes a dictionary of column names and their associated values as input, and returns the rows where all of the specified conditions are met."
  },
  {
    "chunk_id": "196a2577-9b94-475b-89fa-f523bf21e5fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>.not_.in_('id', '(5,6,7)') # Use `()` for `in` filter    .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .not_.is_(\"name\", \"null\")    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to use the `not_` modifier in PostgREST to match rows that do not satisfy a given filter. This is demonstrated with examples for the `in` and `contains` filters, as well as using `not_.is_` to exclude rows where a column is `null`. These techniques allow for more flexible and precise filtering of data in a Supabase table."
  },
  {
    "chunk_id": "4b8e6aeb-fe3d-433e-975a-a45fadd0ed48",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.    .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>response = (    supabase.table(\"countries\")    .select(\"name\")    .or_(\"id.eq.2,name.eq.Algeria\")    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Match at least one filter\" section is:\n\nThe or95() function in the Supabase client library allows you to use the raw PostgREST syntax for filters, such as in() for filtering on a list of values, contains() for searching in array columns, and containedBy() for filtering on array columns. The or_() function can be used with the select() function to filter on the parent table or referenced tables, allowing for more complex queries."
  },
  {
    "chunk_id": "80b1af40-b3c5-4d4b-aea1-198ac5427771",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>.filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter    .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the documentation expects the use of raw PostgREST syntax for the filter values. It supports various operators like 'in' and 'cs' (contains) for filtering columns and array values, respectively. The method takes three parameters: column (required), operator (optional), and value (optional), all following the PostgREST syntax. An example is provided demonstrating the use of filter() on a foreign table to select specific country names."
  },
  {
    "chunk_id": "ec97ccf2-dd3d-40d1-bae3-b96d1064b9ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, in contrast to filters which operate at the row level. Modifiers must be specified after filters, and some modifiers only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "edc56e8f-05e2-4f5e-9ec3-994e3728432b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .order(\"name\", desc=True)    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `order()` function in Supabase allows you to order the query results by a specific column. You can specify the column to order by, whether to sort in descending order, and whether to show nulls first. This is demonstrated with an example query that orders the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "25c5250d-67fd-4e12-82c6-077ebaa81f6d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'limit()' function in Supabase's select() method allows you to specify the maximum number of rows to return from a table. Additionally, you can set the 'foreign95table' parameter to limit rows from a foreign table instead of the parent table. This is a useful feature for efficiently retrieving a subset of data from a database."
  },
  {
    "chunk_id": "ac02c91c-44f9-43f5-bbf7-b2623708dac7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in Supabase allows limiting the query result to a specified range of records, defined by a starting index (`from`) and an ending index (`to`). This can be useful for pagination or retrieving a subset of data. The range is zero-based and inclusive, and can be applied to both the parent table and foreign tables."
  },
  {
    "chunk_id": "d21f89c9-12d6-4477-978e-c298c238090a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code demonstrates how to retrieve a single row of data from the \"countries\" table in a Supabase database using the `select()`, `limit(1)`, and `single()` methods. This allows the data to be returned as a single object rather than an array of objects, which can be useful for certain use cases."
  },
  {
    "chunk_id": "99077447-a3cf-41ee-bbd7-8bce5d6887aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .eq(\"name\", \"Albania\")    .maybe_single()    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content discusses the use of the `maybe_single()` method in the Supabase client library to retrieve zero or one row of data from a database table. This is useful when you expect at most one result, allowing you to handle the response as a single object rather than an array. The example demonstrates querying the \"countries\" table for a row where the \"name\" column is \"Albania\"."
  },
  {
    "chunk_id": "b8478d0a-2fa1-49c4-b81b-33dfb90ba4f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the \"Retrieve as a CSV\" feature, which allows users to return data from a Supabase table as a CSV string. This is useful for exporting data in a tabular format, as shown in the example code snippet. The summary includes information about the input (data), output (CSV string), and the relevant Supabase API method to execute this functionality."
  },
  {
    "chunk_id": "3ea34e6e-8b52-4c96-a40e-b1d027cc5d5b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `explain()` method in Postgres can be used to debug slow queries by providing the execution plan for a query, even for `rpc()` or writes. While `explain()` is not enabled by default due to security concerns, it can be enabled in testing environments or with additional protection in production. The `explain()` method accepts several parameters to control the output, such as including information on WAL records, configuration settings, buffer usage, and executing the query to return actual run time."
  },
  {
    "chunk_id": "d6045962-c971-4f92-82a8-9b70cdab5069",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>response = supabase.auth.sign_up(    {\"email\": \"email@example.com\", \"password\": \"password\"}    )</code></p><p>Response</p><hr />",
    "summary": "To create a new user, the 'confirm email' setting determines if users need to confirm their email address before logging in. If 'confirm email' is disabled, both a user and a session are returned, otherwise only a user is returned. The sign-up process supports various credential types, and the currently logged-in user can be fetched using the `get_user()` function."
  },
  {
    "chunk_id": "5e18d9d9-a5d3-4ea6-9804-f1057862d648",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>response = supabase.auth.sign_in_anonymously(    {\"options\": {\"captcha_token\": \"\"}}    )</code></p><p>Response</p><hr />",
    "summary": "The summary is: The 'create_anonymous_user()' function returns an anonymous user account, which is recommended to be used with a captcha to prevent abuse. It accepts an optional 'options' parameter to provide a captcha token, and returns the user's credentials."
  },
  {
    "chunk_id": "16203947-8cb7-4ca5-9b0d-0494fbcbdf4c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>response = supabase.auth.sign_in_with_password(    {\"email\": \"email@example.com\", \"password\": \"example-password\"}    )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides code examples for the `supabase.auth.sign_in_with_password()` function, which takes in the user's credentials and returns a response. The key technical details include the required parameters and the structure of the response."
  },
  {
    "chunk_id": "ba3bdcae-ec25-43d0-a0b1-655d45b4633c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>response = supabase.auth.sign_in_with_id_token(    {\"provider\": \"google\", \"token\": \"your-id-token\"}    )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to sign in using an OIDC ID token. It allows users to authenticate with an enabled and configured authentication provider, such as Google, by passing the provider name and the ID token as parameters to the `supabase.auth.sign_in_with_id_token()` function. The response from this function can then be used to manage the user's session."
  },
  {
    "chunk_id": "f0cbbc2b-aa64-4e91-bcf8-14896b6b2815",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>response = supabase.auth.sign_in_with_otp(    {    \"email\": \"email@example.com\",    \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},    }    )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP method allows users to authenticate without a password, by sending a one-time code to their email or phone number. This can be used for passwordless sign-ins, and the method will automatically create a new user account if the user doesn't already exist. Developers can configure whether to send an OTP or a magic link, and can customize the redirect URL for the magic link. The implementation for magic links and OTPs is the same, with the option to modify the email template to include the OTP token instead of a confirmation URL."
  },
  {
    "chunk_id": "22367156-552b-43f5-8902-f5921f4084c5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>response = supabase.auth.sign_in_with_oauth({    \"provider\": 'github'    })</code></p><hr />",
    "summary": "This method allows users to sign in using a third-party authentication provider, such as GitHub, supported by Supabase. It provides a `sign_in_with_oauth()` function that takes the provider name as a parameter and returns the user's credentials. This feature enables developers to easily integrate third-party authentication into their applications."
  },
  {
    "chunk_id": "8ab45bdd-d566-41a5-867e-a0cdf59ef950",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the provided CLI commands. You can then use the `domain` property to start a sign-in flow, or the `provider_id` property to use a different way to initiate the authentication flow, such as mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "b610fe43-9eae-4941-a169-51461e2eb34a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth is used to sign out a user, which revokes the refresh token and deletes the JWT from the client-side. However, the access token JWT remains valid until it expires. The method can be used to sign out the user from the global scope, which signs out all other sessions the user is logged into."
  },
  {
    "chunk_id": "e1ab3f01-2c25-4eb3-a2b0-6b719305a91a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>response = supabase.auth.verify_otp(    {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}    )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and password changes. The verification type should match the corresponding auth method used before `verify_otp`. The `TokenHash` obtained from the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "331c44b3-b185-4087-8257-f85974d32ae5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the current local in-memory session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with by the sender. If trustworthy user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "b7b53c7d-c3f3-499a-9bc6-f992632de182",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session whether it has expired or not."
  },
  {
    "chunk_id": "24b9e941-8886-44e9-a502-60c0b530b79b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session. This is useful for checking if the user is authorized, as it validates the user's access token JWT on the server. The method can be called with an optional access token JWT, and if none is provided, the JWT from the current session is used."
  },
  {
    "chunk_id": "61085a8c-4a58-4d9d-ac04-345b8baa0e02",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session` method sets the session data by updating the `access_token` and `refresh_token`. If the current session is expired, it will refresh the session to obtain a new session. If the `refresh_token` or `access_token` is invalid, an error will be thrown. Upon successful session update, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "5823598b-0112-4bef-861f-3d0bb64d35a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers Multi-Factor Authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, which provides more flexibility and security compared to relying on recovery codes alone."
  },
  {
    "chunk_id": "3ec13d61-f3da-4901-9485-722c2f0e2d5d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>res = supabase.auth.mfa.enroll({    \"factor_type\": \"totp\",    \"friendly_name\": \"your_friendly_name\"    })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase authentication API currently supports enrolling a time-based, one-time password (TOTP) factor. To create and verify a challenge, the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` methods can be used. The returned `id` from enrolling the factor should be used to create the challenge."
  },
  {
    "chunk_id": "7a0400a8-578f-4e92-93a9-de9538093406",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>res = supabase.auth.mfa.challenge({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'    })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` method is used to create a challenge, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "15819270-5d28-44ed-a9c6-72479777cd9b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>res = supabase.auth.mfa.verify({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',    \"code\": '123456'    })</code></p><hr />",
    "summary": "To verify a challenge, you must first create one. The example code shows how to verify a challenge by providing the factor_id, challenge_id, and a 6-digit code. This is a critical step in the multi-factor authentication (MFA) process, ensuring the user's identity is properly verified before granting access."
  },
  {
    "chunk_id": "93071ac3-da13-4cc4-a7d1-b2a4c3ba3cae",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>res = supabase.auth.mfa.challenge_and_verify({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    \"code\": '123456'    })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled authentication factor is required. The `challenge_and_verify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing the user to provide a factor ID and a one-time code to authenticate."
  },
  {
    "chunk_id": "84b41605-627e-48cf-b14b-0f495b737dd4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>res = supabase.auth.mfa.unenroll({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    })</code></p><hr />",
    "summary": "The summary is:\n\nTo unenroll a multi-factor authentication (MFA) factor, use the `supabase.auth.mfa.unenroll()` method, passing the `factor_id` of the factor to be unenrolled. This allows users to remove a specific MFA factor from their account, providing them with flexibility in managing their authentication methods."
  },
  {
    "chunk_id": "8db22e9d-9abf-4bf6-b32e-4d8c6afcd33f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. An AAL of `aal1` refers to the first factor of authentication, such as email and password or OAuth sign-in, while `aal2` refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the AAL required for the user's next login, which is `aal2` if the user has a verified factor, or `aal1` otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "b09b1b70-0080-4a38-942e-cfde81d87f63",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>response = supabase.functions.invoke(    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}    )</code></p><hr />",
    "summary": "The summary is:\n\nInvokes a Supabase Edge Function by sending an Authorization header and an optional request body. The content-type header is automatically set based on the request body type, but can be overridden. The function supports error handling and the ability to pass custom headers."
  },
  {
    "chunk_id": "86afa11c-5830-4dd1-91f2-8c5d351372f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>channel = supabase.channel(\"room1\")        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })        def handle_broadcast(payload):    print(\"Cursor position received!\", payload)        channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, while listening to database changes is disabled for new projects. Developers can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, and can listen to various realtime events such as broadcasts, presence changes, and database modifications across tables and event types."
  },
  {
    "chunk_id": "9a0f9343-e640-4cf8-851f-6a3334f49395",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Supabase channel is recommended to maintain the performance of the Realtime service and the database, as unused channels can degrade performance with more clients simultaneously subscribed. The `supabase.remove_channel(myChannel)` function removes a specified channel, and Supabase will automatically handle the cleanup 30 seconds after a client disconnects."
  },
  {
    "chunk_id": "79e0fe14-d9c8-44ee-8982-4d42c5549644",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the connected database. Supabase automatically cleans up disconnected channels after 30 seconds, but leaving unused channels can degrade performance as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "a85c3bf3-dd86-46cb-b35b-0fadaf3bdc9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is:\n\nRetrieve all channels using the `supabase.get_channels()` function, which returns a list of all available channels. This allows developers to access and work with the full set of channels in their application."
  },
  {
    "chunk_id": "641ec0fb-ee7d-4e75-ab20-9f7585af0206",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>channel = supabase.channel('room1')        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })        channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to broadcast a message to all connected clients on a channel using the Supabase Realtime API. It provides an example of subscribing to a channel, then sending a broadcast message with cursor position data to all connected clients in the 'room1' channel."
  },
  {
    "chunk_id": "99c94228-c626-4ecb-83f5-2832c8280784",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` on the `buckets` table and no permissions on the `objects` table. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "0870fb81-0b80-4aa3-bd94-5877e52db4bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the user requires the `select` permission on the `buckets` table, but no permissions on the `objects` table. The operation is performed using the `supabase.storage.get_bucket(name)` function."
  },
  {
    "chunk_id": "1274d3a6-54cb-4e67-959f-eca1ab97f255",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the `select` permission is required on the `buckets` table, but no permissions are needed for the `objects` table. The `supabase.storage.list_buckets()` function can be used to retrieve a list of all available buckets, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "47b32c3d-1ce1-4d7e-b9ff-391319998915",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the required permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. The process is carried out using the `supabase.storage.delete_bucket(name)` function, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "286ad718-9738-4d7c-b410-692a326b8544",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and `select` and `delete` on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty a bucket. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "f71724e4-4439-4613-a4f7-de7e5a3cc6b2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>with open(filepath, 'rb') as f:    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The appropriate MIME type should be specified for the file, which defaults to `text/html` if not provided. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and MIME type as optional parameters."
  },
  {
    "chunk_id": "cec518f1-c2fe-4405-8300-603a18759c27",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>with open(destination, 'wb+') as f:    res = supabase.storage.from_('bucket_name').download(source)    f.write(res)</code></p><hr />",
    "summary": "To download a file, the `objects` table permissions must have `select` access, while the `buckets` table permissions can be left empty. The provided code example demonstrates how to download a file from a Supabase storage bucket and write it to a local destination."
  },
  {
    "chunk_id": "27844bea-43cd-4d2b-8e89-93e8a562a273",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions must have `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files, and the Storage guide provides details on managing access control."
  },
  {
    "chunk_id": "220ea178-4cbf-4fee-9c2d-8c34e75f668f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>with open(filepath, 'rb') as f:    supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file, the required Supabase Storage permissions are `update` and `select` on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "b6996565-01e5-4761-b8c6-1d9a0d05106e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are `update` and `select` on the `objects` table. The Supabase storage `move()` function can be used to relocate a file from one path to another within the same bucket, e.g., `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "bd78127f-8581-408a-9acd-8f9100050552",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The code to delete a file is `supabase.storage.from_('bucket_name').remove('test.jpg')`. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "4323b439-9a9d-4a45-8f3c-42689fc28919",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the user requires the `select` permission on the `objects` table, but no permissions on the `buckets` table. The signed URL is generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function, which allows time-limited access to the specified file."
  },
  {
    "chunk_id": "a19e1854-2b2c-4040-a176-4de973d449dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in Supabase Storage, the bucket must be set to public, either through the updateBucket() function or by manually making the bucket public in the Supabase dashboard. No permissions are required on the buckets or objects tables. The get_public_url() function can then be used to retrieve the public URL for a specific file, such as 'test/avatar1.jpg'."
  },
  {
    "chunk_id": "ee980a85-9434-4093-97bf-cb2ebf05ccde",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods for interacting with the Supabase platform from Python applications."
  },
  {
    "chunk_id": "f1e8a7e0-770b-4ee2-9c65-5b63756e9843",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content describes how to install the Supabase-py library using the PyPi package manager. It provides the specific command to install the library using pip, the Python package installer, for Python versions greater than 3.7. This installation method is a common and straightforward way for developers to add the Supabase-py library to their Python project."
  },
  {
    "chunk_id": "8be9efa0-b973-4047-b2de-adb0ff498843",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the main entrypoint to the Supabase ecosystem and is used to interact with its various functionalities. It can be initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters, and optional client options to configure the authentication behavior. The client can be easily set up using environment variables for the URL and key."
  },
  {
    "chunk_id": "b6e5efc1-311d-4913-8e77-c1ff6ef3d002",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Supabase projects return a maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` column should be avoided as it's a reserved keyword. The `select()` function supports specifying columns to retrieve and using a count method to get the total number of rows."
  },
  {
    "chunk_id": "685ea9ec-8d9b-4177-bdc1-cb36172da9e1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe Insert data functionality allows you to insert data into a table, either a single row or multiple rows. The required parameters are a dictionary or list of values to insert, and optional parameters include the property to use to get the count of rows returned, the return method ('minimal' or 'representation'), and a flag to default missing fields to null. The documentation provides an example of how to use the bulk insert method to insert a single row into the \"countries\" table."
  },
  {
    "chunk_id": "e3047dce-b025-4415-ac1d-ce5a259bc654",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided documentation is used to update data in a table, and it must be combined with filters to target the specific item(s) to be updated. The `update()` method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the values to be updated. An optional `countOptional` parameter can be used to specify the property to use for getting the count of rows returned."
  },
  {
    "chunk_id": "e8e5b65e-4d3f-4a1a-8247-b8371086be2f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `upsert` function in the provided documentation allows inserting or updating data in a table. It requires the primary key columns to be included in the `values` dict, and supports options such as specifying the count method, return method, handling of duplicates, and handling of missing fields. The function can be used to perform bulk upserts, and examples are provided for upserting data into tables with constraints."
  },
  {
    "chunk_id": "7d1e8181-bd5c-4b04-bb32-5a2175ac1175",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `delete()` method in Supabase should always be used with filters to target specific items for deletion. When using `delete()` with row-level security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple rows with a single query by specifying an array of values, which is useful for batch deletions. The `countOptionalCountMethod` and `returningOptionalReturnMethod` parameters can be used to customize the delete operation."
  },
  {
    "chunk_id": "fdf20151-945e-4543-a965-559fbf2cc87e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content provides information on calling Postgres functions as Remote Procedure Calls (RPCs) from any location. Postgres functions are useful for logic that rarely changes, such as password resets and updates. The summary covers the parameters for calling a Postgres function, including specifying the function to call, any parameters to pass, and options for handling the response, such as getting the count or running in read-only mode."
  },
  {
    "chunk_id": "6eeef15b-f8ec-426b-b782-071fbcd4812b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions, and can be used with various database operations like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other operations is important, as demonstrated in the example code."
  },
  {
    "chunk_id": "a8218302-ffb5-4587-84ce-00b2ad94279e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section describes how to filter a database table by a specific column being equal to a given value. The `eq()` method is used to perform this filtering, taking the column name as a string parameter and the value to match as the second parameter. This is demonstrated in an example using the Supabase library to query a \"countries\" table and return only the rows where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "30bcb7f8-3c87-4ebe-b365-1114370b9037",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the `neq()` function in Supabase, which allows filtering a table to include only rows where a specific column is not equal to a given value. The function takes two required parameters: the column name to filter on and the value to filter by. This can be used in a `select()` query to retrieve the desired rows from the table."
  },
  {
    "chunk_id": "43d4a629-13c0-4cea-abb5-a66b9a1f0ba6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes how to filter a database table to include only rows where a specified column has a value greater than a given value. The key parameters are the column name and the comparison value. An example is provided using the Supabase library's `select()` and `gt()` methods to retrieve rows from the \"countries\" table where the \"id\" column is greater than 2."
  },
  {
    "chunk_id": "38f4c4a2-7b8e-4f3f-8ec5-1488ab68b7bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `gte()` function in Supabase is used to filter a database table where a specified column has a value greater than or equal to a given value. The `columnRequired` and `valueRequired` parameters are used to define the column and value to filter on, respectively. This functionality is commonly used in `select()` operations to retrieve only the desired rows."
  },
  {
    "chunk_id": "c4db0a58-ff31-441e-9705-7a8e25e9cff2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis filter matches only rows where the specified `column` has a value less than the provided `value`. It can be used with the `select()` function in the Supabase library to retrieve data that meets this criteria."
  },
  {
    "chunk_id": "e49a1802-0759-4d54-8015-6d12edb84a95",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe provided documentation describes the `lte()` (less than or equal to) filter in Supabase, which allows you to match rows where a specified column's value is less than or equal to a given value. The `lte()` filter takes two required parameters: the column name and the value to filter by. This functionality is demonstrated with an example that selects all rows from the \"countries\" table where the \"id\" column is less than or equal to 2."
  },
  {
    "chunk_id": "b740a5ed-9283-4cce-bcd9-660b0da30659",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'Column matches a pattern' feature allows filtering rows based on a column value matching a specified pattern, case-sensitively. The 'columnRequired' parameter specifies the column name, and the 'patternRequired' parameter specifies the pattern to match. This can be used in a Supabase query, such as `supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()`."
  },
  {
    "chunk_id": "c3481cdb-52a9-49c5-90d8-d35faa6daaa4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis feature allows you to filter a database table by matching the values in a specified column to a case-insensitive pattern. The `ilike()` function is used to perform the case-insensitive pattern matching, with the column name and pattern provided as parameters. This can be useful for searching and filtering data based on textual content in a flexible and efficient manner."
  },
  {
    "chunk_id": "91a4a861-6b3d-4465-a6a3-95fd373add04",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe 'Column is a value' feature allows filtering rows in a database table where a specified column matches a given value, including checking for null, true, or false values. The key parameters are the column name and the value to match, and this can be useful for targeted data retrieval, such as finding all rows where the 'name' column is null."
  },
  {
    "chunk_id": "965b27a1-61bc-4f13-b570-cc9671082ced",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `in_()` function in the Supabase library allows filtering rows where a specified column's value is included in a provided array of values. This is demonstrated with an example of filtering the \"countries\" table to only include rows where the \"name\" column is \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "db9cf5fe-2c9b-4cbc-8997-60554dd16859",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains()` method in Supabase filters rows where the specified column contains all the elements in the provided JSON, array, or range value. This is useful for querying columns that store complex data types like JSON, arrays, or ranges. The method takes two parameters: the column name and the value to filter with."
  },
  {
    "chunk_id": "dcd8de43-1438-44f3-bbd4-f22a7d372b3c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"contained by value\" query modifier is used with jsonb, array, and range columns to match rows where every element in the specified column is contained within the provided value. This is particularly useful for filtering data in array and range columns, as well as jsonb data structures. The summary demonstrates how to use this modifier with a Supabase query to filter a \"classes\" table by the \"days\" column."
  },
  {
    "chunk_id": "9ae348fe-0f34-4a48-a489-3eb5eaadafb1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the specified range. The parameters include the column name and the range to filter with. This can be used in the `select()` method, as shown in the example."
  },
  {
    "chunk_id": "bff13bd8-ba92-4352-920c-d6d19874cc8e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature allows filtering rows in a range column where each element is either contained in the specified range or greater than any element in the range. The key parameters are the column name and the range to filter with. This is useful for querying data where the relevant values must fall within or exceed a certain timeframe."
  },
  {
    "chunk_id": "e085a8f9-145b-4ab6-9eec-cd743c655b5c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns, matching rows where every element in the specified column is less than any element in the provided range. The filter is configured with the required parameters \"column\" and \"range\", and can be used in a Supabase query to filter data, as shown in the example."
  },
  {
    "chunk_id": "11c4db6a-abe9-433c-9681-ea6cab3f7d88",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, and it matches rows where every element in the specified column is less than or equal to any element in the provided range. This filter is useful for finding records that fall within a given time or value range, as demonstrated in the example using the Supabase table \"reservations\" and the \"during\" column."
  },
  {
    "chunk_id": "a1ecab28-725e-4c34-8c4c-c53d4c60a5c7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is only applicable to range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The key parameters are the column name and the range to filter with, which can be used in the `range_adjacent()` method of the Supabase table query."
  },
  {
    "chunk_id": "2c7044f0-67d0-4ba9-8cbb-14ac68b9c845",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThis feature is only applicable for array and range columns. It allows filtering rows where the specified column and value have at least one element in common. The required parameters are the column to filter on and the value to filter with. The feature can be used with both array and range columns, as demonstrated in the example query using the Supabase API."
  },
  {
    "chunk_id": "20e5cb8c-c4bf-45fb-b82c-f5ce3b725479",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Match a string\" feature allows filtering text or tsvector columns in a database table by a given query string. It supports basic and full text normalization, as well as websearch options. This is useful for implementing Postgres full-text search functionality, as demonstrated in the example code snippet."
  },
  {
    "chunk_id": "6421d74e-7f15-4e85-bd6b-4e80dfbdc68e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase client library allows you to filter rows where each column in the `query` object has an equal associated value. This is a convenient shorthand for chaining multiple `.eq()` calls. The `match()` method takes a `query` object as a parameter, where the keys represent column names and the values represent the filter criteria."
  },
  {
    "chunk_id": "ec65aeca-5315-4bd5-9326-ca8b62db751d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to use the \"not_\" operator to match rows that don't satisfy a given filter in a PostgREST query. It shows examples of using \"not_.in_()\" for filtering based on a list of values, and \"not_.contains()\" for filtering based on array values. Additionally, it demonstrates the usage of \"not_.is_()\" with the Supabase library to retrieve rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "7e883594-9f5f-4628-be52-e6d300b30c57",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `or95()` function in Supabase allows you to use PostgREST syntax to filter data by matching at least one of the provided filters. The filters can be applied to the parent table or referenced tables, and can include `in`, `contains`, and `containedBy` operators. This provides a flexible way to construct complex queries with disjunctive logic."
  },
  {
    "chunk_id": "d4e00d08-5a42-465a-9741-3279253d08a0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content provided is as follows:\n\nThe `filter()` function in Supabase expects the use of raw PostgREST syntax for the filter values, allowing for advanced filtering capabilities. Examples are provided for using `in` and `contains` operators with array values. The `filter()` function takes three parameters: the column to filter on, the operator to use, and the value to filter with, following PostgREST syntax. An example is given for using `filter()` on a foreign table with the `select()` function."
  },
  {
    "chunk_id": "efb8be69-d408-4b73-99ee-5eaa75f708ea",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response, such as returning a CSV string. Modifiers must be specified after filters and only apply to queries that return rows. Modifiers provide additional functionality beyond the basic filtering of rows."
  },
  {
    "chunk_id": "cd103e1d-8101-4356-8e54-7f54dd762c09",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the 'order' function, which allows ordering the query results by a specified column. The function takes four parameters: 'column' (the column to order by), 'desc' (whether to order in descending order), 'foreign_table' (the foreign table name to order), and 'nulls_first' (whether to show nulls first). An example is provided demonstrating how to order the results of a 'select' query on a 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "db14e36b-cf78-42e2-81fb-c1e5953f46c5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content provides information on limiting the number of rows returned in a database query. The `limit()` function can be used to specify the maximum number of rows to return, and the `foreign_table` parameter can be used to limit rows of a foreign table instead of the parent table. An example is provided showing how to use the `limit()` function with the `select()` method on a Supabase table."
  },
  {
    "chunk_id": "b94cefe8-c0ec-47e9-a260-4d8f4797e4a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` method in the Supabase library allows limiting the query results to a specified range of records, defined by a starting index (`from`) and an ending index (`to`). This feature respects the query order and can be used on both the main table and foreign tables. The `range()` method is useful for pagination or retrieving a subset of records from a large result set."
  },
  {
    "chunk_id": "351f69f8-2568-4a77-b431-93863462ce58",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of how to retrieve a single row of data from a Supabase table using the `select()` and `single()` methods. It highlights the ability to return the data as a single object instead of an array, which can be useful in certain scenarios."
  },
  {
    "chunk_id": "60905dac-b9d7-46af-9245-1cd83fde4954",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"maybe_single()\" method in the Supabase client library allows retrieving zero or one row of data from a table, returning the data as a single object instead of an array. This is demonstrated in the example code, which queries the \"countries\" table for a row where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "0356d441-5bb1-425b-b942-11c0b0ff2c8e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides information on the 'Retrieve as a CSV' feature, which allows users to return data from a Supabase table as a string in CSV format. This can be achieved by calling the 'csv()' method on the table query, as shown in the example code. The summary highlights the main purpose and usage of this feature, which is to export data in a structured, comma-separated format."
  },
  {
    "chunk_id": "c932dae4-2ba0-41bd-9d49-64d33a03c561",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres allows you to view the execution plan of a query, which can be helpful for debugging slow queries. It can reveal sensitive information, so it's best to only enable it for testing environments, but it can be used with additional protection in production. The `explain()` method supports various parameters, including `walOptional`, `verboseOptional`, `settingsOptional`, `formatOptional`, `buffersOptional`, and `analyzeOptional`, which provide different levels of detail in the output."
  },
  {
    "chunk_id": "64ac2146-950d-43e9-9794-dfff6861907f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe document discusses the process of creating a new user in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled. It also covers how the \"Confirm email\" setting affects the returned data, and provides guidance on modifying the redirect URL after email confirmation. Additionally, it discusses the behavior when signing up an existing confirmed user, and how to fetch the currently logged-in user."
  },
  {
    "chunk_id": "332c9652-ca0a-433f-b319-4e49278f9e14",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the Supabase authentication system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in an anonymous user with custom metadata. The key technical points are the `sign_in_anonymously()` function and the ability to pass in a captcha token as an option to enhance security."
  },
  {
    "chunk_id": "327b316a-90a7-4887-8794-812344342825",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides sample code for signing in with email and password credentials, and indicates that the `credentialsRequiredSignInWithPasswordCredentials` parameter is required for this operation."
  },
  {
    "chunk_id": "3ce93492-b714-4d37-9342-7748ee32cf94",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content provides information on signing in with an OIDC ID token. It describes a `sign_in_with_id_token()` method that takes a provider and ID token as parameters and returns a response. The authentication provider used must be enabled and configured for this functionality to work."
  },
  {
    "chunk_id": "f6fa5af3-2508-4ba0-9bcb-ac6cf4debcf7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through One-Time Password (OTP) authentication, which requires an email or phone number. This method is used for passwordless sign-ins, where an OTP is sent to the user's email or phone. The sign-in process can also automatically create a new user account if the user doesn't exist, which can be optionally disabled. The documentation also covers configuring the OTP delivery method (magic link or OTP code) and managing redirect URLs."
  },
  {
    "chunk_id": "993a659d-d0d9-4da4-a8ab-5b56348989c6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user using a third-party OAuth provider, which Supabase supports. It provides an example of signing in with the GitHub provider using the `supabase.auth.sign_in_with_oauth()` method, and mentions that this method can also be used to sign in with specific scopes."
  },
  {
    "chunk_id": "83a8c2e0-4b2e-47d6-8182-861516e3e086",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the email domain or provider ID to initiate the authentication flow. This allows you to integrate SSO authentication into your application, enabling users to sign in with their existing credentials from a third-party identity provider."
  },
  {
    "chunk_id": "b69c51ca-bc0b-4b8d-ab11-cecc25360272",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method is used, which revokes the user's refresh token and deletes the JWT from the client-side. However, the access token JWT remains valid until it expires, as Supabase Auth uses JWTs for authentication. By default, `sign_out()` signs out the user from all their active sessions."
  },
  {
    "chunk_id": "fce43897-3d1f-4c51-a4a9-70f0a752ce89",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method in the Supabase authentication API supports various verification types, including SMS, email, and phone number changes. The verification type should match the corresponding auth method used before calling `verify_otp`. The `TokenHash` provided in email templates can be used to sign in users, and it can also be used with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "8929ee5f-460e-4778-8b3f-869f04b348f8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data on the server, as it could be tampered with. If verified, trustworthy user data is required, the `get_user()` method should be used instead. The method also handles automatic token refreshing if the access token has expired."
  },
  {
    "chunk_id": "a80b9499-c12b-4163-949e-b304dbe5de46",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` retrieves a new session, regardless of the expiration status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the `get_session()` method. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "225f1345-9019-483b-858c-8b1e3c71fb12",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe `get_user()` method retrieves the user object from the database instead of local session, which is useful for verifying the user's authorization by validating the access token JWT on the server. This method can be called with an optional JWT parameter, or it will use the JWT from the current session if none is provided."
  },
  {
    "chunk_id": "786cf42c-6b0d-4baf-bd7d-1e2ecd0fb506",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session()` sets the session data by taking an `access_token` and `refresh_token` as input. If the current session is expired, it refreshes the session. If the tokens are invalid, an error is thrown. Upon successful execution, a `SIGNED_IN` event is emitted. This method is used to refresh the session and maintain the user's authentication state."
  },
  {
    "chunk_id": "0c22f1c1-3d4b-437a-a9c8-a0ec76a4770f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers methods for Multi-Factor Authentication (MFA) in the Supabase platform. It currently supports time-based one-time password (TOTP) as the second factor, allowing users to enroll multiple TOTP factors for recovery without the need for separate recovery codes. This approach reduces the attack surface and provides a more convenient user experience."
  },
  {
    "chunk_id": "06866914-73fe-415f-a103-1488ff6107bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `enroll()` method in the Supabase authentication API enrolls a TOTP (time-based one-time password) factor, which can be used to create and verify multi-factor authentication challenges. The returned `id` should be used to create a challenge, which can be done using the `mfa.challenge()`, `mfa.verify()`, or `mfa.challenge_and_verify()` methods."
  },
  {
    "chunk_id": "dbd47f56-1bd7-4275-853a-2b343a8dec8f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which takes the factor_id as a parameter."
  },
  {
    "chunk_id": "03986454-4ef5-4ac8-a80d-9ea20b6d3990",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, the user must first create a challenge using the `supabase.auth.mfa.verify()` method, providing the `factor_id`, `challenge_id`, and `code` parameters. This allows the user to authenticate and verify their multi-factor authentication (MFA) challenge, which is a crucial security feature for protecting user accounts."
  },
  {
    "chunk_id": "bdcb68dd-ed5a-4939-a0c9-e070d2e91265",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing the user to challenge and verify a factor by providing the factor ID and code."
  },
  {
    "chunk_id": "9b2ce490-ab5e-4df0-9de4-9216b5bba06a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the `supabase.auth.mfa.unenroll()` function is used, passing the specific `factor_id` as a parameter. This allows users to remove a previously enrolled MFA factor, which can be necessary for security or usability reasons."
  },
  {
    "chunk_id": "d89a14e9-cdcc-40d3-ad11-52d174ed9dce",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the user's verified factor, returning `aal2` if the user has a verified second factor, and `aal1` otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "42020105-2df5-47a2-8be5-bcc3d561638b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function by making a request with an Authorization header. The function automatically attaches content-type headers for various data types, but this behavior can be overridden. The summary demonstrates how to invoke a Supabase function, pass a request body, and handle errors."
  },
  {
    "chunk_id": "407575f0-a748-457b-b360-207c570147bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, but row-level security (RLS) is not applied to delete statements. The code example demonstrates how to subscribe to various Realtime events, such as broadcasts, presence changes, and database updates, and how to handle the received payloads."
  },
  {
    "chunk_id": "57608c05-aee9-4e92-9651-d0a6660717ac",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Supabase Realtime channel is recommended to maintain project performance and database efficiency. The `supabase.remove_channel()` function can be used to unsubscribe from a channel, which Supabase will automatically clean up 30 seconds after a client disconnects. Unused channels can degrade performance as more clients subscribe simultaneously."
  },
  {
    "chunk_id": "7a279f84-4745-4199-8f98-a95aba287606",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically cleans up channels 30 seconds after a client disconnects, but excessive unused channels can degrade the system as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all channels programmatically."
  },
  {
    "chunk_id": "f94d9a5b-50cc-4da4-a6ee-16be6abd7ce0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code snippet retrieves all channels from the Supabase service. This operation can be used to fetch a list of available channels, which is a common requirement in many application scenarios."
  },
  {
    "chunk_id": "feb06fae-ded4-4cc4-9f6f-902b32ccd3c7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It provides an example code snippet that demonstrates subscribing to a channel, then sending a broadcast message with random coordinates to all connected clients."
  },
  {
    "chunk_id": "9e379a38-9b25-44e2-b544-159de71bd19b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, you need the `insert` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for details on access control. The code to create a bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "fe55a51a-df11-415d-b23b-c46c6cd839e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required permissions are `select` on the `buckets` table, while no permissions are needed on the `objects` table. Refer to the Storage guide for more information on access control. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "77a1d7b6-2402-40a9-b49e-df1af8a4ca29",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more details on access control. The code to list buckets is `supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "1f263d77-c37a-4ef5-b82f-21d99807626d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the user requires the `select` and `delete` permissions on the `buckets` table, but no permissions on the `objects` table. The deletion is performed using the `supabase.storage.delete_bucket(name)` function, and the user should refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "0f6102df-29ba-4474-ab68-1b4531b69dcd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. The Supabase Storage guide provides details on access control for these operations."
  },
  {
    "chunk_id": "39b8cc17-67c9-4535-9504-95ed6b32069e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The appropriate MIME type should be specified for media files, otherwise it defaults to `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and content type."
  },
  {
    "chunk_id": "c8f8a531-e0e5-4e9d-b043-529b6cba442b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions on the `buckets` table, but `select` permissions on the `objects` table. The file can be downloaded using the `supabase.storage.from_('bucket_name').download(source)` method, which writes the downloaded content to the specified destination file."
  },
  {
    "chunk_id": "6dbd75fb-4c15-4f84-9062-87ff2464c753",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the `objects` table permissions for `select` are required. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve a list of all files in the specified bucket."
  },
  {
    "chunk_id": "18ae80ec-69b6-440b-99b2-dd99eb21c215",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file, the path on Supabase Storage, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "1e87fdfd-3e72-418e-b244-ecfe0a0f9872",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires \"update\" and \"select\" permissions on the \"objects\" table. The example code demonstrates moving a file from the \"public/avatar1.png\" path to the \"private/avatar2.png\" path within the \"bucket_name\" bucket. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "69f4fce9-e2d5-44ac-94ba-92229a63a009",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the `objects` table permissions require `delete` and `select` access. The `supabase.storage.from_('bucket_name').remove('test.jpg')` command can be used to delete a file from the specified bucket. Refer to the Supabase Storage guide for more information on access control and security."
  },
  {
    "chunk_id": "ffaf0e86-2731-4cb1-8ba9-095a18c07fcb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required permissions are 'select' on the 'objects' table. The signed URL allows time-limited access to a specific file in the storage bucket, and the expiry duration can be specified. Refer to the Supabase Storage guide for more details on access control."
  },
  {
    "chunk_id": "f4307727-51e3-472b-998e-c8991bdf7cce",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve the public URL for an asset in a Supabase Storage bucket, the bucket must be set to public either through the `updateBucket()` function or the Supabase dashboard. No specific permissions are required in the `buckets` or `objects` tables. The `get_public_url()` function can be used to retrieve the public URL for a file, such as `supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')`."
  },
  {
    "chunk_id": "1bbee6d0-1739-44ce-bac4-898687de0285",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive interface to interact with a Supabase Postgres database, including features such as real-time subscriptions, Deno Edge Functions, authentication, and file storage management. It enables developers to build sophisticated applications using Python while leveraging the powerful capabilities of the Supabase platform."
  },
  {
    "chunk_id": "7f1366c6-09b2-4f83-b8df-4b9f7d6541ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase-py library via pip for Python 3.7 and above. The installation can be done using the terminal command `pip install supabase`."
  },
  {
    "chunk_id": "a2d3d3b0-26d2-48d4-be1e-62c7b9e8632f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and key obtained from the project dashboard. The client can be customized with optional configuration settings, such as timeout options, to adjust the client's behavior."
  },
  {
    "chunk_id": "f5d66788-4935-462e-8131-78434262a7a9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Supabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. To paginate through data, the `range()` query can be used. The `select()` function can be combined with filters and modifiers, and the `apikey` column should be avoided as it is a reserved keyword in the Supabase Platform. The `select()` function supports optional parameters like `columns` and `count` to customize the data retrieval."
  },
  {
    "chunk_id": "66eb1f7b-5b98-45c0-9a43-a4c2737d7a14",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe \"Insert data\" section describes the parameters for inserting data into a table using the Supabase library. It allows inserting a single row or multiple rows, with options to specify the count method, return method, and whether to use null values for missing fields in bulk inserts. The example provided demonstrates how to insert a single row into the \"countries\" table."
  },
  {
    "chunk_id": "37cc9be4-7fa9-48a9-bed3-9a4c1f97833e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to update data in the database, and it must be combined with filters to target the specific item(s) to be updated. The `jsonRequired` parameter accepts a dictionary or a list of dictionaries to update a single row or multiple rows, respectively. The `countOptional` parameter specifies the property to use for the count of rows returned."
  },
  {
    "chunk_id": "8dce78b7-ec5b-4b95-98b5-58e1c2507e42",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe upsert operation allows inserting or updating data in a table based on the primary key. Primary keys must be included in the `values` dict for upsert to work. The `upsert()` method supports various parameters such as `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null` to customize the upsert behavior. This can be used to efficiently bulk upsert data, especially for tables with unique constraints."
  },
  {
    "chunk_id": "224a948c-c1b9-4960-9c2d-1c9cbbc8b189",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "To delete data in Supabase, the `delete()` method should be combined with filters to target specific items. When using `delete()` with filters and row-level security (RLS) enabled, only rows visible through SELECT policies are deleted. The `delete().in_()` method can be used to delete multiple rows at once by providing an array of values."
  },
  {
    "chunk_id": "e8d6186b-636b-4644-af1e-9ffe01afcb83",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation covers how to call Postgres functions as remote procedure calls, which are useful for executing database logic that rarely changes, such as password resets and updates. It provides details on the various parameters that can be used when calling a Postgres function, including specifying the function to be executed, passing in parameters, controlling the response format, and selecting different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "b1d50074-765e-41e0-b6ad-06c601759587",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only rows matching certain conditions in Supabase queries such as `select()`, `update()`, `upsert()`, and `delete()`. Filters can be chained and used to filter by values within JSON columns or across foreign tables. The order of applying filters in the query matters, as demonstrated by the examples provided."
  },
  {
    "chunk_id": "df05bdd1-c5eb-455f-929a-fea1e7d2afed",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `eq()` function in the Supabase library allows filtering a database table by a column that is equal to a specified value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is a common operation in data querying and can be used to retrieve specific rows from a table that match the given criteria."
  },
  {
    "chunk_id": "1bac2c5d-55df-4983-b1c8-61ad38cc0e9e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe \"Column is not equal to a value\" operation allows users to filter a table by selecting only the rows where the specified column is not equal to the provided value. The key parameters are the column name and the value to filter by. This functionality can be used with the `select()` method in the Supabase library to retrieve the filtered data."
  },
  {
    "chunk_id": "214a6abe-5035-4643-b04b-d656d8c58085",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section discusses how to filter a database table to include only rows where a specified column has a value greater than a given value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library's `select()` and `gt()` (greater than) methods."
  },
  {
    "chunk_id": "b94064ee-d105-4bcb-8b1d-c5928b16ddf7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes a Supabase query that filters a \"countries\" table to include only rows where the \"id\" column is greater than or equal to the value \"2\". The query uses the \"gte\" (greater than or equal to) method to apply this filter, with the column name and value as parameters."
  },
  {
    "chunk_id": "4818f5f7-4d33-4815-b537-8245a1309567",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe \"Column is less than a value\" feature allows filtering rows where a specified column has a value less than a provided value. The key parameters are the column name and the value to filter by. This can be used in a Supabase query, such as `supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()`, to retrieve only the rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "f2051981-f19e-4429-9664-f0b17178a5c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation section describes how to filter a database table to include only rows where a specified column is less than or equal to a provided value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `lte()` method to apply this filter."
  },
  {
    "chunk_id": "791251b1-63ce-4dcd-9b6a-2204da6c64ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Column matches a pattern\" section is:\n\nThe `like()` method in Supabase's `select()` function allows filtering rows where a specified column matches a case-sensitive pattern. The `columnRequired` parameter specifies the column name, and the `patternRequired` parameter specifies the pattern to match."
  },
  {
    "chunk_id": "742418ac-d931-49e7-b96a-83e7c54b1047",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis functionality allows filtering a table's rows based on a case-insensitive pattern match on a specified column. The two required parameters are the column name and the pattern to match. This is demonstrated with an example using the `ilike()` method in the Supabase client library to filter a \"countries\" table on the \"name\" column."
  },
  {
    "chunk_id": "1a081e8d-5b8e-496f-92c1-3144b01f6925",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` method in the Supabase library is used to filter a table by a specific column and value. It supports checking for null values, as well as boolean true and false. This can be helpful for querying data and finding rows that match certain criteria."
  },
  {
    "chunk_id": "e90954d8-f405-43c6-a5d7-1c3c65bb9066",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter rows in a database table where the value in a specified column is included in a provided array of values. The relevant parameters are the column name to filter on and the array of values to match against. An example is provided using the Supabase library to perform this filtering operation."
  },
  {
    "chunk_id": "06790191-e5b5-4a15-a67e-f960b2842c5c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` filter is applicable to columns of type `jsonb`, `array`, and `range`. It allows matching rows where the specified column contains all the elements in the provided `value` parameter. The `value` parameter can be a `jsonb` object, an array, or a range. This filter is useful for querying data structures that store collections of values, such as tags or priority flags."
  },
  {
    "chunk_id": "52b5e9e8-6747-4960-ae5d-fbf1115a5c9d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" filter is only applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The filter takes two parameters: the column to filter on and the value to filter with. This can be useful for querying data stored in array or jsonb formats, such as filtering classes by the days they are held."
  },
  {
    "chunk_id": "045a73e8-b464-4c06-9d6f-795780231a86",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the provided range. The parameters include the column name and the range to filter with. This functionality is demonstrated with an example using the Supabase library, where the \"during\" column is filtered to include only rows where the values are greater than the provided range."
  },
  {
    "chunk_id": "7f12f1b0-b279-45cb-9745-4d7338b0cc12",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" filter is used to match rows where every element in the specified column is either contained in the given range or greater than any element in the range. It is a useful feature for filtering data based on date/time ranges. The function takes two required parameters: the column name and the range to filter on. This can be used in a Supabase query to select data that falls within or exceeds the specified range."
  },
  {
    "chunk_id": "05de964a-4486-4160-9fdc-bc7fc4206713",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns to match only rows where every element in the specified column is less than any element in the provided range. It takes two parameters: the column to filter on and the range to filter with. This can be used in a Supabase query to select data where the values in the \"during\" column are less than the given range."
  },
  {
    "chunk_id": "a4e5a792-cce4-4bc4-b556-e1072e44dd37",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than or equal to a range' filter is used to match rows where every element in the specified column is less than or equal to any element in the provided range. This is particularly relevant for range columns. The filter takes two parameters: the column name to filter on and the range to filter with, which is provided as an array."
  },
  {
    "chunk_id": "14b74bb4-86e6-4e09-bc78-4fd559f3dbf1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"mutually exclusive to a range\" feature is relevant only for range columns, allowing the user to filter rows where the column value is mutually exclusive to the specified range, with no element between the two ranges. The feature is defined by the \"column\" and \"range\" parameters, and can be used in the Supabase .select() function to filter results."
  },
  {
    "chunk_id": "8711a396-b046-4d95-be38-71062dd36daf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This feature is only applicable to array and range columns. It allows filtering rows where the column and the provided value have at least one element in common. The key parameters are the column name and the value to filter with, which can be an array or a range."
  },
  {
    "chunk_id": "d09e4f79-23d3-4c46-876d-1cd45cceae60",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation section describes the \"Match a string\" feature, which allows filtering text or tsvector columns in a database table to find rows where the column content matches the provided query string. It provides details on the required parameters, `column` and `query`, as well as optional parameters for configuring the text search behavior, such as normalization and search mode."
  },
  {
    "chunk_id": "9d81599e-4f07-476a-a082-9a32c7eeeb14",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `match()` method in Supabase allows you to filter a table by matching rows where each column in the `query` object has an equal associated value. This is a shorthand for multiple `.eq()` calls and is useful for efficiently filtering data based on multiple criteria."
  },
  {
    "chunk_id": "583e8002-8d0c-41c5-9f70-7ddda6962ac1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes how to use the `not_` operator in PostgREST filters to match rows that do not satisfy the filter conditions. It provides examples for filtering based on `in` and `contains` operations, as well as demonstrating the usage of `not_` with the `select()` method in the Supabase library."
  },
  {
    "chunk_id": "41f7318e-2224-40a9-b6d6-f4df9572785f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the Supabase library expects the use of raw PostgREST syntax for filter names and values, including the use of parentheses for 'in' filters, curly braces for array values, and 'cs' and 'cd' for 'contains()' and 'containedBy()' filters, respectively. The or95() function can be used to filter on referenced tables in addition to the parent table."
  },
  {
    "chunk_id": "cd8fd5b4-5aa6-436a-91d6-4c78b8d88536",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'filter()' method in the provided code snippet expects the use of raw PostgREST syntax for the filter values. It supports various operators such as 'in' for filtering based on a list of values, and 'cs' for filtering based on a column containing a specific array of values. The example demonstrates how to use the 'filter()' method on a foreign table to retrieve data based on specific criteria."
  },
  {
    "chunk_id": "211d09d6-7679-429d-af48-d0d97653c627",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which only return rows that match certain conditions. Modifiers must be specified after filters and can only be used for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "526a96bd-9214-4df8-bc36-957fbaf896ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe order() function in the Supabase client library allows you to order the results of a query by a specified column. The parameters include the column to order by, an optional flag to sort in descending order, an optional foreign table name, and an optional flag to order with nulls first. An example usage demonstrates ordering the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "886a3a02-e7ce-4c50-a278-3c7e8f3151d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `select()` function in Supabase allows you to limit the number of rows returned from a table using the `limit()` parameter, which specifies the maximum number of rows to return. Additionally, the `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table."
  },
  {
    "chunk_id": "7d7a7e9a-b15e-46d9-9b75-81368a84617e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in the provided software documentation allows limiting the query result to a specific range of records, defined by a starting index (`from`) and an ending index (`to`). This can be useful for paging through large result sets, as it respects the query order. The `from` and `to` parameters are 0-based and inclusive, meaning `range(1, 3)` would return the second, third, and fourth rows of the query. An optional `foreign_table` parameter can be used to limit the range to a specific foreign table."
  },
  {
    "chunk_id": "e506db10-749a-4ecf-aea9-34d481e3ac41",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a Supabase table using the `select()`, `limit(1)`, and `single()` methods, which returns the data as a single object instead of an array of objects. This can be useful when you only need to retrieve a single record, reducing the amount of data returned and simplifying the handling of the response."
  },
  {
    "chunk_id": "dc7edf28-e0a8-45e3-99d0-f323aa0dce6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `maybe_single()` method in the Supabase client library is used to retrieve zero or one row of data from a database table. This is useful when the query is expected to return at most one result, as it returns the data as a single object instead of an array. The example code demonstrates how to use `maybe_single()` to retrieve a row from the \"countries\" table where the \"name\" column matches \"Albania\"."
  },
  {
    "chunk_id": "75cb2d93-9d90-43b3-a0fa-5930a18ca3f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes how to retrieve data from the \"countries\" table in Supabase as a CSV string. The `select(\"*\").csv().execute()` method is used to fetch the data in CSV format. This functionality is useful for exporting data in a tabular format that can be easily imported into spreadsheet software or other data processing tools."
  },
  {
    "chunk_id": "1cc7b624-c422-4d46-9c0b-6bbd79ad76b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to debug slow queries by retrieving the execution plan, which can reveal sensitive information about the database. It's recommended to only enable this functionality in testing environments, but it can be enabled in production with additional protection using a pre-request function. The `explain()` method supports several parameters, such as `wal`, `verbose`, `settings`, `format`, `buffers`, and `analyze`, which can provide different levels of detail in the execution plan."
  },
  {
    "chunk_id": "af95289c-6727-4b2d-8a89-8e5f0857021f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To create a new user, Supabase provides options to enable or disable email confirmation. If email confirmation is enabled, a user object is returned but the session is null. If disabled, both a user and session are returned. Users can be redirected to a custom URL after email confirmation. When signing up an already confirmed user, Supabase returns an obfuscated user object or an error message, depending on the email and phone confirmation settings."
  },
  {
    "chunk_id": "b4883388-2ffe-4070-8d27-8a6b5f6e659b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe method `supabase.auth.sign_in_anonymously()` creates an anonymous user. It is recommended to set up captcha for anonymous sign-ins to prevent abuse, and the captcha token can be passed in the `options` parameter. The method returns an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "0ff0292c-91e4-43b2-9f57-14fb94aec554",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summarized content provides instructions for signing in an existing user using either an email and password or a phone number and password. It specifies the required parameters, including the `credentialsRequiredSignInWithPasswordCredentials` object, and provides an example of the sign-in API call using the Supabase library."
  },
  {
    "chunk_id": "20cc50c7-99fd-4680-b889-05f082f34588",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Sign in with ID Token\" feature, which allows users to authenticate by providing an OIDC ID token. This feature requires the authentication provider to be enabled and configured. The documentation includes an example code snippet demonstrating how to sign in using an ID token, specifically for the Google authentication provider."
  },
  {
    "chunk_id": "231402c8-5877-47a3-ab45-f316a205f8c7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_with_otp()` function allows users to sign in with a one-time password (OTP) sent to their email or phone number. It can also be used to sign up new users. Developers can configure whether the OTP is sent as a magic link or just a code, and whether the user should be automatically created if they don't already exist in the system. This provides a passwordless sign-in option that can be customized based on the use case."
  },
  {
    "chunk_id": "e254ff13-623f-4545-affc-dc68e4397cde",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThis method is used to sign in a user through a third-party provider, such as GitHub, using the Supabase authentication service. The `sign_in_with_oauth()` function is used to initiate the sign-in process, which can optionally include specific scopes. This functionality enables users to authenticate with Supabase without needing to manage credentials directly."
  },
  {
    "chunk_id": "47639003-39cb-42db-95f8-ec85d311d50f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you need to first establish a connection to an identity provider using the provided CLI commands. You can then use the `domain` property to start the sign-in flow, or the `provider_id` property to use a different way to identify the identity provider, such as mapping specific user email addresses or using other tracking information. The `sign_in_with_sso` method is used to initiate the SSO sign-in process."
  },
  {
    "chunk_id": "e1e02e97-826c-46d7-b46b-cce558fdd402",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the refresh token and deletes the JWT from the client-side, though the existing JWT will remain valid until it expires. The `sign_out()` method can be called with optional sign-out options and will sign out all other sessions the user is logged into by default."
  },
  {
    "chunk_id": "5e4abf2d-e508-4c34-9cf2-955095114696",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, including SMS, email, and account changes. The verification type should match the auth method used previously. The `TokenHash` contained in email templates can be used for sign-in via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "53ff87fc-90e0-453c-a845-f50e4a1e0d56",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source on the server, as it could be tampered with. If verified user data is needed, the `get_user` method should be used instead. If the session has an expired access token, the method will use the refresh token to get a new session."
  },
  {
    "chunk_id": "da967535-c553-4d56-9778-d05d0119d1d4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the `get_session()` method. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether the current one is expired or not."
  },
  {
    "chunk_id": "830ee4e3-7090-499f-af5b-f277a5bb8a05",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"Retrieve a user\" fetches the user object from the database instead of the local session, and is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to get the logged-in user with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "2ee01128-00d8-4a37-a94c-ed2a71961e46",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `set_session()` method sets the session data by providing an `access_token` and `refresh_token`. If the current session is expired, it will be refreshed to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful session set, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "8478c1c6-4662-4378-b2de-bdb50e480f27",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers the Multi-Factor Authentication (MFA) methods supported by Supabase, focusing on time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to 10, which provides better security and recovery options compared to using recovery codes alone. The ability to have multiple TOTP factors reduces the attack surface and frees users from the need to store recovery codes separately."
  },
  {
    "chunk_id": "753eb2ad-3ffb-4881-acfb-38bfc6f7c842",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "To enroll a time-based, one-time password (TOTP) factor, use the `supabase.auth.mfa.enroll()` method with `\"factor_type\": \"totp\"` and a `\"friendly_name\"`. The returned `id` can be used to create and verify MFA challenges using the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` methods. Currently, TOTP is the only supported factor type."
  },
  {
    "chunk_id": "0a0e8ab6-e00e-463f-9c81-7d14cc435c8e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function is used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "8ff157a2-67ce-4277-9b9a-97808227e5a0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge. The code snippet demonstrates how to verify a challenge using the Supabase authentication multi-factor authentication (MFA) API, by providing the factor_id, challenge_id, and a 6-digit code."
  },
  {
    "chunk_id": "77031617-5a12-47fb-94a1-3611df734fdc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor using a provided factor ID and verification code."
  },
  {
    "chunk_id": "d406f0b6-5ad6-4ca3-8e96-9254f892e715",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is:\n\nThe code snippet demonstrates how to unenroll a multi-factor authentication (MFA) factor from a Supabase application. The `supabase.auth.mfa.unenroll()` function is used, requiring the `factor_id` parameter to specify the factor to be unenrolled. This functionality allows users to remove an active MFA factor, which can be useful for managing their authentication methods."
  },
  {
    "chunk_id": "e7b5cc24-13c0-4ba9-bb35-88d623601a56",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) in Supabase represents the strength of the authentication mechanism used. An AAL of 1 indicates a single-factor authentication (e.g., email and password), while an AAL of 2 indicates two-factor authentication (e.g., TOTP). The `next_level` field in the API response indicates the next level of authentication required for the user, based on their current verification status."
  },
  {
    "chunk_id": "07d53950-8d81-46a1-8a93-b786261ea1b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is:\n\nInvoking a Supabase Edge Function requires an Authorization header. The function automatically attaches the Content-Type header for common data types, but this can be overridden. To invoke a function, you pass the function name and an optional body as parameters, and the response can be handled for error cases and custom headers."
  },
  {
    "chunk_id": "ea6e39d2-5f09-4f87-96f6-f186d1a45872",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary for the \"Subscribe to channel\" section is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled due to performance and security concerns. Developers can set the table's REPLICA IDENTITY to FULL to receive previous data for updates and deletes. Row-level security is not applied to delete statements, and when RLS is enabled, only the primary key is sent to clients. The provided code example demonstrates how to subscribe to a channel, send a broadcast message, and handle incoming broadcast payloads."
  },
  {
    "chunk_id": "afb7b76c-58cf-48b0-bda9-daa22dd9dd80",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel from the Realtime service can help maintain project performance and database usage by automatically cleaning up unused channels. The `supabase.remove_channel()` function can be used to unsubscribe from a specific channel, which is recommended to avoid degradation from too many simultaneous subscriptions."
  },
  {
    "chunk_id": "5c825806-51e0-4850-b897-13b0fa4bb2f1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the connected database. Supabase automatically handles channel cleanup 30 seconds after a client disconnects, but unused channels can degrade performance with more clients subscribing simultaneously. The `supabase.remove_all_channels()` function can be used to remove all subscribed channels."
  },
  {
    "chunk_id": "432e2590-4893-441d-9803-614ae8f8e9f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code snippet `_10 channels = supabase.get_channels()` retrieves all available channels from the Supabase platform. This functionality is useful for building applications that need to display or manage a list of channels accessible to the user."
  },
  {
    "chunk_id": "a6c5731f-f60d-40f5-b13d-82f6b407c138",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe provided code demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel and sends a 'cursor-pos' broadcast message containing random x and y coordinates when the subscription is successful."
  },
  {
    "chunk_id": "6ee10c99-4b61-49f6-bca1-86a2ab4b9a37",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a new bucket in Supabase Storage, the user requires the `insert` permission on the `buckets` table. No permissions are needed for the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "0512027b-640a-474c-9c76-0ca5f3808cb6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table and no permissions required on the `objects` table. Refer to the Storage guide for details on access control. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "6e26270c-a3d2-45d1-8653-1ecb0d6befb5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the RLS policy requires `select` permissions on the `buckets` table, but no permissions on the `objects` table. Refer to the Storage guide for details on Supabase's access control system."
  },
  {
    "chunk_id": "f81fca71-1277-46ce-843a-4f66004becbd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, and no permissions are needed on the 'objects' table. The Storage guide provides details on how access control works for these operations."
  },
  {
    "chunk_id": "5a251d47-ff56-4779-9090-620f35fcabdb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The storage guide provides information on how access control works. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "7cad57a0-7814-4c94-8942-6951c57826bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires `insert` permissions on the `objects` table, but no permissions on the `buckets` table. The file can be uploaded using the `supabase.storage.from_()` method, specifying the file path, storage path, and optional MIME type (which defaults to `text/html` if not provided)."
  },
  {
    "chunk_id": "06cc989d-6f63-4390-bcd4-435f8ceb848f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: 'objects' table permissions set to 'select'. The code snippet demonstrates how to download a file from a Supabase storage bucket to a local file destination."
  },
  {
    "chunk_id": "3e34a5a4-c30d-42c5-bf7b-e076691bbf72",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The code to achieve this is `supabase.storage.from_('bucket_name').list()`. Refer to the Supabase storage security and access control guide for more information on managing permissions."
  },
  {
    "chunk_id": "3c27536e-3f44-4b51-bc34-6b50fec62e65",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the required permissions are 'update' and 'select' on the 'objects' table. The process involves opening the file locally, then using the 'update' method of the 'storage.from_()' function to replace the file on Supabase Storage, with optional settings like cache control and upsert."
  },
  {
    "chunk_id": "417f0089-999b-41b5-a16b-e8a5b94d5e02",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The file can be moved from one location to another using the `move()` method of the `supabase.storage.from_()` function, e.g., `res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "8a882935-49d1-4869-9063-d29a074e5296",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase Storage bucket, the user requires `delete` and `select` permissions on the `objects` table, but no permissions on the `buckets` table. The Storage guide provides more details on how Supabase's access control system works. The code example demonstrates deleting the file `test.jpg` from the `bucket_name` bucket."
  },
  {
    "chunk_id": "214f4218-4bb3-4839-bc23-fbe25e17e572",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are `select` on the `objects` table. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function can be used to generate a signed URL for accessing a file in the specified bucket, which is valid for the given expiry duration."
  },
  {
    "chunk_id": "2fb19f6d-a159-4b87-8d8b-2dbefb344da9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public either via the `updateBucket()` API or the Supabase dashboard. No specific permissions are required on the `buckets` or `objects` tables. The `get_public_url()` method can be used to obtain the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "14bab406-ec82-4a3b-9695-e3936edf27da",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library provides a Python client for interacting with the Supabase platform, which includes features for working with a Postgres database, listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. It documents all the available objects and methods in the library."
  },
  {
    "chunk_id": "a5e7ddb7-ab50-4ea5-9e23-0894f7efce9c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content describes how to install the Supabase-py library using PyPI, the Python package index. Users can install the library via terminal using the pip command, regardless of whether they are using the regular Python interpreter or the Conda environment."
  },
  {
    "chunk_id": "8556ca0c-35cd-4799-9fd8-976cecd83df4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase platform. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, along with optional client options to customize the authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the central starting point for developers working with the Supabase ecosystem."
  },
  {
    "chunk_id": "08e54a65-1b17-4532-a157-0a5e89ccada0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, including from referenced tables. The `apikey` keyword should be avoided as a column name when using the Supabase Platform. Key parameters include the columns to retrieve and the method to use for counting returned rows."
  },
  {
    "chunk_id": "60857e3b-8c7f-48a6-adc4-4fa87edab5e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe 'insert data' section describes the parameters for inserting data into a table using the Supabase library. It explains that you can insert a single row using a dictionary or multiple rows using a list. Additionally, it covers optional parameters such as the count method, return method, and a flag to make missing fields default to null. The example provided demonstrates how to insert a single row into the \"countries\" table."
  },
  {
    "chunk_id": "6b7efca2-06f7-4b20-82d4-1a23bcb058bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided software documentation is used to update existing data in a database table. It should be combined with filters to target the specific item(s) that need to be updated. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the values to be updated. An optional `countOptional` parameter can be used to retrieve the count of rows affected by the update operation."
  },
  {
    "chunk_id": "0c07cf1c-2f13-4b11-955d-3824964d8298",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'upsert' operation in this software allows inserting or updating data in a table based on primary keys. It requires including primary keys in the 'values' dictionary, supports bulk inserts, and provides various parameters to control the behavior, such as handling duplicates, defaults for missing fields, and returning the affected row count or representation."
  },
  {
    "chunk_id": "89835585-a21e-4a80-bd22-b4417d32b561",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` function in the Supabase API should always be combined with filters to target the specific items to be deleted. When using `delete()` with filters and row-level security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by providing an array of values."
  },
  {
    "chunk_id": "f46b069c-e277-4cd0-9af8-b8774975cf7f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls, which allows you to execute logic in your database from anywhere. Functions are useful for tasks that rarely change, such as password resets and updates. The documentation provides details on the parameters for calling a Postgres function, including the function name, input parameters, and options for read-only access and row counting algorithms."
  },
  {
    "chunk_id": "c0d66262-344a-45c8-8f31-01d6f31f2691",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase select, update, upsert, and delete queries. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other operations, such as selecting columns, is important for correct query execution."
  },
  {
    "chunk_id": "b9ef5b9f-f786-4713-9474-13cc59b0fdc8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: \n\nThis section describes how to filter a database table by checking if a column value is equal to a specified value. The `eq()` function is used with the `select()` method to achieve this, where the column name and value to match are provided as parameters."
  },
  {
    "chunk_id": "dc60d861-abf6-43d9-92da-3de2f12c5035",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to use the `neq()` function in Supabase to filter rows where a specified column is not equal to a given value. The `neq()` function takes two parameters: `column` (the column to filter on) and `value` (the value to filter by). This allows for targeted filtering of data based on inequality conditions."
  },
  {
    "chunk_id": "43e6ed2e-2ad7-4ea4-ace3-a08544fb2297",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes the use of the 'gt' (greater than) operator to filter rows in a database table where a specified column has a value greater than a given value. The required parameters are the column name and the value to filter by. This functionality can be used with the 'select()' method to retrieve the filtered data."
  },
  {
    "chunk_id": "5c5cf20d-ce0a-4991-8232-91118a795cad",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to filter a database table using the \"gte\" (greater than or equal to) operator on the \"id\" column, where the value must be greater than or equal to 2. This operation is performed using the \"select()\" method of the Supabase client library."
  },
  {
    "chunk_id": "3cf6105d-7bb2-4e55-8631-391cd495598b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: To filter a database table and return only rows where a specified column is less than a given value, use the `lt()` function in the `select()` method, passing the column name and the value to filter by as parameters."
  },
  {
    "chunk_id": "e236cd24-a8cb-4486-9d0a-08980aea4780",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a table in Supabase to include only rows where a specified column is less than or equal to a given value. The two required parameters are the column name and the value to filter by. An example is provided using the `lte()` method in the `select()` operation."
  },
  {
    "chunk_id": "47f352e5-f186-49b5-bc5d-24556eef0d92",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This feature allows you to filter a table's rows based on a pattern matching the value in a specified column. The `like()` function is used to apply the filter, with `columnName` and `pattern` as the required parameters. This can be useful for searching within text-based columns, such as filtering countries by name."
  },
  {
    "chunk_id": "32b300e5-36fe-4500-94f3-d88da96eecb8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `ilike()` function in Supabase allows filtering rows where the value in the specified `column` matches the case-insensitive `pattern`. This is useful for performing case-insensitive searches on database columns, as demonstrated in the example of selecting rows from the \"countries\" table where the \"name\" column contains the substring \"alba\"."
  },
  {
    "chunk_id": "a7d88c39-2208-48bc-bac0-6f26aedc30f5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' feature allows you to filter a table by matching rows where a specified column has a given value. The required parameters are the column name and the value to match, which can be null, true, or false. This is useful for checking for nullness or specific boolean values in the data."
  },
  {
    "chunk_id": "95ebdcd4-2eca-482d-9b4b-8bf263baeda9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the `in_()` function in Supabase, which allows filtering rows where a specified column's value is included in a given array of values. The `columnRequired` parameter specifies the column to filter on, and the `valuesRequired` parameter specifies the array of values to match against. This functionality is demonstrated in an example query that selects all rows from the \"countries\" table where the \"name\" column is either \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "c3ec1594-9519-412f-8811-b8f5de0a2c89",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `contains` filter is only applicable to `jsonb`, `array`, and `range` columns. It matches rows where the specified column contains every element present in the provided `value`. The `value` parameter can be an object, array, or range, depending on the column type. This filter is useful for performing advanced queries on structured data stored in these column types."
  },
  {
    "chunk_id": "7b7fdc59-c101-468b-9753-80d941ee8401",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" operation is applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the provided value. The parameters include the column name and the value to filter with. Examples are provided for using this operator with array, range, and jsonb columns."
  },
  {
    "chunk_id": "bd35fb50-2794-4de6-a6a3-d014ac68fb71",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is applicable for range columns. It allows filtering the data to include only rows where every element in the specified column is greater than any element in the provided range. The key parameters are the column to filter on and the range to filter with."
  },
  {
    "chunk_id": "64edfe6a-e5c0-49a7-8439-03aa535b89f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Greater than or equal to a range\" section is as follows:\n\nThe \"range_gte\" filter is used to match rows where every element in the specified column is either contained in the given range or greater than any element in the range. The filter takes two required parameters: the column name and the range value(s). This can be used in a Supabase query to select records where the values in the specified column are greater than or equal to the provided range."
  },
  {
    "chunk_id": "8a88380d-3450-4b88-89f0-6afe11991208",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the column is less than any element in the provided range. The required parameters are the column name and the range to filter with. This functionality can be used in the `select()` method to filter data from a table, such as filtering reservations where the \"during\" column is less than the specified range."
  },
  {
    "chunk_id": "058c2584-9e28-4e7d-b489-23af33d03bd6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is used to filter rows in a range column, where every element in the column is less than or equal to any element in the specified range. The key parameters are the column name and the range to filter with. This is useful for querying data within a certain time range, as demonstrated in the example using the Supabase library."
  },
  {
    "chunk_id": "70e7aa85-6202-4a54-adde-151201edfebe",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the content about \"Mutually exclusive to a range\" is as follows:\n\nThis feature is applicable only for range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The required parameters are the column name and the range to filter on."
  },
  {
    "chunk_id": "7c39f67b-58d5-48ac-9fa1-93dd63a3e119",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section covers the \"With a common element\" filter, which is only applicable to array and range columns. It allows matching rows where the column and value have at least one element in common. The key parameters are the column to filter on and the value to filter with. Examples are provided for using this filter on both array and range columns."
  },
  {
    "chunk_id": "f2ef3c1c-0b2d-4f2e-a038-dd70dc917aed",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the 'match a string' functionality, which allows filtering rows in a text or tsvector column based on a query string. It provides details on the required parameters, 'column' and 'query', as well as optional 'options' for configuring the text search, such as normalization and websearch. An example of how to use this functionality in a Supabase query is also provided."
  },
  {
    "chunk_id": "03f2489a-5074-4083-99bf-dea34c4811fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'match()' function in the provided documentation allows you to filter rows where each column in the 'query' object has an equal associated value. This is a concise way to perform multiple 'eq()' checks on a dataset. The function takes a 'query' object as a parameter, where the keys represent the column names and the values represent the filter criteria."
  },
  {
    "chunk_id": "ff6cc51d-30b0-4f36-b266-f52c99bd35f5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary discusses the use of the `not_` operator in PostgREST filters to match rows that do not satisfy the given filter criteria. It provides examples for using `not_.in_()` to exclude specific IDs and `not_.contains()` to exclude array values. The summary also shows how to use the `not_.is_()` operator with the `select()` method to retrieve data that is not null."
  },
  {
    "chunk_id": "a1612853-a7a7-4339-96bf-0621f4db3f7a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the documentation expects the use of raw PostgREST syntax for filter names and values, such as using parentheses for 'in' filters, curly braces for array values, and 'cs' or 'cd' for 'contains()' and 'containedBy()' operations. The 'filtersRequired' parameter is used to specify the filters to apply, while the optional 'reference95table' parameter can be used to filter on referenced tables instead of the parent table. Examples are provided demonstrating the use of or() with and() to filter on multiple conditions, including filtering on referenced tables."
  },
  {
    "chunk_id": "203dd735-4440-48e4-be2a-ff706a8a315c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the documented code expects the use of raw PostgREST syntax for the filter values. It supports various filter operators, such as `in` for filtering based on a list of values, and `cs` for filtering based on array containment. The example demonstrates how to use `filter()` on a foreign table to select specific records based on column values."
  },
  {
    "chunk_id": "2e5a51f8-6314-4929-a52f-451a40f0f3a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, in contrast to filters which only return rows that match certain conditions. Modifiers must be specified after filters and some modifiers only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "8b9571f6-72f8-47c3-ab34-aaee329d97f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the \"Order the results\" functionality, which allows ordering the query results by a specified column. The key parameters are: `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the foreign table to order results from), and `nulls_first` (whether to show null values first). An example is provided demonstrating how to order the results of a query on a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "6bf294d3-1032-48d2-94e5-a298f558bfc1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information about limiting the number of rows returned in a database query. The `limit()` function is used to specify the maximum number of rows to return, and an optional `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. This functionality is demonstrated in an example using the Supabase library to query a \"countries\" table and return a single row."
  },
  {
    "chunk_id": "3a93fa4a-f351-43e1-be59-edcd2d57b620",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function in the query allows limiting the result set to a specific range of records, specified by a starting offset (`from`) and an ending offset (`to`). This can be useful for pagination or retrieving a subset of the data. The range is 0-based and inclusive, so `range(1, 3)` will return the second, third, and fourth rows. An optional `foreign_table` parameter can be used to limit the range on a foreign table instead of the parent table."
  },
  {
    "chunk_id": "a47e31c4-518d-47cd-903c-3f32d7e538f1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The 'single()' method in the Supabase library is used to retrieve a single row of data from a table, instead of returning an array of objects. This can be useful when you only need to fetch one record, rather than processing a full result set."
  },
  {
    "chunk_id": "31ede01b-d950-4951-9c31-c8c7a0fd3a8f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a database table using the Supabase library's `select()` method with the `maybe_single()` modifier. This allows the response to be returned as a single object rather than an array of objects, which can be useful for cases where only one row is expected."
  },
  {
    "chunk_id": "9ef9453d-d3c8-475d-b867-f17d689fd098",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a way to retrieve data from a Supabase table in CSV format. The `csv()` method is used to execute the query and return the data as a CSV string, which can be useful for data export or integration with other systems."
  },
  {
    "chunk_id": "6ef9f791-4d6f-4940-8495-d64ab4423ac9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `explain()` method allows developers to get the Postgres execution plan for any query, including `rpc()` and writes. While `explain()` is not enabled by default as it can reveal sensitive information, it can be enabled with additional protection in a production environment. The `explain()` method supports various parameters to customize the output, such as including information on WAL record generation, configuration parameters, buffer usage, and actual runtime."
  },
  {
    "chunk_id": "648a5790-835f-4b50-9d50-c01f2ec0b5df",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers how to create a new user in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled in the project settings. It also covers the behavior when signing up an existing confirmed user, and how to fetch the currently logged-in user using the `get_user()` function. The documentation provides example code for signing up a user with an email and password."
  },
  {
    "chunk_id": "03174744-08f2-4d55-89ae-5b873aa68784",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to create an anonymous user in the system. It recommends setting up captcha to prevent abuse, and provides an example of how to sign in anonymously using the `supabase.auth.sign_in_anonymously()` method with an optional `captcha_token` in the `options` parameter."
  },
  {
    "chunk_id": "a8b20739-27ac-4b3a-ae37-f5187101e698",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To sign in an existing user, the documentation describes using either an email and password or a phone number and password. The code example demonstrates signing in with an email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "f8af0e1b-c319-42ee-b37c-e6f846fd8e90",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nAllows signing in with an OIDC ID token by specifying the authentication provider and the ID token. The `supabase.auth.sign_in_with_id_token()` function takes a provider (e.g., \"google\") and the ID token as parameters, and returns a response. This functionality enables users to authenticate with an external identity provider using the ID token."
  },
  {
    "chunk_id": "2188fccd-9695-4e3d-8240-31f7d0be15cf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP (one-time password) feature allows users to sign in without a password, by sending an OTP to their email or phone number. If the user doesn't exist, the `sign_in_with_otp()` function can automatically create a new user. Users can receive either a magic link or an OTP, and the destination URL for the magic link is determined by the `SITE_URL` configuration. Developers can also modify the email template to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "f08e3261-fe03-4c2f-903f-de7b9dcd3ba0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThis method is used to sign in a user through a third-party OAuth provider. Supabase supports various third-party providers, and the `sign_in_with_oauth()` function can be used to initiate the sign-in process, specifying the provider (e.g. 'github') as a parameter. This allows users to authenticate with Supabase using their existing third-party credentials."
  },
  {
    "chunk_id": "8e6133aa-50ed-4486-a426-ba9f1bfd6560",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the provided CLI commands. The method supports signing in with an email domain or a provider UUID, which allows for more customized authentication flows, such as mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "8e9c1cf1-2ac8-43e0-8c39-b83a5756aac3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth is used to sign out a user. It revokes the user's refresh token and deletes the JWT from the client-side, although the JWT will remain valid until it expires. By default, `sign_out()` signs out the user from all of their active sessions. The method can be called after the user is signed in, and it does not require any parameters."
  },
  {
    "chunk_id": "dd1982c8-2467-47c3-a7b2-5d7c96565fc7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for authentication, supporting different verification types like SMS, email, and phone number changes. The verification type should match the corresponding auth method used earlier, and the `TokenHash` from the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "a629c3da-1c87-429a-b2a7-dccb68cac569",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user()` method should be called instead. Additionally, if the session has an expired access token, the method will use the refresh token to get a new session."
  },
  {
    "chunk_id": "2bd931f6-854c-4177-90db-5480df07ba03",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` retrieves a new session regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the existing session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that a valid session is always available, even if the current one has expired."
  },
  {
    "chunk_id": "80ff44c3-d620-4a84-8a9c-7a0b25a7fb32",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. The method can take an optional access token JWT as a parameter, and if none is provided, it uses the JWT from the current session."
  },
  {
    "chunk_id": "956f9cdf-3d81-499c-a10a-34717ed4bbd4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data using an `access_token` and `refresh_token`. If successful, it emits a `SIGNED_IN` event. This method is used to refresh the session when the current session is expired or the tokens are invalid, allowing the application to maintain a valid user session."
  },
  {
    "chunk_id": "157d452d-879c-4f3d-891c-6fda7606f8d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Auth MFA (Multi-Factor Authentication) feature, which currently supports time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, which provides a more secure alternative to recovery codes and reduces the attack surface."
  },
  {
    "chunk_id": "11df43cd-d572-468e-9acf-b431420bccbe",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `enroll()` method in the `supabase.auth.mfa` module is used to enroll a time-based, one-time password (TOTP) factor. The returned `id` should be used to create a challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` methods. Currently, `totp` is the only supported `factor_type`."
  },
  {
    "chunk_id": "3393d1aa-17d6-43ae-90bb-15dbaacf420e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "dc70cd3a-ae91-469e-8ed9-b3c8505009a8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, the user must first create a challenge by following the instructions in the \"create a challenge\" documentation. The code snippet demonstrates how to verify a challenge by providing the factor_id, challenge_id, and a 6-digit code. This verification process is a key step in multi-factor authentication (MFA) to confirm the user's identity."
  },
  {
    "chunk_id": "6c0f95a5-096c-4862-a74e-72883544e6f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes `mfa.challenge()` and `mfa.verify()` in a single step, allowing users to challenge and verify a factor by providing the factor ID and a verification code."
  },
  {
    "chunk_id": "d0196cf2-e026-449a-b6fd-69b2479af3af",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: The documentation describes how to unenroll a factor from Supabase authentication by providing the `factor_id` as a parameter to the `supabase.auth.mfa.unenroll()` function. This allows users to remove a specific multi-factor authentication factor from their account."
  },
  {
    "chunk_id": "966447ea-31f4-45d2-8d58-c9bad6a01720",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field returns AAL2 if the user has a verified factor, otherwise, it returns AAL1."
  },
  {
    "chunk_id": "82179fe9-0161-4bb7-bc4b-f5b148e859f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by making a request to the Supabase Functions endpoint. Requires an Authorization header, and automatically sets the Content-Type header based on the request body type. Allows passing custom headers and a request body to the function."
  },
  {
    "chunk_id": "44b4c133-4832-46d9-83f7-ba6ade29b1f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Developers can enable this feature by managing Realtime's replication. The documentation also covers how to receive previous data for updates and deletes, and notes that row-level security is not applied to delete statements. The summary also includes example code for subscribing to a channel, sending a broadcast, and handling the received broadcast."
  },
  {
    "chunk_id": "86f2daad-3683-416f-aa41-0d89416cff1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Supabase Realtime channel is recommended to maintain performance and database efficiency, as unused channels can degrade service as more clients subscribe. The `supabase.remove_channel()` function is used to remove a specific channel, which Supabase will automatically clean up 30 seconds after the client disconnects."
  },
  {
    "chunk_id": "ee532c9f-a47c-468d-89f3-2162b644769c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the connected database. The `supabase.remove_all_channels()` function can be used to remove all subscribed channels, which Supabase will automatically clean up 30 seconds after a client disconnects, preventing degradation from excessive channel subscriptions."
  },
  {
    "chunk_id": "fb2fdbea-fc36-4c41-974d-83e707358e4d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to retrieve all channels using the Supabase library. This functionality allows developers to access and work with the complete set of channels available in the application."
  },
  {
    "chunk_id": "9ff7c565-0341-4afd-9b27-45b7d5eb3795",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. The example demonstrates subscribing to a channel, and then broadcasting a message containing random cursor position data to all clients on that channel."
  },
  {
    "chunk_id": "de04a884-4b44-4d9a-bae3-afb8312ca1f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the necessary permissions are `insert` access to the `buckets` table and no permissions for the `objects` table. Refer to the Storage guide for information on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "366525c4-374e-4698-a6e9-123f621f1c97",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the RLS policy permissions required are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more information on access control. The code to get a bucket is `res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "4a56696f-f62e-454d-aefd-6f2ce415c0e8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the `buckets` table requires `select` permissions, but no permissions are needed for the `objects` table. Refer to the Storage guide for details on access control. The Supabase `list_buckets()` function can be used to retrieve the list of available buckets."
  },
  {
    "chunk_id": "2a48cfa5-d05a-4060-b753-e9065c340bb8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. The deletion is performed using the `supabase.storage.delete_bucket()` function."
  },
  {
    "chunk_id": "73dd6d3e-d399-40b7-b31e-e3df247615af",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The Storage guide provides details on how access control works for this operation. The code example shows how to empty a bucket using the `supabase.storage.empty_bucket()` function."
  },
  {
    "chunk_id": "8187824b-6dcf-462b-979c-22552a7e882b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the required RLS policy permissions are `insert` on the `objects` table. The MIME type should be specified if uploading images or audio, otherwise it defaults to `text/html`. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and optional file options like the content type."
  },
  {
    "chunk_id": "9e7ba32d-8a89-4094-94fd-47725dbc07f5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires 'select' permissions on the 'objects' table. The code snippet demonstrates how to download a file from a Supabase storage bucket using the 'supabase.storage.from_()' and 'download()' functions. Refer to the Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "29aa29b0-2703-47a2-b2db-68e54283aefd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are select access to the `objects` table, but no permissions are needed for the `buckets` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "86d10b49-8f6a-4148-9979-bd492378ecad",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file is updated by opening the local file, then using the `supabase.storage.from_(\"bucket_name\").update()` method to update the file on the Supabase storage, specifying the file, path, and optional file options such as cache control."
  },
  {
    "chunk_id": "2267db35-1821-4242-a3f9-e7f2232c75a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file can be moved using the `move()` method of the `supabase.storage.from_()` function, specifying the source and destination paths."
  },
  {
    "chunk_id": "d2c93bbc-3c54-464f-9f61-bca1bf766ced",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The details of the required permissions and how access control works are provided in the Storage guide."
  },
  {
    "chunk_id": "695dd424-bfcd-4b2f-a14a-14cefe3439ea",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required permissions are 'select' access to the 'objects' table, but no permissions are needed for the 'buckets' table. The signed URL allows time-limited access to a specific file stored in the Supabase Storage service, and can be generated using the `create_signed_url()` method."
  },
  {
    "chunk_id": "86988fad-a896-4f1a-8837-c2d8c3ead3c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve the public URL of an asset in a Supabase Storage bucket, the bucket must be set to public either through the Supabase Dashboard or the `updateBucket()` API. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` function can be used to retrieve the public URL for a given file path."
  },
  {
    "chunk_id": "08df5558-2535-45a6-9c6b-516759af0a83",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functionalities to interact with a Postgres database, including listening to database changes, invoking Deno Edge Functions, building login and user management features, and managing large files. This library serves as a powerful tool for developers working with Supabase in a Python environment."
  },
  {
    "chunk_id": "41d005ec-415e-491a-b546-831768a8c363",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation describes how to install the Supabase-py library, which is compatible with Python 3.7 and higher. The installation can be done using the pip package manager or through the Conda package manager. The instructions provide the exact terminal command to install the library."
  },
  {
    "chunk_id": "8583eba2-694f-4730-8492-83dd1007d9e9",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optionally accepts options to customize the authentication behavior. The Supabase client provides access to the full suite of Supabase services and functionality."
  },
  {
    "chunk_id": "c182e1b9-0498-4993-846e-8aa486f7080a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Supabase projects return a maximum of 1,000 rows by default, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` keyword should be avoided as a column name when using the Supabase Platform. The `select()` function supports specifying columns to retrieve and provides options for getting the count of rows returned."
  },
  {
    "chunk_id": "7986954d-3578-466d-85ad-9a7192dc57fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section describes the parameters for inserting data into a table using the Supabase library. The key parameters include the data to be inserted (as a dictionary or list), optional parameters for controlling the count and return methods, and an option to set missing fields to null. An example is provided for bulk inserting a single record into the 'countries' table."
  },
  {
    "chunk_id": "af5c9b2a-df1e-4b00-b56f-54807dff50f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to update data in a table, and it must be combined with filters to target the specific item(s) to be updated. The `update()` method takes a dictionary or list of dictionaries as its parameter to specify the new values, and an optional `count` parameter to get the count of rows updated."
  },
  {
    "chunk_id": "956156df-cd1a-4d85-a349-f54a01f383d4",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Upsert data\" section is as follows:\n\nThe upsert operation in Supabase allows inserting or updating data, where primary keys must be included in the `values` dict. Key parameters include `jsonRequired` for the data to insert, `countOptional` for the row count, `returningOptional` for the response format, and options to handle duplicate rows and default null values. An example demonstrates upserting a single row into the \"countries\" table."
  },
  {
    "chunk_id": "1b24516e-2ec6-4207-87e9-017e336a04d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` method in the Supabase API should be used with filters to target specific records for deletion. When using `delete().in_()`, an array of values can be provided to delete multiple rows with a single query. Deleting records is subject to row-level security (RLS) policies, so only rows visible through `SELECT` policies will be deleted."
  },
  {
    "chunk_id": "36c83a25-a126-43d4-84ec-0ab13339c506",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This documentation describes how to call Postgres functions as Remote Procedure Calls from your application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides details on the parameters for calling Postgres functions, including options for passing arguments, filtering, and read-only access mode. It also includes examples of how to execute a simple \"Hello World\" Postgres function using the Supabase client library."
  },
  {
    "chunk_id": "5ed0fd26-2a7a-48de-8116-f1731923d870",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions. They can be used with various database operations like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return table responses. The order of applying filters and other operations is important, as demonstrated in the example code."
  },
  {
    "chunk_id": "7aeab916-1dec-48e4-b8e7-c9b268227cb6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `eq()` method in the Supabase library allows filtering a table by a column that is equal to a specified value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This can be used in conjunction with the `select()` method to retrieve rows matching the specified criteria."
  },
  {
    "chunk_id": "faf8c11c-877e-48d4-8e10-17d0329d5ad9",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers a filter operation in Supabase, where rows are selected from a \"countries\" table where the \"name\" column is not equal to \"Albania\". The key parameters for this operation are the column to filter on and the value to filter by, which are provided as required inputs."
  },
  {
    "chunk_id": "a433fc7c-b864-4596-a416-f5f0cc4067d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by a column value using the `gt` (greater than) operator in the Supabase library. It specifies that the `columnRequired` and `valueRequired` parameters are needed to perform this filtering, and provides an example of how to use the `gt` method with the `select()` function."
  },
  {
    "chunk_id": "9a0e73ec-8651-4456-9fdd-2156eb33f144",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe 'gte()' function in Supabase allows filtering a database table by selecting only rows where a specified column is greater than or equal to a given value. The 'columnName' and 'value' parameters are required to use this function effectively."
  },
  {
    "chunk_id": "c9402c2f-9d4b-4d6f-8a72-76fadb4e6554",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided content describes how to filter a database table to include only rows where a specified column has a value less than a given value. The key parameters are the column name and the comparison value, and an example is provided using the Supabase library's `lt()` method."
  },
  {
    "chunk_id": "b048bbed-c044-4525-8bbe-51d1de56fa5a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to filter a database table by selecting rows where a specific column is less than or equal to a given value. The `lte()` function is used to perform this comparison, with the column name and value passed as parameters."
  },
  {
    "chunk_id": "be70fac1-c5fb-483f-9a41-8d7906ccdaef",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Column matches a pattern\" feature allows filtering rows where the specified column matches the provided case-sensitive pattern. The key parameters are the column name and the pattern to match, and an example usage is shown with the `like()` operator in the `select()` function."
  },
  {
    "chunk_id": "14b09929-655b-4918-9ccc-0177881d7a3e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a way to filter rows in a database table where a specified column matches a case-insensitive pattern. The `ilike()` function is used to perform the case-insensitive pattern matching, with the column name and pattern provided as parameters. This functionality is useful for implementing flexible search and filtering capabilities in applications that interact with a database."
  },
  {
    "chunk_id": "917e4534-39e7-434f-b0ed-6a0928839392",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` method in the Supabase library allows filtering rows where a specified column's value matches a given value, which can be null, true, or false. The method takes two parameters: the column name and the value to match, enabling precise filtering of data based on column values."
  },
  {
    "chunk_id": "bd3de175-5fea-4a4b-aba1-9e5b608f2754",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary captures the key points about filtering data where a specific column's values are included in a provided array. It explains the required parameters, `columnRequired` and `valuesRequired`, and provides an example using the `in_()` method in a Supabase query. This functionality allows users to effectively filter data based on the presence of values in a column, which is a common data manipulation task."
  },
  {
    "chunk_id": "1c693105-5832-41e4-9b56-c4b561b85e62",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" operation is available for jsonb, array, and range columns, allowing you to filter rows where the column contains every element in the provided value. The parameters are the column to filter on and the value to filter with, which can be a jsonb object, array, or range. This is useful for querying data structures like tags or ranges within a database table."
  },
  {
    "chunk_id": "59c1ccf7-f154-4d6c-b435-ee796027b136",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `contained_by` operation is used to filter rows in a jsonb, array, or range column where every element in the column is contained by the specified value. This operation is useful for filtering data based on complex data types. The `contained_by` operator takes two parameters: the column to filter on and the value to filter with, which must be of the same data type as the column."
  },
  {
    "chunk_id": "402849b4-12b0-4f63-92f2-4578e2fd4bf2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used for range columns in Supabase. It matches rows where every element in the specified column is greater than any element in the provided range. The filter is configured by passing the column name and the range as parameters."
  },
  {
    "chunk_id": "1787e018-32e2-44a1-8555-01b1da5cea3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" operation is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. This is useful for querying data based on date/time ranges. The operation takes two parameters: the column name and the range to filter with, and can be used in a Supabase query to retrieve relevant data."
  },
  {
    "chunk_id": "0524f29e-e69d-40f3-a641-5e0d83bdcc9f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than a range' filter is used for range columns in a database, and it matches rows where every element in the specified column is less than any element in the provided range. The filter is applied using the `range_lt()` method, which takes the column name and an array of range values as parameters."
  },
  {
    "chunk_id": "08eb53d6-21a6-4848-94ca-62467a5a0e43",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is only applicable to range columns. It matches rows where every element in the specified column is less than or equal to any element in the provided range. The filter is configured by passing the column name and the range array as parameters."
  },
  {
    "chunk_id": "3713b733-e6a0-47b7-86b7-4d1fbb024f98",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is only relevant for range columns. It allows filtering rows where the column value is mutually exclusive to the provided range, meaning there can be no element between the two ranges. The feature is configured by specifying the column name and the range to filter with, and can be used in a `select()` query to retrieve the filtered data."
  },
  {
    "chunk_id": "dd2b13cb-575c-47f0-ab7d-f750406f3814",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the 'with a common element' filter in Supabase, which is only applicable to array and range columns. This filter matches rows where the specified column and the provided value have at least one element in common. The summary outlines the required parameters, 'columnRequired' and 'valueRequired', and provides an example of how to use this filter to retrieve rows where the 'tags' column overlaps with the values 'is:closed' and 'severity:high'."
  },
  {
    "chunk_id": "fe982142-36db-498a-ae7f-d09e6edf3c10",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Match a string\" feature, which is used for filtering text and tsvector columns in a database. It allows matching rows where the column value matches the provided query string, supporting various text search options like basic normalization, full normalization, and websearch. The example demonstrates how to use this feature to perform a text search on the \"content\" column of a \"texts\" table, searching for the phrase \"'eggs' & 'ham'\" with the \"english\" text search configuration."
  },
  {
    "chunk_id": "3fdcaea4-124d-4dd3-859b-c66227e10e8d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the documentation allows you to filter a table by matching rows where each column in the `query` keys is equal to its associated value. This is a convenient shorthand for multiple `.eq()` calls. The `queryRequired` parameter is an object containing the column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "48ffa431-e7fc-4eec-8631-65c282e817be",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to filter rows that do not match a specified criteria using the `not_` operator in the PostgREST syntax. It provides examples of using `not_.in_()` for filtering based on values in a list, and `not_.contains()` for filtering on array values. The summary also demonstrates how to use the `not_.is_()` filter in a `select()` query to retrieve rows where a column is not null."
  },
  {
    "chunk_id": "71c7e420-5cf8-4109-b58c-7f79f7bb6f3a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the documentation expects the use of raw PostgREST syntax for filter names and values, such as using `()` for `in` filters, `\\{\\}` for array values, and `cs` or `cd` for `contains()` or `containedBy()` operators. The `filtersRequired` parameter specifies the filters to use, while the optional `reference95table` parameter can be used to filter on referenced tables instead of the parent table. The or95() function can be used in combination with and96() to build complex query conditions."
  },
  {
    "chunk_id": "1d7a1d11-e94a-4a50-b297-1d44db86a84a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the provided example expects the use of raw PostgREST syntax for the filter values. It supports various operators like `in`, `cs` (contains), and can handle array values using `{}` syntax. The example demonstrates how to use `filter()` on a foreign table to select specific rows based on column values."
  },
  {
    "chunk_id": "ba0c50fa-1b02-4844-b9b7-4926a537a0f1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response, such as returning a CSV string. Modifiers must be specified after filters and only apply to queries that return rows, like `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "42d3f824-a0f6-4e6c-89f2-f09d37da7c06",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` function in the Supabase library allows ordering the query results by a specified column. The function takes parameters such as the column name, a boolean flag for descending order, the name of a foreign table to order, and a flag to order by showing nulls first. This functionality enables sorting the returned data based on the user's requirements, which is crucial for presenting information in a meaningful and organized manner."
  },
  {
    "chunk_id": "5746d35e-9aec-4470-b873-6f15a475144a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to limit the number of rows returned in a Supabase table query. The `limit()` function is used to specify the maximum number of rows to return, and an optional `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. An example is provided showing how to use the `limit()` function to return a single row from the \"countries\" table."
  },
  {
    "chunk_id": "8a60526e-af6c-4470-b028-1fa10b1c3b79",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` method limits the query result by specifying a starting offset (`from`) and ending offset (`from + to`). This allows returning only a specific subset of the records, while respecting the query order. The `from` and `to` values are 0-based and inclusive, meaning `range(1, 3)` will return the second, third, and fourth rows. The `foreign_table` parameter can be used to limit the range to rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "e40f9765-3116-4773-919f-f61abdbecc08",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to retrieve a single row of data from the \"countries\" table in a Supabase database using the `select()`, `limit(1)`, and `single()` methods. This allows the response to be returned as a single object instead of an array of objects, which can be more convenient for certain use cases."
  },
  {
    "chunk_id": "6e5402ab-da41-4e55-ad67-2921e895804f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides guidance on how to retrieve a single row of data using the `maybe_single()` method in Supabase's `select()` operation. This is useful when you expect to retrieve either zero or one row, and you want the result to be returned as a single object rather than an array of objects."
  },
  {
    "chunk_id": "f7d349f5-dfe9-46b0-9e77-175b01bbaf9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The Retrieve as a CSV section describes how to return data from a Supabase table as a CSV string. This can be useful for exporting data in a structured format. The example code demonstrates how to use the `.csv()` method to retrieve the data from the \"countries\" table as a CSV response."
  },
  {
    "chunk_id": "566e009e-e486-4752-8ef0-e22c700f8733",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe Postgres EXPLAIN command can be used to get the execution plan for a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. It can be enabled for debugging slow queries, but should be used with caution in production environments due to potential security concerns. The explain() method can be used to get the execution plan for any query, including RPC calls and write operations."
  },
  {
    "chunk_id": "05c04666-be17-48c1-8ea5-2aa179d45d78",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To create a new user, the \"Confirm email\" setting in the Supabase project dashboard determines whether a user needs to verify their email address before logging in. If \"Confirm email\" is disabled, both a user and session are returned; if enabled, only a user is returned without a session. The default redirect URL after email confirmation can be modified in the project settings."
  },
  {
    "chunk_id": "050d31b9-a361-48fd-b648-922a06ab6d2a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_anonymously()` function returns an anonymous user. It is recommended to set up captcha for anonymous sign-ins to prevent abuse, and the captcha token can be passed in the `options` parameter. This function can be used to create an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "21a732fe-62aa-41f9-a515-2e123e9507da",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. The key parameters required are the user's credentials, and the response includes the signed-in user's information. The example code demonstrates signing in with email and password."
  },
  {
    "chunk_id": "23bd0db0-2ea0-4f46-ba40-9f051614ba67",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Sign in with ID Token\" feature, which allows users to authenticate by providing an OIDC ID token. It requires the authentication provider to be enabled and configured. The summary explains the key technical details, including the required parameters and an example code snippet for signing in using an ID token."
  },
  {
    "chunk_id": "e0b013aa-4820-4a5d-8091-c16f2ac35041",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe sign-in with OTP feature allows users to sign in without a password, using either an email or phone number. It can be used for passwordless sign-ins, where an OTP is sent to the user's email or phone. If the user doesn't exist, the sign-in will create a new account. Developers can configure whether to send a magic link or OTP, and can customize the redirect URL for the magic link. The implementation for magic links and OTPs is the same, with the email template determining whether a one-time code or confirmation URL is sent."
  },
  {
    "chunk_id": "bb65b4ad-3209-4889-aee4-ff4d7a0ed594",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThis method is used to sign in a user through a third-party OAuth provider, which Supabase supports. The `supabase.auth.sign_in_with_oauth()` function can be used to initiate the sign-in process, with the provider (e.g., 'github') specified as a parameter. This allows users to authenticate with Supabase using their existing third-party credentials, without the need to create a separate account."
  },
  {
    "chunk_id": "86f2b73f-1e53-4d9b-9222-491dd6b233d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the CLI. You can then initiate the sign-in flow by providing either the user's email domain or a specific provider ID, which allows for more advanced use cases like mapping email addresses to identity providers or using contextual information to select the appropriate provider."
  },
  {
    "chunk_id": "6102fe3e-78e0-4c8a-9016-5b85858e9e37",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the user's refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which remains valid until it expires. The `sign_out()` method uses the global scope, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "a165066f-9c9c-4cf7-b600-5eab7c12cea0",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method in the Supabase auth API is used to verify one-time passwords (OTPs) for various authentication types, including SMS, email, and account recovery. The verification type should match the corresponding auth method used previously to sign up or sign in a user. The `TokenHash` from the email templates can be used for server-side authentication flows like the PKCE flow."
  },
  {
    "chunk_id": "980032ac-c2a5-4f31-8afc-2eed3358ec4b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. The session's access token can be refreshed if it has expired."
  },
  {
    "chunk_id": "54f28015-992b-41f3-b369-168d5dc39979",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.refresh_session()` retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the existing session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "d23af2d7-0541-43d2-936e-a64dae68bccb",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, allowing for validation of the user's access token JWT on the server. This is useful for checking if the user is authorized, as it provides an option to pass in a custom access token JWT or use the existing session token."
  },
  {
    "chunk_id": "6c344b75-1607-4483-af6b-a7e87ea39f26",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `setSession()` method sets the session data by taking an `access_token` and `refresh_token`. If the current session is expired or the tokens are invalid, it will refresh the session. Upon successful execution, a `SIGNED_IN` event is emitted. This method is used to maintain a valid session for the user's interactions with the application."
  },
  {
    "chunk_id": "bda9d62a-4c8b-41ed-bad7-3d2e3f523c5c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers Multi-Factor Authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. Supabase allows users to enroll multiple TOTP factors for recovery, up to a limit of 10, which eliminates the need to store recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "aecd858c-f516-496a-b6b1-462724c5a383",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nEnroll a time-based, one-time password (TOTP) factor by calling `supabase.auth.mfa.enroll()` with `\"factor_type\": \"totp\"` and a `\"friendly_name\"`. The returned `id` can be used to create a challenge, which can be verified using `mfa.challenge()` and `mfa.verify()` or a single step `mfa.challenge_and_verify()`."
  },
  {
    "chunk_id": "45ca9e01-8307-40cd-9c45-daf15ab9a400",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` method can be used to create a challenge for a specific factor, identified by its `factor_id`. The created challenge can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "ea27d525-0079-4b69-b9aa-4ffaa795bc27",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `supabase.auth.mfa.create()` function. To verify a challenge, you can call the `supabase.auth.mfa.verify()` function, passing in the `factor_id`, `challenge_id`, and `code` parameters. This allows you to verify a multi-factor authentication challenge programmatically."
  },
  {
    "chunk_id": "88070878-582c-4e31-9b93-90a15dd9617c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled MFA factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking the factor ID and a one-time code as input parameters."
  },
  {
    "chunk_id": "784da396-743e-4c22-b561-7be2d916ec44",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, use the `supabase.auth.mfa.unenroll()` method, passing the `\"factor_id\"` as a parameter. This allows users to remove a specific multi-factor authentication factor from their account, which may be necessary if they need to update or replace their authentication device."
  },
  {
    "chunk_id": "c0b7b11b-6169-4593-953e-a770aa06df55",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of the authentication mechanism used in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the user's verified factor, returning AAL2 if verified or AAL1 if not."
  },
  {
    "chunk_id": "9b4724cf-38f6-4a6a-8d0a-462b7c71c3e8",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase Edge Functions feature allows invoking custom functions on the server. Invoking a function requires an Authorization header and automatically sets the Content-Type header based on the data type of the request body. Developers can also override the default Content-Type by providing a custom header. The example demonstrates invoking the \"hello-world\" function with a JSON payload."
  },
  {
    "chunk_id": "3458fac7-02d7-4971-a02a-efbcfbf748a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, but row-level security is not applied to delete statements. The documentation provides example code for subscribing to various Realtime events, such as broadcasts, presence changes, and table-specific updates."
  },
  {
    "chunk_id": "1cd8e7bb-eeff-4022-b20e-8c7387af149e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel helps maintain project performance by removing unused channels that can degrade the Realtime service and database. The `supabase.remove_channel()` function can be used to explicitly remove a channel, which Supabase will automatically clean up 30 seconds after a client disconnects."
  },
  {
    "chunk_id": "f6ae6527-c1f8-4bed-b09a-b4ffdaa9539b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain Realtime service performance and database efficiency by removing unused subscriptions. Supabase automatically handles cleanup 30 seconds after a client disconnects, but keeping unused channels can degrade performance with more simultaneous subscribers. The `supabase.remove_all_channels()` function can be used to remove all subscribed channels."
  },
  {
    "chunk_id": "13d2da2f-93ad-488b-a37c-9e789abb21ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is:\n\nRetrieve all channels by calling the `supabase.get_channels()` function, which returns a list of all available channels. This functionality allows users to access and manage the complete set of channels in the application."
  },
  {
    "chunk_id": "efcd659a-25c9-4347-84b8-8a34322f58e9",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It includes sample code to subscribe to a channel, and then send a broadcast message with cursor position data to all subscribed clients."
  },
  {
    "chunk_id": "30597577-9fbe-400f-94a0-3fcd750edc66",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the required permissions are `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Supabase Storage guide for details on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "90a03e28-6503-4380-abc3-05bf443dea2f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` permissions on the `buckets` table and no permissions on the `objects` table. The storage guide provides more information on how access control works. The code to get a bucket is `res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "71954a6b-563c-4be3-bec0-8c35a44f17c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for details on Supabase access control."
  },
  {
    "chunk_id": "c4892bfc-08f6-430e-894b-813e064d3936",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required permissions are `select` and `delete` on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for more information on access control. The code to delete a bucket is `_10 res = supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "489e100b-4aa6-490d-ae97-b080a5f0be46",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. The Storage guide provides details on how access control works for this operation."
  },
  {
    "chunk_id": "27dc4f71-8136-401d-b4e1-b381dd115e21",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the required RLS policy permissions are `objects` table permissions for `insert`. The MIME type for the file should be specified, otherwise it defaults to `text/html`. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file object and the desired path on Supabase Storage, along with optional file options such as the content type."
  },
  {
    "chunk_id": "0500b591-751d-4528-9a8b-e2d6899b00c5",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase storage, the required permissions are `select` on the `objects` table. The code example demonstrates how to download a file from a specified bucket and write it to a local destination file."
  },
  {
    "chunk_id": "efb9fc12-3cbb-441e-adf5-ffd7c0fa2425",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the `objects` table permissions must include `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "85d76058-ed13-4537-a081-700030a3ea29",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated by opening the local file, then using the Supabase storage client to update the file on the Supabase Storage, specifying the bucket name, file path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "3345e779-addb-4fde-9e10-bd4e8690c592",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires 'update' and 'select' permissions on the 'objects' table, but no permissions on the 'buckets' table. The move operation is performed using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` method, which transfers the file from the 'public/avatar1.png' location to the 'private/avatar2.png' location."
  },
  {
    "chunk_id": "90f794f4-b78d-4b6f-9d13-bc90c19d2a31",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table, but no permissions on the 'buckets' table. The Storage guide provides details on configuring access control for storage operations."
  },
  {
    "chunk_id": "68e36bb7-df8c-42ce-9d34-c157b4e9e043",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions require `select` access. The signed URL grants temporary access to a file in the specified bucket, with the expiry duration set by the user."
  },
  {
    "chunk_id": "c1b87c37-800c-4ebe-b238-2ebd68065d87",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for a file in Supabase Storage, the bucket must be set to public either via the `updateBucket()` API or the Supabase Dashboard. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` method can be used to fetch the public URL for a file in a public bucket."
  },
  {
    "chunk_id": "fb1ef07a-9bf4-422b-8c47-d1ee57677f81",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library provides a Python client for interacting with Supabase, a Postgres database service. It allows developers to perform various operations, including querying the database, listening to real-time changes, invoking edge functions, managing user authentication, and handling large file uploads and downloads."
  },
  {
    "chunk_id": "418a7014-e460-4254-92cc-9192998ace28",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content describes how to install the Supabase-py library, which is compatible with Python 3.7 and above. It provides the specific command to install the library via pip, the popular Python package manager, as well as through the Conda package management system."
  },
  {
    "chunk_id": "d0758a98-be6a-47e9-a5d5-4618c0600eb3",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary entry point to the Supabase ecosystem, allowing users to interact with various Supabase functionalities. It can be initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optional Client Options to customize authentication behaviors. The client can be used to access and interact with the Supabase services, such as the database, storage, and authentication features."
  },
  {
    "chunk_id": "9f8ef3e5-4288-487d-ac68-a169b7a23437",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Supabase API by default returns a maximum of 1,000 rows, which can be adjusted in the project settings. The `select()` function can be combined with filters and modifiers to customize the data retrieval, and the `apikey` column should be avoided as it is a reserved keyword. The `select()` function supports specifying columns to retrieve and options to get the row count."
  },
  {
    "chunk_id": "14008e24-9876-468e-8e63-51dddb29ca52",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'insert' function in the documentation allows you to insert data into a table, either a single row using a dictionary or multiple rows using a list. It provides optional parameters to specify the count method, return method, and whether to use null values for missing fields in bulk inserts. An example is provided demonstrating how to insert a single row into the \"countries\" table."
  },
  {
    "chunk_id": "2e00760a-e82f-4a3e-9102-c98e4e26c72b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` function in the Supabase client library is used to update data in a table. It must be combined with filters to target the specific item(s) to be updated. The `update()` function takes a dictionary or list of dictionaries as the `jsonRequired` parameter to specify the new values, and an optional `countOptionalCountMethod` parameter to get the count of affected rows."
  },
  {
    "chunk_id": "921dd630-9ca6-4a91-8436-417a8ac00406",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is as follows:\n\nThe upsert method allows inserting or updating data in a table, with primary keys required in the values. It supports bulk upserts, handling of unique constraints, and optional configuration for returned count, response format, and handling of missing fields."
  },
  {
    "chunk_id": "b83f16c1-ffe4-4f98-bc9e-71d950b62796",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data, the `delete()` method should be used in combination with filters to target specific items. When using `delete()` with RLS (row-level security) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple records that share common criteria in a single query. The `countOptional` and `returningOptional` parameters can be used to control the count and return methods for the delete operation."
  },
  {
    "chunk_id": "9cd80f03-f22d-43ff-b41a-90241ee1e318",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation covers how to call Postgres functions as Remote Procedure Calls (RPC) from an application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides details on the various parameters that can be used when calling a Postgres function, including options for passing in arguments, handling return data, and controlling the count algorithm for set-returning functions."
  },
  {
    "chunk_id": "206a3d8d-460e-432a-94ce-405a268b2aff",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return, update, upsert, or delete rows that match certain conditions in Supabase queries, including for functions that return table responses. Filters can be chained together, and you can filter by values within JSON columns or on foreign tables. The order of applying filters and other query methods is important, as demonstrated by the correct and incorrect examples provided."
  },
  {
    "chunk_id": "5d907bec-262c-42da-8a04-6e42bd2f3e1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided content describes how to filter rows in a table where the value of a specified column is equal to a given value. It outlines the required parameters, `column` and `value`, and provides an example usage with the `select()` method in Supabase."
  },
  {
    "chunk_id": "775cfa39-0062-42f6-8174-b63419f7e1fa",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on how to filter a table in a database to include only rows where a specified column is not equal to a given value. The key parameters are the column to filter on and the value to compare against. This functionality is demonstrated using the `neq()` method in the Supabase library."
  },
  {
    "chunk_id": "41d660ba-a719-47a4-83c3-d41ddc8fb7c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table to only include rows where a specified column has a value greater than a given value. The key parameters are the column name and the comparison value. An example is provided using the Supabase library's `gt()` method to filter a \"countries\" table by an \"id\" column greater than 2."
  },
  {
    "chunk_id": "3dabab80-3132-481d-a8f5-d9bf85bf1954",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `gte()` function in the Supabase API allows filtering a database table to include only rows where the specified column has a value greater than or equal to the provided value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by."
  },
  {
    "chunk_id": "717f1dc0-ed59-487b-8d56-136306cd7681",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to filter a database table by selecting rows where a specified column has a value less than a given value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `lt()` function to select rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "84610bd6-c8f8-48ee-bc79-6178f9ee558d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'lte()' function in the Supabase client library allows you to filter a database table by a column value that is less than or equal to a specified value. The 'columnRequired' parameter specifies the column to filter on, and the 'valueRequired' parameter provides the value to filter by. This function can be used in conjunction with the 'select()' method to retrieve the filtered data."
  },
  {
    "chunk_id": "6230746c-9cf7-4ef4-8782-46aa8b74a253",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' functionality allows filtering a table by checking if the values in a specified column match a provided regular expression pattern, with case-sensitive matching. The required parameters are the column name and the pattern to match, and this can be used in a `select()` query to retrieve only the rows where the column value matches the given pattern."
  },
  {
    "chunk_id": "f6706db7-d7f1-499c-b320-c174d582fbf5",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `ilike()` function in Supabase allows you to perform a case-insensitive pattern match on a specified column. It takes two required parameters: the column name and the pattern to match. This can be useful for filtering rows based on a case-insensitive search, as demonstrated in the example where the `name` column is filtered for rows containing the pattern \"%alba%\"."
  },
  {
    "chunk_id": "1f6428ee-a21c-46a2-8e68-989c8a159285",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes the 'Column is a value' operation, which allows you to filter table rows based on a column's value. The key parameters are the column name and the value to match, which can be a null, boolean, or other data type. This functionality enables precise data filtering and retrieval within a Supabase database."
  },
  {
    "chunk_id": "83a72cdc-62d2-4653-9770-3d48a3a430cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers filtering rows in a table where the value of a specific column is included in a provided array of values. This is demonstrated using the Supabase library's `in_()` method, which allows filtering a table selection by checking if a column value is present in a given array."
  },
  {
    "chunk_id": "2299d587-b879-4a63-a1ed-7ee6208cfdb0",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` operator is used to filter rows where a column contains every element in the specified value. This is applicable for `jsonb`, `array`, and `range` columns. The operator takes two parameters: the column name to filter on, and the value (object, array, or range) to filter with. This allows querying data where the column contains all the specified elements, such as finding issues with specific tags."
  },
  {
    "chunk_id": "d93a757a-7d1e-4ec1-8848-d3685764d6d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is applicable to jsonb, array, and range columns. It allows you to filter rows where every element in the specified column is contained within the provided value. The parameters include the column to filter on and the value to filter with. This can be useful for querying data stored in array or jsonb formats, as demonstrated in the example code snippet."
  },
  {
    "chunk_id": "75b805cb-ffd9-4c1d-bb52-6430b1ec5a7d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column where every element in the column is greater than any element in the specified range. The required parameters are the name of the range column to filter on and the range to filter with. This can be used in a Supabase query to select records where the \"during\" column is greater than the given date range."
  },
  {
    "chunk_id": "6ce13a81-a404-4ad2-9266-a75ea21cace3",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature allows filtering rows in a range column, where each element in the column is either contained in the given range or greater than any element in the range. The relevant parameters are \"column\" and \"range\", which specify the range column to filter on and the range to filter with, respectively. This functionality is useful for querying data where the relevant time periods or other range-based criteria need to be matched."
  },
  {
    "chunk_id": "aaecb80d-5c7a-4226-8822-8bb83c045c38",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used for filtering range columns in a database table. It allows you to match rows where every element in the specified column is less than any element in the provided range. The key parameters are the column to filter on and the range to use for the comparison."
  },
  {
    "chunk_id": "19a86aaf-44cc-43eb-b1d4-9e2ef5af1c0a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, matching rows where every element in the specified column is less than or equal to any element in the provided range. It takes a column name and an array of range values as parameters, and can be used in a Supabase query to filter the results."
  },
  {
    "chunk_id": "e03824d9-4eb1-40bf-a1e5-729d6ec9e56c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Mutually exclusive to a range\" feature is applicable to range columns, where it filters rows where the column value is mutually exclusive to the specified range, with no elements between the two ranges. The key parameters are the column name and the range to filter on, which can be used in the `range_adjacent()` method when querying a table."
  },
  {
    "chunk_id": "3fd01078-28e7-46b8-933b-7290dacadcac",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"With a common element\" feature is applicable to array and range columns, allowing users to filter rows where the column value and the provided value have an element in common. The key parameters are the column to filter on and the value to filter with. This functionality is demonstrated in an example query that filters a \"tags\" column on an \"issues\" table."
  },
  {
    "chunk_id": "698cdb76-2beb-43ae-be85-534ba793d581",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The given content summarizes the 'Match a string' feature, which is used to filter text or tsvector columns in a database by a provided query string. It explains the parameters required, including the column to filter on and the query text to match, as well as optional named parameters for different text search configurations such as basic normalization, full normalization, and websearch. An example usage of the text_search function is provided for filtering the 'content' column in a 'texts' table."
  },
  {
    "chunk_id": "ddeb05a7-db95-4565-87e8-05d0dc3c5ec9",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in Supabase allows you to filter a table by matching specific column values provided in a dictionary. This is a more concise alternative to using multiple `.eq()` calls. The `queryRequired` parameter is an object where the keys are column names and the values are the corresponding filter values."
  },
  {
    "chunk_id": "acb9cd04-184b-4662-929a-9206028f2456",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to use the `not_` operator in PostgREST syntax to match rows that don't satisfy a given filter, such as excluding specific IDs or array values. It provides examples of using `not_.in_()` and `not_.contains()` to achieve this. Additionally, the documentation demonstrates how to use the `not_.is_()` filter with the `select()` method in Supabase to retrieve data excluding rows where the \"name\" column is null."
  },
  {
    "chunk_id": "b15696dd-adb9-42f8-a8a6-89e03c867751",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the Supabase client library allows you to use PostgREST syntax to specify filters that match at least one condition, such as filtering by a list of IDs or checking if an array column contains specific values. The function takes a string parameter 'filtersRequired' to specify the filters, and an optional 'reference95table' parameter to filter on referenced tables. The or() function can be used in combination with the select() function to execute these complex queries."
  },
  {
    "chunk_id": "e202f0d9-350a-45f8-8e5f-e15b0064a975",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the Supabase client library expects the use of raw PostgREST syntax for the filter values. It supports various filtering operators such as `in`, `cs` (contains), and can handle array values using `\\{\\}`. The `filter()` method takes three parameters: `column` (the column to filter on), `operator` (the filtering operator), and `value` (the value to filter with). An example is provided demonstrating the usage of `filter()` on a foreign table to select specific countries."
  },
  {
    "chunk_id": "1f5f61de-8de4-4b19-91d8-e8bfa1ba2ab6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "461c585d-2b50-4687-a19b-f3ea20980b79",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `order()` function in the Supabase client library allows ordering the query results by a specified column. The function takes parameters like `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the foreign table to order), and `nulls_first` (whether to show nulls first). An example is provided demonstrating how to order the results of a `select()` query on a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "b989092f-aa98-46a9-ae59-67349b77ee32",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'limit' parameter in the 'select()' function allows you to specify the maximum number of rows to return from a table. This can be useful for optimizing performance or limiting the amount of data returned. The 'foreign95table' parameter can be used to limit rows from a foreign table rather than the parent table."
  },
  {
    "chunk_id": "0049d9d4-82fc-4fd2-8758-e88d583ef4d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in Supabase allows limiting the query result by specifying a starting offset (`from`) and ending offset (`from + to`). This allows returning only a subset of the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, and an optional `foreign_table` parameter can be used to limit the range to a foreign table instead of the parent table."
  },
  {
    "chunk_id": "82f526a2-2684-4ee3-9c0b-7eb871769863",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise overview of how to retrieve a single row of data from a Supabase table using the `select()` and `single()` methods. It highlights that the `single()` method returns the data as a single object instead of an array of objects, which can be useful in certain scenarios."
  },
  {
    "chunk_id": "758c8851-b4b4-4cc7-886c-43aedff80a22",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve zero or one row of data from a Supabase table using the `maybe_single()` method, which returns the data as a single object instead of an array. This is useful when you expect to retrieve at most one row that matches the specified criteria, such as filtering by a unique column like \"name\"."
  },
  {
    "chunk_id": "d0e21be9-99e8-4d79-a70b-43cf1f414494",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the provided content is:\n\nThe documentation describes how to retrieve data from the \"countries\" table in Supabase as a CSV string. The `csv()` method is used to format the data returned by the `select(\"*\")` query as a CSV response. This functionality allows users to easily download and work with the data in a spreadsheet or other CSV-compatible application."
  },
  {
    "chunk_id": "99fb2b83-cf26-4e81-ae90-5dbc397ad3c7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres provides the execution plan for a query, which is useful for debugging slow queries. It can reveal sensitive information, so it's recommended to only enable it in testing environments. The `explain()` method supports several optional parameters such as `wal`, `verbose`, `settings`, `format`, `buffers`, and `analyze` to control the output."
  },
  {
    "chunk_id": "60c58331-843b-4cdf-b29b-ed66a3c28312",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content provides guidance on creating a new user in Supabase. It explains that the user's email address needs to be verified before they can log in, unless the \"Confirm email\" setting is disabled. The summary also notes that when \"Confirm email\" is disabled, both a user and a session are returned, whereas when it's enabled, only a user is returned. Additionally, the content covers the behavior when signing up an existing confirmed user, and how to fetch the currently logged-in user."
  },
  {
    "chunk_id": "c7373d54-5943-4a3f-bcef-d9fa5b9b4ed7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to create an anonymous user in the Supabase authentication system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in anonymously while passing in the captcha token. The anonymous user creation is useful for allowing users to interact with the system without providing credentials, while still maintaining some level of security."
  },
  {
    "chunk_id": "844867a8-e804-4799-a7d8-93f148733342",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides code examples for signing in with email and password, and outlines the required \"credentialsRequiredSignInWithPasswordCredentials\" parameter. The summary highlights the key functionality of signing in a user with the two supported authentication methods."
  },
  {
    "chunk_id": "3c0280a3-49ef-4417-897d-cecfbb7d4ba4",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content provides information on signing in with an OIDC ID token. It specifies that the authentication provider used should be enabled and configured. The summary includes the key technical point that the `supabase.auth.sign_in_with_id_token()` function is used to sign in using an ID token, where the `provider` and `token` parameters are required."
  },
  {
    "chunk_id": "bd1f7c86-0481-40f1-851f-0db776401522",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP (One-Time Password) feature allows users to authenticate without a password, by sending an OTP to their email or phone number. This method can be used to sign in existing users or create new users on the fly. The OTP can be configured to be a magic link or a one-time code, and the destination URL for the magic link is determined by the `SITE_URL`. Developers can also customize the email template to include the OTP code instead of a magic link."
  },
  {
    "chunk_id": "5caeac70-bb2e-4480-99b4-e4a0808f7ae1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThis method is used to sign in a user through a third-party OAuth provider, such as GitHub. Supabase supports a wide range of third-party providers for this purpose. The `sign_in_with_oauth()` method is used to initiate the sign-in flow with a specific provider, which can also include requesting certain scopes."
  },
  {
    "chunk_id": "b5cf83b5-9bec-4643-9627-c23f7a0150f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the provided CLI commands. You can then initiate the sign-in flow by specifying either the associated email domain or a provider-specific ID, which allows for more granular control over the authentication process, such as mapping specific user email addresses or using company-specific identifiers."
  },
  {
    "chunk_id": "c56d2013-e06f-491b-a0f3-74e56760d69d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which remains valid until it expires. The `sign_out()` method can be used to sign out the user from the global scope, which signs out all other sessions the user is logged into."
  },
  {
    "chunk_id": "2c0fdb67-df6e-4181-a58c-d05a063d5d0d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and password changes. The verification type should match the corresponding auth method used before `verify_otp`. The `TokenHash` from the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "05fda153-853e-4124-a885-12a4a5e780c4",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data on the server, as it could be tampered with. If verified, trustworthy user data is required, the `get_user()` method should be used instead. The method also handles session refresh if the access token has expired."
  },
  {
    "chunk_id": "a301f79c-cae9-4be7-a498-d7467f593623",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it has expired or not."
  },
  {
    "chunk_id": "c0e78975-7c62-4187-9262-b9fbee02d38b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method fetches the user object from the database, validating the user's access token JWT on the server. It is useful for checking if the user is authorized, and can be called with an optional access token JWT or the current session's JWT."
  },
  {
    "chunk_id": "5badcbcb-b986-4927-9524-78b1baff3772",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the session data by taking an `access_token` and `refresh_token` as input. If the session is expired, `set_session` will refresh it to obtain a new session. If the tokens are invalid, an error will be thrown. If successful, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "c955e2d5-ee73-46b1-bb2a-5718583a1e72",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers methods for Multi-Factor Authentication (MFA) in the Supabase platform, with a focus on time-based one-time password (TOTP) as the supported 2nd factor. It allows users to enroll multiple TOTP factors for recovery, reducing the need for storing recovery codes and improving the overall security by reducing the attack surface."
  },
  {
    "chunk_id": "975f587a-c908-4f87-91bf-5e3802afaadd",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` can be used to create a challenge, which can then be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` functions. This process allows for multi-factor authentication in the application."
  },
  {
    "chunk_id": "6ac81d60-6676-4498-b39d-e09c81ab8149",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` method is used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "fb8dc9fd-ad65-4b64-a1cc-70ab2c6607d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a multi-factor authentication (MFA) challenge, you must first create a challenge using the `supabase.auth.mfa.verify()` function, providing the `factor_id`, `challenge_id`, and `code` parameters. This allows you to programmatically verify an MFA challenge and authenticate the user."
  },
  {
    "chunk_id": "3a577b97-625b-4892-a7ed-b0da52cf67c6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to authenticate by providing a factor ID and a code."
  },
  {
    "chunk_id": "ac6bfd6a-9677-4cd7-ab85-e55c14f91dec",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll an MFA factor, use the `supabase.auth.mfa.unenroll()` method and provide the `factor_id` as a parameter. This allows users to disable a specific MFA factor and no longer be required to authenticate using that factor."
  },
  {
    "chunk_id": "865ee713-b2c4-4437-b670-1f8209fbcf83",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) represents the strength of an authentication mechanism. In Supabase, `aal1` indicates a single-factor authentication (e.g., email and password), while `aal2` indicates two-factor authentication (e.g., TOTP). The `next_level` field returns the next higher AAL if the user has a verified factor, otherwise, it returns `aal1`. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "d85afcc8-2dab-4590-a5f9-31d324c67a58",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function by making a request with an Authorization header. When passing a request body, the client-side library automatically sets the Content-Type header based on the data type; this behavior can be overridden by providing a custom Content-Type header. The function can be invoked with a request body, and the response can be handled to manage any errors."
  },
  {
    "chunk_id": "336b2f6a-8e44-4a81-a5ae-944a645df1b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled due to performance and security concerns. Developers can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, but row-level security is not applied to delete statements. The provided code example demonstrates subscribing to a channel, sending a broadcast message, and handling received broadcasts."
  },
  {
    "chunk_id": "c63bac4d-cc02-4f2a-adc6-4bce8158a6d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel in Supabase is recommended to maintain the performance of the Realtime service and the connected database. Unused channels can cause degradation as more clients subscribe, so the `supabase.remove_channel()` function can be used to remove a specific channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "c613963e-a823-4cb1-b267-ceab75fa6280",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain performance of the Realtime service and the database when listening to Postgres changes. Supabase automatically handles cleanup 30 seconds after a client disconnects, but unused channels can degrade performance as more clients subscribe. To remove all channels, use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "0c330617-aa05-4b9e-a32f-c3f1dc65eccf",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the \"Retrieve all channels\" section is:\n\nThe `get_channels()` method in the Supabase library allows you to retrieve all the channels in the application. This is a fundamental operation for accessing and managing the available communication channels within the system."
  },
  {
    "chunk_id": "832c96ba-60ac-47aa-b5bc-10ac75d178d5",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nBroadcast a message to all connected clients in a channel using the Supabase Realtime API. The example demonstrates how to subscribe to a channel, then send a broadcast message containing cursor position data to all subscribed clients."
  },
  {
    "chunk_id": "63a4f7e0-1222-4346-bf17-dbcb67f16c4f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the RLS policy permissions required are `insert` access to the `buckets` table and no permissions for the `objects` table. Refer to the Storage guide for details on how access control works. The code to create a bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "ab5f7907-4f98-4efb-b3de-f25b9bf19ec4",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to get a bucket is `_10 res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "d3755c4e-d37d-4f87-b196-ef21a64c9b60",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. The Storage guide provides more information on how access control works for storage operations."
  },
  {
    "chunk_id": "77893610-45b2-42a6-9d3e-1d7afc42a166",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the user requires `select` and `delete` permissions on the `buckets` table. No permissions are needed on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "bd0cc4e0-7ffd-4073-a139-80af6002c331",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The Storage guide provides details on how access control works. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "d53a55b2-e556-40d6-8842-6a0ac3b9efa8",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The appropriate MIME type should be specified, especially for media files, or it will default to `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and optional file options such as content type."
  },
  {
    "chunk_id": "03b992f0-5d39-4893-a32b-9e64c68f68aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required permissions are `select` on the `objects` table, while no permissions are required on the `buckets` table. The code snippet demonstrates how to download a file from a specified bucket and save it to a local destination."
  },
  {
    "chunk_id": "443afff5-ec4e-4d9b-8e77-f3e9d233a51d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions must include the `select` role. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "934996b3-adf7-4f34-9aa5-aeec06e53961",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file is updated by opening the local file, then using the Supabase storage client to update the file on the cloud storage, specifying the file path, cache control options, and the option to upsert (insert or update)."
  },
  {
    "chunk_id": "00324e99-8760-4eaf-a406-3df8fe3a58b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` command. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "502234c7-6fab-4b28-bb56-f3b616d6e13e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, you need the `delete` and `select` permissions on the `objects` table. The RLS policy permissions required are none for the `buckets` table and `delete` and `select` for the `objects` table. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "683b723a-c996-4500-9b46-e367a4cc71ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions must have `select` access. The signed URL allows time-limited access to a specific file in the storage bucket, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "8bb8da63-550b-4065-94d2-582ed9bd6a7b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve the public URL of an asset in a Supabase Storage bucket, the bucket must be set to public either through the updateBucket() method or the Supabase dashboard. No specific permissions are required for the buckets or objects tables. The get_public_url() method is used to generate the URL for the desired asset."
  },
  {
    "chunk_id": "76e49259-39e7-4814-88aa-d08e4cbbf7b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library provides a Python interface to interact with the Supabase platform, which includes features for working with Postgres databases, listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. The library offers a comprehensive set of objects and methods to interact with the Supabase ecosystem from Python applications."
  },
  {
    "chunk_id": "6ce9c7d8-e850-4599-8822-c420764ee4b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the supabase-py library using the pip package manager. The library supports Python 3.7 and later versions. The installation command is `pip install supabase`."
  },
  {
    "chunk_id": "e59c3eea-ad3f-42a2-968e-01e857c5111b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the entrypoint to the Supabase ecosystem, allowing easy interaction with its functionality. It is initialized using the `create_client()` method, which requires the Supabase URL and Key as parameters. The client can also be configured with optional options to change the Auth behaviors."
  },
  {
    "chunk_id": "2cf8ba6b-7455-4fb5-9bec-823406983a50",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, while the `apikey` is a reserved keyword that should be avoided as a column name. The `select()` function supports specifying columns and using the `count` option to get the count of rows returned."
  },
  {
    "chunk_id": "365fb63e-680e-43c5-84ae-92373fa78f00",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section describes the parameters and usage of the `insert()` method in the Supabase library. It allows inserting single or multiple rows into a table, with options to specify the return method and handle missing fields. The example demonstrates how to use the `insert()` method to create a new record in the \"countries\" table."
  },
  {
    "chunk_id": "e4df6628-ecc0-4de9-a16b-ccea241c5550",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided software documentation is used to update data, and it should always be combined with Filters to target the specific item(s) to be updated. The method takes a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the values to be updated, and an optional `countOptional` parameter to specify the property to use for getting the count of rows returned."
  },
  {
    "chunk_id": "8541aed8-898b-46ff-a55f-ea5a7fd8a621",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe Upsert data operation allows inserting or updating data in a table, with primary keys required in the `values` dict. Key parameters include `jsonRequired` for the values to insert, `countOptional` for the count of rows returned, `returningOptional` for the return method, and options to handle duplicate rows and default null values. Upsert can be used for both single row and bulk data operations."
  },
  {
    "chunk_id": "336928a0-25a1-426d-b9f4-dca79d15e0e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` function in the Supabase library should always be combined with filters to target the specific items to be deleted. When using `delete()` with filters and Row-Level Security (RLS) enabled, only rows visible through `SELECT` policies are deleted, so at least one `SELECT`/`ALL` policy must make the rows visible. `delete().in_()` allows deleting multiple rows with a single query by specifying an array of values, which is useful for batch deletions."
  },
  {
    "chunk_id": "727cd127-8ac9-4b26-a602-8ecd0729d912",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to call Postgres functions as remote procedure calls (RPCs) from anywhere. Postgres functions are useful for implementing logic that rarely changes, such as password resets and updates. The documentation covers the parameters for the RPC call, including how to pass arguments, apply filters, and execute read-only functions. It provides an example of calling a \"hello_world\" function without arguments."
  },
  {
    "chunk_id": "15fa2468-a95b-461b-8b80-9f66b619683f",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions, and can be used in various database operations like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response, and they can be chained together to create more complex conditional statements."
  },
  {
    "chunk_id": "9ce56ba4-4d16-4b19-9cb7-815ab05b3526",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a table by a specific column value using the `eq()` method. The `eq()` method takes two parameters: the column name and the value to match. This is a common operation in database querying and can be useful for retrieving specific rows from a table."
  },
  {
    "chunk_id": "597efcf8-6ca9-488f-9431-7b44b74713a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe 'neq()' function in Supabase allows you to filter a table by selecting only the rows where a specified column is not equal to a given value. The 'columnRequired' parameter specifies the column to filter on, and the 'valueRequired' parameter provides the value to compare against."
  },
  {
    "chunk_id": "0dc670e0-6508-40c9-86ea-48bc167f31f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers how to filter a Supabase table to only include rows where a specified column is greater than a given value. The key parameters are the column name and the filter value. This functionality can be used in the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "c63fe8b0-7788-4483-be5d-c5d9c751ce01",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation covers how to filter a table in Supabase by selecting rows where a specified column is greater than or equal to a given value. It provides the required parameters, `column` and `value`, and an example of using the `gte()` method to implement this filter."
  },
  {
    "chunk_id": "97d9268f-276a-4f16-b702-a0f9a3db5209",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `lt()` method in the Supabase library allows filtering rows where the specified `column` has a value less than the provided `value`. This can be used in the `select()` function to retrieve only the rows matching the given criteria."
  },
  {
    "chunk_id": "8096e112-010d-42cb-a399-942fd3137354",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\nThe documentation describes a database query operation that filters rows where a specified column is less than or equal to a given value. The key parameters are the column name and the value to filter by. This functionality can be used with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "464042db-1382-4618-a128-501ad2011d8e",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column matches a pattern\" feature allows filtering rows where a specified column matches a given pattern case-sensitively. The key parameters are the column name and the pattern to match. This can be used in a Supabase query, for example, to select rows where the \"name\" column contains the substring \"Alba\"."
  },
  {
    "chunk_id": "34ee323f-2324-4c90-939b-513a3955670f",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis feature allows filtering rows based on a case-insensitive pattern match on a specified column. The `ilike()` function is used to perform the case-insensitive pattern matching, taking the column name and pattern as parameters. This can be useful for implementing flexible search functionality in a database-backed application."
  },
  {
    "chunk_id": "731b48d0-5e1e-4f15-a44b-757d897487e3",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `is_()` method filters rows in a table where the specified column has the given value, which can be null, true, or false. It takes two required parameters: the column name and the value to match. This functionality can be useful for checking for null values or boolean conditions in a dataset."
  },
  {
    "chunk_id": "b68657fa-c753-4940-9777-e43b76e36e6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation discusses the `in_()` function in the Supabase library, which allows filtering rows where the specified `column` has a value included in the provided `values` array. The example demonstrates using `in_()` to select rows from the \"countries\" table where the \"name\" column is either \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "3bb4552f-4d4c-488c-93e0-f86046c872b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" query filters rows where the specified column (e.g., jsonb, array, or range) contains every element in the provided value. This is useful for filtering data based on the contents of a column, such as finding issues that have both the \"is:open\" and \"priority:low\" tags in a jsonb column."
  },
  {
    "chunk_id": "aaae3b45-b53a-4f84-9984-e388c8421f61",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is only applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the provided value. The parameters include the column name and the value to filter with. Examples are provided for filtering array, range, and jsonb columns."
  },
  {
    "chunk_id": "ffe60bfa-791d-4a73-98d3-8ddedfc9c702",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used for range columns in a database table. It allows matching rows where every element in the specified column is greater than any element in the given range. The filter is configured with a column name and an array of range values, and can be used in a .select() query to filter the data."
  },
  {
    "chunk_id": "0bdee375-029a-4fcf-a314-3fa061c2afd6",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" functionality is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The parameters for this filter include the column name and the range to filter with. This can be used, for example, to select all reservations where the \"during\" column is greater than or equal to the specified date range."
  },
  {
    "chunk_id": "a50ba243-3c34-4917-ac75-346e9c7cf54d",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" functionality is used to filter rows in a range column, where every element in the column is less than any element in the specified range. The parameters required are the column name and the range to filter with. This feature can be used in a Supabase query to select rows where the values in the \"during\" column are less than the specified range."
  },
  {
    "chunk_id": "9d248f84-992d-410f-bf94-1092d04fb39e",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" functionality is applicable only for range columns in a database. It allows filtering rows where every element in the specified column is less than or equal to any element in the provided range. This is demonstrated through an example using the Supabase client library, where the \"range_lte\" method is used to filter a \"reservations\" table based on the \"during\" column and a given range."
  },
  {
    "chunk_id": "dc3af381-1ce0-4214-856e-c089ced16594",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is only applicable for range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The relevant parameters are the column name and the range to filter with."
  },
  {
    "chunk_id": "06bb16b1-e9c5-4867-a339-dda3b635a5a5",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provided is:\n\nThe \"With a common element\" filter is only applicable to array and range columns. It matches rows where the specified column and value share at least one common element. The filter takes two parameters: the column to filter on and the value to filter with. This can be used to filter data in array or range columns, such as filtering issues by tags that contain \"is:closed\" and \"severity:high\"."
  },
  {
    "chunk_id": "3b444a8d-108c-447a-b483-d19f21e0af3f",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Match a string\" functionality in Supabase, which allows filtering text or tsvector columns based on a query string. It provides details on the required parameters, including the column to filter on and the query text to match with, as well as optional configuration settings for text search. This feature is useful for implementing Postgres-based full-text search within Supabase applications."
  },
  {
    "chunk_id": "12160233-0fe2-49f4-b0be-fe35602036f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `.match()` method in Supabase allows you to filter a table by matching the values in the `query` object to the corresponding column values. This is a shorthand way of using multiple `.eq()` filters to achieve the same result. The `query` object should have column names as keys and their associated filter values."
  },
  {
    "chunk_id": "2dafc311-8619-48b3-a134-6bbe7101de12",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `not_` operator in PostgREST filters to match rows that don't satisfy the filter criteria. It demonstrates how to use `not_.in_()` for filtering based on values in a list and `not_.contains()` for filtering based on array values. The example with `select()` shows how to use `not_.is_()` to filter out rows where a column is null."
  },
  {
    "chunk_id": "9ae1c61f-f8c0-4693-9139-2c50ac9c0d14",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the key points about the `or95()` function in Supabase, which allows matching at least one filter using the raw PostgREST syntax. The function supports various filter types, including `in`, `contains`, and `containedBy`, and can be used to filter on the parent table or referenced tables. The summary also includes an example of using `or95()` with `select()` to filter the \"countries\" table."
  },
  {
    "chunk_id": "38ee3636-bc3f-434a-95a5-189a2a24baef",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the documentation expects the use of raw PostgREST syntax for filtering, such as using `()` for the `in` operator and `\\{\\}` for array values. The method takes three parameters: `column` (the column to filter on), `operator` (the filter operator to use), and `value` (the value to filter with). An example is provided demonstrating the use of `filter()` on a foreign table using the `select()` method."
  },
  {
    "chunk_id": "ae912b26-2c92-4503-b0d5-8d67606e9554",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow users to change the format of the response, such as returning a CSV string. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "b356fd09-192f-4a51-bed6-e3c845fb6b91",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'order' function allows ordering the query results by a specified column. The key parameters are 'column' to specify the column to order by, 'desc' to indicate descending order, 'foreign_table' to order results from a foreign table, and 'nulls_first' to show nulls first. An example is provided demonstrating ordering the 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "6e65334f-8e85-4b16-81ff-dcde1af10ffc",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe documentation describes how to limit the number of rows returned by a database query using the `limit()` function. The `sizeRequired` parameter specifies the maximum number of rows to return, and the `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table. An example is provided showing how to use the `limit(1)` function to return only the first row from the \"countries\" table."
  },
  {
    "chunk_id": "167a0a7b-291e-4760-9ae9-b6b52876d0a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows returning only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, so `range(1, 3)` will include the second, third, and fourth rows. Additionally, the `foreign_table` parameter can be used to limit the rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "fe5e229b-173a-4421-9fe5-1e60c4c28c36",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a method to retrieve a single row of data from a table using the `select()` function in Supabase, a popular open-source database toolkit. It demonstrates how to limit the response to a single row and return the data as an object instead of an array, which can be useful for certain use cases that require a more concise data structure."
  },
  {
    "chunk_id": "ec9e025d-ca8d-4110-b606-3b3236dd894b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The content describes how to use the `maybe_single()` method in the Supabase library to retrieve zero or one row of data from a table, returning the data as a single object instead of an array. This is useful when you expect to retrieve at most one row that matches the specified criteria, such as selecting the row where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "cd5f8979-0a18-4cb4-bd8c-50310fb8ad34",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The content describes how to retrieve data from a Supabase table as a CSV string. It provides an example of the code to execute this operation, which selects all columns from the \"countries\" table and returns the data in CSV format."
  },
  {
    "chunk_id": "b186b8a7-0ac1-4a58-af90-917ac685df6a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to retrieve the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual runtime. However, explain is not enabled by default as it can reveal sensitive database information, so it's recommended to only use it in testing environments or with additional protection in production."
  },
  {
    "chunk_id": "0fe65895-408c-44b5-b10f-3c21c9ec822b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To create a new user, the \"Confirm email\" setting in the project dashboard determines whether a user needs to confirm their email before logging in. If \"Confirm email\" is disabled, both a user object and a session are returned upon sign-up. If it is enabled, only a user object is returned, and the user must confirm their email before accessing the session. Developers can also configure the redirect URL for email confirmation and handle cases where an existing user attempts to sign up again."
  },
  {
    "chunk_id": "7dda3179-0f02-4045-80e2-d209bfb9591b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content summarizes the functionality of creating an anonymous user in the Supabase authentication system. It describes that this method returns an anonymous user, and it is recommended to set up a captcha to prevent abuse. The summary also includes the method signature and an example usage of the `sign_in_anonymously()` function, which allows creating an anonymous user with custom metadata."
  },
  {
    "chunk_id": "70684af2-4c0d-4dbe-895b-e89d26a4c08a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides a code example for signing in with email and password, and lists the required \"credentialsRequiredSignInWithPasswordCredentials\" parameter. The sign-in functionality is a core part of the user authentication process in the application."
  },
  {
    "chunk_id": "a30b301b-ff07-46d3-a5bd-f06475bd8186",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the 'Sign in with ID Token' feature, which allows users to authenticate by providing an OIDC ID token. The feature requires the authentication provider to be enabled and configured. The summary includes the key technical details, such as the required parameters and an example of how to use the `supabase.auth.sign_in_with_id_token()` function to sign in with an ID token."
  },
  {
    "chunk_id": "efc99574-21b7-4bab-a82b-ebb8ac1a7579",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through One-Time Password (OTP) authentication, which can be sent to the user's email or phone number. This method is used for passwordless sign-ins, and if the user doesn't exist, the `sign_in_with_otp()` function will sign up the user as well. The user can receive either a magic link or an OTP code, and the destination URL for the magic link is determined by the `SITE_URL` configuration. The magic link and OTP share the same implementation, and the email template can be modified to send the OTP code instead of the magic link."
  },
  {
    "chunk_id": "a99ee1de-0acc-4082-85a1-a383814ea3f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation discusses signing in a user through OAuth, a third-party authentication mechanism supported by Supabase. It provides a code example for signing in using the GitHub provider, and mentions that Supabase supports various third-party providers. The key steps involved are passing the appropriate provider name and handling the response from the authentication flow."
  },
  {
    "chunk_id": "d5404b5f-5443-4c76-a49c-0a7fd6031031",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the associated email domain or the provider ID to initiate the authentication flow. This allows for flexible integration with identity providers, such as mapping specific user email addresses or using company-specific hints to identify the provider."
  },
  {
    "chunk_id": "9fcb126b-0e7e-49e6-a296-301d2a8611c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user has signed in. This revokes the refresh token and deletes the JWT from the client-side, though the access token JWT remains valid until it expires. Signing out using the global scope will sign out the user from all other active sessions as well."
  },
  {
    "chunk_id": "6b4a9319-117c-4ab0-9d4c-cd4951ff846f",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, or phone number change. The verification type should match the corresponding auth method used previously to sign up or sign in a user. The `TokenHash` from the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "51dfa6e6-4860-481d-ab8f-ba13d87ba76b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which includes a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data, as it could be tampered with. If verified user data is needed, the `get_user()` method should be used instead. The method also handles session token refresh if the access token has expired."
  },
  {
    "chunk_id": "fe1a196b-daba-4f13-80b0-81f802cde1df",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `supabase.auth.refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as input, and if not provided, it will attempt to retrieve it from the existing session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "d5253615-5f97-4922-a227-614d4e11e5d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `get_user()` retrieves the user object from the database instead of the local session. It is useful for checking if the user is authorized, as it validates the user's access token JWT on the server. This method can be called with an optional access token JWT, or it will use the JWT from the current session."
  },
  {
    "chunk_id": "3357d937-9470-4302-936c-79053b92a46a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `set_session()` method sets the current session data by taking an `access_token` and `refresh_token` as input. If the current session is expired or the tokens are invalid, the method will handle refreshing the session. Upon successful execution, a `SIGNED_IN` event is emitted. This method is crucial for maintaining a valid user session and handling token refresh in the application."
  },
  {
    "chunk_id": "f76288ff-c14e-494b-8f18-6fe6affe6e70",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation describes the Multi-Factor Authentication (MFA) methods supported by Supabase, specifically the use of time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors for recovery, reducing the burden of storing recovery codes and decreasing the attack surface compared to a single backup TOTP factor."
  },
  {
    "chunk_id": "dbf7c160-6a05-474c-8bf8-238229eefd9e",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `enroll()` method in the Supabase authentication API is used to enroll a time-based one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` should be used to create a challenge, which can then be verified using the `mfa.challenge()` and `mfa.verify()` methods, or the `mfa.challenge_and_verify()` method that combines both steps."
  },
  {
    "chunk_id": "745833e9-61f7-4749-8722-66fb25860dd3",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for multi-factor authentication, an enrolled factor is required. The `mfa.challenge()` function is used to initiate the challenge, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "b18795d0-0133-40b8-b722-c7bb90f9ed0c",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge by following the instructions in the \"create a challenge\" documentation. The code snippet demonstrates how to verify a challenge by providing the \"factor_id\", \"challenge_id\", and \"code\" parameters to the `supabase.auth.mfa.verify()` function."
  },
  {
    "chunk_id": "4754303e-1a39-4525-8385-6a3126afe40c",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking the factor ID and the verification code as input parameters."
  },
  {
    "chunk_id": "7c25ac38-f2fb-4a0a-8119-d35fd0659c90",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary for the given content is:\n\nThis code snippet demonstrates how to unenroll a multi-factor authentication (MFA) factor by providing the specific `factor_id` to the `supabase.auth.mfa.unenroll()` function. This is a useful feature for users who no longer require or want to use a particular MFA factor for their account."
  },
  {
    "chunk_id": "222f5682-5e40-414e-a795-3d17f417e96e",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next level of authentication required, which is AAL2 if the user has a verified factor, or AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "ecc18233-b831-4633-9726-45cbd3e75b6a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Functions feature allows invoking custom server-side logic. To invoke a function, you need to include an Authorization header. The request body can be of various data types, and Supabase will automatically set the appropriate Content-Type header. You can also override this behavior by providing a custom Content-Type header. The summary demonstrates a basic function invocation with a custom request body."
  },
  {
    "chunk_id": "5d345616-33f8-44b5-9e48-417a9efbe01a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence features are enabled for all Supabase projects, while listening to database changes is disabled due to performance and security concerns. Users can enable full replica identity to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The provided code example demonstrates how to subscribe to various Realtime events, such as broadcasting messages, presence sync, and listening to database changes for a specific table or multiple events."
  },
  {
    "chunk_id": "d89c8a94-c964-4a71-ad01-530d67026a84",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain service performance and database efficiency. Removing unused channels prevents degradation caused by excessive client subscriptions. The `supabase.remove_channel()` function can be used to unsubscribe from a specific channel."
  },
  {
    "chunk_id": "f4323cb9-7819-4bc3-9e9b-8866355043c4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain Realtime service performance and database efficiency. Supabase automatically cleans up channels 30 seconds after a client disconnects, but leaving unused channels can degrade performance as more clients subscribe. To remove all channels, use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "224dd054-64e4-4fec-9fe3-0aec37add96a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The Retrieve all channels section explains how to retrieve all channels using the `supabase.get_channels()` function. This function allows developers to access and work with all the channels available in the application, which is a crucial functionality for managing and interacting with the application's communication channels."
  },
  {
    "chunk_id": "228e0de7-6397-4d2f-8ca6-202a03a08265",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe code snippet demonstrates how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and upon successful subscription, it sends a broadcast message containing random cursor position coordinates to all clients in the channel."
  },
  {
    "chunk_id": "77b27e22-c272-41c1-9bea-e59daed10781",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required permissions are `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more information on how access control works. The code to create a bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "fbd9d6c6-954f-452b-a8c7-4093e19d759a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the user requires the `select` permission on the `buckets` table, but no permissions are needed for the `objects` table. The process involves calling the `supabase.storage.get_bucket(name)` function, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "c7aa7cdf-bddf-4c9a-935b-84d5943c458d",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are 'select' on the 'buckets' table, with no permissions required on the 'objects' table. The Supabase Storage guide provides information on how access control works for this operation."
  },
  {
    "chunk_id": "71f48cfa-4d01-41da-9fe8-df5248892b0f",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the user requires `select` and `delete` permissions on the `buckets` table, but no permissions are required on the `objects` table. Refer to the Storage guide for details on how access control works. The `supabase.storage.delete_bucket()` function can be used to delete the bucket."
  },
  {
    "chunk_id": "c870f1fc-d46e-4ff9-bb47-66e8fe110ca4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required Supabase RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for details on access control. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "b40332df-4e12-4ce1-9bab-d81f9222720a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the required RLS policy permissions are: no permissions for the `buckets` table, but `insert` permissions for the `objects` table. The appropriate MIME type should be specified for image or audio files, otherwise the default is `text/html`. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired path on Supabase Storage, along with the file's MIME type."
  },
  {
    "chunk_id": "a6f96b41-b78a-44ea-b083-399266da2e57",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase Storage, the user requires 'select' permissions on the 'objects' table. The downloaded file can be saved to a local destination using the Supabase Python client's 'download' method, which returns the file content that can be written to the destination."
  },
  {
    "chunk_id": "bd552506-a449-4243-915b-a2277ebca357",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are `select` on the `objects` table. The code to perform this operation is `supabase.storage.from_('bucket_name').list()`. Refer to the Supabase storage access control guide for more information on managing permissions."
  },
  {
    "chunk_id": "f6d7d87c-a1cd-4c21-9fa4-b8633ec43495",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the user requires 'update' and 'select' permissions on the 'objects' table. The file can be updated by opening the local file, then using the Supabase storage client to update the file on the server, optionally setting caching and upsert options."
  },
  {
    "chunk_id": "cb1241a9-aef8-4ff6-a599-b954d60f44fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` command can be used to move a file from the `public/avatar1.png` path to the `private/avatar2.png` path within the specified bucket."
  },
  {
    "chunk_id": "a941d52b-a9de-49fe-bff5-1e4305b0eaa6",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table, but no permissions on the `buckets` table. The Storage guide provides more information on how access control works for Supabase storage."
  },
  {
    "chunk_id": "5947ccb4-2379-42da-8226-a9b6d1c6755b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function is used. The required permissions include `select` access to the `objects` table, while no permissions are needed for the `buckets` table. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "c8ffe7e6-98b8-4c37-9eda-dc0b283634f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket needs to be set to public either through the Supabase Dashboard or the `updateBucket()` API method. No specific permissions are required in the `buckets` or `objects` tables. The `get_public_url()` method can then be used to retrieve the public URL for a file in the public bucket."
  },
  {
    "chunk_id": "88882833-bf30-468f-b738-c872968d7d6f",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Supabase Python client library, `supabase-py`, allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods for integrating Supabase's features into Python applications."
  },
  {
    "chunk_id": "88a6237d-c7ec-43af-816b-a9760174ae87",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: You can install the supabase-py library using pip, the Python package installer, for Python versions 3.7 and above. The installation can be done through the terminal or a Conda environment."
  },
  {
    "chunk_id": "60133fc0-2c0b-4bc8-a555-04721b5364d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optional client options to customize the authentication behavior. The Supabase client provides access to the full suite of Supabase functionality, making it the central entry point for developers working with the Supabase platform."
  },
  {
    "chunk_id": "920e33af-6ca4-48c1-8a4b-ffe0a9a2e59a",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch specific data, and the `apikey` keyword should be avoided as a column name. The `select()` function allows specifying the columns to retrieve, and the `count` parameter can be used to get the count of rows returned."
  },
  {
    "chunk_id": "8a89b34e-d453-43f7-aa48-4c425db625cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Insert data\" section is as follows:\n\nThe `insert()` method in the Supabase client library allows you to insert data into a table. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the data to be inserted. Optional parameters include `countOptional` to specify the column to use for the row count, `returningOptional` to control the response format, and `default95to95nullOptional` to handle missing fields during bulk inserts. The method returns a response object with the inserted data."
  },
  {
    "chunk_id": "66a999ca-c999-4bc7-86ad-654388811853",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to update data in a database table. It must be combined with filters to target the specific item(s) to be updated. The `update()` method takes a JSON object or a list of JSON objects as the parameter, representing the new values to be inserted. The `count` parameter can be used to get the count of rows returned by the update operation."
  },
  {
    "chunk_id": "11df0dcc-ac89-4bd7-b9c7-45787c615d5c",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `upsert` method allows inserting or updating data in a table, with primary keys required in the `values` dict. It supports parameters for specifying the count method, return method, handling of duplicate rows, and default behavior for missing fields in bulk inserts. The method can be used to upsert data into tables with constraints, as demonstrated in the example."
  },
  {
    "chunk_id": "8b2dfd4d-f4c4-41ce-84d6-25c7436a61bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data, the `delete()` method should be combined with filters to target the specific items to be deleted. When using RLS (row-level security), only rows visible through `SELECT` policies will be deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by specifying an array of values. The `count` and `returning` parameters can be used to control the response of the delete operation."
  },
  {
    "chunk_id": "5b89213d-483b-4c45-b6ce-4b5aee86b051",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls to execute database logic from anywhere. Functions are useful for tasks like password resets and updates that rarely change. The documentation provides details on calling Postgres functions with various parameters, including required and optional parameters for the function call, handling read-only mode, and different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "96985263-ecdb-4dba-86bd-b6336ef27ce6",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return rows that match certain conditions in Supabase queries, including `select()`, `update()`, `upsert()`, and `delete()`. Filters can be chained and applied to Postgres functions that return table responses, enabling fine-grained data retrieval and manipulation. The order of filter application can impact the query results, as demonstrated in the provided code examples."
  },
  {
    "chunk_id": "cca5b88f-87aa-43a0-ada7-cba2bc05ae6c",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `eq()` function in Supabase allows you to filter a table by a specific column and value, returning only the rows where the column is equal to the provided value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is a common operation in database queries to retrieve a subset of data based on a specific condition."
  },
  {
    "chunk_id": "af4ddeaf-d1aa-4b78-92e5-4b057d070fb9",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe documentation describes how to filter a table in Supabase to select only rows where a specified column is not equal to a given value. The `neq()` function is used to perform this filter, and an example is provided demonstrating how to use it in a `select()` query."
  },
  {
    "chunk_id": "d746431e-aa76-4658-a6da-50193d58f5e0",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table to include only rows where the value in a specified column is greater than a given value. The key parameters are the column name and the value to filter by. This functionality is demonstrated using the Supabase library's `gt()` method in a `select()` query."
  },
  {
    "chunk_id": "e8abf57b-a6dd-46f5-b91d-f8e469292e4a",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section describes how to filter a database table to only include rows where a specified column has a value greater than or equal to a given value. The parameters are the column name and the comparison value. An example is provided using the Supabase library's `gte()` method to filter a \"countries\" table by an \"id\" column with a value of 2 or greater."
  },
  {
    "chunk_id": "76be867f-a361-48e0-b8c8-447b21b6b1f5",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `lt()` function in Supabase allows you to filter a database table by selecting only rows where a specified `column` has a value less than the provided `value`. This is a common data filtering operation that can be used in SQL queries to retrieve a subset of data that meets certain criteria."
  },
  {
    "chunk_id": "c8d95a9e-b3c1-4534-98e5-07f5933465aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column is less than or equal to a given value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `lte()` (less than or equal to) method."
  },
  {
    "chunk_id": "f70e6c98-f047-4d71-8dc5-00833d5c72aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering rows where the specified column matches the provided case-sensitive pattern. The key parameters are the column name and the pattern to match. This can be used with the `like()` function in a `select()` query to filter data based on a pattern match."
  },
  {
    "chunk_id": "65162eb2-77e6-4827-87f2-42f2f8abfc5b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'ilike' function in Supabase allows you to perform a case-insensitive pattern matching on a specified column. This is useful for filtering data based on a pattern, such as finding all countries with \"alba\" in the name, without regard to capitalization. The function takes two required parameters: the name of the column to filter and the pattern to match."
  },
  {
    "chunk_id": "b0043639-e014-454d-ba44-2640d49608eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" feature allows filtering rows where a specified column matches a provided value. The parameters include the column name and the value to match, which can be null, true, or false. This functionality is demonstrated in the example code, which filters the \"countries\" table by the \"name\" column for null values."
  },
  {
    "chunk_id": "4ee22e61-945b-414b-8f56-ff71294cfda3",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the content about \"Column is in an array\" is as follows:\n\nThe content describes a filtering operation in a database query, where rows are matched only if the value in a specified column is included in a provided array of values. The key parameters are the column name to filter on and the array of values to filter by. This functionality is demonstrated in an example using the Supabase database client."
  },
  {
    "chunk_id": "98af5da2-08a7-4c9e-a56b-03271beed00e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" operation in Supabase is relevant for jsonb, array, and range columns, and allows filtering rows where the column contains every element in the provided value. The operation takes two parameters: the column to filter on, and the jsonb, array, or range value to filter with. This can be useful for filtering issues by tags, for example, to find all open issues with low priority."
  },
  {
    "chunk_id": "e1ecb269-ef3d-4a3d-891e-036010d4a281",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is only applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the provided value. The parameters include the column name and the value to filter with. This can be useful for querying data where the column contains a collection of elements, such as an array of weekdays."
  },
  {
    "chunk_id": "46a21c2c-83df-47d3-9999-95717bdf63cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is only applicable to range columns, and it matches rows where every element in the specified column is greater than any element in the given range. The filter is configured with a required string parameter for the column name and a required array parameter for the range values. This can be used in a Supabase query to filter records based on a date/time range."
  },
  {
    "chunk_id": "15a73f8b-3e5b-4c06-8954-eb8a8088773f",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"greater than or equal to a range\" filter is used to match rows where every element in the specified column is either contained within the given range or greater than any element in the range. This is particularly relevant for range columns. The filter is specified by providing the column name and the range to filter with, and can be used in the `select()` method of a Supabase query."
  },
  {
    "chunk_id": "6669df92-c0f7-482f-bf79-0bf2480d1622",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than a range' filter is used for range columns, and matches rows where every element in the specified column is less than any element in the provided range. The parameters are the column to filter on and the range to filter with. This filter can be used in a Supabase query to select rows where the 'during' column is less than the given range."
  },
  {
    "chunk_id": "de3e1d57-f763-4cc4-881b-b8ab67cf2d37",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Less than or equal to a range\" section is as follows:\n\nThis query filter applies to range columns, matching rows where every element in the specified column is less than or equal to any element in the provided range. The key parameters are the column name and the range array to filter with. This can be useful for querying data within a specific time or date range."
  },
  {
    "chunk_id": "08a8eac4-1f5d-4427-a85f-2c992b8cbc08",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Mutually exclusive to a range' feature is used to filter range columns, where the column value must be mutually exclusive to the specified range, meaning there can be no element between the two ranges. The key parameters are the 'column' to filter on and the 'range' to filter with. This functionality can be used in the 'select()' method of a database query, as demonstrated in the example."
  },
  {
    "chunk_id": "425e56a6-e283-4aa9-b77f-4e4039a19263",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on the \"With a common element\" filter in Supabase, which is only relevant for array and range columns. This filter matches rows where the specified column and value have an element in common. The key parameters are \"column\" (the array or range column to filter on) and \"value\" (the array or range value to filter with)."
  },
  {
    "chunk_id": "03489684-ab5f-4cbd-a105-3174ed2d181e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content summarizes the \"Match a string\" functionality in Supabase, which allows matching rows in a text or tsvector column based on a given query string. It supports various search options, such as basic normalization, full normalization, and websearch, to customize the search behavior. This feature is particularly useful for implementing full-text search capabilities in Supabase-powered applications."
  },
  {
    "chunk_id": "e2aa273d-02e1-4497-8e5b-3131fb701e37",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase client library allows you to filter rows where each column in the `query` keys matches the associated value. This is a shorthand for multiple `.eq()` calls. The `query` parameter is an object with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "54248e98-cd9d-44e9-8d85-c81c42be0877",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes how to use the `not_` operator in PostgREST to match rows that do not satisfy a given filter. It provides examples of using `not_.in_()` for filtering on specific IDs and `not_.contains()` for filtering on array values. The summary also shows how to use the `not_.is_()` filter in a `select()` query to exclude rows where the 'name' column is 'null'."
  },
  {
    "chunk_id": "0ae23e7b-cab9-4ffb-9b2d-31ff1bdb9f79",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `or95()` method in the documentation allows matching at least one filter, using the raw PostgREST syntax for filter names and values. It supports various filtering options, such as `in`, `contains`, and `containedBy`, and can be used on both the parent table and referenced tables. The method is demonstrated with an example that filters the \"countries\" table by ID and name."
  },
  {
    "chunk_id": "b1828234-5b7b-41d4-a415-3d2909cc8d7c",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the documentation expects the use of raw PostgREST syntax for the filter values. It supports various operators like 'in', 'cs' (contains), and array values enclosed in curly braces. The example shows how to use the filter() method to select data from a foreign table based on the 'name' column."
  },
  {
    "chunk_id": "59ad89fa-85b8-4c48-b78e-01421c1f7b80",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of a response, unlike filters which operate on the row level. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "3757cbdc-c142-4720-8f0c-b8c6479a0862",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the 'order' function in the Supabase library, which allows ordering the query results by a specified column. The function takes several parameters, including the column to order by, whether to order in descending order, the name of a foreign table to order, and whether to show nulls first. An example is provided demonstrating how to order the results of a 'select' query on a 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "5e424ae0-87ff-49bb-927a-554a964de28b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the number of rows returned in a Supabase database query. The `limit()` function is used to specify the maximum number of rows to return, and can be applied to either the parent table or a foreign table. This is useful for optimizing query performance and reducing unnecessary data transfer."
  },
  {
    "chunk_id": "e857163f-e5ca-4881-a1ee-651164b2228e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function in the Supabase client library allows limiting the query result to a specified range of records, defined by a start offset (`from`) and an end offset (`from + to`). This can be useful for pagination or retrieving a subset of data. The `from` and `to` parameters are zero-based and inclusive, and the function can also be used on foreign tables by specifying the `foreign_table` parameter."
  },
  {
    "chunk_id": "982af7ff-41c0-491e-8bba-666a5e37db3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `single()` method in the Supabase client library retrieves a single row of data from the \"countries\" table, selecting only the \"name\" column. This allows returning the data as a single object instead of an array of objects, providing a more concise and efficient response."
  },
  {
    "chunk_id": "242a08c7-260d-40d5-96d1-6284d1d350fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides the key technical details for retrieving a single row of data using the `maybe_single()` method in the Supabase library. This approach allows returning the data as a single object instead of an array, which is useful when expecting at most one matching result. The example demonstrates querying the \"countries\" table and filtering by the \"name\" column to retrieve the data for \"Albania\"."
  },
  {
    "chunk_id": "50bf0ba7-a623-4424-abbb-d1eb22b75216",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes the \"Retrieve as a CSV\" functionality in the Supabase library, which allows users to return the selected data from a table as a CSV (Comma-Separated Values) formatted string. This feature is useful for exporting data in a structured, spreadsheet-friendly format for further processing or analysis."
  },
  {
    "chunk_id": "f0a2787a-6400-4783-9373-05155e18c17b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The Postgres `EXPLAIN` command can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual runtime. This is useful for debugging slow queries, but should be used cautiously in production as it can reveal sensitive database information. The `explain()` method in the Supabase client can be used to obtain the execution plan, with various parameters to customize the output format and level of detail."
  },
  {
    "chunk_id": "10aa659b-893b-4deb-b8ea-eed992ce73ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the project's auth provider configuration determines whether a user needs to confirm their email before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. The user can be redirected to a custom URL upon email confirmation, which can be configured in the project settings. Additionally, sign-up attempts for existing confirmed users may return an obfuscated user object or an error message, depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "bb136fea-95cb-408f-b178-5d3c3ba96794",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides a code example showing how to sign in anonymously while passing in the captcha token. The key technical points are the ability to create an anonymous user with custom metadata, and the use of the `supabase.auth.sign_in_anonymously()` method to accomplish this."
  },
  {
    "chunk_id": "8fdabb8f-3496-4340-8c33-8deaee21433c",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of signing in an existing user using either an email and password or a phone number and password. The required parameters are `credentialsRequiredSignInWithPasswordCredentials`, and the code example demonstrates signing in with an email and password using the Supabase authentication library."
  },
  {
    "chunk_id": "6120f900-ee88-4392-a0e1-f0af8e7205c8",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content describes the \"Sign in with ID Token\" functionality, which allows signing in using an OIDC ID token. It provides the necessary parameters and an example code snippet to sign in with an ID token, typically from a provider like Google. This feature enables seamless authentication by leveraging the user's existing OIDC identity, simplifying the sign-in process."
  },
  {
    "chunk_id": "30605d6c-218c-4a99-969d-c78add2f6317",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP feature allows users to authenticate without a password, by sending a one-time code to the user's email or phone number. This method can be used for both new user sign-ups and existing user sign-ins. Developers can configure whether to send an OTP or a magic link, and can control the behavior when the user doesn't exist. The summary also notes that magic links and OTPs share the same implementation, and provides an example of the sign-in API call."
  },
  {
    "chunk_id": "8e1c5b9a-cd26-4db0-a691-4f3793efb8bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The method allows users to sign in to the application using a third-party provider, such as GitHub, which Supabase supports. The `sign_in_with_oauth()` function is used to initiate the sign-in flow, with the provider parameter specifying the third-party service to use. This feature enables seamless user authentication by leveraging existing user accounts and eliminating the need for a separate sign-up process."
  },
  {
    "chunk_id": "31807099-5401-4f71-8660-39ca3d3b3b52",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then initiate the sign-in flow by providing either the associated email domain or the provider ID, which allows for more advanced use cases like mapping specific email addresses or using company-specific authentication hints."
  },
  {
    "chunk_id": "99b6cd49-5b85-4df2-89df-f38837614339",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. It revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which remains valid until it expires. The method can be used to sign out the user from the global scope, terminating all their active sessions."
  },
  {
    "chunk_id": "b726103b-9a0d-494b-94d2-3cf55dad92c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for various authentication types, including SMS, email, and password recovery. The verification type should match the corresponding auth method used previously to sign up or sign in a user. The `TokenHash` contained in email templates can be used to sign in users, and it can also be used in the PKCE flow for server-side auth."
  },
  {
    "chunk_id": "7e716c13-ad52-47da-a484-6fd54b89519f",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The Retrieve a session method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data on the server, as it can be tampered with. If verified, trustworthy user data is required, the get_user method should be called instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "e1d3a0d6-a97d-46e4-ad77-af7d17d77bad",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether the current one is expired or not."
  },
  {
    "chunk_id": "4a7d18b6-2b87-496d-b5b0-86a5787c5326",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` fetches the user object from the database instead of the local session. This is useful for checking if the user is authorized, as it validates the user's access token JWT on the server. The method can be called with an optional access token JWT, or it will use the JWT from the current session."
  },
  {
    "chunk_id": "69b049db-fcb0-4e7a-99b4-0a718bca7ded",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The function `set_session()` sets the session data using the provided `access_token` and `refresh_token`. If the current session is expired or the tokens are invalid, the function will refresh the session and throw an error if it fails. Successful execution of this function emits a `SIGNED_IN` event."
  },
  {
    "chunk_id": "85f85617-02bd-4533-8f66-02e461e563fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers methods for Multi-Factor Authentication (MFA) in the Supabase platform, specifically supporting time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, which eliminates the need for storing recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "602ed9de-6d83-4930-baf7-9ba77cb6ccd8",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a TOTP (time-based one-time password) factor, which is the only supported `factor_type` currently. The returned `id` can be used to create a challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` functions. The code example demonstrates how to enroll a TOTP factor with a specified `friendly_name`."
  },
  {
    "chunk_id": "84762c4d-22e9-4374-bc5f-e3fd19137700",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which takes the factor_id as a parameter."
  },
  {
    "chunk_id": "e4d08d60-1146-4456-83fb-de7c00b476a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `supabase.auth.mfa.verify()` method, providing the `factor_id`, `challenge_id`, and `code` parameters. This verification process is a crucial step in multifactor authentication, ensuring the user's identity and securing access to the application."
  },
  {
    "chunk_id": "0232fcfe-298c-4101-8873-2cb25089d7d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing the user to provide the factor ID and the verification code to authenticate."
  },
  {
    "chunk_id": "912a36cd-d296-470a-8daf-d1c3f2af2bf1",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: To unenroll an authentication factor, use the `supabase.auth.mfa.unenroll()` function and provide the `factor_id` as a parameter. This allows users to remove a specific authentication factor, such as a one-time password or biometric, from their account."
  },
  {
    "chunk_id": "c32ad5f9-f1fa-4bd4-8bda-3e8c62a19082",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to a single factor of authentication, such as email and password, while AAL2 refers to two-factor authentication, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, with AAL2 if the user has a verified factor, and AAL1 otherwise."
  },
  {
    "chunk_id": "9bc5a365-d6f7-41ac-9eb8-bc74c249ae78",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is:\n\nInvokes a Supabase Edge Function, which requires an Authorization header. The function accepts various data types, including Blob, ArrayBuffer, File, FormData, and String, and automatically attaches the corresponding Content-Type header. Users can also override this behavior by providing their own Content-Type header. The summary includes an example of how to invoke a Supabase function with a custom body payload."
  },
  {
    "chunk_id": "d85c0fb0-3d2a-482f-8abc-352e70cbca55",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Broadcast and Presence are enabled by default for all Supabase projects, but listening to database changes is disabled by default due to performance and security concerns.\n2. Clients can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL.\n3. Row-level security (RLS) is not applied to delete statements, and when RLS is enabled and replica identity is set to full, only the primary key is sent to clients.\n4. The provided code demonstrates how to subscribe to various Realtime events, such as broadcasts, presence changes, and database changes, and how to handle the received data."
  },
  {
    "chunk_id": "a94472c4-ca15-4890-9064-91f962ea0606",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel is recommended to maintain Realtime service and database performance by removing unused channels. Supabase automatically handles cleanup 30 seconds after a client disconnects, but keeping unused channels can degrade performance as more clients subscribe. The `supabase.remove_channel()` function is used to remove a channel."
  },
  {
    "chunk_id": "eae310d4-e922-4306-8752-b252b54d9caa",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused Realtime channels is recommended to maintain project performance and database efficiency. Supabase automatically cleans up disconnected channels, but excessive subscriptions can degrade the system. The `supabase.remove_all_channels()` function can be used to remove all channels and optimize resource utilization."
  },
  {
    "chunk_id": "d027a205-1cb9-4e89-a0c7-21ebc87e8e10",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code snippet retrieves all channels from the Supabase service, allowing users to access and work with the full set of available channels."
  },
  {
    "chunk_id": "1889c124-95c0-421d-9657-e01c7fa7cd93",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe code snippet demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and upon successful subscription, it sends a broadcast message containing randomly generated x and y coordinates to all connected clients."
  },
  {
    "chunk_id": "e4c544cd-7b70-4f05-9e27-6254177584c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, you need the `insert` permission on the `buckets` table. No permissions are required for the `objects` table. Refer to the Supabase Storage guide for more information on access control. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "0ec85a94-bf99-4cad-8bb9-4622d8529fab",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: 'select' on the 'buckets' table, and no permissions on the 'objects' table. Refer to the Storage guide for more information on how access control works. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "1a6afe7a-69f3-457c-867d-bcf7dacddd2c",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the required RLS policy permissions are `select` on the `buckets` table, with no permissions needed on the `objects` table. Refer to the Storage guide for details on access control."
  },
  {
    "chunk_id": "7c9a4ccb-d495-414e-aca9-74b7a8447182",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. Refer to the Storage guide for details on how access control works. The Supabase storage API provides a `delete_bucket()` function to delete a bucket."
  },
  {
    "chunk_id": "bc3c981f-7db1-44e8-af27-05f434855152",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket in Supabase, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. The process is achieved using the `supabase.storage.empty_bucket(name)` function. Refer to the Supabase Storage guide for details on how access control works."
  },
  {
    "chunk_id": "d0a833e4-dd83-4bf0-8cee-dcd42f00a830",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the user requires the `insert` permission on the `objects` table. The content MIME type should be specified, especially for images and audio, and defaults to `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired content type."
  },
  {
    "chunk_id": "e559b78a-c211-43c2-8fd3-49500e852e9b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase storage, the user requires `select` permissions on the `objects` table. The download process involves opening a local file for writing, then using the `supabase.storage.from_('bucket_name').download(source)` function to retrieve the file content and write it to the local file."
  },
  {
    "chunk_id": "21f62d3a-6aca-4506-b8e3-32a90d9e4414",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The example code demonstrates how to list files in a bucket using the 'supabase.storage.from_()' function, and the Storage guide provides more information on Supabase's access control model."
  },
  {
    "chunk_id": "26232e45-ca23-44ae-995a-a9fcda1a4cd8",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the user requires \"update\" and \"select\" permissions on the \"objects\" table. The file can be updated using the Supabase storage client, specifying the file path, the destination path on Supabase storage, and optional file options like cache control and upsert behavior."
  },
  {
    "chunk_id": "67b67b1f-79a6-4c55-be5d-240ca41611a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code snippet `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` demonstrates how to move a file from the 'public/avatar1.png' path to the 'private/avatar2.png' path within the specified bucket."
  },
  {
    "chunk_id": "a2709696-4dc9-4da1-8d9e-3ef048bd0dfd",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The summary also notes that the user should refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "c3c82f0c-d386-4acb-95e8-5a161f458346",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the user requires `select` permissions on the `objects` table, but no permissions on the `buckets` table. The signed URL allows time-limited access to a specific file, and can be generated using the `create_signed_url()` method of the storage client."
  },
  {
    "chunk_id": "4c8abccb-2855-4521-8a01-ff8fd072660f",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket needs to be set to public either through the updateBucket() function or by manually making the bucket public on the Supabase dashboard. No specific permissions are required for the buckets or objects tables. The get_public_url() function can then be used to obtain the public URL for the asset."
  },
  {
    "chunk_id": "ddb9bd39-f6e4-44a8-820b-f6f2108453a2",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with Supabase's Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive reference documenting every object and method available in the library, enabling seamless integration with Supabase's platform."
  },
  {
    "chunk_id": "3e021a86-1460-4842-aaeb-3d42d74c0a47",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: The provided content describes how to install the Supabase-py library using pip, the standard Python package installer. The installation is recommended for Python versions greater than 3.7, and the specific command to install the library is `pip install supabase`."
  },
  {
    "chunk_id": "84d3a7fc-b9a5-42be-a6a6-8ea191ac350a",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires a Supabase URL and a Supabase Key obtained from the project dashboard. The client can also be configured with optional parameters to customize the authentication behavior."
  },
  {
    "chunk_id": "e8b9cffe-9719-4bb2-b044-45bf59580dae",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Supabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. Pagination can be achieved using the `range()` function.\n2. The `select()` function can be combined with filters and modifiers to refine data retrieval.\n3. The `apikey` is a reserved keyword when using the Supabase Platform and should be avoided as a column name."
  },
  {
    "chunk_id": "cc2e332f-5201-4ea2-8db1-65015bfd6921",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe \"Insert data\" section of the documentation explains how to insert data into a table using the Supabase library. It outlines the parameters required for the `insert()` method, including a `jsonRequireddict` or `list` to specify the data to be inserted, an optional `countOptionalCountMethod` to get the count of rows returned, an optional `returningOptionalReturnMethod` to specify the return format, and an optional `default95to95nullOptionalbool` to set missing fields to null. The documentation provides an example of inserting a single record into the \"countries\" table."
  },
  {
    "chunk_id": "36d1512d-cfcc-464a-abff-2f61de0010c9",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to update data in a table. It should always be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter to specify the new values, and an optional `countOptional` parameter to get the count of rows affected."
  },
  {
    "chunk_id": "85b81ef4-06fe-4d60-b91a-924b08c2b032",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe upsert operation in the provided documentation allows inserting or updating data in a table, with the requirement that primary keys must be included in the `values` dictionary. Key parameters include `values` (dict or list of dicts to insert/update), `count` (to get the count of rows returned), `returning` (to specify the level of detail in the response), and options to handle duplicates and default null values. Examples are provided to demonstrate the upsert functionality."
  },
  {
    "chunk_id": "aaf09ec3-1276-4837-b471-bc23998dfa51",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` function in Supabase should always be combined with filters to target the specific items to be deleted. When using `delete()` with RLS (Row Level Security) enabled, only rows visible through `SELECT` policies will be deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by providing an array of values."
  },
  {
    "chunk_id": "c19e9782-1daa-4bb2-a600-29ca0522bef8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nPostgres functions can be called as Remote Procedure Calls, allowing you to execute database logic from anywhere. These functions are useful for operations like password resets and updates that rarely change. The documentation provides details on calling Postgres functions with various parameters, including passing arguments, enabling bulk processing, applying filters, and setting the function to read-only mode."
  },
  {
    "chunk_id": "944ad6da-cfeb-4a22-b651-73e83863276e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return rows that match specific conditions when using SQL operations like `select()`, `update()`, `upsert()`, and `delete()`. They can also be applied to Postgres functions that return table responses. The order of applying filters and other query operations is important, as shown in the example code."
  },
  {
    "chunk_id": "b083ea36-ebc2-4033-b783-a2525e4eb83a",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the use of the `eq()` method in the Supabase API to filter a table by a column value. The `eq()` method takes two parameters: the column name and the value to match. This allows developers to retrieve only the rows where a specific column is equal to a given value."
  },
  {
    "chunk_id": "ffc1a2ab-f4a6-4444-a979-0bb8ac2bb89b",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis filter condition matches rows where the specified column is not equal to the provided value. The `neq()` method in the Supabase library can be used to apply this filter when querying a table, as shown in the example code."
  },
  {
    "chunk_id": "38751fc7-0dd2-47eb-a0aa-7c9026bffc45",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The provided content describes how to filter a database table by a column that is greater than a specified value. The key parameters are the column name and the value to filter by, and an example is given using the Supabase library's `gt()` method to execute the filter query."
  },
  {
    "chunk_id": "0824524b-5fb5-46aa-9e03-5baf2bd1bced",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column is greater than or equal to a given value. The key parameters are the column name and the filter value. This functionality is demonstrated using the Supabase library's `gte()` method in a `select()` query."
  },
  {
    "chunk_id": "fa428cad-cc6b-42d7-9444-6c7d75136a66",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a table to only include rows where a specified column is less than a given value. The `select()` method is used with the `lt()` (less than) function, which takes the column name and value to filter by as parameters."
  },
  {
    "chunk_id": "49c52018-0012-4e8b-8112-0ad120ae1fde",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary should be:\n\nThe 'lte' (less than or equal to) operator is used to filter rows in a database table where the value of a specified column is less than or equal to a provided value. The 'columnRequired' parameter specifies the column to filter on, and the 'valueRequired' parameter specifies the value to filter by. This functionality is demonstrated in an example using the Supabase library to select rows from a 'countries' table where the 'id' column is less than or equal to 2."
  },
  {
    "chunk_id": "58e91cab-8c0f-490d-bfc1-3722ad1736e6",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This method allows you to filter a table by selecting only the rows where a specified column matches a given pattern case-sensitively. The required parameters are the column name and the pattern to match, and the method can be used within a `select()` query, as shown in the example."
  },
  {
    "chunk_id": "53f7ead4-33f5-4320-a9b7-d104bdab07f1",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `ilike()` function in Supabase's select() method allows for case-insensitive pattern matching on a specified column. It takes two parameters: the column name and the pattern to match, and returns rows where the column value matches the pattern."
  },
  {
    "chunk_id": "17ba72b4-681b-4d29-8d6a-21e1289e0d8d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column is a value\" section describes how to filter a database table by checking if a specific column has a particular value, including checking for null values. The key parameters are the column name and the value to match, which can be a boolean or null."
  },
  {
    "chunk_id": "638d88fa-8da0-486b-9036-6696393bfeae",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes a method to filter rows in a database table where a specified column contains any of the values provided in an array. The `in_()` function is used to apply this filter, with the column name and array of values as parameters. This allows for efficient filtering of data based on multiple criteria in a single query."
  },
  {
    "chunk_id": "1434a7b5-3603-44c7-be9a-fe1e0519ae98",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Column contains every element in a value\" feature is applicable to jsonb, array, and range columns. It allows filtering rows where the specified column contains all the elements in the provided value. The parameters include the column to filter on and the value (jsonb, array, or range) to filter with. This functionality is useful for querying data with complex structures, such as arrays or JSON blobs."
  },
  {
    "chunk_id": "f76f96b7-9e79-460a-ae91-5bc0f78483b5",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is only applicable to jsonb, array, and range columns. It allows you to match rows where every element in the specified column is contained within the provided value. The parameters for this feature are the column name (required) and the value to filter with (required), which can be a jsonb object, array, or range."
  },
  {
    "chunk_id": "3554d18f-1a30-4db4-a35a-2f23fd59a063",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than a range' filter is used for range columns in Supabase, allowing you to match only rows where every element in the specified column is greater than any element in the provided range. This is configured by passing the column name and the range to filter with as parameters."
  },
  {
    "chunk_id": "b71057a9-f68d-4617-9c44-0a7dc5b0fd5d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" filter is used for range columns, matching rows where every element in the specified column is either contained in the given range or greater than any element in the range. The filter takes two required parameters: the column name to filter on and the range to filter with. This functionality can be used in a Supabase query to select rows where the \"during\" column is greater than or equal to the specified date range."
  },
  {
    "chunk_id": "586dd2eb-6342-466b-b72a-3e5bfb822738",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns, matching only rows where every element in the specified column is less than any element in the given range. It takes two parameters: the column to filter on and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column is less than the specified range."
  },
  {
    "chunk_id": "4d093c3a-cf4e-408c-bc5d-0739490500c8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, matching rows where every element in the specified column is less than or equal to any element in the provided range. This is demonstrated using the Supabase library's `range_lte()` method, which filters a table's \"during\" column to return rows where the values fall within the given date range."
  },
  {
    "chunk_id": "f5fb9dee-979e-4377-a7c3-1d84cfc38393",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is used to filter range columns, where the column value must be mutually exclusive to the specified range and there can be no element between the two ranges. It takes two required parameters: \"column\" (the range column to filter on) and \"range\" (the range to filter with). This feature can be used in the `range_adjacent()` method in the Supabase query builder to retrieve the relevant data."
  },
  {
    "chunk_id": "3b062085-6388-4ec6-b3d5-994bc265ba59",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section describes the \"with a common element\" filter, which is only applicable to array and range columns. It allows matching rows where the column value and the provided filter value have at least one element in common. The main parameters are the column to filter on and the value to filter with. This feature is useful for performing more complex filtering operations on array-like data in the database."
  },
  {
    "chunk_id": "7c5675e4-e41f-4390-9c80-ee935d3582ac",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Match a string\" functionality in Postgres, which allows filtering text or tsvector columns based on a specified query string. The key parameters are the column to filter on, the query text to match, and optional search configuration options such as normalization and full-text search settings. This functionality is particularly useful for implementing advanced search capabilities in applications that interact with Postgres databases."
  },
  {
    "chunk_id": "6e05891b-4443-4b2a-8cc2-186c9da78161",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in the Supabase client library allows filtering a table by matching each column in the `query` object to its associated value. This is a concise way to perform multiple equality checks at once, compared to using individual `.eq()` calls. The `match()` function takes a `queryRequired` object as a parameter, where the keys represent the column names and the values are the filter criteria."
  },
  {
    "chunk_id": "cd2a8fea-b6fc-4002-b421-ed93846ed2a0",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to use the `not_` operator in PostgREST filters to select rows that do not match the specified criteria. It provides examples of using `not_.in_` for array values and `not_.is_` for null values. These techniques allow developers to exclude certain rows from the response, which is useful for filtering data efficiently."
  },
  {
    "chunk_id": "1e125ec9-b3da-4c8b-8371-a23c89cfaf4d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'or95()' function in the Supabase client library allows you to use PostgREST-style filters to match at least one filter condition, such as filtering by a list of IDs or checking if an array column contains specific values. The 'or_()' method takes a string of filter expressions as input and can be used with 'select()' to retrieve data that matches at least one of the specified filters."
  },
  {
    "chunk_id": "845bf9cd-e457-4738-a0f5-a7ce5a4581c8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the software documentation expects the use of raw PostgREST syntax for the filter values, such as using `()` for `in` filters and `\\{\\}` for array values. The documentation provides example usage of the `filter()` method with different operators and values, as well as an example of using `filter()` on a foreign table with the `select()` method."
  },
  {
    "chunk_id": "dfb9ddf6-9afd-45d0-994b-672090c0ad6e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response (e.g., returning a CSV string) rather than just filtering the rows. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "0b7649f1-6cee-472b-a7a9-805575930809",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to order the results of a database query by a specified column. It provides the parameters for the `order()` function, including the column name, whether to order in descending order, the name of a foreign table to order, and whether to show nulls first. An example of using the `order()` function with a `select()` call on a foreign table is also provided."
  },
  {
    "chunk_id": "19e6c0b2-dcb3-4671-be1a-ecd02714d7dd",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `select()` method in the Supabase API allows you to limit the number of rows returned from a query using the `limit()` parameter. You can specify the maximum number of rows to return, and optionally set the `foreign95table` parameter to limit rows from a foreign table instead of the parent table."
  },
  {
    "chunk_id": "bdc4e133-5146-4c59-86e5-4dba860a13fe",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in the Supabase library allows limiting the query result to a specified range of records, defined by a starting index (`from`) and an ending index (`to`). This is useful for paging through large result sets, as it respects the query order and can be applied to both the parent table and foreign tables. The `from` and `to` parameters are 0-based and inclusive, meaning the range `(1, 3)` will include the second, third, and fourth rows of the query."
  },
  {
    "chunk_id": "0890977e-a143-4faf-ad24-7561e1969780",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of the `single()` method in Supabase's table API, which retrieves a single row of data from the database instead of an array of objects. The example demonstrates how to use `single()` with the `select()` and `limit(1)` methods to retrieve the name of a single country from the \"countries\" table."
  },
  {
    "chunk_id": "558195a2-fc9b-44a7-b40b-0be9b6bf70a8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase library. This allows returning the data as a single object instead of an array, which can be useful when you expect at most one matching row. The example shows how to use `eq()` to filter the `countries` table for a row where the `name` column equals \"Albania\" and then execute the query using `maybe_single()`."
  },
  {
    "chunk_id": "b96091c0-1c95-4413-a0ed-c6e8244dc681",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the \"Retrieve as a CSV\" functionality, which allows the user to return data from a Supabase table as a string in CSV format. The key steps include selecting all columns from the \"countries\" table and executing the CSV retrieval, which can be useful for exporting and analyzing tabular data."
  },
  {
    "chunk_id": "544d7a7e-e54a-4354-9d0e-3e1436250702",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres allows you to view the execution plan of a query, which can be useful for debugging slow queries. While `explain()` is not enabled by default due to security concerns, it can be enabled in a production environment using a `pre-request` function. The `explain()` method supports various parameters, such as `verbose`, `settings`, `format`, and `analyze`, which provide different levels of detail and output formats for the execution plan."
  },
  {
    "chunk_id": "1ba49781-d658-4f15-8ef5-f1c9d2d6b7fc",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe user sign-up process in Supabase can be customized by enabling or disabling the \"Confirm email\" option, which determines whether users need to confirm their email address after signing up. When \"Confirm email\" is enabled, a user object is returned but the session is null. When it's disabled, both a user object and a session are returned. The sign-up flow can also be configured by modifying the SITE_URL or adding additional redirect URLs."
  },
  {
    "chunk_id": "125b996c-501b-4a86-9664-60184847d39b",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `supabase.auth.sign_in_anonymously()` function creates an anonymous user account, which is recommended to be used with a captcha token in the `options` parameter to prevent abuse. The anonymous user account can be customized with user metadata."
  },
  {
    "chunk_id": "57385bb5-764f-438d-96d1-b1af4d3fe6b1",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides example code for signing in with email and password, and outlines the required \"credentialsRequiredSignInWithPasswordCredentials\" parameter."
  },
  {
    "chunk_id": "205ffe8a-b5a4-4ef8-ab06-d79e1d530b24",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the 'Sign in with ID Token' feature, which allows users to authenticate by providing an OIDC ID token. This feature requires the authentication provider to be enabled and configured. The key steps involve passing the provider name and the ID token as parameters to the `supabase.auth.sign_in_with_id_token()` function, which returns the authentication response."
  },
  {
    "chunk_id": "7fe40f62-4cf8-4a62-a6d3-867337c53ac3",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through One-Time Password (OTP) authentication. This method allows passwordless sign-in by sending an OTP to the user's email or phone number. If the user doesn't exist, the `sign_in_with_otp()` function can sign up the user instead, unless `should_create_user` is set to `false`. The magic link or OTP can be configured, and the magic link's destination URL is determined by the `SITE_URL`. Developers can also modify the magic link email template to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "4ac97fd9-c190-4f9b-b25c-69741272141b",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It outlines the `sign_in_with_oauth()` function, which takes a provider (e.g., GitHub) as a parameter and handles the authentication flow. This method is useful for integrating third-party login capabilities into a Supabase-powered application."
  },
  {
    "chunk_id": "1fc13057-5afa-4b55-bbb7-55a7c81abc7d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the email domain or provider ID to start the authentication flow. This allows for various integration options, such as mapping specific user email addresses or using company-specific authentication hints."
  },
  {
    "chunk_id": "3a51e55b-f9d1-4377-9dfe-53f7d615fe08",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be used, which revokes the user's refresh token and deletes the JWT from the client-side. However, the access token JWT will remain valid until it expires, even after signing out. The `sign_out()` method uses the global scope by default, signing out the user from all their other active sessions as well."
  },
  {
    "chunk_id": "c56334b2-431e-425e-bd99-59b8b0dc1d90",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method in the Supabase authentication API handles various types of verification, including SMS, email, and password resets. The verification type should match the corresponding authentication method used previously. The `TokenHash` contained in email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "89c9293b-4678-4648-addf-c935626632a4",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source on the server, as it can be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "3fa2697d-15a6-41a3-b569-03798b33ee36",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` retrieves a new session, regardless of the expiry status of the current session. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that the session is refreshed, whether the current one is expired or not."
  },
  {
    "chunk_id": "16e58719-04d4-468e-81a5-42066c0b33ef",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"Retrieve a user\" fetches the user object from the database instead of the local session, and is useful for verifying the user's authorization by validating the access token JWT on the server. It can be used to retrieve the logged-in user with either the current session or a custom access token JWT."
  },
  {
    "chunk_id": "c32861de-34b9-4c6c-8672-faad24594cd4",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data using an `access_token` and `refresh_token`. If the session is expired, it will refresh the session to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "79b0d128-3b12-4c8d-9466-bff6f44e762e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Auth MFA (Multi-Factor Authentication) methods supported by Supabase, which currently include time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to a limit of 10, providing a recovery option without the need to store recovery codes, and reducing the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "dd60aa5b-223e-4208-9783-318ff37d394e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The documentation describes how to enroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase Python SDK. It explains that the `totp` factor type is currently supported, and provides examples of how to create, verify, and challenge-and-verify MFA authentication using the `mfa` module functions."
  },
  {
    "chunk_id": "a72fceea-76c5-4f07-9a81-4f20b015e3ab",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "bf6fb368-ccf2-4b61-9394-848b5586b3ea",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. Then, you can verify the challenge by providing the `factor_id`, `challenge_id`, and `code` in a request to the `supabase.auth.mfa.verify()` method."
  },
  {
    "chunk_id": "5940885e-0b8a-4106-bc59-163816742448",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor with a provided code."
  },
  {
    "chunk_id": "670debf0-1e8c-4b38-b2da-90afd8a0277c",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the `supabase.auth.mfa.unenroll()` method is used, passing the `factor_id` of the factor to be unenrolled as a parameter. This allows users to remove an active MFA factor from their account, reducing the security measures in place."
  },
  {
    "chunk_id": "3ac088cf-3748-4e12-82c5-ca598f2dc180",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 represents the first factor of authentication (e.g., email and password), while AAL2 represents the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next level of authentication required, with AAL2 returned if the user has a verified factor, and AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to get the AAL details of a session."
  },
  {
    "chunk_id": "4ecb82b2-0d84-4664-9be8-6592857e185d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Function invocation requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type of the request body, but this can be overridden. The example demonstrates invoking the \"hello-world\" function with a request body containing a \"name\" field."
  },
  {
    "chunk_id": "0c824358-03d1-45b5-883d-e16f2add4fef",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, but row-level security is not applied to delete statements. The example code demonstrates how to subscribe to a channel, send a broadcast message, and handle incoming broadcast events."
  },
  {
    "chunk_id": "865377cc-1bc6-47cc-a348-8761ab4aa99b",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and database when clients are disconnected, as unused channels can degrade the service. The `supabase.remove_channel()` function can be used to remove a channel, which Supabase will automatically clean up 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "a197e5fd-9b57-4784-bd1e-8aab846928d2",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels from the Realtime service and Postgres changes is recommended to maintain performance. The `supabase.remove_all_channels()` function can be used to remove all channels, which helps prevent degradation caused by clients being simultaneously subscribed to unused channels."
  },
  {
    "chunk_id": "ff84e8e0-6687-43cf-8a9d-24708380900f",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The `get_channels()` method retrieves all available channels from the Supabase platform. This allows developers to access and work with the complete set of channels programmatically."
  },
  {
    "chunk_id": "4e3109b2-9de1-48dc-9f7b-df4f9b1e05a8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The code snippet demonstrates how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. It shows how to subscribe to a channel, and then send a broadcast message containing random cursor position data to all clients within that channel."
  },
  {
    "chunk_id": "ddf62e2a-c57b-44fb-94de-12efa812461e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required permissions are: `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for information on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "8b9cdc1e-3599-4286-b322-1f0da0cebabe",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: 'select' on the 'buckets' table, and no permissions on the 'objects' table. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "034d81f9-2db4-4153-a2b3-ba2535c93bd7",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. The Storage guide provides more information on how access control works."
  },
  {
    "chunk_id": "4a6f7bfd-b186-4069-a5ca-873b6db0ecdf",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, while no permissions are needed on the 'objects' table. The process involves calling the `supabase.storage.delete_bucket(name)` function."
  },
  {
    "chunk_id": "add85243-baef-4c29-9b9d-3d01e680e771",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. The process can be executed using the `supabase.storage.empty_bucket()` function, and the Storage guide provides details on access control for this operation."
  },
  {
    "chunk_id": "d6376100-f7e1-4f83-a22d-b92dadb8718a",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The MIME type should be specified for media files, otherwise the default is `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired path on Supabase Storage, along with the appropriate file options."
  },
  {
    "chunk_id": "5a6051e6-1975-452e-8466-308e7ab5fc7e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table, but `select` permissions for the `objects` table. The download process involves using the Supabase storage client to fetch the file from the specified bucket and write the contents to the local destination file."
  },
  {
    "chunk_id": "0e4b45b1-ff3d-4c5f-ab94-464c1ae8f746",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase Storage bucket, the `objects` table permissions must include the `select` permission. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "dcd19f5e-c70e-40e8-9da3-35eeab8058dc",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file, the `update` and `select` permissions are required on the `objects` table. The file should be opened in binary mode and then uploaded to the specified Supabase storage bucket, with optional cache control and upsert settings."
  },
  {
    "chunk_id": "2179c610-b56f-4869-8722-bb20cba4d0f8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` command can be used to move a file from the `public/avatar1.png` path to the `private/avatar2.png` path within the specified storage bucket."
  },
  {
    "chunk_id": "a3780b89-ba7b-4f0e-ba57-9e0f3573d061",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the required permissions are 'delete' and 'select' on the 'objects' table. The Supabase storage guide provides details on how to manage access control. The example code shows how to remove a file named 'test.jpg' from a bucket named 'bucket_name'."
  },
  {
    "chunk_id": "022f870a-9cc0-42d4-9225-53f86b7048eb",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required permissions are 'select' on the 'objects' table, and no permissions on the 'buckets' table. The code to create a signed URL is `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)`, which generates a URL that provides time-limited access to a specific file in the storage bucket."
  },
  {
    "chunk_id": "89f2f15c-ba5e-41a1-b31c-39c8d6daa8ff",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must be set to public either via the `updateBucket()` method or the Supabase dashboard. No special permissions are required for the `buckets` or `objects` tables. The `get_public_url()` method can then be used to retrieve the public URL for a specific asset in the public bucket."
  },
  {
    "chunk_id": "ce8bb05e-58aa-4f11-9166-86fc005ddd2d",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functionality for interacting with a Supabase Postgres database, including querying the database, listening to changes, invoking Deno Edge Functions, managing user authentication, and handling large file storage. The library is well-documented and available on GitHub, making it a valuable tool for developers working with Supabase in a Python-based project."
  },
  {
    "chunk_id": "621ff57a-020d-4b3d-a248-a084d2fa07c6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the supabase-py library using pip for Python versions 3.7 and above. The installation can be done via the terminal, and the command to install the library is `pip install supabase`."
  },
  {
    "chunk_id": "e0a8e071-5fa9-4f69-a1bb-fcada3ed3d7e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the entry point to the Supabase ecosystem, allowing easy interaction with its functionalities. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optionally accepts options to change the Auth behaviors. The Supabase client provides a unified interface to access the various Supabase services and features."
  },
  {
    "chunk_id": "5d5e9c44-ef4b-457c-9644-c2df2176afcb",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the key points about fetching data in Supabase:\n1) Supabase projects have a default limit of 1,000 rows, which can be changed in the API settings, and the `range()` query can be used for pagination.\n2) The `select()` function can be combined with filters and modifiers to customize the data retrieval, and the `apikey` column should be avoided when using the Supabase platform."
  },
  {
    "chunk_id": "23a81026-4107-4016-a9cd-63d85a60f075",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Insert data\" section describes the parameters and usage of the Supabase table insert function. It allows inserting a single row as a dictionary or multiple rows as a list. The function supports optional parameters to specify the count method, return method, and whether to default missing fields to null. An example of a bulk insert operation is provided."
  },
  {
    "chunk_id": "2f686d91-493a-4fd2-94c8-7545e7a80542",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to modify existing data in a table. It must be combined with filters to target the specific item(s) to be updated. The `update()` method accepts a dictionary or list of dictionaries as input, representing the new values to be written. The `count` parameter can be used to retrieve the number of rows affected by the update operation."
  },
  {
    "chunk_id": "82d33be6-d7c9-4174-8315-64112f272a06",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the content about Upsert data is as follows:\n\nThe upsert operation allows inserting or updating data in a table based on the primary key. Primary keys must be included in the `values` dict to use upsert. The `upsert()` method takes parameters such as `jsonRequired` (data to insert), `countOptional` (method to get row count), `returningOptional` (return mode), `ignore95duplicates` (ignore duplicates), `on95conflict` (columns for UNIQUE constraint), and `default95to95null` (set missing fields to null). Upsert can be used for both single row and bulk data insertion."
  },
  {
    "chunk_id": "e510b291-321b-48cf-a070-9c76329f067c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "To delete data in Supabase, the `delete()` method should be combined with filters to target the specific items to be deleted. When using RLS (Row-Level Security), only the rows visible through the defined `SELECT` policies will be deleted. The `delete().in_()` method allows deleting multiple records at once by providing an array of values, which is useful for batch deletions based on common criteria. The `countOptional` and `returningOptional` parameters can be used to configure the behavior of the delete operation."
  },
  {
    "chunk_id": "727a3df1-67bb-47be-8b92-b27af8b29190",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to call Postgres functions as Remote Procedure Calls from any application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The summary includes details on the parameters that can be passed to the `rpc()` function, including options for returning data, setting read-only mode, and controlling the count algorithm for set-returning functions."
  },
  {
    "chunk_id": "a46f555c-e052-4871-860f-0bfd91a8d1de",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match specific conditions, and can be used with Supabase's `select()`, `update()`, `upsert()`, and `delete()` queries, as well as with Postgres functions that return a table response. Filters can be chained together to create more complex conditional logic, and can even filter on values within JSON columns or foreign tables."
  },
  {
    "chunk_id": "37175a9a-efe0-4424-9b2b-373cfb5a3360",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to filter rows in a database table where a specific column is equal to a given value. It provides the parameters for the filter operation, including the column name and the value to match, and demonstrates an example usage with the Supabase library."
  },
  {
    "chunk_id": "0e5615ff-f32a-4291-ba38-9369958f6e8f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `neq()` method in the Supabase library is used to match rows where a specified `column` is not equal to a given `value`. This is a common filtering operation in database queries, allowing users to retrieve data that does not match a particular criteria."
  },
  {
    "chunk_id": "b1adedcb-c751-4ee0-a4eb-0eb8d3928666",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation explains how to filter a database table by matching rows where a specified column has a value greater than a given value. The parameters required are the column name and the value to filter by, which can be used with the `gt()` method in the `select()` function to execute the query."
  },
  {
    "chunk_id": "7baf0bef-5943-457a-8f36-0f6a3105a3e8",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes the `gte()` (greater than or equal to) filter in Supabase, which allows you to match rows where the value in a specified column is greater than or equal to a given value. The `gte()` filter is used within the `select()` method, and the key parameters are the column name and the value to filter by."
  },
  {
    "chunk_id": "e3eb5fce-7d4d-4aa8-be00-8f2599ae248a",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This code snippet demonstrates how to filter a database table using the \"lt\" (less than) operation on a specified column and value. The \"select()\" method is used to retrieve the filtered rows from the \"countries\" table where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "99c7ffa7-6801-40e9-93ca-785d02c17b08",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section explains how to filter a database table by a column value that is less than or equal to a specified value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library's `lte()` (less than or equal to) method to select rows where the \"id\" column is less than or equal to 2."
  },
  {
    "chunk_id": "cba926b4-131d-474e-a1f5-c9a23d9da8fa",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering rows where a specified column matches a given pattern case-sensitively. The key parameters are 'column' (the column name) and 'pattern' (the pattern to match). This can be used in a `select()` query, for example, to retrieve rows where the 'name' column contains the substring 'Alba'."
  },
  {
    "chunk_id": "491324e8-7c9f-41d8-962d-31eb4595c74f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This operation filters a database table's rows where the specified column matches the given case-insensitive pattern. The `ilike()` function is used to perform the case-insensitive pattern matching, allowing for partial string matches. The example demonstrates applying this filter to the \"name\" column of the \"countries\" table."
  },
  {
    "chunk_id": "8fa0f7ff-be67-474a-ab41-2b03c917eef5",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The \"Column is a value\" feature allows you to filter a database table by checking if a specific column value matches a given value, including null, true, or false. The key parameters are the column name and the value to match against, which can be used to construct queries like `supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\")`."
  },
  {
    "chunk_id": "95df65e7-d838-4194-bb33-4a41930dc380",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation section describes the `in_()` function in the Supabase library, which allows filtering rows where the value in the specified `column` is included in the provided `values` array. This is demonstrated with an example of selecting rows from the \"countries\" table where the \"name\" column is \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "cc11c3c5-2daa-4320-ba3c-c1fb8bf653e2",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"contains\" filter is only applicable to jsonb, array, and range columns. It matches rows where the column contains every element in the provided value. The filter takes two parameters: the column to filter on and the value to filter with, which can be a jsonb, array, or range."
  },
  {
    "chunk_id": "ef825909-4af3-4b3b-810d-52c2e36078ae",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is only applicable to jsonb, array, and range columns. It allows you to filter rows where every element in the specified column is contained within the provided value. The key parameters are the column name and the value to filter with. This feature is useful for querying complex data structures like JSON, arrays, and ranges."
  },
  {
    "chunk_id": "7e6a78e7-d40a-496f-be94-d0385c1eb82f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used for range columns, and it matches only the rows where every element in the specified column is greater than any element in the provided range. The filter takes two parameters: the column to filter on and the range to filter with. This functionality can be used in a Supabase query to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "58521a40-f7f4-431a-9eb4-9b219babac0a",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" filter is used for range columns, matching rows where every element in the specified column is either contained in the given range or greater than any element in that range. The filter is defined by two required parameters: the column name and the range to filter with. This can be used in a Supabase .select() query to filter the data based on the specified range criteria."
  },
  {
    "chunk_id": "5b98ed0d-468c-4ed0-a1c8-a627b3716e63",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" section describes a filter for range columns, where only rows with every element in the specified column being less than any element in the provided range are matched. The key parameters are the column to filter on and the range to compare against, as demonstrated in an example using the Supabase library's `range_lt()` method."
  },
  {
    "chunk_id": "d5038837-0908-44a3-93c2-d69485c5a415",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is used to filter rows in a range column, where every element in the column must be less than or equal to any element in the provided range. The parameters include the column name and the range array. This filter can be used with the `select()` method to retrieve data that matches the specified range criteria."
  },
  {
    "chunk_id": "8e711bde-e5a9-431a-876f-18336ae6ae0d",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is specifically for range columns, allowing you to filter rows where the column value is mutually exclusive to the provided range, meaning there can be no element between the two ranges. It takes two parameters: the column name and the range to filter with, and can be used with the `range_adjacent()` method in a Supabase query."
  },
  {
    "chunk_id": "52fe19a9-54d5-4591-9c27-ef8d0aa682f6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe \"With a common element\" filter is used for array and range columns, matching only rows where the column and value have an element in common. The required parameters are the array or range column to filter on and the array or range value to filter with. This filter can be used with both array and range columns, as demonstrated in the example code."
  },
  {
    "chunk_id": "33904db3-b686-4ecc-8b19-3d33149bec4e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Match a string\" functionality, which is only applicable to text and tsvector columns in a database. It allows filtering rows where the specified column matches the provided query string, leveraging Postgres full-text search capabilities. The key parameters are the column name, the query text, and optional search configuration options."
  },
  {
    "chunk_id": "4705738c-98db-4c1f-9ce8-267ec26de3b4",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows you to filter a table by matching rows where each column in the `query` object has an equal associated value. This is a shorthand way of applying multiple `.eq()` filters. The `match()` method takes a `query` object as a parameter, where the keys are the column names and the values are the filter values."
  },
  {
    "chunk_id": "17b29b1b-7b62-4a85-9d2c-6051422f6c7c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides guidance on using the `not_` operator in PostgREST filters to match rows that do not satisfy the filter criteria. It demonstrates how to use the `not_.in_()` and `not_.contains()` methods to exclude specific values or array elements from the filter. Additionally, it shows how to use the `not_.is_()` method with the `select()` function to retrieve rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "60ca3902-e4b3-43e7-8f87-fb50dd7a523a",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nor95() function in Supabase allows you to use the raw PostgREST syntax for filter names and values, including support for 'in' filters, array values, and 'contains' and 'containedBy' operators. The function takes a 'filtersRequired' parameter to specify the filters and an optional 'reference95table' parameter to filter on referenced tables. or95() can be used in conjunction with select() to apply multiple filters using 'or' and 'and' logic."
  },
  {
    "chunk_id": "951cb9ea-2193-426b-af59-c9282b0f665d",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `filter()` method in the Supabase client library expects the use of raw PostgREST syntax for the filter values. This includes using parentheses `()` for the `in` filter and backslashes `\\{\\}` for array values. The `filter()` method takes three parameters: the column to filter on, the operator to use, and the value to filter with."
  },
  {
    "chunk_id": "41d2f7d9-f9da-4d10-b934-5de233084912",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which only return rows matching certain conditions. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function with a table response."
  },
  {
    "chunk_id": "156626b0-0c4e-4444-89cd-b36891f8480c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'order' function allows you to order the query results by a specified column. The main parameters are 'column' (the column to order by), 'desc' (whether to order in descending order), 'foreign_table' (the foreign table whose results are to be ordered), and 'nulls_first' (to order by showing nulls first). This can be used with the 'select()' function on a foreign table, for example to order the 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "9c17788a-cce7-4d17-bedc-e275b3c701cc",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the number of rows returned in a database query using the `limit()` function in the Supabase library. The `sizeRequired` parameter sets the maximum number of rows to return, and the `foreign95table` parameter can be used to limit rows of foreign tables instead of the parent table. This is a useful feature for paging or optimizing database queries."
  },
  {
    "chunk_id": "6d69337e-d253-4356-ade0-3b8cf476ceba",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the query result by specifying a range using the `from` and `to` parameters. The range is 0-based and inclusive, allowing you to retrieve a subset of the records based on their position in the query order. This feature is useful when you need to paginate or display a limited number of results from a larger dataset."
  },
  {
    "chunk_id": "bf00ace8-4a69-40d1-8e14-bab2e7f6902d",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to retrieve a single row of data from the \"countries\" table using the Supabase library. The `select()` method is used to specify the desired column (\"name\"), and the `limit(1)` and `single()` methods ensure that only one row is returned as an object, rather than an array of objects."
  },
  {
    "chunk_id": "1654a41f-5f32-4a05-b501-6ffc1a59852b",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a database table using the `maybe_single()` method in the Supabase client library. This is useful when you expect to retrieve at most one row of data based on a specific condition, such as querying for a record by a unique identifier. The example shows how to retrieve a row from the \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "05e1f670-e8bf-4074-9018-54ed8e18fb5e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise explanation of the \"Retrieve as a CSV\" functionality in the Supabase API. It allows users to retrieve data from a Supabase table in a CSV format, which can be useful for exporting and sharing data in a tabular format. The summary also includes an example of how to use the `.csv()` method to execute the request and retrieve the data."
  },
  {
    "chunk_id": "82023e67-4111-4461-aa84-597daf19fc6e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The document describes how to use the Postgres `EXPLAIN` command to debug slow queries in a Supabase project. It outlines the various parameters that can be used with the `explain()` method, such as `walOptional`, `verbose`, and `analyze`, to get detailed information about the query execution plan. It also cautions about the potential security implications of enabling `EXPLAIN` in production environments and recommends following the Performance Debugging Guide to properly configure the functionality."
  },
  {
    "chunk_id": "b0e43ce0-b33e-4a09-98b3-67a0e19649c9",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, users need to verify their email address before logging in. Enabling or disabling the \"Confirm email\" option in the project settings determines whether a user session is returned immediately or after email confirmation. For existing users, attempting to sign up again will return an obfuscated user object or an error message depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "c9b57d2c-9904-4ce8-8921-ea896d21ea57",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha for anonymous sign-ins to prevent abuse, and provides an example code snippet to sign in anonymously with optional custom user metadata. The anonymous user functionality is useful for allowing users to interact with the system without providing full credentials."
  },
  {
    "chunk_id": "145587b1-a055-4956-aa5d-093d734ed547",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user with either an email and password or a phone number and password. It provides sample code for signing in with email and password, and outlines the required \"credentialsRequiredSignInWithPasswordCredentials\" parameter. The summary highlights the key functionality of user authentication via email/password or phone/password."
  },
  {
    "chunk_id": "3fa28704-012e-4be9-ab0a-dda0a13ffc77",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Sign in with ID Token\" feature, which allows users to authenticate by providing an OIDC ID token. The feature requires the authentication provider to be enabled and configured. The summary includes the key technical details, such as the required parameter \"credentialsRequiredSignInWithIdTokenCredentials\" and an example of the sign-in API call using the \"supabase.auth.sign_in_with_id_token()\" method."
  },
  {
    "chunk_id": "28a47a36-1a17-4d17-a5cf-0eacc210f8a3",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_with_otp()` function allows users to sign in without a password, by sending a one-time password (OTP) to the user's email or phone number. If the user doesn't exist, the function will sign them up instead. Developers can configure whether to send a magic link or an OTP, and can control the behavior of user creation using the `should_create_user` option. The magic link's destination URL is determined by the `SITE_URL` setting, and additional redirect URLs can be configured."
  },
  {
    "chunk_id": "0dfedda1-8736-4cc2-be14-55d6b05a4a45",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It provides a code example for signing in using the GitHub provider, and mentions that Supabase supports various third-party providers that can be configured. The key technical point is the `supabase.auth.sign_in_with_oauth()` method, which is used to initiate the OAuth sign-in flow."
  },
  {
    "chunk_id": "8a078df4-52fe-4211-bcf1-5af0664b15a5",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then initiate the sign-in flow by providing either the associated email domain or a specific provider ID, which allows for more advanced use cases like mapping email addresses or using contextual hints to identify the identity provider."
  },
  {
    "chunk_id": "deda7fc8-9ab6-4e4c-93fa-79b5940c3288",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the user's refresh token and deletes the JWT from the client-side, but does not revoke the valid JWT until it expires. Supabase Auth uses JWTs for authentication, so signing out affects all sessions the user is logged into."
  },
  {
    "chunk_id": "3da7a22e-e319-48de-9280-d5afeeae62cd",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method supports various verification types, including SMS, email, and phone number changes. The verification type used should match the corresponding auth method called previously. The `TokenHash` contained in the email templates can be used to sign in, and may be used with Magic Links for the PKCE flow in server-side authentication."
  },
  {
    "chunk_id": "f4936ff9-7435-4630-b5c6-713c017eecaa",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with by the sender. If trustworthy user data is required, the `get_user()` method should be used instead. Additionally, the method will automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "f0a7cdb1-1a93-4003-baf9-6dd4d293dfa6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiration status of the current session. It takes an optional refresh token as input, and if not provided, it will attempt to retrieve it from the existing session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it has expired or not."
  },
  {
    "chunk_id": "f2bd4ece-467b-4c3a-b10f-0b652822e978",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the logged-in user's details from the database, rather than the local session. This is useful for verifying the user's authorization by validating the provided access token JWT on the server. The method can be called with an optional JWT parameter, which allows fetching the user associated with a custom access token."
  },
  {
    "chunk_id": "27809630-7265-4497-94d1-7397e50604c8",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session()` in the Supabase authentication API sets the session data using an `access_token` and `refresh_token`. If successful, it emits a `SIGNED_IN` event. This method is used to refresh an expired session or obtain a new session if the current tokens are invalid, allowing seamless user authentication."
  },
  {
    "chunk_id": "ba479a4c-76a2-4472-933b-a7c44075c854",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section describes the Multi-Factor Authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors, up to 10, for recovery purposes, which reduces the need to store recovery codes and the attack surface compared to having a single backup TOTP factor."
  },
  {
    "chunk_id": "b1825440-2837-4267-bf7a-0f276e268847",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The provided documentation describes the process of enrolling a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` from the `mfa.enroll()` function should be used to create a challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "c2697bba-8677-450b-9efd-3c5cc1729245",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function is used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "66927010-9ec5-4d59-bdae-916e5fef3bef",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions in the \"create a challenge\" documentation. The summary then provides an example code snippet that demonstrates how to verify a challenge, specifying the required parameters such as the factor_id, challenge_id, and code."
  },
  {
    "chunk_id": "4e5d9bfc-d679-4cc2-bbb8-5e9024a84143",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled authentication factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking the factor ID and a code as input parameters."
  },
  {
    "chunk_id": "98dfdf77-32e8-48bb-adfe-fc83ccf4b98f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, use the `supabase.auth.mfa.unenroll()` function, passing the `factor_id` as a parameter. This allows users to remove a specific MFA factor from their account, which can be useful if they no longer need or want to use that particular authentication method."
  },
  {
    "chunk_id": "68b45557-b72b-4699-98ec-e8cf8991acce",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as an email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the required level of authentication, with AAL2 if the user has a verified factor, and AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "6fbd3989-0bd6-4ce4-afb2-9112cee3c7f9",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "To invoke a Supabase Edge Function, you need to include an Authorization header. The function can handle various data types, such as Blob, ArrayBuffer, File, FormData, and String, and will automatically attach the appropriate Content-Type header. Alternatively, you can override this behavior by providing your own Content-Type header. The summary provides an example of how to invoke a Supabase Function with a custom request body."
  },
  {
    "chunk_id": "2d63a520-f2ed-4055-bb0c-af1bd10fb91e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can enable full replica identity to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The code example demonstrates how to subscribe to a channel, send a broadcast message, and handle received broadcasts."
  },
  {
    "chunk_id": "4ebb0271-c0ad-419d-9c64-9a4d26cba933",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel in Supabase is recommended to maintain efficient performance of the Realtime service and the database, as unused channels can degrade system performance as more clients subscribe. The `supabase.remove_channel(myChannel)` function can be used to remove a specific channel, which Supabase will then automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "9fc67c23-8196-4751-b59c-2049ae47f6fd",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain the performance of the Realtime service and the database, as unused channels can degrade performance as more clients subscribe. To remove all channels, use the `supabase.remove_all_channels()` method, which Supabase will automatically clean up 30 seconds after a client disconnects."
  },
  {
    "chunk_id": "2a503c85-400f-4d0d-bb59-b8112d700365",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: This code snippet retrieves all channels from the Supabase platform using the `supabase.get_channels()` function, which can be useful for applications that need to display or manage a list of available channels."
  },
  {
    "chunk_id": "f932d8ae-48a2-4c79-9059-d02ec73728fa",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. It provides an example of subscribing to a channel, then sending a broadcast message with cursor position data to all connected clients in the 'room1' channel."
  },
  {
    "chunk_id": "5e70d01c-d3c2-4947-984f-0ef1ccc9d5fd",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the required RLS policy permissions are: `insert` permission on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The example code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "ec9fe65d-5c6f-4c95-85ef-2188a7de073c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for information on how access control works. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "e840fd1a-58ca-4f3f-af24-a3199a12d4f4",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, you need the `select` permission on the `buckets` table. You can use the `supabase.storage.list_buckets()` method. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "d95727c7-22d3-41d6-94a3-89f290452784",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the necessary RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are required on the `objects` table. Refer to the Supabase Storage guide for more information on access control. The code to delete a bucket is `supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "9c708053-f3e8-46b5-808b-e66f0a2fc478",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. The Supabase Storage guide provides more information on access control. The `supabase.storage.empty_bucket()` function can be used to empty a bucket."
  },
  {
    "chunk_id": "b21bc141-af01-470b-b666-e5750f72ca7f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the `objects` table permissions require `insert` access. The appropriate MIME type should be specified, especially for images or audio files. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file, path, and optional file options such as content type."
  },
  {
    "chunk_id": "9f6ed5cd-c91f-47f5-a497-7a45e1fbc7c3",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the necessary RLS policy permissions are `select` on the `objects` table. The code snippet demonstrates how to download a file from a Supabase storage bucket using the `supabase.storage.from_('bucket_name').download(source)` method, which writes the downloaded content to a local file."
  },
  {
    "chunk_id": "6ab2f055-edd8-423a-9e72-8f448e3b75ac",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The code to perform this action is `supabase.storage.from_('bucket_name').list()`. Refer to the Supabase storage access control guide for more information on managing permissions."
  },
  {
    "chunk_id": "42f91fe4-6074-45d3-b825-8d2381484e8e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file is updated by opening the local file, then using the Supabase storage client to update the file on the Supabase storage, specifying the bucket name, file path, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "db988517-c07f-4fd3-8792-4916041a0577",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are update and select on the objects table. The storage.from_() function can be used to move a file from the public/avatar1.png location to the private/avatar2.png location within the same bucket."
  },
  {
    "chunk_id": "0288b769-1cc1-4e64-ad3a-e81676260212",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The `buckets` table permissions are not required. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "019a9a51-3d4a-4f0b-a2b8-4a560c173964",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required RLS policy permissions are to have 'select' permissions on the 'objects' table. The create_signed_url() function is used, which takes the file path and expiry duration as parameters, and provides a signed URL that can be used to access the file securely."
  },
  {
    "chunk_id": "e2afbad4-5a13-43d2-9092-7c156c07115b",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset stored in a Supabase Storage bucket, the bucket must be set to public either via the `updateBucket()` function or the Supabase dashboard. No specific permissions are required for the `buckets` or `objects` tables. The public URL can be obtained using the `get_public_url()` method of the `supabase.storage.from_()` function."
  },
  {
    "chunk_id": "7b1051ed-a458-4544-ac38-435672d1ae7e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with their Supabase Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive reference documenting every object and method available in the library, which can be used to build powerful applications using the Supabase platform."
  },
  {
    "chunk_id": "17b25dcb-ca04-4cfe-a3be-0896bea9c344",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase-py library using pip for Python 3.7 and above. The installation can be done via the terminal using the command `pip install supabase`."
  },
  {
    "chunk_id": "2ce62668-df9d-4fa2-9907-4e6ca2f8c1d6",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to interact with the Supabase ecosystem. It can be initialized using the `create_client()` method, which requires the Supabase URL and Key, and optionally accepts client options to customize the authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the central entry point for developers working with the Supabase platform."
  },
  {
    "chunk_id": "a6d3a2ea-c5f9-4e7d-8feb-a00a0f1a1f5e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch specific data, and the `apikey` keyword should be avoided as a column name. Key parameters include columns to retrieve and the property to use for row counts."
  },
  {
    "chunk_id": "e480cd8b-d790-4086-a0ad-959fdfa32e6b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section discusses the parameters for inserting data into a table using the Supabase library. The main parameters are `jsonRequired` for the data to be inserted (as a single dictionary or a list of dictionaries), `countOptional` for specifying the property to get the row count, `returningOptional` for choosing the response format, and `default95to95nullOptional` for setting missing fields to null in bulk inserts. It provides an example of inserting a single row into the \"countries\" table."
  },
  {
    "chunk_id": "60fc88a7-52dc-4c30-a516-3eaf47e0873e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` function in the Supabase client library is used to update data in a table, and must be combined with filters to target the specific row(s) to be updated. The function takes a dictionary or list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted, and an optional `countOptional` parameter to get the count of updated rows."
  },
  {
    "chunk_id": "c51db0f3-3050-4cc8-9ce8-d292945d251b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the key points about the Upsert data feature:\n\nThe primary keys must be included in the values dict to use upsert. Upsert allows bulk insertion of data, with options to handle duplicate rows, set default values, and specify columns to work with UNIQUE constraints. The upsert operation can be performed on a table using the .upsert() method, which takes in the values to insert and various optional parameters."
  },
  {
    "chunk_id": "cef65fd8-265d-48b0-95bc-15afcf99123f",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` function in Supabase should always be used with filters to target specific records for deletion. When using RLS (Row Level Security), only rows visible through SELECT policies are deleted, so it's important to have the appropriate policies in place. The `delete().in_()` method allows for batch deleting of records that share common criteria, such as deleting users by their IDs, but the array of values provided must accurately represent all records to be deleted."
  },
  {
    "chunk_id": "671eaf04-3337-4618-b64d-9c68edcada87",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes how to call Postgres functions as Remote Procedure Calls, which are useful for executing logic in the database that rarely changes, such as password resets and updates. It provides details on the function parameters, including options for counting rows returned by set-returning functions, and demonstrates how to call a Postgres function without arguments or with arguments."
  },
  {
    "chunk_id": "b66d9890-9129-4682-8d94-6ad0cd3311af",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters in Supabase allow you to return only the rows that match certain conditions in `select()`, `update()`, `upsert()`, and `delete()` queries. You can also apply filters to Postgres functions that return a table response. The order of applying filters and other operations is important, as demonstrated in the examples provided."
  },
  {
    "chunk_id": "69c5f57a-3863-469c-9609-f66f0fb8decf",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the `eq()` function in Supabase, which allows you to filter a table by matching a column to a specific value. The `eq()` function takes two required parameters: the column name and the value to filter by. This can be used in conjunction with the `select()` function to retrieve rows that match the specified criteria."
  },
  {
    "chunk_id": "2f256cce-e9c7-4273-85ec-64d23d22158b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `neq()` method in the Supabase library allows filtering rows where a specified column is not equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is a common operation in data filtering and retrieval tasks."
  },
  {
    "chunk_id": "68549a10-3653-4894-a9fc-ee7f06cd66d5",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by selecting only rows where a specified column has a value greater than a provided value. The key parameters are the column name and the filter value, and an example is provided using the Supabase library's `gt()` method to perform the greater-than filter."
  },
  {
    "chunk_id": "715fb510-4fed-4563-9e43-27a9e50dad03",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to filter a database table by selecting rows where a specified column is greater than or equal to a given value. The key parameters are the column name and the value to filter by, demonstrated with an example using the Supabase library's `gte()` (greater than or equal to) method."
  },
  {
    "chunk_id": "ed2cda01-20d7-40ab-aa48-be420720ae51",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to filter a database table using the \"lt\" (less than) operator, where the user can specify a column name and a value to match only rows where the column value is less than the provided value. This can be used with the \"select()\" function to retrieve the filtered data."
  },
  {
    "chunk_id": "23f221a3-f6ec-43f1-a917-df6006eca564",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `lte()` (less than or equal to) function in the Supabase library filters a database table to include only rows where the specified `column` has a value less than or equal to the provided `value`. This is a common filtering operation used to retrieve a subset of data based on a specific numerical or date-based condition."
  },
  {
    "chunk_id": "dfaa36fb-2e2c-46b7-b228-cf0899abb925",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"Column matches a pattern\" feature allows filtering a table by a specific column, where the column value matches a provided pattern case-sensitively. The required parameters are the column name and the pattern to match, and the feature can be used with the `select()` method of a Supabase table, as shown in the example."
  },
  {
    "chunk_id": "a98f0ef8-96cd-4a86-be4d-7ca13c9088a9",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes a SQL function that allows filtering a table column based on a case-insensitive pattern match. The `ilike()` function takes two parameters: the column name and the pattern to match. This can be useful when performing case-insensitive searches on text data, as shown in the example query."
  },
  {
    "chunk_id": "09a2ea7c-b6b7-4335-a9ad-a3da7c837820",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column is a value\" feature allows filtering rows in a table where a specified column matches a given value, including checking for null, true, or false values. The key parameters are the column name and the value to match, which can be used to execute a query and retrieve the filtered data."
  },
  {
    "chunk_id": "2efb70d2-9baa-47be-91f1-a94beb88148f",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to filter a database table by checking if the values in a specific column are included in a given array. The `in_()` method is used to perform this filtering, with the `columnRequired` parameter specifying the column to filter on and the `valuesRequired` parameter providing the array of values to match against."
  },
  {
    "chunk_id": "b8ad2b08-4862-4acf-8da1-81e0d87187cc",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the `contains` operation in Supabase, which is used to filter rows where a column contains all the elements in the provided value. This is applicable to `jsonb`, `array`, and `range` columns. The parameters include the column name and the value to filter with, and the summary includes examples for each data type."
  },
  {
    "chunk_id": "71881d44-c114-47ca-b8f9-c4036eaf3af5",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is applicable to jsonb, array, and range columns. It allows matching rows where every element in the specified column is contained within the provided value. The feature is demonstrated with an example query that selects names from a \"classes\" table where the \"days\" column contains the values \"monday\", \"tuesday\", \"wednesday\", and \"friday\"."
  },
  {
    "chunk_id": "b1998c84-759a-4e7c-a183-5a5437e59c7d",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than a range' feature is used to filter rows in a range column, where every element in the column is greater than any element in the provided range. The key parameters are the column name and the range to filter with. This functionality can be used in the `select()` method of a database query to retrieve only the relevant rows."
  },
  {
    "chunk_id": "b6df3abd-98ff-4d5f-a2ba-ea6b3bc4df4a",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" functionality is used for filtering range columns in a database. It matches rows where every element in the specified column is either contained within the given range or greater than any element in the range. The parameters for this filter are the column name and the range to filter with, which can be used in a Supabase `select()` query."
  },
  {
    "chunk_id": "f241bb31-edc8-4362-b1a6-61c4867b27fa",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Less than a range' filter is used for range columns in Supabase. It matches rows where every element in the specified column is less than any element in the provided range. The filter is defined by two required parameters: the column to filter on and the range to filter with."
  },
  {
    "chunk_id": "4c93c6a1-3cfa-4202-891a-39789531acba",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is specific to range columns, allowing you to filter rows where every element in the specified column is less than any element in the provided range. It takes two required parameters: the column to filter on and the range to filter with. This functionality can be utilized in the Supabase .select() method to retrieve data that falls within the specified range."
  },
  {
    "chunk_id": "7f05d5be-2724-4db9-b1e3-0d1d2aa70123",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the \"Mutually exclusive to a range\" feature, which is only applicable to range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The parameters include the range column to filter on and the range to filter with. This functionality can be used with the `range_adjacent()` method in the Supabase query builder."
  },
  {
    "chunk_id": "ab359ac1-208f-4f38-8d3b-add4b3b54b95",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis feature is only applicable for array and range columns. It allows filtering rows where the specified column and value have a common element. The required parameters are the column to filter on and the value to filter with. Examples are provided for using this functionality with array and range columns."
  },
  {
    "chunk_id": "54f6e821-e17b-4b5c-aaa9-d2bb1ef4b68b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content discusses the \"Match a string\" functionality, which is relevant for text and tsvector columns in a database. This feature allows filtering rows where the specified column matches the given query string, leveraging Postgres full-text search capabilities. The summary includes the required parameters (column and query) and optional parameters (options), as well as an example usage of the text_search function."
  },
  {
    "chunk_id": "7ac3da0e-c9a4-4680-9f29-ed906253a5b6",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase API allows you to filter a database table by matching rows where each column in the `query` parameter has the specified associated value. This is a convenient shorthand for chaining multiple `.eq()` calls. The `query` parameter is an object with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "271dd9e7-7467-4557-acef-4d2f9e5214a9",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides an explanation of the `not_` operator in PostgREST filters, which is used to match rows that don't satisfy the filter criteria. It shows examples of using `not_` with the `in` and `contains` operators, as well as how to use `not_` with the `select()` method in the Supabase client library to retrieve data that does not match a specified condition."
  },
  {
    "chunk_id": "85947f5a-3b07-4063-9fa2-555db0cec1e8",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the software documentation allows users to match at least one filter, following the PostgREST syntax. It supports filters for in, contains, and containedBy operations, using parentheses, curly braces, and the \"cs\" and \"cd\" prefixes, respectively. The function can be used with select() to filter on the parent table or referenced tables, combining multiple filters with or and and."
  },
  {
    "chunk_id": "5718300e-911a-4ee2-8dea-1a5a2cc8b544",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in Supabase expects PostgREST syntax for filter values, such as using `()` for `in` filters and `\\{\\}` for array values. The `filter()` method takes three parameters: `column` (required string), `operator` (optional string), and `value` (optional any). An example is provided for using `filter()` on a foreign table with the `select()` method."
  },
  {
    "chunk_id": "60291652-422e-4de5-88bf-6d4893d87229",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which only apply conditions on the row level. Modifiers must be specified after filters and can only be used with queries that return rows, such as `select()` or `rpc()` on a function with a table response."
  },
  {
    "chunk_id": "224587a6-15b7-4dc1-9b3d-21d06d8c6ef4",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` function allows ordering the query result by a specified column, optionally in descending order or with nulls first. It takes parameters such as `column`, `desc`, `foreign_table`, and `nulls_first`. An example usage is to order the results of a `select()` query on a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "8b6c0609-c976-45f2-b4a6-4ca5bc521c50",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation discusses how to limit the number of rows returned in a SELECT query using the `limit()` function. The `sizeRequired` parameter specifies the maximum number of rows to return, while the `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. An example is provided demonstrating how to use the `limit()` function on a `countries` table to return only the first row."
  },
  {
    "chunk_id": "9c8b0751-b3e9-413f-9d66-4868417f2bbc",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function allows limiting the query result to a specific range of records, defined by a starting offset (`from`) and an ending offset (`from + to`). This respects the query order, but if no order clause is specified, the range behavior may be unpredictable. The `from` and `to` parameters are 0-based and inclusive, allowing precise control over the returned records. An optional `foreign_table` parameter can be used to limit the range to a specific foreign table instead of the parent table."
  },
  {
    "chunk_id": "cdd1a863-a6d9-4943-b96e-1be94678854b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe provided code demonstrates how to retrieve a single row of data from the \"countries\" table using Supabase's `select()` method with the `limit(1)` and `single()` modifiers. This allows retrieving the \"name\" column as a single object rather than an array of objects, simplifying the data handling process."
  },
  {
    "chunk_id": "71988c97-86e3-454c-8c55-a813460066c8",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `maybe_single()` method in the Supabase client library is used to retrieve zero or one row of data from a database table, returning the data as a single object instead of an array. This is useful when you expect at most one result from a query, as it simplifies the handling of the response. The example shows how to use `maybe_single()` to retrieve a single row from the \"countries\" table where the \"name\" column matches \"Albania\"."
  },
  {
    "chunk_id": "06214a11-ff84-4448-9d51-fcbbcaf81c4c",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes the 'Retrieve as a CSV' functionality, which allows returning data from a Supabase table in CSV format. The example shows how to use the `csv()` method to execute a `select` query and retrieve the data as a CSV string."
  },
  {
    "chunk_id": "db5a156c-18d0-4646-9c86-eaa215bcc0cf",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content explains how to use the `EXPLAIN` function in Postgres to debug slow queries by retrieving the execution plan of a query. It warns that `EXPLAIN` should be used cautiously as it can reveal sensitive information, and provides guidance on enabling it safely in production environments. The content also outlines the various parameters available for `EXPLAIN`, such as `WAL`, `verbose`, `settings`, `format`, `buffers`, and `analyze`, which can be used to customize the output and obtain detailed performance metrics."
  },
  {
    "chunk_id": "763381af-d1fc-4f53-8b98-94965805fe77",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Create a new user\" section covers how to sign up new users in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled. It also covers the behavior when signing up an existing confirmed user, and how to fetch the currently logged-in user. The key technical points include the use of the `sign_up()` function, the `Confirm email` and `Confirm phone` settings, and the handling of existing users."
  },
  {
    "chunk_id": "56e45878-696a-4f68-a345-575a24eda59f",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The Supabase API provides a method to create an anonymous user, which is recommended to be used with a captcha token to prevent abuse. The anonymous user can be created using the `supabase.auth.sign_in_anonymously()` function, passing in an options object with the captcha token."
  },
  {
    "chunk_id": "ce607a23-c913-4a7e-a8c5-eb5a52d59799",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to sign in an existing user by providing either an email and password or a phone number and password. It includes a code example for signing in with email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "03b45a71-cb7a-455a-afcf-3ad75330cad1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to sign in using an OIDC ID token. The authentication provider must be enabled and configured. The sign-in process involves passing the provider name and the ID token as parameters to the `supabase.auth.sign_in_with_id_token()` function, which returns a response."
  },
  {
    "chunk_id": "6529db44-12e7-453c-ae68-fa60d901dc8b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP method allows users to authenticate without a password, by sending a one-time code to their email or phone number. This can be used for passwordless sign-in, and if the user doesn't exist, they will be signed up automatically. Developers can configure whether to send a magic link or OTP, and can customize the OTP email template. The magic link's destination URL is determined by the SITE_URL, and additional redirect URLs can be added to the project."
  },
  {
    "chunk_id": "336c88c2-dc32-415e-8167-b426e873acb9",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "This method allows users to sign in to the application using a third-party identity provider, such as GitHub, supported by Supabase. The `sign_in_with_oauth()` function is used to initiate the authentication flow, which may involve a redirect to the third-party provider's login page. The method supports specifying additional scopes to request access to the user's information from the provider."
  },
  {
    "chunk_id": "ea6a6d9d-1661-4bef-b27f-b7440902de25",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use either the `domain` property to start the sign-in flow based on an associated email domain, or the `provider_id` property to specify a different way of identifying the identity provider, such as mapping specific user email addresses or using company-specific hints. The `sign_in_with_sso()` method is used to initiate the SSO sign-in process."
  },
  {
    "chunk_id": "840fbb43-76d7-4acb-8b3d-8bbb3f8ecce1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth is used to sign out a user. It revokes the refresh token and deletes the JWT from the client-side, but the access token JWT remains valid until it expires. By default, `sign_out()` signs out all other sessions the user is logged into. The method requires the user to be signed in first, and it takes an optional `SignOutOptions` parameter."
  },
  {
    "chunk_id": "dbe217bc-b2f6-494f-8708-8267d94c80ea",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify One-Time Passwords (OTPs) for different authentication types like SMS, email, and account changes. The verification type should match the corresponding auth method used previously. The `TokenHash` contained in email templates can be used for signing in with Magic Links and the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "40584bb0-254a-42df-9efd-2ef35fd68710",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data, as it could be tampered with. If trustworthy user data is required, the `get_user` method should be used instead. Additionally, the method will automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "11f387ab-baa8-413a-8734-12e7cba0480e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the refresh token is invalid, an error will be thrown. This method is useful for refreshing the session without the need to check its expiration status."
  },
  {
    "chunk_id": "1b3630df-3363-406a-9c0e-fcec5696dfd7",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database, instead of the local session. This is useful for checking if the user is authorized, as it validates the user's access token JWT on the server. The method can take an optional access token JWT as a parameter, and if none is provided, it uses the JWT from the current session."
  },
  {
    "chunk_id": "6430486e-86d9-4cb9-b9c4-99567fda90a5",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session` method sets the session data by taking an `access_token` and `refresh_token` as parameters. If the current session is expired, it refreshes the session to obtain a new one. If the tokens are invalid, an error is thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "6b09b73c-855b-48ae-baf8-41f27338192d",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation discusses the implementation of Multi-Factor Authentication (MFA) in the Supabase platform, which currently supports time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to 10, for recovery purposes, eliminating the need to store recovery codes separately and reducing the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "baf6f74d-3c89-4093-980c-84c8cdab26fc",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase authentication API supports enrolling a time-based one-time password (TOTP) factor, which is the only currently supported `factor_type`. The returned `id` from the `mfa.enroll()` method can be used to create and verify a challenge using the `mfa.challenge()`, `mfa.verify()`, or `mfa.challenge_and_verify()` methods."
  },
  {
    "chunk_id": "7b0a1645-0683-4f30-96a1-8c8de25c5b6e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for multi-factor authentication, an enrolled factor is required. The `mfa.challenge()` method can be used to initiate a challenge, and the `mfa.verify()` method can be used to verify the challenge response."
  },
  {
    "chunk_id": "fbefa15d-4af2-48a1-84af-68569c270bb3",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. The `supabase.auth.mfa.verify()` method is used to verify a challenge, which requires the `factor_id`, `challenge_id`, and `code` parameters."
  },
  {
    "chunk_id": "c1d03934-ec37-4615-96c9-8f233c2bd62d",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` steps in a single step, using the factor_id and a provided code."
  },
  {
    "chunk_id": "0ba41300-897d-49fc-bb72-ae0f37a5d692",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to unenroll a factor from Supabase's multi-factor authentication (MFA) system. It provides an example code snippet showing the `supabase.auth.mfa.unenroll()` function call, where the `factor_id` parameter is used to specify the factor to be unenrolled."
  },
  {
    "chunk_id": "44b4d764-1194-42d9-8d5f-c0b7360b1e05",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next level of authentication required, either AAL1 or AAL2, based on the user's verified factors. Developers can use the `supabase.auth.mfa.get_authenticator_assurance_level()` method to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "c85a4d57-5cb4-4e9c-ba32-dd3f77b34fc1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvoking a Supabase Edge Function requires an Authorization header. The function can accept a body of various data types, which will automatically have the appropriate Content-Type header attached. Custom headers can also be passed. An example invocation is provided, passing a JSON-formatted body to the \"hello-world\" function."
  },
  {
    "chunk_id": "c3263aa1-bba7-4d83-8c84-66cae6d8d3af",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled due to performance and security concerns. Developers can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, and can listen to various Realtime events such as broadcasts, presence changes, and row-level database changes using the provided channel API."
  },
  {
    "chunk_id": "bb3eb87f-392d-45a3-931e-23d2871d606f",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and the database by reducing the number of simultaneously subscribed clients. The Supabase API provides a `remove_channel()` method to unsubscribe from a channel, which automatically handles the cleanup process 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "82b69561-7f9a-45fa-ae66-77d7386535d4",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically handles cleanup 30 seconds after a client is disconnected, but unused channels can degrade performance if too many clients are subscribed. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "1c97b85e-526e-419a-89fc-7dd46714940a",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the given content is:\n\nThe `supabase.get_channels()` function retrieves all channels from the Supabase database. This is a useful operation for accessing and working with the complete list of available channels in the system."
  },
  {
    "chunk_id": "b03ada80-a3b9-4494-9c4d-6c7a1033436d",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It demonstrates a code example that subscribes to a channel, and then sends a broadcast message containing random cursor position coordinates."
  },
  {
    "chunk_id": "bc6a4f77-1a0a-42cd-bd4a-f99b964dbfc4",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` access to the `buckets` table and no permissions required for the `objects` table. Refer to the Storage guide for more information on how access control works. The code to create a bucket is `_10  res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "70da4f5a-7860-4608-b124-24859ced65ca",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for details on Supabase's access control mechanisms."
  },
  {
    "chunk_id": "9b2e4f51-d53c-4c3d-9042-0738d51a892c",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are: `select` permissions on the `buckets` table and no permissions on the `objects` table. The Supabase Storage guide provides more information on how access control works. The function `supabase.storage.list_buckets()` can be used to retrieve a list of all buckets."
  },
  {
    "chunk_id": "fb6d6945-fb37-4ae3-981d-4123bf576726",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, while no permissions are needed on the `objects` table. The process of deleting a bucket is done using the `supabase.storage.delete_bucket(name)` function."
  },
  {
    "chunk_id": "43aea40c-7e07-4fbf-a74a-dccaec1fcd05",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for more information on Supabase's access control mechanism."
  },
  {
    "chunk_id": "86fe5ccb-462c-4904-8b24-76ff886163c9",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the required RLS policy permissions are `insert` on the `objects` table. When uploading, specify the appropriate MIME type, such as `audio/mpeg` for audio files; otherwise, the default is `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file handle and the desired path on Supabase Storage."
  },
  {
    "chunk_id": "9c6a238b-6d99-432c-867e-f08daa1cd8f3",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the RLS policy requires `select` permissions on the `objects` table, but no permissions on the `buckets` table. The code snippet demonstrates downloading a file from a Supabase storage bucket and writing it to a local destination file."
  },
  {
    "chunk_id": "076963fa-3c34-4935-beef-e6c81cb19087",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions must be set to `select`. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "2eeb60e3-6552-43f2-b14b-d7336cae4577",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are `update` and `select` on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file object, the path to the file on Supabase storage, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "be893fbe-8601-4a4a-9929-f53af20c7c10",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires the `update` and `select` permissions on the `objects` table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` function, allowing the file to be relocated from one location to another within the storage bucket."
  },
  {
    "chunk_id": "fdc25b4a-71b0-4edb-896c-09ca1ba34398",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table, but no permissions on the `buckets` table. The Storage guide provides more information on how access control works."
  },
  {
    "chunk_id": "517d996b-c2db-4707-89cd-9338077662fb",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are: no permissions on the `buckets` table and `select` permissions on the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, which allows providing a file path and an expiry duration for the URL."
  },
  {
    "chunk_id": "1fc7a0d9-d6dc-41c7-b660-6d700a3ebf50",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public either through the `updateBucket()` method or the Supabase dashboard. No special permissions are required for the `buckets` or `objects` tables. The `get_public_url()` method can then be used to obtain the public URL for a specific file."
  },
  {
    "chunk_id": "a35a6c31-440f-4415-814b-b06cfd7fb79c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods for integrating Supabase services into Python-based applications."
  },
  {
    "chunk_id": "6868daf0-c58e-4ad5-ae3f-29f9ba1ccde9",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content summarizes how to install the Supabase-py library, which is used for interacting with the Supabase platform. The installation can be done via the terminal using the pip package manager for Python version 3.7 or later. The summary provides the exact command to install the library using pip."
  },
  {
    "chunk_id": "5acedfba-2301-4130-8239-a4fc31d601fb",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary way to interact with the Supabase ecosystem, providing access to its full functionality. To initialize a new Supabase client, the `create_client()` method is used, which requires the Supabase URL and Key obtained from the project dashboard. Optional client options can be provided to customize the authentication behavior."
  },
  {
    "chunk_id": "1a3d2605-5738-4480-86cd-eec4a25e706b",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` method can be combined with filters and modifiers to retrieve specific columns and paginate through data. The `apikey` keyword should be avoided as a column name when using the Supabase Platform."
  },
  {
    "chunk_id": "0bc1595e-3880-4909-8178-3c9e4697db65",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content summarizes the 'Insert data' functionality of the software, which allows users to insert single or multiple rows into a table. The key parameters include the data to be inserted (as a dictionary or list), optional count and return methods, and a flag to handle missing fields. The summary includes an example code snippet demonstrating the bulk insert operation."
  },
  {
    "chunk_id": "5ebb9b5e-bb77-4b88-bff4-b8c23bc187c0",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation is used to update data in a table, and should always be combined with filters to target the specific item(s) you want to update. The method takes a dictionary or list of dictionaries as the `jsonRequired` parameter to specify the new values, and an optional `countOptional` parameter to get the count of rows returned. An example is provided that updates the \"name\" column of a row in the \"countries\" table where the \"id\" column is 1."
  },
  {
    "chunk_id": "35c00856-5a07-4afe-a644-9940d8ba63cc",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The upsert functionality allows inserting or updating data in a table based on the primary keys provided. It requires including the primary keys in the `values` dict, and supports options like specifying the columns to use for UNIQUE constraints, defaulting missing fields to `null`, and controlling the response format. The example demonstrates upserting a single row into the \"countries\" table."
  },
  {
    "chunk_id": "66207af1-1aea-4a7f-8665-17163be98d80",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "To delete data, the `delete()` method should be combined with filters to target the specific items to be deleted. When using row-level security (RLS), only rows visible through `SELECT` policies are deleted, so at least one `SELECT`/`ALL` policy is required. The `delete().in_()` method allows batch deleting of multiple records that share common criteria, but the provided array must accurately represent all records to be deleted."
  },
  {
    "chunk_id": "0d0b60bd-2c6f-46d7-af0b-c4b90aabb025",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls, which allows executing database logic from anywhere. Postgres functions are useful for tasks like password resets and updates that rarely change. The documentation covers how to call Postgres functions with various parameters such as required function name, optional parameters, get, head, and count settings."
  },
  {
    "chunk_id": "de097279-1978-4854-b7bb-a54a0a06ecf4",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively retrieve, update, upsert, or delete rows from a database table based on specified conditions. Filters can be chained and used on Postgres functions that return a table response. The order of filter application affects the query results, as demonstrated in the code examples."
  },
  {
    "chunk_id": "2a04b171-5e33-4f60-b6a9-76f9ac3d8758",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided content describes how to filter a database table by matching rows where a specific column is equal to a given value. The key parameters are the column name and the value to filter by, as demonstrated in the example using the Supabase library's `eq()` method."
  },
  {
    "chunk_id": "7f852d2a-8a76-43f7-9270-6d5a7da20981",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the `neq()` method in the Supabase library to filter a table by selecting only rows where the specified column is not equal to the given value. The `neq()` method takes two parameters: the column name and the value to filter by, and can be chained with the `select()` method to execute the query."
  },
  {
    "chunk_id": "945e9d0f-a403-4eeb-b96d-33fbf54fdbbb",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where the value in a specified column is greater than a provided value. The parameters required are the column name and the value to filter by, and an example is provided using the Supabase library's `select()` method with the `gt()` (greater than) filter."
  },
  {
    "chunk_id": "dba4689a-5792-421b-b66b-cf0781f067a6",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to filter a database table using the \"greater than or equal to\" (gte) operator on the \"id\" column, where only rows with an \"id\" value greater than or equal to 2 are returned. This allows for selective retrieval of data based on a specified column value."
  },
  {
    "chunk_id": "034e2bc6-793e-4af5-954b-ce30302f89fc",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe content describes how to filter a database table by selecting only the rows where the value of a specified column is less than a given value. The key parameters are the column name and the filter value. An example is provided using the Supabase library's `lt()` method to filter the \"countries\" table by rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "66753372-f19b-48df-a540-fcf5c6e5eaa2",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided content describes a method to filter rows in a database table where a specified column has a value less than or equal to a given value. This is demonstrated using the `lte()` (less than or equal to) method in the Supabase library, which can be used in conjunction with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "b8368050-538e-499c-bdf3-fac3bb6a1a5f",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This feature allows filtering a table by checking if a column matches a specified pattern case-sensitively. It takes two required parameters: the column name and the pattern to match. This can be used, for example, to select all rows where the \"name\" column contains the string \"Alba\"."
  },
  {
    "chunk_id": "4bfde46d-eb2d-4a9d-94f5-f746071d2894",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the 'ilike()' function in Supabase, which performs a case-insensitive pattern match on a specified column. The 'ilike()' function takes two required parameters: the column name and the pattern to match. This functionality can be used in a 'select()' query to filter rows where the column value matches the specified pattern."
  },
  {
    "chunk_id": "9e7a051f-7f5e-4fcc-82a9-b15be552a1df",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" section explains how to filter a table in Supabase by checking if a column's value matches a specified value, including null, true, or false. It provides the required parameters, `column` and `value`, and an example usage of the `is_` function to check for null values in the \"name\" column."
  },
  {
    "chunk_id": "8a019621-4828-41d6-a609-90e20f73172d",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes a method to filter rows in a database table where the value in a specific column is included in a provided array of values. This can be achieved using the `in_()` method of the `select()` function, as demonstrated in the example code snippet."
  },
  {
    "chunk_id": "762ba8d2-f836-444f-8076-ac9f27a810c5",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe 'contains' operator is only applicable for columns of type jsonb, array, and range. It allows filtering rows where the specified column contains all the elements present in the provided value. The operator takes two parameters: the column name to filter on and the value (jsonb, array, or range) to match against. This can be useful for querying data with complex structures, such as checking if an issue has all the specified tags."
  },
  {
    "chunk_id": "449d76c8-bb1a-4d19-8531-90b5263e6906",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operator is used to filter rows in a database table where the values in a specific jsonb, array, or range column are contained within the provided 'value' parameter. This is useful for querying data structures like arrays or JSON objects, allowing you to find rows where the elements in the column are a subset of the given value."
  },
  {
    "chunk_id": "f38211e2-e024-4870-ae43-d01bb435a83e",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the specified column must be greater than any element in the provided range. This is achieved by using the `range_gt()` method, which takes the column name and the range as parameters. The example demonstrates how to use this feature in a `select()` query on the \"reservations\" table."
  },
  {
    "chunk_id": "d0b82195-3d12-4f08-85ed-9c2f98c88b12",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature in the documentation is used to filter rows in a range column where each element is either contained within the specified range or greater than any element in the range. The parameters include the column name and the range to filter with. This can be used in the `select()` method, as shown in the example, to filter a \"reservations\" table based on the \"during\" column and a range of dates."
  },
  {
    "chunk_id": "9830ffe6-21dd-4105-aa97-1e4aff39f566",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns, matching only rows where every element in the specified column is less than any element in the provided range. It takes two required parameters: the column to filter on and the range to filter with. This filter can be used with the `select()` method, as shown in the example."
  },
  {
    "chunk_id": "3af86492-d71f-4db9-bb68-d09dac8e3559",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns in Supabase, allowing you to match rows where every element in the specified column is less than any element in the provided range. The filter requires two parameters: the column to filter on and the range to filter with. This can be useful for querying data based on time ranges or other comparable values."
  },
  {
    "chunk_id": "9914b5e9-8580-4cf0-93fd-22f877710439",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Mutually exclusive to a range\" filter is used for range columns, where it matches rows where the column value is mutually exclusive to the specified range, with no element between the two ranges. The filter takes a column name and a range array as parameters, and can be used with the `select()` method to filter data accordingly."
  },
  {
    "chunk_id": "8af39552-9351-4ca9-b39e-c215597b9f19",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"With a common element\" filter in Supabase, which is only applicable to array and range columns. This filter matches rows where the specified column and value have at least one element in common. The summary outlines the required parameters, `column` and `value`, and provides an example usage for filtering an \"issues\" table by the \"tags\" column."
  },
  {
    "chunk_id": "ac615d3f-f1e0-409d-a5c5-f53deae4e7b7",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Match a string\" feature is used to filter rows in text or tsvector columns based on a provided query string. It supports basic and full normalization as well as websearch options, allowing for advanced text search functionality in a PostgreSQL database. This is particularly useful for implementing full-text search capabilities in applications."
  },
  {
    "chunk_id": "abde81e4-5028-43e3-9a52-53c8aa2e392c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase client library allows you to filter rows in a table where each column in the `query` object has an equal associated value. This is a shorthand way of applying multiple `.eq()` filters. The `query` parameter is an object with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "b662299c-5300-4eae-a933-94c67f8869c4",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the usage of the `not_` modifier in PostgREST filters, which allows matching rows that don't satisfy the filter conditions. Examples are provided for filtering out specific IDs and array values. The summary also includes an example of using the `not_.is_` filter with the Supabase library to select countries where the name is not null."
  },
  {
    "chunk_id": "9d4f3375-f5ea-4245-988f-9ea6ef743556",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the following key points:\n\nThe or95() function in the Supabase client library expects the use of raw PostgREST syntax for filter names and values, including the use of parentheses for 'in' filters, curly braces for array values, and 'cs' and 'cd' for 'contains()' and 'containedBy()' filters, respectively. The function also supports filtering on referenced tables by setting the 'reference95table' parameter."
  },
  {
    "chunk_id": "5bfbb740-1758-4ae9-a7f5-7a4adf11e260",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe `filter()` method in the PostgREST API expects users to use the raw PostgREST syntax for the filter values, such as using `()` for `in` filters and `\\{\\}` for array values. The `filter()` method takes three parameters: the column to filter on, the operator to filter with (following PostgREST syntax), and the value to filter with (also following PostgREST syntax). This functionality is demonstrated with examples of filtering a table of countries by name using the `in` operator."
  },
  {
    "chunk_id": "af0554f0-a786-49fb-88d5-78867bdbe763",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to transform the format of the response, such as returning a CSV string, rather than just filtering the rows. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "b82f02e4-1ddb-4d72-b47b-1d082a4311bc",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` method in the Supabase library allows ordering the query results by a specified column, with options to sort in descending order, specify a foreign table, and order nulls first. The example demonstrates ordering the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "cc732cd0-2ebd-4947-8a82-90f9b7e305bd",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to limit the number of rows returned by a Supabase query. The `limit()` parameter specifies the maximum number of rows to return, and the `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. An example is provided showing how to limit the results to 1 row when selecting from the \"countries\" table."
  },
  {
    "chunk_id": "d7d83e49-a71b-41de-bf49-a077537e3d78",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function allows limiting the query result by specifying a starting offset (`from`) and an ending offset (`from + to`). This ensures that only records within the specified range are returned, while respecting the query order. The `from` and `to` parameters are 0-based and inclusive, meaning `range(1, 3)` will return the second, third, and fourth rows of the query. An optional `foreign_table` parameter can be used to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "950b4604-c7aa-43e0-a215-5653a05a708d",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of how to retrieve a single row of data using the Supabase library's `select()` method with the `limit(1)` and `single()` parameters. This allows the data to be returned as a single object instead of an array, which can be useful in certain scenarios where only one row of data is needed."
  },
  {
    "chunk_id": "008f181a-32b1-4a27-951b-428cd3b7d035",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve zero or one row of data using the Supabase library's `select()` method with the `maybe_single()` function. This allows the function to return a single object instead of an array of objects, which is useful when you expect to retrieve at most one row of data, such as when querying for a specific record by a unique identifier."
  },
  {
    "chunk_id": "015b2a03-1912-435f-a068-8ab4ecd48fca",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes the \"Retrieve as a CSV\" functionality, which allows returning data from a Supabase table as a comma-separated value (CSV) string. This is useful for exporting data in a format that can be easily imported into spreadsheet applications or other tools that work with tabular data."
  },
  {
    "chunk_id": "c2d74eeb-6343-48a5-9519-767bb94e0a61",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and execution time. It can be useful for debugging slow queries, but should be used cautiously as it can reveal sensitive database information. The method supports various parameters to control the level of detail in the output, which can be returned in either text or JSON format."
  },
  {
    "chunk_id": "f8f93def-8f01-493c-a0c4-9c4784f925d5",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The key points from the documentation are:\n\n1. By default, users need to verify their email address before logging in, but this can be turned off by disabling the \"Confirm email\" setting in the project dashboard.\n2. When \"Confirm email\" is enabled, a user is returned but the session is null, while with it disabled, both a user and a session are returned. \n3. The user's email confirmation redirect URL can be modified in the project dashboard, and signing up an existing confirmed user will return an obfuscated user object or an error message depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "0f9d4ce4-7019-41da-8a6e-bcbd902e1e08",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe function `supabase.auth.sign_in_anonymously()` returns an anonymous user. It is recommended to set up a captcha to prevent abuse, which can be passed in the `options` parameter. The function creates an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "04881512-8486-4c35-a9d7-b99887eb76b7",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user with either an email and password or a phone number and password. It provides a code example for signing in with email and password using the Supabase authentication API, and lists the required input parameters for the sign-in operation."
  },
  {
    "chunk_id": "52edcf59-366f-42c8-a260-68ad6d0737c3",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes a method for signing in with an OIDC ID token. It outlines the necessary parameters for the `sign_in_with_id_token()` function, which takes a provider and the ID token as inputs. This functionality allows users to authenticate with the application using their existing OIDC identity provider, simplifying the sign-in process."
  },
  {
    "chunk_id": "5475b901-0c9f-4a67-80b6-8b3eb5799adf",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP feature allows users to sign in without a password, by sending a one-time code to their email or phone number. It can be used for both new user sign-ups and existing user sign-ins. Developers can configure the OTP delivery method (email or SMS) and whether to allow new user creation. The magic link or OTP is sent to a URL specified by the `SITE_URL` configuration, which can be customized with additional redirect URLs."
  },
  {
    "chunk_id": "d565ffcb-5199-4d6e-ba24-e8a8cb814272",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user using OAuth, a third-party authentication protocol supported by Supabase. It includes details on the `sign_in_with_oauth()` method and its parameters, which allow developers to authenticate users through various third-party providers such as GitHub. This functionality is crucial for integrating Supabase authentication into applications that leverage existing user accounts."
  },
  {
    "chunk_id": "ad968135-78b9-4208-8aa1-475c44c7d0da",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then initiate the sign-in flow by providing either the user's email domain or a specific provider ID, which allows more advanced use cases like mapping email addresses to identity providers or using different authentication hints."
  },
  {
    "chunk_id": "50657ca8-1ba0-4746-8f2a-f841381bb9a8",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. While this revokes the refresh token and removes the JWT from the client-side, the access token JWT remains valid until it expires, as Supabase Auth uses JWTs for authentication. By default, `sign_out()` signs out the user from all other sessions as well."
  },
  {
    "chunk_id": "4373a16f-530f-459c-a980-905c1a53c540",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, including SMS, email, and password changes. The verification type used should match the corresponding auth method called previously to sign up or sign in a user. The `TokenHash` contained in email templates can be used to sign in users via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "b1044f1a-5ebb-45f9-a3c0-20fc00d5ed4c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "5b667474-df44-4c9a-8574-783201526815",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that the session is refreshed, whether the current one is expired or not."
  },
  {
    "chunk_id": "23a94286-d9d2-42e1-b85d-49de4cb93df1",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method fetches the user object from the database instead of the local session, and is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to either get the logged-in user with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "b109bdb0-ab27-46e9-8b4d-f09bb2f14d88",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe `set_session()` method sets the session data using an `access_token` and `refresh_token`. If the current session is expired or the tokens are invalid, it will refresh the session to obtain new tokens. Upon successful execution, a `SIGNED_IN` event is emitted. This method is used to maintain a valid session for the user, ensuring they can continue interacting with the application without repeatedly authenticating."
  },
  {
    "chunk_id": "2a0bf262-4974-48af-aad6-4fe7d9989b97",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section on Auth MFA covers the methods used for Multi-Factor Authentication (MFA) in the Supabase platform. It currently supports time-based one-time password (TOTP) as the second factor, allowing users to enroll multiple TOTP factors for recovery, up to a limit of 10. This approach reduces the burden of managing recovery codes and minimizes the attack surface compared to single backup TOTP factors."
  },
  {
    "chunk_id": "c8788d4b-55bf-48a7-b1d8-50e556342719",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase Python client. The `mfa.enroll()` method is used to enroll a TOTP factor, returning an ID that can be used to create and verify MFA challenges. The documentation also provides links to other relevant methods for creating, verifying, and combining challenge and verification steps."
  },
  {
    "chunk_id": "df14651a-625b-44bc-9030-1188c9a295ef",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create an MFA challenge, an enrolled factor is required. The `mfa.challenge()` method is used to create a challenge, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "19605f64-edda-4dd9-b04f-a588d4762ea6",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. The `supabase.auth.mfa.verify()` function is then used to verify a challenge by providing the `factor_id`, `challenge_id`, and `code` as parameters."
  },
  {
    "chunk_id": "dd039888-123f-4919-9156-318a2cd85f20",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify an MFA factor by providing the factor ID and a one-time code."
  },
  {
    "chunk_id": "21eb8241-4ded-4326-8941-083f2a397a27",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to unenroll a specific authentication factor by passing the `factor_id` as a parameter to the `supabase.auth.mfa.unenroll()` function. This functionality is important for managing multi-factor authentication (MFA) settings and allowing users to remove an enrolled factor."
  },
  {
    "chunk_id": "1d4e39ac-5aff-464c-92ff-bdcf6ac3b975",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) in Supabase is a measure of the strength of an authentication mechanism. An AAL of `aal1` refers to the first factor of authentication, such as email and password or OAuth sign-in, while `aal2` refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, with `aal2` returned if the user has a verified factor, and `aal1` returned otherwise."
  },
  {
    "chunk_id": "c1d7433a-4f7c-4263-93fa-f0e1c7e0798a",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Functions can be invoked using the `supabase.functions.invoke()` method, which requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type, but this can be overridden by passing a custom Content-Type header. The method also includes support for error handling and passing custom headers."
  },
  {
    "chunk_id": "201ec44a-2ce8-4198-bd73-f7bfbc2fee61",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The provided content discusses subscribing to a Supabase Realtime channel. By default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled due to performance and security concerns. Developers can enable full replica identity to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The code example demonstrates subscribing to a channel, sending a broadcast message, and handling the received broadcast payload."
  },
  {
    "chunk_id": "556af325-ac20-4e30-90b0-942a130843c3",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and the database. Supabase automatically handles cleanup 30 seconds after a client is disconnected, but unused channels can degrade performance as more clients are subscribed. The provided code example demonstrates how to remove a channel using the `supabase.remove_channel()` function."
  },
  {
    "chunk_id": "e10ca119-a15c-4fb1-9682-848017ae98e9",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain Realtime service performance and database efficiency, as unused channels can degrade performance with more clients subscribed. The Supabase `remove_all_channels()` function can be used to remove all subscribed channels, which will automatically handle cleanup 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "812e4d8f-4afb-4836-93d5-ca2927e239fb",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is:\n\nThe code snippet `supabase.get_channels()` retrieves all available channels from the Supabase database. This functionality allows users to access and manage the complete list of channels programmatically, which is a common requirement in many applications that involve channel-based content or functionality."
  },
  {
    "chunk_id": "300a237b-4ef4-453e-b1df-1d0232eeb286",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. It provides an example of sending a 'cursor-pos' message with random x and y coordinates to the 'room1' channel, by subscribing to the channel and sending the broadcast message when the subscription is successful."
  },
  {
    "chunk_id": "64dce1b0-4900-437a-a5b6-93aadffd8133",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a new bucket, the user requires the `insert` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for details on access control. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "bfa35e76-bcfb-4e01-88b0-1f1ca8b00e8a",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more information on how access control works. The code to get a bucket is `_10 res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "6389ac9f-e662-4897-a427-876ce4fd249c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "6b0e0666-5e8e-4d2a-ab99-6e9769870680",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, while no permissions are needed on the `objects` table. Refer to the Storage guide for more details on access control. The deletion can be performed using the `supabase.storage.delete_bucket(name)` function."
  },
  {
    "chunk_id": "be345c20-e621-4fcf-a6bf-dc60c8cb2d1f",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. The Supabase Storage guide provides more information on how access control works for storage operations."
  },
  {
    "chunk_id": "f4aa63e5-8021-430a-baf7-ad7d565dda3c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The MIME type of the file should be specified, with the default being `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` function, passing the file object, the desired storage path, and the file options including the content type."
  },
  {
    "chunk_id": "0679c259-ed96-4df6-bc29-8b286777ec89",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires `select` permissions on the `objects` table in the RLS policy. The file can be downloaded using the `supabase.storage.from_('bucket_name').download(source)` function, which writes the downloaded content to the specified destination file."
  },
  {
    "chunk_id": "0a3e2201-7eba-4eb2-9704-c270e86cc00d",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, you need the `select` permission on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files. Refer to the Supabase storage access control guide for more information on setting up the required permissions."
  },
  {
    "chunk_id": "f5adb8a5-7c78-48ca-a4d3-34ad9d5a3762",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires 'update' and 'select' permissions on the 'objects' table. The file can be updated using the 'supabase.storage.from_(\"bucket_name\").update()' method, which takes the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "7afa0f71-e7bc-4edf-b4c0-3fc2def44629",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The move operation is performed using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` method. Refer to the Supabase Storage guide for details on access control and permissions."
  },
  {
    "chunk_id": "6ab0ea75-56bc-4e83-881e-d7960d6217fb",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the `delete` and `select` permissions are required on the `objects` table. The `remove()` method is used to delete a file from the specified bucket, e.g., `supabase.storage.from_('bucket_name').remove('test.jpg')`."
  },
  {
    "chunk_id": "ef64d1dd-055b-41a7-b650-6150c905165b",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required permissions are `select` on the `objects` table, but no permissions are needed on the `buckets` table. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method generates a signed URL that allows time-limited access to the specified object in the storage bucket."
  },
  {
    "chunk_id": "a1de9548-aefd-4be3-8e8a-0ccab3db9a4b",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must first be set to public. No specific permissions are required for the `buckets` or `objects` tables. The public URL can be obtained using the `get_public_url()` method of the `supabase.storage.from_()` object, passing the file path as an argument."
  }
]