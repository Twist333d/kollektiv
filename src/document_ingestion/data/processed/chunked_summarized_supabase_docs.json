[
  {
    "chunk_id": "89c2a8ee-b202-4ac9-94ca-eb2e48832f0c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python client library, supabase-py, provides a comprehensive set of functionalities to interact with a Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. This library serves as a powerful tool for developers to efficiently interact with their Supabase backend from a Python environment."
  },
  {
    "chunk_id": "e0135601-17e2-4144-9060-ecb6dc5600ad",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content summarizes how to install the Supabase Python library, which is compatible with Python 3.7 and above. The installation can be done using pip, the standard Python package installer, or through Conda, a popular package management system for Python."
  },
  {
    "chunk_id": "c263d688-8138-46fd-acab-461f29ef6300",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary entry point to the Supabase ecosystem, providing access to its functionality. It can be initialized using the `create_client()` method, which requires the Supabase URL and Key obtained from the project dashboard. Optional client options can be provided to customize the authentication behavior."
  },
  {
    "chunk_id": "43d550a6-20da-4101-b61d-d62f3ca1d1c4",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nSupabase projects default to a maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` keyword should be avoided as a column name when using the Supabase Platform. The `select()` function supports parameters for specifying columns to retrieve and the count method to use."
  },
  {
    "chunk_id": "b3d68c69-b393-4252-8134-db364bf3ed2f",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe \"Insert data\" section describes the parameters for the `insert()` method in the Supabase API, which allows you to insert single or multiple rows of data into a table. The key parameters are `jsonRequired` (the data to insert), `countOptional` (the property to use for row count), `returningOptional` (the response format), and `default95to95nullOptional` (whether to use null or default values for missing fields in bulk inserts). An example is provided demonstrating how to use the `insert()` method to create a new record in the \"countries\" table."
  },
  {
    "chunk_id": "807c4998-19de-4f20-88fa-a7432256a28f",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation is used to update data in a database table. It should always be combined with filters to target the specific item(s) to be updated. The method takes a dictionary or list of dictionaries as the `jsonRequired` parameter to specify the new values, and an optional `countOptionalCountMethod` parameter to get the count of rows returned."
  },
  {
    "chunk_id": "4d37a3e4-b183-433a-a4a9-e5b5595a07a9",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content on \"Upsert data\" is as follows:\n\nThe upsert operation in this software documentation allows for inserting or updating data in a table. Primary keys must be included in the `values` dict to use upsert. The operation supports various parameters such as `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null` to customize the behavior. Example code demonstrates how to perform a bulk upsert operation on a \"countries\" table."
  },
  {
    "chunk_id": "817169c8-80a3-47d3-a5f4-2ca66a209a4a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` function in Supabase should always be combined with filters to target the specific items to be deleted. When using `delete()` with filters and Row Level Security (RLS) is enabled, only rows visible through SELECT policies are deleted. The `delete().in_()` method can be used to batch delete multiple records that share common criteria, but the provided array must accurately represent all records to be deleted."
  },
  {
    "chunk_id": "bdfb2e5d-36b8-46f9-88a7-6d29e1191052",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to call Postgres functions as Remote Procedure Calls, which allow executing logic stored in the database from anywhere. It covers the different parameters that can be used, such as `fn`, `params`, `get`, `head`, and `count`, which enable features like passing arguments, bulk processing, filtering, and read-only access. The summary includes sample code demonstrating how to call a simple \"Hello World\" function."
  },
  {
    "chunk_id": "87f34412-b611-43b2-a033-9596a473b0ca",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specific conditions in Supabase queries, including `select()`, `update()`, `upsert()`, and `delete()`. They can also be applied to Postgres functions that return a table response. Filters can be chained together, and you can filter by values within JSON columns or on foreign tables."
  },
  {
    "chunk_id": "f5dee7c1-9b00-4f44-aa78-9ff01834d92a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe documentation describes how to filter a database table by a specific column value using the `eq()` method in the `select()` function. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to match. This functionality is demonstrated with an example query that retrieves rows from the \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "a7ad4af7-0316-4cc9-abfa-1259ae074521",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation section describes the 'neq' (not equal) filter in the Supabase database library, which allows developers to match rows where a specified column is not equal to a given value. The key parameters are the column name and the value to filter by, and an example is provided showing how to use this filter with the 'select()' method."
  },
  {
    "chunk_id": "807192df-9315-4fb1-9375-4199b68b897c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column is greater than a value\" feature allows filtering rows where a specified column has a value greater than the provided value. The key parameters are the column name and the comparison value. This functionality can be used with the `select()` method, as shown in the example, to retrieve data that matches the given criteria."
  },
  {
    "chunk_id": "18e0bedb-2aa9-4058-9b4f-25f5fd2c8354",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provided allows you to filter a table by a column where the values are greater than or equal to a specified value. The column to filter on and the value to filter by are the required parameters. This can be used in a `select()` operation, as shown in the example."
  },
  {
    "chunk_id": "49d07aa4-0733-4186-b6e0-eeb55fae3309",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table by a column value being less than a specified value. The `lt()` method is used to apply this filter, taking the column name and the value to compare against as parameters. This functionality can be used with the `select()` method to retrieve only the rows matching the specified condition."
  },
  {
    "chunk_id": "e9f1c499-4c48-40c9-8ef9-542ca5f157ec",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This chunk describes how to filter a database table to only include rows where the value in a specified column is less than or equal to a given value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `lte()` (less than or equal to) method."
  },
  {
    "chunk_id": "11e92e56-9e2f-45fc-bc46-c49b1035db8d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a filter operation that matches rows in a database table where a specified column matches a given pattern case-sensitively. The key parameters are the column name and the pattern to match. This functionality can be used in a `select()` operation to retrieve rows that satisfy the specified criteria."
  },
  {
    "chunk_id": "66bedb7d-bba1-4d99-bfaa-62b78addf7ab",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes a function that filters rows in a database table where a given column matches a case-insensitive pattern. The function takes two required parameters: the name of the column to filter and the pattern to match. This feature can be used in SQL queries to select only the rows that satisfy the specified case-insensitive pattern matching criteria."
  },
  {
    "chunk_id": "a773c9cd-903d-446d-b4d4-b80b1cb60be2",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' feature allows filtering rows based on the value of a specific column, including checking for null values, true, or false. The parameters include the column name and the value to match against, enabling precise data filtering and retrieval."
  },
  {
    "chunk_id": "20a8dfac-46c6-4dc9-a2f6-f6b7c8189d8f",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis section explains how to filter rows in a database table where a specified column contains any of the values in a provided array. The `in_()` method in the Supabase query builder is used to perform this filtering operation, allowing efficient retrieval of data matching the specified criteria."
  },
  {
    "chunk_id": "56672cb3-4d18-44e8-9509-bb63e69cce2a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" filter is applicable to jsonb, array, and range columns. It matches rows where the specified column contains every element in the provided value. The filter takes two parameters: the column to filter on and the value to filter with, which must be a jsonb, array, or range type."
  },
  {
    "chunk_id": "5fc35aa4-7cd2-419f-ae44-fd31a4748209",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Contained by value operation is only applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The parameters for this operation are the column to filter on and the value to filter with. Examples are provided for using this operation with array, range, and jsonb columns."
  },
  {
    "chunk_id": "33a85325-9837-44f9-a68a-458ad3b3dfcb",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" functionality is only applicable to range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The required parameters are the column name and the range to filter with."
  },
  {
    "chunk_id": "eb28d98a-bb8f-422c-99a1-c044999aeb2e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" filter is used with range columns to match rows where each element in the column is either contained in the specified range or greater than any element in the range. The filter is configured with the column name and the range to filter, and can be used in a Supabase query to select data that meets these criteria."
  },
  {
    "chunk_id": "491ff562-3eab-474a-801f-ffa32db77a07",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than a range' filter is used for range columns to match only rows where every element in the specified column is less than any element in the provided range. The filter is configured with a required column name and a required array of range values. This can be used in a Supabase query to filter the data, as shown in the example."
  },
  {
    "chunk_id": "a243e9cf-dfd7-4376-a6d5-26446bc4adfe",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns in Supabase. It allows you to match rows where every element in the specified column is less than or equal to any element in the provided range. The filter takes two parameters: the column name and the range to filter with, which is provided as an array."
  },
  {
    "chunk_id": "cea8adb5-7e15-4861-9fe9-961314ebc246",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature applies to range columns, allowing you to filter rows where the column value is mutually exclusive to the specified range and there can be no element between the two ranges. The key parameters are the column name and the range to filter with, which can be used in the .range_adjacent() method of the Supabase client to retrieve the relevant data."
  },
  {
    "chunk_id": "f95b03d7-3a9b-478d-b147-2117719b8827",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"With a common element\" filter is only applicable to array and range columns. It matches rows where the column value and the provided value have at least one element in common. The required parameters are the column name and the value to filter with, which can be an array or range."
  },
  {
    "chunk_id": "0666dabf-dd6f-4354-9dba-b0a6a94bb240",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe \"Match a string\" feature is used to filter text or tsvector columns in a database table by matching a given query string. It provides options for basic and full text normalization, as well as websearch mode. This is particularly useful for implementing Postgres full text search functionality in an application."
  },
  {
    "chunk_id": "f6e05ba8-7ee8-4c30-bbac-458f853d75e7",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows you to filter a table by matching the values in the `query` object to the corresponding column values in the table. This is a convenient shorthand for chaining multiple `.eq()` calls. The `query` parameter is an object with column names as keys and their associated filter values."
  },
  {
    "chunk_id": "5d9f8d6e-272f-4336-bd90-0b53bdc90ad2",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to use the `not_` operator in PostgREST filters to match only rows that do not satisfy the given filter criteria. Examples are provided for using `not_.in_()` to filter rows not in a specified list of IDs, and `not_.contains()` to filter rows where an array column does not contain specific values. The summary also includes an example of using `not_.is_()` with the `select()` method to retrieve rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "f863bf54-f8dc-439b-9e0e-567b43c6ea71",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nor95() function in Supabase allows matching at least one filter using the raw PostgREST syntax. Filters can be specified using the or_() method, with support for in(), contains(), and containedBy() operations. The filtersRequired parameter accepts the filter string, and the reference95table parameter can be used to filter on referenced tables."
  },
  {
    "chunk_id": "4b27bb32-5007-4e87-b87e-2eb88193a6cd",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'filter()' method in the provided code examples allows for applying various filters to a database table, using the PostgREST syntax. The filter can be applied on a specific column, using operators like 'in' and 'cs' (contains) for filtering values or array elements. The 'select()' method can be used in conjunction with 'filter()' to retrieve data from the database table based on the specified criteria."
  },
  {
    "chunk_id": "8234fde4-1ead-41e0-90c9-cc8efce6da24",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, in contrast to filters which operate at the row level. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "6f4b4562-e1f6-4138-99ea-2c53bbcb969b",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'order()' function in the Supabase library allows you to order the results of a database query by a specified column. The function takes in parameters such as the column name, whether to sort in descending order, and whether to show nulls first. This functionality is useful for presenting data in a specific order based on user preferences or application requirements."
  },
  {
    "chunk_id": "fe1727ba-138d-4c83-aca0-4e5bb4f0c8fd",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `select()` method in Supabase allows you to limit the number of rows returned from a table by specifying the `limit()` parameter, which takes the maximum number of rows to return. Additionally, you can set the `foreign95table` parameter to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "0c0adff1-34da-4576-8161-e4ca1230da6b",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function in the query allows limiting the result to a specific range of records, specified by a starting index (`from`) and an ending index (`to`). This can be useful for paginating large result sets. The range is inclusive, so `range(1, 3)` will return the second, third, and fourth rows. Additionally, the `foreign_table` parameter can be used to limit the range to rows in a foreign table instead of the parent table."
  },
  {
    "chunk_id": "6619da2b-ff01-42d5-8b8e-f711f339f23b",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The code snippet demonstrates how to retrieve a single row of data from the \"countries\" table using the Supabase library's `select()` method with the `limit(1)` and `single()` modifiers. This allows returning the data as a single object rather than an array of objects, which can be useful in certain use cases."
  },
  {
    "chunk_id": "90bad0c2-4271-4efe-b218-01d2b6716f51",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe provided code demonstrates how to retrieve at most one row of data from a \"countries\" table in Supabase, filtering by the \"name\" column and using the `maybe_single()` method to return a single object instead of an array. This approach is useful when you expect at most one matching record for a given query."
  },
  {
    "chunk_id": "b96895f9-9c04-4f5b-bb6a-f4b1e12d0066",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides an overview of the 'Retrieve as a CSV' feature, which allows users to return data from a Supabase table as a CSV string. This is demonstrated with an example code snippet that selects all records from the 'countries' table and returns the response as a CSV format. The summary covers the key technical details and functionality of this feature, making it a valuable resource for users in a search pipeline."
  },
  {
    "chunk_id": "ad3dc6c2-4868-49e8-8ee2-5b2e2f90e7c5",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. While enabled by default for testing, it should be used cautiously in production environments due to potential security implications. The `explain()` method can be configured with various parameters to control the output format and level of detail."
  },
  {
    "chunk_id": "95d9dd12-b7bd-4190-a93f-8fedffccac2c",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nTo create a new user, the \"Confirm email\" setting in the Supabase project determines whether a user needs to verify their email address before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. If it is enabled, only a user is returned, and the user must confirm their email before they can log in. The default redirect URL after email confirmation can be modified in the Supabase project settings."
  },
  {
    "chunk_id": "4835fd4b-9109-47ff-9364-005e3722ed12",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe Supabase API provides a function to create an anonymous user, which is recommended to be used with a captcha token to prevent abuse. The anonymous user can be created with custom user metadata, and the function returns the user credentials."
  },
  {
    "chunk_id": "1b8aa860-0e63-47e8-aa9a-2ab446a494d6",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes the process of signing in an existing user using either an email and password or a phone number and password. The key technical aspects include the required `credentialsRequiredSignInWithPasswordCredentials` parameter and an example of the sign-in API call using the Supabase library."
  },
  {
    "chunk_id": "e99b5469-8b35-4743-8b38-39c675b92bcb",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in using an OIDC ID token. It provides an example of the `supabase.auth.sign_in_with_id_token()` function, which takes a `provider` and `token` parameter to authenticate the user. The ID token-based authentication requires the authentication provider to be enabled and configured in the application."
  },
  {
    "chunk_id": "c4fd74aa-057f-4cd5-9cdf-3d169d25f839",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP feature allows passwordless sign-in using an email or phone number. It supports both magic links and one-time codes, and can automatically create new user accounts if needed. Developers can configure the OTP delivery method and redirect URLs, and modify the email template to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "3835fc64-1719-403d-9733-c4fcc7b5a2db",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It provides the necessary parameters and an example code snippet to sign in using a third-party provider like GitHub. This functionality allows users to authenticate with Supabase using their existing accounts from various platforms, simplifying the sign-in process."
  },
  {
    "chunk_id": "01baba51-16dc-4f83-95f8-d9591c72db54",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, users must first establish a connection to an identity provider using the provided CLI commands. The `domain` property can be used to start the sign-in flow if an email domain is associated with the identity provider, or the `provider_id` property can be used to specify a different way to initiate the authentication flow, such as mapping specific user email addresses or using other identifying information. The `sign_in_with_sso()` method is used to sign in the user via SSO."
  },
  {
    "chunk_id": "04901dd1-3faf-4c98-81bf-719b0999278d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is already signed in. This revokes the refresh token and deletes the JWT from the client-side, effectively logging the user out of all their active sessions. However, the access token JWT remains valid until it expires, as Supabase Auth uses JWTs for authentication."
  },
  {
    "chunk_id": "99fa90a3-5636-42cd-8e6e-1301ca430e58",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and account changes. The verification type should match the corresponding auth method used before `verify_otp`. The `TokenHash` contained in email templates can be used for server-side auth with the PKCE flow. The method takes in parameters like the email, token, and type to perform the OTP verification."
  },
  {
    "chunk_id": "929c573a-591b-40a3-bd09-1592c6f6008a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with. If you need trustworthy user data, use the `get_user()` method instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "fc56b8cd-e6e7-48f7-8064-c397ec7731a7",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the current session. If the refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it's expired or not."
  },
  {
    "chunk_id": "b9f0d80a-69cc-4824-9ac8-bf4a8757925b",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` fetches the user object from the database instead of the local session. This is useful for checking if the user is authorized, as it validates the user's access token JWT on the server. The method can optionally take in an access token JWT, otherwise it uses the JWT from the current session."
  },
  {
    "chunk_id": "8f0d2e98-a9bb-4a04-8fa4-c599cfae4431",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided code snippet sets the session data from the current session, refreshing it if necessary. It takes an `access_token` and `refresh_token` as parameters and emits a `SIGNED_IN` event if the operation is successful. This functionality is critical for maintaining user sessions and handling token expiration in the application."
  },
  {
    "chunk_id": "3bb86d00-dca4-4530-95de-31b851e9929a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Auth MFA (Multi-Factor Authentication) functionality provided by Supabase. It currently supports time-based one-time password (TOTP) as the second authentication factor, allowing users to enroll multiple TOTP factors for recovery purposes. This reduces the burden of managing recovery codes and decreases the attack surface compared to having a single backup TOTP factor."
  },
  {
    "chunk_id": "220fe70e-3589-44fc-93e4-1e57aec9f66d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor as the only supported `factor_type`. The returned `id` can be used to create and verify a challenge using the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions, respectively."
  },
  {
    "chunk_id": "4907d855-0a49-42e8-a9c0-36f2a28116a2",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which is demonstrated in the example code."
  },
  {
    "chunk_id": "a72bfdf2-4c06-4219-9bdd-b8bd1c26b481",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. The `supabase.auth.mfa.verify()` function can then be used to verify a challenge by providing the `factor_id`, `challenge_id`, and `code` parameters."
  },
  {
    "chunk_id": "7b387d90-0af1-4e03-bdf2-01523a7c07d1",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking a factor ID and a verification code as input."
  },
  {
    "chunk_id": "91bee475-2d21-496a-ad0e-fea571811856",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, you can use the `supabase.auth.mfa.unenroll()` function, passing the `factor_id` of the factor you want to unenroll. This allows you to remove a specific multi-factor authentication factor from a user's account, which can be useful for managing access and security."
  },
  {
    "chunk_id": "4f7e2d88-2f38-4fc3-84bb-2636b9056afc",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field in the API response indicates the higher level of authentication the user can achieve if they have a verified factor."
  },
  {
    "chunk_id": "81fef07f-96fb-40fa-8ed9-f5d002178059",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by sending an HTTP request with an Authorization header. The function can accept a request body, which is automatically serialized based on the data type (e.g., Blob, ArrayBuffer, File, FormData, String). Developers can also override the default Content-Type header by providing their own. The summary includes an example of invoking a \"hello-world\" function with a custom request body."
  },
  {
    "chunk_id": "923976da-be5f-44aa-8b61-d22ee5749476",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary for the given content is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Users can set the table's REPLICA IDENTITY to FULL to receive previous data for updates and deletes, and use Supabase's Realtime API to listen to various database events, such as broadcasts, presence changes, and row-level changes, which can be useful for features like real-time collaboration."
  },
  {
    "chunk_id": "03345413-a307-42d7-8ac2-859bab3afa02",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel is recommended to maintain the performance of the Realtime service and the database by removing unused channels. The `supabase.remove_channel(myChannel)` function is used to remove a channel, which Supabase will automatically clean up 30 seconds after a client is disconnected to prevent degradation from excessive simultaneous subscriptions."
  },
  {
    "chunk_id": "e32aeb7a-5294-4380-80d7-7d62407198c5",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database by reducing the number of simultaneously subscribed clients. The `supabase.remove_all_channels()` function can be used to remove all channels, which Supabase will automatically clean up 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "564efa18-b496-4c6d-963e-66362115b49a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The `get_channels()` method retrieves all available channels from the Supabase platform. This is a common operation in many applications that need to display or manage a list of communication channels for users."
  },
  {
    "chunk_id": "30b4b653-8f61-42d9-b9a1-57862772b98e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It provides an example of subscribing to a channel, and then broadcasting a message containing random x and y coordinates to all clients in that channel."
  },
  {
    "chunk_id": "8512b7b0-3c49-4d94-b07b-3dd8228b1781",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the user requires the `insert` permission on the `buckets` table, but no permissions are needed on the `objects` table. Refer to the Storage guide for details on how access control works. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "7e83d24c-a92b-4dfb-bbd7-2ba71d551ceb",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for detailed information on access control."
  },
  {
    "chunk_id": "09ffbea5-781d-487c-b72d-9ee15a40f1d1",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the `buckets` table requires `select` permissions, but no permissions are needed for the `objects` table. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "6964bd1a-bfa9-45c5-a4bb-3433e326b4a5",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the required RLS policy permissions are `select` and `delete` on the `buckets` table, with no permissions required on the `objects` table. Refer to the Supabase Storage guide for details on access control. The code to delete a bucket is `_10 res = supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "87b2fba5-b1bf-4656-a301-f374ecbb7b44",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. The Storage guide provides further details on how access control works for this operation."
  },
  {
    "chunk_id": "bdf1536f-30f2-432d-b61e-6b4ca57c41ff",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the required RLS policy permissions are `insert` on the `objects` table. The appropriate MIME type should be specified, especially for images or audio, and if not provided, the default is `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` function, passing the file, path on Supabase storage, and optional file options such as the content type."
  },
  {
    "chunk_id": "94daca34-512d-4eb1-926a-8a1b868cb07a",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the `objects` table permissions require `select` access. The code snippet demonstrates how to download a file from a specified bucket using the Supabase storage client and write the downloaded content to a local file."
  },
  {
    "chunk_id": "6e872527-69b1-4695-8e0e-0073a42c43fd",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The code to list files in a bucket is `supabase.storage.from_('bucket_name').list()`. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "88e43eb3-83b8-4db0-9ed1-b9bc6951741e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated by opening the local file, and then using the Supabase storage client to update the file on the remote storage, specifying the bucket name, file path, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "6cd266d4-5a52-43af-8ceb-ec3ad377b78e",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires `update` and `select` permissions on the `objects` table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` command. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "1e41b072-e093-42d1-8933-e507148f19e2",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the required permissions are `delete` and `select` on the `objects` table, while no permissions are needed on the `buckets` table. The storage guide provides details on how access control works for these operations."
  },
  {
    "chunk_id": "50df9c50-5895-41e4-b1f9-329ce1a23c8d",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required RLS policy permissions are 'select' on the 'objects' table. The `create_signed_url()` function is used, which takes the file path and expiry duration as arguments, and returns a signed URL that can be used to access the file."
  },
  {
    "chunk_id": "43160ba8-9872-4ad3-a17d-e764ba3acefc",
    "source_url": "https://supabase.com/docs/reference/python/initializing",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must be set to public either via the `updateBucket()` API or through the Supabase dashboard. The required permissions are `none` for both the `buckets` and `objects` tables. The public URL can be obtained using the `get_public_url()` method of the storage client."
  },
  {
    "chunk_id": "3043a67c-dd04-4a07-85e0-a4aff2d4816d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive interface for interacting with Supabase's services. It enables developers to query their Postgres database, listen to database changes, invoke Deno Edge Functions, implement login and user management, and manage large files, all within a Python-based environment."
  },
  {
    "chunk_id": "49d7272e-4261-40dc-9a54-c6c599afb394",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation provides instructions for installing the Supabase Python library (supabase-py) using the PyPI package manager. It specifies that the library is compatible with Python 3.7 and above, and provides the exact command to install it via the terminal or Conda package manager."
  },
  {
    "chunk_id": "caf30149-b323-4601-bd30-79d52bef9a06",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters. Additionally, optional client options can be provided to customize the authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the starting point for developers working with the Supabase platform."
  },
  {
    "chunk_id": "6bd59520-2aea-4fe0-989c-b176e779a491",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content discusses the Fetch data functionality in Supabase, which has a default limit of 1,000 rows that can be adjusted in the project's API settings. It highlights the use of the `select()` function, which can be combined with Filters and Modifiers to retrieve and manipulate data. Additionally, it mentions the `apikey` keyword as a reserved keyword that should be avoided as a column name when using the Supabase Platform."
  },
  {
    "chunk_id": "42b7d039-3b46-46f3-8e97-1440e38c1f1d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Insert data\" section describes the parameters and usage of the `insert()` method in the Supabase library. It allows inserting single or multiple rows into a table, with options to control the response format and handle missing fields. The example demonstrates how to use the `insert()` method to create a new record in the \"countries\" table."
  },
  {
    "chunk_id": "bfd32cd5-d86a-4462-a7c7-85410a30850b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase API should always be used in conjunction with filters to target the specific item(s) to be updated. The method accepts either a dictionary for a single row update or a list for multiple row updates. Additionally, the `count` parameter can be used to retrieve the number of rows affected by the update operation."
  },
  {
    "chunk_id": "b19b713a-3502-4657-a903-7eededafccfa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the key points about the `upsert` function in the Supabase client library:\n\n1. Primary keys must be included in the `values` dict to use `upsert`.\n2. The `upsert` function supports inserting a single row or multiple rows, and provides options to control the response, handle duplicate rows, and set default values for missing fields.\n3. An example is provided to demonstrate how to use the `upsert` function to insert or update data in a \"countries\" table."
  },
  {
    "chunk_id": "57a6b8ea-e598-434e-a2f2-0abb287189fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The delete() function in Supabase should always be combined with filters to target the specific items you want to delete. When using delete() with RLS (Row Level Security) enabled, only the rows visible through SELECT policies are deleted, so you need at least one SELECT/ALL policy to make the rows visible. The delete().in_() method allows you to batch delete multiple records that share common criteria, like deleting users by their IDs."
  },
  {
    "chunk_id": "7c95114c-00e6-4113-b6ab-341ec923f3f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to call Postgres functions as Remote Procedure Calls, which allows executing database logic from anywhere. Functions are useful for operations that rarely change, such as password resets and updates. The summary covers the key parameters for the function call, including the ability to pass arguments, filter results, and execute in read-only mode. Additionally, the content demonstrates how to call a simple \"Hello World\" Postgres function using the Supabase library."
  },
  {
    "chunk_id": "ee017129-912b-44d8-9f13-84572b8f31d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other query methods is important, as demonstrated by the examples provided."
  },
  {
    "chunk_id": "10dedc27-2846-4ec5-a973-30cf82c035c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to filter a database table by a specific column value using the `eq()` method in the Supabase library. The `eq()` method takes two parameters: the column name and the value to filter by. This allows selecting only the rows where the specified column is equal to the provided value."
  },
  {
    "chunk_id": "21312d64-047c-4399-8405-2daea800479e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of the \"Column is not equal to a value\" functionality in the documentation. It states that this feature allows you to match rows where a specified column is not equal to a given value. The summary also highlights the required parameters, column and value, and provides an example usage of the `neq()` method with the `select()` function."
  },
  {
    "chunk_id": "444aadc3-0b2f-404e-8f1b-e2168c87af6d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation explains how to filter a database table by selecting rows where a specified column is greater than a given value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library's `gt()` method to select rows where the \"id\" column is greater than 2."
  },
  {
    "chunk_id": "49507f03-f5f9-45d2-a5c1-1bb87e2cc734",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe provided code snippet demonstrates how to filter a database table to include only rows where a specified column is greater than or equal to a given value. The `gte()` method is used to apply this filter, which takes the column name and the comparison value as parameters."
  },
  {
    "chunk_id": "be7639b2-3d3a-4125-aea4-5c83ec39f971",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the \"lt()\" method in the Supabase library to filter a table by selecting only rows where the specified column has a value less than the provided value. The \"columnRequired\" and \"valueRequired\" parameters are used to define the column and the value to filter by, respectively."
  },
  {
    "chunk_id": "fe6218ba-737e-49b0-aea0-95ac4d839353",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes how to filter a table by a column where the value is less than or equal to a specified value. The key parameters are 'column' (the column to filter on) and 'value' (the value to filter by). An example is provided using the Supabase library to select rows from a 'countries' table where the 'id' column is less than or equal to 2."
  },
  {
    "chunk_id": "93a28de1-8628-4768-9382-eba2c8be94ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The 'like' method in the Supabase library allows filtering a table by matching a column value to a specified pattern, case-sensitively. The 'columnRequiredstring' parameter specifies the column to filter, and the 'patternRequiredstring' parameter defines the pattern to match."
  },
  {
    "chunk_id": "bb9a1a28-2d33-4675-983d-42a8b5ee4fa9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for this section is:\n\nThe `ilike()` function in Supabase allows for case-insensitive pattern matching on a specified column. This can be used to filter rows where the column value matches the given pattern, as demonstrated in the example code snippet."
  },
  {
    "chunk_id": "9ccc1055-34af-4918-9e29-1f78ffed458b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe 'Column is a value' feature allows filtering table rows where a specific column matches a given value, including checking for null, true, or false values. The key parameters are 'column' (the name of the column to filter on) and 'value' (the value to match against), which can be null, boolean, or any other data type."
  },
  {
    "chunk_id": "8210e5e2-096f-45bf-9750-913fba59e7e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provided in the documentation describes a method to filter rows in a database table where the value in a specified column is included in a given array of values. The method is demonstrated using the Supabase library's `select()` function, which allows filtering the `countries` table by the `name` column where the value is either \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "a82b91e8-4641-49e7-bf53-c1f7a4cc0a2a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'contains' filter is applicable to columns of type jsonb, array, and range. It allows matching rows where the specified column contains all the elements present in the provided value. The filter takes two parameters: the column name and the value to filter with, which can be a jsonb object, an array, or a range."
  },
  {
    "chunk_id": "06156f7b-6db9-4c04-b29f-2b9b77359576",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operation is applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the provided value. This can be useful for querying data structures like arrays and ranges, where the user wants to find rows that match a specific set of elements."
  },
  {
    "chunk_id": "32597b53-5231-4a8f-ae8b-a3343d5d0416",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is only relevant for range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The parameters include the column name to filter on and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column is greater than the given date range."
  },
  {
    "chunk_id": "3a1c56e7-5d48-4247-a40b-8995c168cf88",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The key parameters are the \"column\" to filter on and the \"range\" to filter with. This functionality can be used with the `select()` method in the Supabase library to retrieve data that matches the specified range criteria."
  },
  {
    "chunk_id": "20f5adaa-062d-4c29-b012-f3cbbb2d0f76",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than a range' filter is used for range columns in Supabase. It matches rows where every element in the specified column is less than any element in the provided range. The filter is defined by the 'range_lt()' method, which takes the column name and an array of range values as parameters."
  },
  {
    "chunk_id": "ae880ecd-4db6-4c9b-a5f5-9a44d93a4dbf",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is used to filter range columns, matching only rows where every element in the specified column is less than or equal to any element in the provided range. The parameters include the column name and an array representing the range to filter with. This functionality is demonstrated in the example using the Supabase table \"reservations\" and the \"range_lte\" method to select rows where the \"during\" column is within the specified date range."
  },
  {
    "chunk_id": "bf1c56c7-494f-47a8-a21a-ede3f817a9b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is used for range columns, where it filters rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The key parameters are the column name and the range to filter with, which can be used in the `range_adjacent()` method of the Supabase client library."
  },
  {
    "chunk_id": "182cd729-0947-45c3-adcc-257c56e5bd0f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes a filter operation that can be applied to array and range columns in a database. The filter matches rows where the `column` and `value` parameters have an element in common. This is useful for filtering data based on array or range values, as demonstrated in the Supabase query example."
  },
  {
    "chunk_id": "09d897b9-22e1-463c-a8a1-ca477470f4cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the 'Match a string' functionality in Supabase, which allows filtering text or tsvector columns based on a provided query string. It specifies the required parameters (column and query) and optional parameters (options for text search configuration) for this operation. The example provided demonstrates how to use this functionality to filter a 'texts' table by the 'content' column using a specific text search configuration."
  },
  {
    "chunk_id": "0b76c998-4047-4921-ae50-6d3be4e47d66",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided context is used to filter a database table where each column in the `query` parameter matches its associated value. It serves as a shorthand for multiple `.eq()` calls, making the filtering process more concise. The `query` parameter is a dictionary with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "4e0a5743-2cc6-4671-b94f-ae6292f4cbc3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to use the \"not_\" modifier in PostgREST filters to match rows that don't satisfy the filter criteria. This is demonstrated with examples of filtering for IDs not in a list and for rows where an array column does not contain specific values. The summary also includes an example of using the \"not_.is_\" modifier with the Supabase library to select rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "2b827c1a-7ff5-4977-a40c-92d5c26f5e99",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Match at least one filter\" section is as follows:\n\nThe or95() method in the Supabase client library expects the use of raw PostgREST syntax for filter names and values, such as using parentheses for \"in\" filters, curly braces for array values, and \"cs\" and \"cd\" suffixes for \"contains()\" and \"containedBy()\" operations. The method allows combining multiple filters with the \"or\" operator, and can also be used to filter on referenced tables."
  },
  {
    "chunk_id": "5f368fbe-4a8f-4a58-a1c5-47a1e9115374",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the Supabase client library expects the use of raw PostgREST syntax for filter values. This includes using parentheses for `in` filters and curly braces for array values. The `filter()` method takes three parameters: the column to filter on, the operator to use, and the value to filter with. An example is provided showing how to use `filter()` on a foreign table to select rows where the name is \"Algeria\" or \"Japan\"."
  },
  {
    "chunk_id": "1ec7b3d9-c4a0-4328-ad4f-4ac4473ce47d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which work at the row level to return only matching rows. Modifiers must be specified after filters and are applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "755f9579-f507-4f68-aeed-82861478823d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order() function allows you to order the query results by a specified column. The key parameters are column (the column to order by), desc (whether to order in descending order), foreign_table (the foreign table whose results should be ordered), and nulls_first (whether to order nulls first). Example usage includes ordering a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "7d4848f3-5e59-48e0-8077-965c25a795dd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Limit the number of rows returned section describes two parameters: 'sizeRequired' to set the maximum number of rows to return, and 'foreign95table' to limit rows of foreign tables instead of the parent table. It provides an example of using the `limit()` function with `select()` on a foreign table to return only the first row."
  },
  {
    "chunk_id": "47837fed-469c-40a2-8071-ce426b8b5313",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `range()` function allows you to limit the query result by specifying a starting index (`from`) and an ending index (`to`), returning only the records within that range. This is useful for pagination or when you only need a subset of the results. The `from` and `to` values are 0-based and inclusive, and you can also apply the range to foreign tables."
  },
  {
    "chunk_id": "24a8e1e9-1e43-440f-a619-3b0b72ceff43",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary summarizes how to retrieve a single row of data from a database table using the Supabase library's `select()` method with the `single()` modifier. This allows returning the data as a single object instead of an array, which can be useful when only one row is needed."
  },
  {
    "chunk_id": "7174a224-8bc5-4b6a-94e1-803202b84351",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a database table using the `select()` method in the Supabase client library. The `maybe_single()` method is used to ensure that the response is either a single object or null, rather than an array of objects. This can be useful when you expect to retrieve at most one row of data based on a specific condition, such as filtering by a unique column."
  },
  {
    "chunk_id": "b8b725b6-1d91-47c2-8a56-88184b2a90fb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe documentation describes the \"Retrieve as a CSV\" functionality, which allows returning the data from a Supabase table as a string in CSV format. This is achieved by calling the `csv()` method on the `select()` operation, and then executing it to obtain the CSV-formatted data."
  },
  {
    "chunk_id": "eeab9d80-b7ea-437f-aa70-22da4a7e3c5f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The Postgres `EXPLAIN` command can be used to debug slow queries by providing the execution plan of a query. It can be enabled using the `explain()` method, which supports various parameters to configure the output, such as including information on WAL record generation, configuration parameters, buffer usage, and actual run time. The summary output can be formatted as text or JSON."
  },
  {
    "chunk_id": "f0ed01fd-8ed2-4249-99da-f90858c2c5eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the Supabase dashboard determines whether a user needs to verify their email before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. If it is enabled, only a user is returned, and the user must verify their email before accessing the session. The sign-up process can also handle additional parameters such as phone number and user metadata."
  },
  {
    "chunk_id": "7e515e6a-0500-4c0a-baa6-045ffabe59fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the ability to create an anonymous user in the system. It is recommended to set up captcha for anonymous sign-ins to prevent abuse, and the captcha token can be passed in the options parameter. The code example demonstrates how to create an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "6773ebc8-75f8-4cd0-9f90-c165fe28aee1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to sign in an existing user with either an email and password or a phone number and password. It provides code examples for signing in with email and password credentials, and specifies that the `supabase.auth.sign_in_with_password()` function is used to handle the sign-in process."
  },
  {
    "chunk_id": "ff0139da-21e4-48d2-9716-704f0dbc9f1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nAllows signing in with an OIDC ID token. The authentication provider must be enabled and configured. The `supabase.auth.sign_in_with_id_token()` method is used, passing the provider name and the ID token as parameters, to authenticate the user."
  },
  {
    "chunk_id": "b7bbd131-f1ff-4772-bca3-857950d1bcd9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP (one-time password) method allows users to authenticate without a password, by receiving an OTP via email or SMS. This can be used for passwordless sign-ins, with the option to automatically create a new user account if the user doesn't already exist. Developers can configure the OTP delivery method and customize the magic link or OTP message content."
  },
  {
    "chunk_id": "469abb6d-f948-4e59-a464-3ddddf311492",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It outlines the `sign_in_with_oauth()` method, which takes a `provider` parameter (e.g., 'github') to initiate the OAuth flow and authenticate the user with the specified third-party provider. This functionality allows users to sign in to the application using their existing third-party accounts, simplifying the authentication process."
  },
  {
    "chunk_id": "d0464b61-64a5-42ea-9a58-60c2f5cef055",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the Supabase CLI. You can then initiate the sign-in flow by providing either the user's email domain or a specific provider ID, which allows for more customized authentication scenarios such as mapping email addresses to identity providers or using company-specific sign-in hints."
  },
  {
    "chunk_id": "cca7cfa7-86ac-44b5-9e8a-2a183dc2757b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is already signed in. This revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which remains valid until it expires. Signing out using the global scope also signs out the user from all other sessions."
  },
  {
    "chunk_id": "684620ae-6b43-4ccf-98f7-d1c7c4f8e095",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary covers the key points about the `verify_otp` method in the Supabase authentication system:\n\nThe `verify_otp` method is used to verify one-time passwords (OTP) for different authentication types, such as SMS, email, recovery, and email change. The verification type should match the corresponding auth method used earlier to sign up or sign in a user. The `TokenHash` contained in email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "ebe94d59-92b9-4ce2-8fa0-8c8c58eb90ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted data source on the server, as it could be tampered with. If you need verified user data, you should call the `get_user()` method instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "96ff06b7-767f-4f56-87dd-7e7120c0f478",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` returns a new session, regardless of the current session's expiry status. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve the refresh token from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether the current one is expired or not."
  },
  {
    "chunk_id": "ccf23f9b-31a7-4009-b90e-71cfecfdc107",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis method retrieves the user object from the database rather than from the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. The method can be called with an optional access token JWT, or it will use the JWT from the current session."
  },
  {
    "chunk_id": "9685e2c9-a038-4697-bd58-f16df9e5109a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session` method sets the session data by taking an `access_token` and `refresh_token` as parameters. If the current session is expired or the tokens are invalid, it will refresh the session to obtain new tokens. Upon successful execution, it emits a `SIGNED_IN` event."
  },
  {
    "chunk_id": "7fb06838-7a03-4316-b126-c51964970e46",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation describes Supabase's support for Multi-Factor Authentication (MFA) through Time-based One-Time Password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors for recovery, which reduces the burden of managing recovery codes and the attack surface, as opposed to having a single backup TOTP factor."
  },
  {
    "chunk_id": "1fdfc892-3f11-4d78-8947-baef5ced68a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation outlines the process of enrolling a TOTP (time-based one-time password) factor for multi-factor authentication (MFA) in the Supabase authentication system. The `mfa.enroll()` function is used to enroll a TOTP factor, and the returned `id` can be used to create, verify, or challenge-and-verify MFA authentication steps."
  },
  {
    "chunk_id": "ffd7f11f-77a1-4b4f-9879-058a65e86e88",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create an MFA challenge, an enrolled factor is required. The `mfa.challenge()` function is used to initiate a challenge, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "7a06fe68-e315-482d-8a4e-c9acbbca8627",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create one using the `supabase.auth.mfa.verify()` method, passing in the `factor_id`, `challenge_id`, and `code` parameters. This allows you to verify a multi-factor authentication (MFA) challenge for a user, which is an important security step in the authentication process."
  },
  {
    "chunk_id": "7c42d0ee-0f7b-401e-a225-1c9bf5a30a97",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor by providing the factor ID and a 6-digit code."
  },
  {
    "chunk_id": "46787db0-f162-47b4-af57-f2a852ef6187",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the provided code demonstrates how to use the Supabase authentication API's `mfa.unenroll()` method, which takes the `factor_id` of the factor to be unenrolled as an argument. This allows users to remove a previously enrolled MFA factor from their account, which can be useful for managing their security settings."
  },
  {
    "chunk_id": "f60e3d27-1b89-4fce-8e4a-b253d9c5d2bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 represents the first factor of authentication (e.g., email/password or OAuth), while AAL2 represents the second factor (e.g., TOTP). The `next_level` field indicates the next required level of authentication, with AAL2 returned if the user has a verified factor, and AAL1 returned otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "05d05757-feb5-40c9-ab2a-f47990a0a628",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function by making a request to the Supabase service. Requires an Authorization header and automatically sets the Content-Type header based on the request body type, but this can be overridden. Provides examples of how to invoke a Supabase Function with a custom request body."
  },
  {
    "chunk_id": "01133ee9-a81a-4760-9804-e428852e12bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary of the content is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Users can enable this feature by managing Realtime's replication and setting the table's REPLICA IDENTITY to FULL to receive previous data for updates and deletes. The content also provides example code for subscribing to various Realtime events, such as broadcasts, presence updates, and row-level database changes."
  },
  {
    "chunk_id": "5d7215f1-256f-4842-867a-907b30fe2182",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain Realtime service and database performance, as unused subscribed channels can degrade performance. The `supabase.remove_channel(myChannel)` function allows users to unsubscribe from a specific channel, which Supabase will automatically clean up 30 seconds after the client disconnection."
  },
  {
    "chunk_id": "d70a1fe9-8d5b-489c-a40d-c797bceef1cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and database. Supabase automatically handles cleanup 30 seconds after a client is disconnected, but unused channels can degrade performance as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "2d5c2131-9532-4fea-b2ce-cce8d6ab35cc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary of the given content is:\n\nThe code `_10  channels = supabase.get_channels()` retrieves all the channels available in the Supabase system. This function allows users to access and work with the complete set of channels, which is a fundamental operation in managing and interacting with the channel-based data structure."
  },
  {
    "chunk_id": "84ec113d-8993-407d-81d5-44862b7c13b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It provides an example of sending a \"cursor-pos\" broadcast message with randomly generated x and y coordinates, demonstrating the use of the `send_broadcast()` method after subscribing to the channel."
  },
  {
    "chunk_id": "f41fd4ac-5bd0-4f03-841a-29ba666c82d0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` access to the `buckets` table and no permissions required for the `objects` table. Refer to the storage guide for more information on access control. The code to create a bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "41ed3be2-65ba-471b-9c16-d562363926ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the user requires `select` permissions on the `buckets` table. No permissions are required on the `objects` table. The summary also refers the user to the Storage guide for information on access control."
  },
  {
    "chunk_id": "a2dfcd9d-293c-4a7a-9583-cfc0c77892bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. The Storage guide provides more information on how access control works."
  },
  {
    "chunk_id": "4f048f93-a04b-483a-a20d-1d1bdba846ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the required permissions are 'select' and 'delete' on the 'buckets' table, while no permissions are needed on the 'objects' table. Refer to the Storage guide for more information on access control. The code to delete a bucket is `supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "014bbdbf-e082-4252-a529-a8e93548a3aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. The Storage guide provides information on how access control works for this operation."
  },
  {
    "chunk_id": "7d8a1e0e-cb34-4587-b0e6-283960c4a619",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires `insert` permissions on the `objects` table. The content type of the file should be specified using the `file_options` parameter, which defaults to `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file object and the desired path on the storage."
  },
  {
    "chunk_id": "0ae183a2-d1aa-4259-9c2a-5fc601e790ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires `select` permissions on the `objects` table, but no permissions on the `buckets` table. The download process involves using the Supabase storage client to download the file from a specified bucket and write it to a local destination file."
  },
  {
    "chunk_id": "f697bd03-d10e-4e11-9cfc-046e2ad8649d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The code snippet `supabase.storage.from_('bucket_name').list()` can be used to retrieve the list of files in the specified bucket. Refer to the Supabase Storage guide for more details on access control and permissions."
  },
  {
    "chunk_id": "c967b795-f6b5-4ba8-8522-7e7cdccb2ced",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the `objects` table permissions of `update` and `select` are required. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, specifying the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "de5b7567-227b-4270-81a6-fb60ceade805",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are \"update\" and \"select\" on the \"objects\" table. The code to move a file is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "b5946adf-7fd4-4e4d-9c64-9b7e99b58688",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table, but no permissions on the 'buckets' table. The Storage guide provides details on how access control works. The code example demonstrates removing the file 'test.jpg' from the 'bucket_name' bucket."
  },
  {
    "chunk_id": "91c96fc4-50ae-4351-b704-50bfbdace829",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required permissions are `select` on the `objects` table. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function generates a signed URL that allows access to a specific file for the specified duration, enabling secure file sharing."
  },
  {
    "chunk_id": "578384f6-4817-4af3-bfa1-2b12f43262c8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signup",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public either through the `updateBucket()` method or the Supabase dashboard. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` method can be used to retrieve the public URL for a file, such as `supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')`."
  },
  {
    "chunk_id": "4ab49f4d-f962-4bd7-8e23-1702cb2a668f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functionalities for interacting with Supabase's Postgres database, including querying data, listening to database changes, invoking Deno Edge Functions, managing user authentication, and handling large file uploads and downloads. This library serves as a powerful tool for developers to build applications that leverage Supabase's features using the Python programming language."
  },
  {
    "chunk_id": "41d5968c-b571-4eaa-a75b-dcd03d6ce175",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase Python client (supabase-py) via pip, the standard Python package installer. The installation is supported for Python versions 3.7 and above, and can be done using either pip or conda package managers from the terminal."
  },
  {
    "chunk_id": "8e21049f-c3f3-4f04-a2cd-679dc174115b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and Key obtained from the project dashboard. The client can be further customized with optional parameters, such as configuring the authentication behavior."
  },
  {
    "chunk_id": "962748aa-b4a4-4f1a-a7fc-c1c7e1f99979",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects by default return a maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` keyword should be avoided as a column name. Key parameters include columns to retrieve and options for counting rows returned."
  },
  {
    "chunk_id": "b5ee03ce-4f39-4487-8b1e-5083f08b7af9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe 'insert data' section describes the parameters for inserting data into a table, including the ability to insert a single row or multiple rows using a dict or list, respectively. It also covers optional parameters for specifying the count method, return method, and whether to use null values for missing fields in bulk inserts. An example is provided for inserting a record into the 'countries' table."
  },
  {
    "chunk_id": "5049a72d-6509-45dd-8667-06685626a21a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the software documentation is used to modify existing data in a table, and it must be combined with filters to target the specific item(s) to be updated. The method takes a dictionary or a list of dictionaries as input, representing the new values to be inserted, and an optional `count` parameter to retrieve the number of rows affected by the update operation."
  },
  {
    "chunk_id": "f229e4cc-09c9-47dd-8550-7d87954cdef0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `upsert` operation in the Supabase API allows inserting or updating data based on primary keys. It requires primary keys to be included in the `values` dict, and supports parameters like `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null`. The operation can be used for both single-row and bulk upserts, and is useful for working with tables that have unique constraints."
  },
  {
    "chunk_id": "2118cc53-f299-4bd4-9782-7ffb664f90f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nTo delete data in Supabase, the `delete()` method should be used in combination with filters to target the specific items to be deleted. When using `delete()` with filters and row-level security (RLS) is enabled, only the rows visible through `SELECT` policies will be deleted. The `delete().in_()` method can be used to delete multiple rows at once by providing an array of values."
  },
  {
    "chunk_id": "87bdd8e6-9a30-4f77-a310-4a8e605b4bfe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes how to call Postgres functions as Remote Procedure Calls, which can be useful for executing logic that rarely changes, such as password resets and updates. It provides details on the parameters that can be passed to the `rpc()` function, including options for returning data, read-only access, and different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "83328bb5-2a34-44cd-9748-721a43e9dcad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of filter and select operations is important, as shown in the example code, to ensure the correct results are returned."
  },
  {
    "chunk_id": "c6f6bce4-05e8-4392-98ed-57c088eede55",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `eq()` function in Supabase allows you to filter a table by selecting only the rows where a specific column is equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter is the value to filter by. This is a common operation in data querying and can be used to retrieve specific records from a table."
  },
  {
    "chunk_id": "f38cab5c-98fc-44a0-bf62-5fe553fbbb87",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Column is not equal to a value\" filter, which allows matching rows where a specified column is not equal to a given value. The key parameters are the column to filter on and the value to filter by. An example is provided using the Supabase library's `select()` method to fetch data from the \"countries\" table, excluding rows where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "a9f4a7f8-0600-4cef-8bdb-d6765da92228",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The provided code demonstrates how to filter a database table by selecting rows where a specified column value is greater than a given value. The `gt()` method is used to apply this filter, with the column name and comparison value passed as parameters."
  },
  {
    "chunk_id": "de30e4b5-38ec-45c1-ae1b-af0cc462fbcd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe summary covers a filter operation in Supabase that selects rows where a specified column is greater than or equal to a given value. The key parameters are the column name and the comparison value. This is a common filtering technique used in database queries to retrieve a subset of data that meets certain criteria."
  },
  {
    "chunk_id": "9ba00ebd-fbe1-4efb-8d61-3cba3d86e192",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a table in a database to include only rows where the value in a specified column is less than a given value. It provides the required parameters, 'column' and 'value', and an example using the Supabase library's 'lt()' method to execute the filter."
  },
  {
    "chunk_id": "7051ca6f-bec4-4e3f-bdd9-899f2cd6a60d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `lte()` (less than or equal to) function in the Supabase library allows you to filter a table by a column value that is less than or equal to a specified value. This is useful for querying data where you need to retrieve rows that meet a certain numeric threshold, such as selecting all countries with an ID less than or equal to 2."
  },
  {
    "chunk_id": "66c6fd4b-fe43-4523-aed5-aa14a1f69134",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"column matches a pattern\" feature allows filtering rows where a specified column matches a provided case-sensitive pattern. It takes two required parameters: the column name and the pattern to match. This can be used with the `select()` method to retrieve only the rows where the specified column matches the given pattern."
  },
  {
    "chunk_id": "42a30438-0e1c-4e54-a9d7-c5c3842240b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis feature allows filtering a database table by matching a column value to a case-insensitive pattern. The two required parameters are the column name and the pattern to match. This can be useful for performing case-insensitive searches on text data, as demonstrated in the example using the Supabase library."
  },
  {
    "chunk_id": "936eae9f-9a78-4dfe-a301-05775fc990ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe \"Column is a value\" feature allows filtering rows based on whether a specified column matches a given value. The parameters include the column name and the value to match, which can be null, true, or false. This functionality is useful for performing conditional queries on a database table."
  },
  {
    "chunk_id": "145fbb6a-bbc1-40a1-a58c-45ed0526141e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the `in_()` function in the Supabase client library, which allows filtering a database table by checking if the value in a specified column is included in a provided array of values. The `columnRequired` parameter specifies the column to filter on, and the `valuesRequired` parameter is the array of values to filter by. This functionality is demonstrated in an example query that selects rows from the \"countries\" table where the \"name\" column is either \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "a23f36e0-c4cd-4c89-8088-fb9925814279",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `contains` operator in Supabase queries, which is applicable to columns of type `jsonb`, `array`, and `range`. This operator allows filtering rows where the specified column contains every element in the provided value. The summary includes the required parameters for this operator, `column` and `values`, as well as example usage for different column types."
  },
  {
    "chunk_id": "a99768aa-4a03-47b2-8a40-e2965833a6b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contained_by` operation is only applicable to `jsonb`, `array`, and `range` columns. It filters the rows where every element in the specified column is contained within the provided value. The operation takes two parameters: the column to filter on and the value to filter with. This can be useful for querying data where the column contains a collection of items, such as an array of weekdays."
  },
  {
    "chunk_id": "d06c987a-799a-48c2-b987-bbbe86843ef8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature in the software documentation allows filtering rows in a range column, where each element in the column is greater than any element in the specified range. This is useful for selecting data where a column value falls within a certain time or date range. The feature takes two parameters: the column name and the range to filter with, and can be used in the `select()` method of the data querying API."
  },
  {
    "chunk_id": "dbcef4ce-1642-4ef3-abe0-5b988c47915b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than or equal to a range' filter is applicable only for range columns, and it matches rows where every element in the specified column is either contained within the given range or greater than any element in the range. The filter is configured by providing the column name and the range to filter with, and can be used in a Supabase query to select data from a table."
  },
  {
    "chunk_id": "a69e3f64-3de3-4cb6-895a-e51d09e43d87",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns, matching rows where every element in the specified column is less than any element in the provided range. The relevant parameters are the column name and the range array, which can be used in a `select()` query to filter the data accordingly."
  },
  {
    "chunk_id": "d8abe8d3-d141-4ae6-8636-25bafaf8b2e0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is used to filter rows in a range column, where every element in the column must be less than or equal to any element in the specified range. The feature takes two parameters: the column name and the range to filter with, and can be used in the `select()` method of a Supabase query to apply the range filter."
  },
  {
    "chunk_id": "9df65ac9-1be9-42fe-9da2-71bf91c973e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Mutually exclusive to a range' feature is specific to range columns, allowing you to filter rows where the column value is mutually exclusive to the provided range, i.e., there can be no element between the two ranges. The key parameters are the column name and the range to filter with, which can be used in a query like `supabase.table(\"reservations\").select(\"*\").range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"]).execute()`."
  },
  {
    "chunk_id": "a412ea9b-37cd-45b4-ae10-35cabc5ec687",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe \"With a common element\" feature in the software documentation is relevant for array and range columns. It allows matching rows where the column and the provided value have at least one element in common. The key parameters are the column to filter on and the value to filter with. This functionality can be used in queries to filter data, such as selecting titles from a \"issues\" table where the \"tags\" column overlaps with the values \"is:closed\" and \"severity:high\"."
  },
  {
    "chunk_id": "51324b82-19a3-462d-be83-258c5c06742c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe \"Match a string\" operation is used to filter rows in a text or tsvector column based on a given query string. It supports various text search options such as basic normalization, full normalization, and websearch. This feature is useful for implementing advanced search functionality, such as full-text search, in a Postgres-based application."
  },
  {
    "chunk_id": "2067d613-8208-4b29-81d8-f3f651c4ed9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided code allows you to filter a table based on a dictionary of column names and their associated values. This is a concise way to perform multiple equality checks on a dataset, instead of chaining multiple `.eq()` calls. The `match()` method is demonstrated in the example, where a query is executed on the \"countries\" table to select all rows where the \"id\" column is 2 and the \"name\" column is \"Albania\"."
  },
  {
    "chunk_id": "bc62faf8-8546-4bd7-b3c4-69c3b7e081b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation explains how to use the `not_` operator in PostgREST filters to select rows that don't match the specified criteria, such as not being in a given set of IDs or not containing a specific array value. It also provides an example of using the `not_.is_()` method with the Supabase library to select rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "98250869-5ee7-4ec2-80a8-c6b218126aad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'or95()' function in the Supabase client library allows you to use the raw PostgREST syntax for filters, including 'in', 'contains', and 'containedBy' operations. The 'filtersRequired' parameter accepts a string of filters following the PostgREST syntax, and the 'reference95table' parameter can be used to filter on referenced tables instead of the parent table. The 'or()' function can be used with 'and()' to build complex queries."
  },
  {
    "chunk_id": "032687ac-0292-4da4-939a-2f912922f967",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the Supabase client library expects the use of raw PostgREST syntax for filter values. This includes using parentheses for the 'in' operator and curly braces for array values. The filter() method takes three parameters: the column to filter on, the operator to use, and the value to filter with, all following PostgREST syntax. An example is provided demonstrating the use of filter() on a foreign table to select specific countries."
  },
  {
    "chunk_id": "8e2c7bf6-3ed1-433c-bc42-176c0cb05e69",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "56552be9-8d1d-4b7d-8224-718c3ed26d67",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the ability to order the results of a query by a specified column. The main parameters are the column to order by, whether to order in descending order, and whether to show null values first. An example is provided demonstrating how to order the results of a \"select\" operation on a foreign table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "c4d6a9f3-a03c-43cd-9102-d2fce299e81a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to limit the number of rows returned in a database query using the Supabase library. The `limit()` method is used to specify the maximum number of rows to return, and an optional `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. The example shows how to use the `limit(1)` method to return a single row from the \"countries\" table."
  },
  {
    "chunk_id": "8ad0fcc3-c433-4d4c-879c-543620563979",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows returning only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, meaning the range includes the specified start and end indices. Additionally, the `foreign_table` parameter can be used to limit the rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "8ece82d5-95b5-482b-8398-783dc3c81558",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content discusses how to retrieve a single row of data using the Supabase library's `select()` method. The `single()` modifier is used to return the data as a single object instead of an array of objects. This can be useful when you only need to retrieve a single record, as it simplifies the response data structure."
  },
  {
    "chunk_id": "2aee517f-5a6c-4dda-a857-75f58b239f9f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve zero or one row of data from a database table using the `maybe_single()` method in the Supabase library. This is useful when you expect at most one row to match the query criteria, as it returns a single object instead of an array, simplifying the handling of the response."
  },
  {
    "chunk_id": "7d6af8c5-b0c2-43eb-9891-18d7dbaffc8d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the \"Retrieve as a CSV\" functionality in the Supabase library. It explains that this feature allows developers to retrieve data from a Supabase table in CSV format, which can be useful for exporting and sharing data. The summary includes a code example demonstrating how to use the .csv() method to execute the CSV retrieval operation."
  },
  {
    "chunk_id": "d19157d8-c77d-4c4a-96c5-99fedfed5709",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres allows you to view the execution plan of a query, which can be helpful for debugging slow queries. While `explain()` is not enabled by default due to security concerns, it can be enabled for testing environments, and for production environments, a `pre-request` function can be used for additional protection. The `explain()` method supports various parameters, such as `wal`, `verbose`, `settings`, `format`, `buffers`, and `analyze`, which provide different levels of detail and functionality."
  },
  {
    "chunk_id": "8a6e3581-d293-44aa-a56a-592e01598cb4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting determines whether the user needs to verify their email address before logging in. When \"Confirm email\" is disabled, both a user object and a session are returned upon sign-up. If signing up an existing confirmed user, an obfuscated user object is returned when both \"Confirm email\" and \"Confirm phone\" are enabled, or a \"User already registered\" error is returned when either is disabled. The currently logged-in user can be fetched using the `get_user()` function."
  },
  {
    "chunk_id": "ea20e915-e08a-4f11-9141-34eecff33aae",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The function `supabase.auth.sign_in_anonymously()` returns an anonymous user. It is recommended to set up a captcha to prevent abuse, which can be passed in the `options` parameter. The function creates an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "0decee96-c9a1-4f87-a4e4-2b2eb79dce15",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user by providing either an email and password or a phone number and password. The required parameters are detailed, and an example code snippet is provided to demonstrate how to sign in a user with an email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "58d8a3d9-69a7-410e-8a6d-7cae012dd649",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in using an OIDC ID token. It provides a code example for signing in with an ID token, where the authentication provider (e.g., Google) must be enabled and configured. The key parameter required is the `credentialsRequiredSignInWithIdTokenCredentials`, which contains the provider and the actual ID token."
  },
  {
    "chunk_id": "12923c62-b7cf-4708-bba4-18434c45747f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation covers how to sign in a user through One-Time Password (OTP) authentication, which can be done using either an email or phone number. This method supports passwordless sign-ins, and can automatically create a new user account if the user doesn't already exist. The magic link or OTP can be configured, and the destination URL for the magic link is determined by the `SITE_URL` setting. The implementation for magic links and OTPs is the same, and the email template can be modified to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "9c2338d8-b21f-4af2-ae01-a50b029f87b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It provides a code example for signing in using the GitHub provider, and mentions that Supabase supports various third-party providers that can be configured. The key parameters for this method are the `credentialsRequiredSignInWithOAuthCredentials`."
  },
  {
    "chunk_id": "ae7bb554-4fd8-4aa6-8994-cf1fc75ec20e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the email domain or the provider ID to start the authentication flow. This allows for flexible integration with different identity providers, such as mapping specific user email addresses or using company-specific authentication hints."
  },
  {
    "chunk_id": "d721a2ef-5862-4be0-8f0a-044d706d90d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This method revokes the user's refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which will remain valid until it expires. The method can be used to sign out the user from the global scope, which signs out all other sessions the user is logged into."
  },
  {
    "chunk_id": "8c37a07c-0208-4d7e-8c15-76a06a5290b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method in the Supabase auth API is used to verify a one-time password (OTP) sent via SMS or email. The verification type should match the corresponding auth method used to sign up or sign in a user, such as `email`, `phone_change`, or `recovery`. The `TokenHash` contained in the email templates can also be used to sign in a user via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "12269a27-5f23-4e1b-ba3f-9296ed481f93",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with. If verified user data is needed, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "63f80f77-dee4-413e-9739-b41e6385841c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is used to refresh the session whether it is expired or not."
  },
  {
    "chunk_id": "122952de-392e-47d5-9a65-bc295508c000",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"Retrieve a user\" fetches the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. It takes an optional access token JWT parameter, and if none is provided, the JWT from the current session is used."
  },
  {
    "chunk_id": "c63a4455-d1a2-4f3e-9d81-a4ac1e50c965",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `set_session()` method sets the current session's access and refresh tokens, refreshing the session if it has expired. If the tokens are invalid, an error is thrown. Upon successful execution, a `SIGNED_IN` event is emitted. The method is used to refresh the session when the access or refresh token becomes invalid."
  },
  {
    "chunk_id": "1676b1c1-af8a-4452-9f09-73ba1d9a572f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers Multi-Factor Authentication (MFA) methods supported by Supabase, which currently includes time-based one-time password (TOTP) as the second factor. Supabase allows users to enroll multiple TOTP factors up to 10, providing a recovery mechanism without the need for recovery codes. This approach reduces the attack surface and simplifies user experience compared to managing separate recovery codes."
  },
  {
    "chunk_id": "b8812719-d5cd-401d-bcf1-b6c285bf6ddb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `mfa.enroll()` function is used to enroll a TOTP (time-based one-time password) factor, which is currently the only supported `factor_type`. The returned `id` from the enrollment can be used to create and verify challenges using the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions, which provide different ways to manage the multi-factor authentication process."
  },
  {
    "chunk_id": "b547f325-21d5-475f-ab02-ed8ff914d2d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` method can be used to create a challenge for a specific factor, identified by its `factor_id`. This challenge can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "b415f7be-7fbc-4cbf-aa2a-5a6dc6e8a41b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `supabase.auth.mfa.verify()` function, providing the `factor_id`, `challenge_id`, and `code` parameters. This allows users to authenticate and verify their identity using multi-factor authentication (MFA) within the application."
  },
  {
    "chunk_id": "25ebd5f3-79c3-4c36-8c9a-052bcbbd884c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The documentation describes the `challengeAndVerify()` function, which allows users to create and verify a challenge for a multi-factor authentication (MFA) factor. It requires an enrolled MFA factor, and executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, with the factor ID and verification code as input parameters."
  },
  {
    "chunk_id": "de82cfcf-9126-46c1-a48f-19c1c0ffdb54",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is:\n\nTo unenroll a factor, use the `supabase.auth.mfa.unenroll()` method and provide the `factor_id` as a parameter. This removes the specified factor from the user's authentication settings, allowing them to manage their multi-factor authentication preferences."
  },
  {
    "chunk_id": "f29112d0-3179-458b-92d4-38879eeb61e1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to a single-factor authentication (e.g., email and password), while AAL2 refers to two-factor authentication (e.g., TOTP). The `next_level` field indicates the minimum AAL required for the user, which is AAL2 if the user has a verified factor or AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "c082beb9-0ca2-428b-b26d-adc7fb172902",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is: Invoking a Supabase Edge Function requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the input data type, but this can be overridden. The function is invoked by passing the function name and any optional request body as parameters."
  },
  {
    "chunk_id": "b956c962-2533-4faa-b188-954702c3836c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The document discusses subscribing to Supabase channels, which provide realtime broadcast, presence, and database change notifications. It explains that by default, broadcast and presence are enabled, but listening to database changes is disabled for new projects due to performance and security concerns. The document also provides code examples for subscribing to different types of events, such as broadcasts, presence updates, and row-level database changes."
  },
  {
    "chunk_id": "1165b681-4a35-4d02-8363-1e4f5a86620f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain the performance of the Realtime service and the database, as unused channels can degrade performance as more clients subscribe. The `supabase.remove_channel()` function is used to remove a channel, and Supabase will automatically handle the cleanup 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "beaecd76-8bd5-4764-b703-7e9ec956a556",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels from the Realtime service is recommended to maintain performance and database efficiency, as unused channels can degrade the service for more active clients. The `supabase.remove_all_channels()` function can be used to remove all subscribed channels, which Supabase will automatically clean up 30 seconds after a client disconnection."
  },
  {
    "chunk_id": "fb5247b2-097a-437e-a887-11bd4198a715",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code `_10 channels = supabase.get_channels()` retrieves all the channels available in the Supabase database. This functionality is useful for accessing and managing the complete set of channels in the application."
  },
  {
    "chunk_id": "55555d5f-a74c-463c-9bb0-074df9f3fdb8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. The example code demonstrates subscribing to a channel, then sending a broadcast message with cursor position data. This functionality allows for real-time updates and collaboration across connected clients within a specific channel."
  },
  {
    "chunk_id": "34813e43-314c-44bb-9065-b32307a4d12c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in the Supabase storage system, the user requires the `insert` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Supabase storage access control guide for more information on managing permissions. The code to create a bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "99f58d74-f6f4-49db-90fe-82dca04c563d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: 'select' permission on the 'buckets' table, and no permissions on the 'objects' table. The Storage guide provides information on how access control works for this operation."
  },
  {
    "chunk_id": "8d1ee763-d4fb-4134-8e32-5c2450fca554",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are: `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to list buckets is `_10  res = supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "1f1d2406-abae-4206-8224-0b93c8184f4f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, while no permissions are needed on the 'objects' table. The storage access control guide should be referred to for details on how to set up the necessary permissions."
  },
  {
    "chunk_id": "312ddf22-498e-4ae1-89ce-4e6d50ba5f3d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. The process can be executed using the `supabase.storage.empty_bucket()` function, and the Storage guide provides more information on how access control works."
  },
  {
    "chunk_id": "d5ea4ec2-6a02-47c4-b67f-163464b09a98",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file using Supabase Storage, the required RLS policy permissions are `insert` access on the `objects` table. The appropriate MIME type should be specified for the file, such as `audio/mpeg` for audio files, or the default `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file object and the desired storage path."
  },
  {
    "chunk_id": "7f8e5bf1-bd87-4484-888b-458e9529f408",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires the `select` permission on the `objects` table, but no permissions on the `buckets` table. The file is downloaded using the `supabase.storage.from_('bucket_name').download(source)` method, which writes the downloaded content to the specified local `destination` file."
  },
  {
    "chunk_id": "88128ed8-0189-4aa8-8a57-a1bcf160b752",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the `objects` table permissions require `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "326b8a99-c051-467a-a497-bcee17c861fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires 'update' and 'select' permissions on the 'objects' table. The file can be updated using the Supabase storage client, specifying the file path, bucket name, and optional metadata like cache control. This operation allows replacing an existing file in the Supabase Storage."
  },
  {
    "chunk_id": "d7794e80-75c3-4c70-9efd-e756f5e29e62",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are `update` and `select` on the `objects` table. The `move()` function in the Supabase Storage API can be used to move a file from one location to another within the same bucket, e.g., `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`."
  },
  {
    "chunk_id": "2f9629bd-c961-46fe-aa2a-c2b8f17753a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The code snippet `supabase.storage.from_('bucket_name').remove('test.jpg')` demonstrates the API call to delete the file 'test.jpg' from the specified bucket. Refer to the Supabase Storage guide for more details on access control and permissions management."
  },
  {
    "chunk_id": "218ad2b2-2dc5-46e9-a9d2-14d5cc6affc7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the user requires `select` permissions on the `objects` table. The signed URL provides time-limited access to a specific file in the Supabase storage bucket, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "5ba38370-8347-4d7e-ad14-6c38bf2fe50b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinanonymously",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To make a file publicly accessible, the bucket needs to be set to public either via the `updateBucket()` function or through the Supabase dashboard. No specific permissions are required on the `buckets` or `objects` tables. The `get_public_url()` function can be used to retrieve the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "c60c890d-058e-44f2-a40a-088392dd5a72",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Supabase Python client library, supabase-py, provides a comprehensive set of functionalities to interact with a Postgres database, including listening to database changes, invoking Deno Edge Functions, building login and user management features, and managing large files. The library is well-documented and available on GitHub, making it a valuable tool for developers working with Supabase in a Python environment."
  },
  {
    "chunk_id": "de95f197-203d-4dda-af5a-81c5c2998d28",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation describes how to install the Supabase-py library, which is compatible with Python 3.7 and later versions. Users can install the library via the terminal using the pip command `pip install supabase`. The installation process is straightforward and can be done using either the standard terminal or the Conda package manager."
  },
  {
    "chunk_id": "cec7895a-f4c1-4905-94cd-334e50a70f72",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary way to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optional ClientOptions to configure the authentication behavior. The Supabase client provides access to all of the Supabase functionality, making it the central entry point for working with the platform."
  },
  {
    "chunk_id": "eda8f231-7afe-42df-b2a3-695111f916e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch specific data, and the `apikey` keyword should be avoided as a column name. Key parameters include `columns` to specify the columns to retrieve, and `count` to get the count of rows returned."
  },
  {
    "chunk_id": "c645bb69-1c89-4db1-86b6-4103f7a54ab4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Insert data\" section describes the parameters for inserting data into a table using the Supabase client library. The key parameters are `jsonRequired` (a dictionary or list of dictionaries representing the data to insert), `countOptional` (the property to use to get the count of rows returned), `returningOptional` (whether to return the minimal or full representation of the inserted data), and `default95to95nullOptional` (whether to default missing fields to null or use the column's default value). An example is provided demonstrating how to insert a single row into the \"countries\" table."
  },
  {
    "chunk_id": "104edf98-4b1f-4ef5-a058-03007905a20d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` function in this documentation is used to modify existing data in a table. It must be combined with filters to target the specific item(s) to be updated. The function accepts a dictionary or list of dictionaries representing the new values to be inserted. An optional `count` parameter can be used to get the count of updated rows."
  },
  {
    "chunk_id": "6bf7a9aa-bd31-465f-88d6-24069a9a04e8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'upsert' operation allows inserting new data or updating existing data in a table, with the requirement that the primary keys must be included in the data. Key parameters include the data to be inserted, options to control the returned count and representation, and settings to handle duplicate rows and null values. The summary also includes an example demonstrating how to perform a bulk upsert operation."
  },
  {
    "chunk_id": "6d3361fb-0f57-42a1-afd2-6cd6eb398469",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` method in Supabase should always be used with filters to target the specific items to be deleted. When using `delete()` with RLS (row-level security) enabled, only the rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to batch delete multiple records that share common criteria, but the provided array must accurately represent all the records to be deleted."
  },
  {
    "chunk_id": "ba3794b3-ce4c-4e30-8650-e3b1f186fcf5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to call Postgres functions as Remote Procedure Calls (RPC) from any application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides examples and details the available parameters, including the function call, input parameters, access mode, and count algorithm for set-returning functions."
  },
  {
    "chunk_id": "c1daa8f6-3a45-4901-95fb-8d9420f7c25b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only rows that match specific conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can be chained together, and you can filter by values within JSON columns or on foreign tables. The order of applying filters is important, as demonstrated by the example code."
  },
  {
    "chunk_id": "012a7514-67ee-4b0b-ab6b-fef897b95e44",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The 'eq' function in Supabase allows you to filter a table by a specific column value. It takes two required parameters: the column name and the value to filter by. This can be used in a 'select()' query to retrieve rows where the specified column matches the given value."
  },
  {
    "chunk_id": "8c29d961-4e69-4851-af49-981bf485779a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Column is not equal to a value\" functionality, which allows filtering rows where a specified column is not equal to a given value. The key parameters are the column to filter on and the value to filter by. An example is provided using the Supabase table() and select() methods to filter the \"countries\" table, excluding rows where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "3f6adef6-15fd-402a-b578-7e4517e4bb53",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table by a column value that is greater than a specified value. The `gt()` method is used with the `select()` function to achieve this. The key parameters are the column name and the value to filter by."
  },
  {
    "chunk_id": "e67d12ca-b502-4a52-9a22-1f5fc75a4d77",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `gte()` function in Supabase allows filtering rows where the specified `column` is greater than or equal to the provided `value`. This is useful for selecting data based on a minimum threshold, such as retrieving countries with an ID greater than or equal to 2."
  },
  {
    "chunk_id": "031fba07-7a8e-4da5-8b9e-40cd48890ae7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section explains how to filter a database table by selecting rows where a specified column has a value less than a given value. The `lt()` method is used to apply this filter, taking the column name and the value to compare against as parameters."
  },
  {
    "chunk_id": "f1ebf931-140b-45a0-bbe5-10bb682efe48",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a filter operation in a data querying context, where rows are selected from a table based on the condition that a specified column is less than or equal to a given value. The key parameters are the column name and the value to filter by, as demonstrated in the example using the Supabase library's `lte()` (less than or equal to) method."
  },
  {
    "chunk_id": "095f3fa9-aad0-4cde-937b-b3d910d40396",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'column matches a pattern' functionality allows filtering rows where a specified column matches a provided case-sensitive pattern. The key parameters are the column name and the pattern to match. This can be used with the `select()` method, as shown in the example, to retrieve only the rows where the 'name' column matches the '%Alba%' pattern."
  },
  {
    "chunk_id": "ea82cd6a-6afd-4d33-929d-6522894f7e54",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes a SQL function that applies a case-insensitive filter to a table column based on a provided pattern. The `ilike()` function takes two required parameters: the column name and the pattern to match, and returns rows where the column value matches the pattern case-insensitively."
  },
  {
    "chunk_id": "ff1a54a5-ae21-414f-b618-eb2955887cf0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" section describes a filter operation that matches rows where a specified column has a given value. The required parameters are the column name and the value to match, which can be null, true, or false. This functionality is useful for filtering data based on specific column values, as demonstrated in the example code."
  },
  {
    "chunk_id": "9b4d25c7-6426-4072-98d4-b2de211a4c02",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes a filtering operation where only rows are matched where the specified `column` is included in the `values` array. The `columnRequired` parameter specifies the column to filter on, and the `valuesRequired` parameter specifies the values to filter by. This functionality is demonstrated in an example using the `in_()` method of the Supabase table select operation."
  },
  {
    "chunk_id": "4dcf6979-ca2d-4c4c-9741-a7a76182a755",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` filter is applicable for columns of type `jsonb`, `array`, and `range`. It matches rows where the specified column contains every element in the provided `value`. The filter takes two parameters: `column` (the column to filter on) and `values` (the `jsonb`, `array`, or `range` value to filter with)."
  },
  {
    "chunk_id": "48051574-7eef-4648-8cd6-8deeb2c9af05",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operator is used with jsonb, array, and range columns to match rows where every element in the column is contained within the specified value. It takes two parameters: the column to filter on and the value to filter with. This operator is useful for performing complex queries on structured data types like arrays and JSON."
  },
  {
    "chunk_id": "52749834-cc0d-4a83-9b84-96c933bcb557",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used for range columns in Supabase. It allows matching rows where every element in the specified column is greater than any element in the provided range. The filter takes two required parameters: the column name and the range to filter on, and can be used in a Supabase query using the `range_gt()` method."
  },
  {
    "chunk_id": "5bb870f6-9344-44dd-acae-1c838f858701",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature allows filtering on range columns, where the rows are matched if every element in the column is either contained in the specified range or greater than any element in the range. The key parameters are \"column\" (the range column to filter on) and \"range\" (the range to filter with). This is useful for querying data that falls within or exceeds a certain time range, as demonstrated in the example using the Supabase .range_gte() method."
  },
  {
    "chunk_id": "7ca80b17-f018-4980-a9eb-de0fb8ebaacc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns in Supabase, allowing you to match rows where every element in a specified column is less than any element in a given range. This is accomplished by using the `.range_lt()` method, which takes the column name and the range to filter on as parameters."
  },
  {
    "chunk_id": "4bd065f0-abd8-431b-9417-ab721501ee9c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than or equal to a range' filter is used for range columns, matching only rows where every element in the specified column is less than or equal to any element in the provided range. It takes two required parameters: the column to filter on and the range to filter with. This can be used in a Supabase query to filter a table by a date/time range, for example."
  },
  {
    "chunk_id": "d04e1780-82f8-4dd8-bd6b-b27cf880170d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Mutually exclusive to a range' feature is only applicable to range columns. It allows you to filter rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The relevant parameters are the column name and the range to filter with, which can be used in a `range_adjacent()` query."
  },
  {
    "chunk_id": "5ba19105-4a11-48b7-8140-6488b64b9e70",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThis section describes a filter operation applicable to array and range columns in a database table. The `overlaps` function allows filtering rows where the `column` and `value` have at least one element in common. The function takes two parameters: `columnRequired` (the array or range column to filter on) and `valueRequired` (the array or range value to filter with). This functionality is demonstrated in an example query for the \"issues\" table, filtering rows where the \"tags\" column overlaps with the values `[\"is:closed\", \"severity:high\"]`."
  },
  {
    "chunk_id": "b4dbfe02-8b28-4094-94a8-9fe14c619753",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation provides information on the 'match a string' feature, which is only applicable to text and tsvector columns. This feature allows filtering rows where the specified column matches the query string. It provides details on the required parameters, 'column' and 'query', as well as optional parameters such as 'options' for configuring the text search behavior, including normalization and full-text search options."
  },
  {
    "chunk_id": "bf44323f-c143-4536-83ae-fd062f6cb45b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided example filters a database table `countries` to return only the rows where the `id` column is equal to 2 and the `name` column is equal to \"Albania\". This is a convenient shorthand for multiple `.eq()` calls, allowing for complex filtering based on multiple conditions across different columns."
  },
  {
    "chunk_id": "32a98ce9-4368-40c6-9ce1-967dbdb92c4b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to use the `not_` operator in PostgREST to match rows that don't satisfy a given filter, with examples for `in` and `contains` filters. It also demonstrates using `not_.is_` to exclude null values when selecting data from a `countries` table in Supabase."
  },
  {
    "chunk_id": "9b7d79e1-e266-4176-81e3-d0987d931c1d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe `or95()` function in the documentation expects the usage of raw PostgREST syntax for the filter names and values, including `in` filters, array values, and `contains` and `containedBy` operations. The function takes two parameters: `filtersRequired` to specify the filters to use, and `reference95table` to filter on referenced tables instead of the parent table. The `or()` function can be used with `and()` to combine multiple filters, and it can also be used to filter on referenced tables."
  },
  {
    "chunk_id": "84121c7d-12df-47a8-bd7d-ea613f1aea97",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the Supabase client library expects the use of raw PostgREST syntax for filtering, including support for the 'in' and 'contains' operators. It takes three parameters: the column to filter on, the operator, and the value to filter with. The summary provides an example of using filter() on a foreign table to select records where the name is 'Algeria' or 'Japan'."
  },
  {
    "chunk_id": "a3d25cb7-d7dd-489b-a61a-b10a9a0b7acf",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to transform the format of the response, unlike filters which operate on individual rows. Modifiers must be specified after filters and only apply to queries that return rows. They allow changing the response format, such as returning a CSV string."
  },
  {
    "chunk_id": "863a4b3b-6391-4f3f-ace4-1254f3fb194a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'order' function in the Supabase API allows you to order the results of a query by a specified column. The available parameters are: 'column' (the column to order by), 'desc' (whether to order in descending order), 'foreign_table' (the name of a foreign table whose results should be ordered), and 'nulls_first' (whether to show null values first). This functionality is demonstrated in an example query on the 'countries' table, ordering the results by the 'name' column in descending order."
  },
  {
    "chunk_id": "b5d30c16-d3f3-4040-94f6-469d1791bf5f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `limit()` function allows you to specify the maximum number of rows to return from a database query. This is useful for paging or restricting the size of results. Additionally, you can set the `foreign95table` parameter to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "4fa2263b-0b54-4100-86f1-5b789e518be7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows returning only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, meaning the range `(1, 3)` will include the second, third, and fourth rows of the query. Additionally, the `foreign_table` parameter can be used to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "e0db20d0-7910-43e6-883e-aee3440d1fc5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to retrieve a single row of data from the \"countries\" table using the Supabase library's `select()` method with the `limit(1)` and `single()` options. This allows you to retrieve the \"name\" column as a single object instead of an array, simplifying the data processing."
  },
  {
    "chunk_id": "212e35fc-d352-4c1a-a87d-35947db98ce7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides an explanation of how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase client library. This approach returns the data as a single object rather than an array, which can be useful when expecting a single result. The example demonstrates querying the \"countries\" table and filtering by the \"name\" column to retrieve the row for \"Albania\"."
  },
  {
    "chunk_id": "48b6b56d-f5c0-4bb6-af63-d778a2ecc321",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe Retrieve as a CSV feature allows you to return the data from a Supabase table as a string in CSV format. This can be done using the `csv()` method when executing a `select()` query, as shown in the example code `supabase.table(\"countries\").select(\"*\").csv().execute()`. This functionality is useful for exporting data from a Supabase table in a comma-separated value format."
  },
  {
    "chunk_id": "d9cd3398-e264-4376-b9c2-ea8bc8763b57",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe `explain()` method in Postgres allows you to get the execution plan of a query, which is useful for debugging slow queries. While `explain()` is not enabled by default due to security concerns, it can be enabled for testing environments or production with additional protection. The `explain()` method supports various parameters like `walOptional`, `verboseOptional`, `settingsOptional`, `formatOptional`, `buffersOptional`, and `analyzeOptional` to control the output, including information on WAL record generation, configuration parameters, buffer usage, and actual run time."
  },
  {
    "chunk_id": "b0d8005a-623e-4b96-990b-f3fabd05c5f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the project determines if users need to confirm their email address after signing up. If \"Confirm email\" is enabled, a user is returned but the session is null. If it's disabled, both a user and a session are returned. The user can be redirected to a custom URL after confirming their email. Additionally, the API provides methods to sign up with various credential types, such as email/password, phone/password, or additional user metadata."
  },
  {
    "chunk_id": "6b9f8b28-bbbf-4649-a901-dabda8d9683e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The section describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in anonymously and pass in a captcha token as an option. The key technical points are that the `supabase.auth.sign_in_anonymously()` function can be used to create an anonymous user, and that it is recommended to implement captcha validation to secure the anonymous sign-in process."
  },
  {
    "chunk_id": "39bc9f71-e561-49de-939a-d4ccafc822fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of signing in an existing user using either an email and password or a phone number and password. It provides the required parameters for the sign-in function, which include the user's credentials, and an example code snippet demonstrating the sign-in with email and password."
  },
  {
    "chunk_id": "66206b54-c2b9-46e2-94a0-f57b7a9c9bd9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in with an OIDC ID token using the Supabase authentication API. It explains the required parameters, including the provider and the ID token, and provides a code example for the sign-in process. This functionality allows users to authenticate with the application using an ID token issued by an identity provider, enabling a more secure and streamlined sign-in experience."
  },
  {
    "chunk_id": "17f8991c-7c34-4926-b146-3b74c610cff4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through a one-time password (OTP) sent to their email or phone number. This passwordless sign-in method can automatically create a new user account if the user doesn't exist. Developers can configure whether to send an OTP or a magic link, and can customize the destination URL for the magic link."
  },
  {
    "chunk_id": "0ce4b8d7-66ea-4796-bfd5-63bcd70eb669",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation explains how to sign in a user through OAuth, a method for authenticating users using a third-party provider. Supabase supports various third-party providers, and the `supabase.auth.sign_in_with_oauth()` method can be used to handle the sign-in process, including specifying the provider and (optionally) requesting specific scopes."
  },
  {
    "chunk_id": "b3b6c419-c3a0-430b-a4af-6a4695a21095",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the CLI commands. You can then use the `domain` property to start the sign-in flow if you've associated an email domain to the identity provider, or the `provider_id` property to use a different way to start the authentication flow, such as mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "4007dc58-0359-4ff8-b77e-270e95f31b97",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is already signed in. This revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which will remain valid until it expires. The method uses the global scope by default, signing out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "b3a12a4f-1cf4-417f-bf92-edbf1afe1697",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify One-Time Passwords (OTPs) for user authentication. It supports different verification types such as SMS, email, and phone number changes. The method takes in an `email`, `token`, and `type` parameter, and the specific verification type should be determined based on the corresponding auth method used for sign-up or sign-in. The `TokenHash` contained in email templates can be used for sign-in via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "b88f8f82-3731-405d-86fb-9dee617cb078",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The `get_session()` method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with by the sender. If you need trustworthy user data, it is recommended to use the `get_user()` method instead. Additionally, the method will automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "25d032c1-5def-4346-9ceb-8656fa12521f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The function `supabase.auth.refresh_session()` retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve the refresh token from the current session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "f3dbe718-5ab3-4126-a8f8-7f4fa5d2200e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating their access token JWT on the server. It can be called with an optional JWT parameter, otherwise it uses the JWT from the current session."
  },
  {
    "chunk_id": "3df1a1be-bd30-46f7-a533-73d5bad1e372",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method in the Supabase authentication API sets the session data from the current session, refreshing it if expired and obtaining a new session if the refresh token or access token is invalid. It takes an `access_token` and `refresh_token` as parameters, and upon successful execution, emits a `SIGNED_IN` event."
  },
  {
    "chunk_id": "295d9413-bd8a-4420-86f0-b5c73727c6f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers Multi-Factor Authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors for recovery, up to 10, which provides better security than relying on recovery codes alone. This approach reduces the attack surface and frees users from having to manage and store recovery codes."
  },
  {
    "chunk_id": "57507c94-696b-42a4-bda6-f04be5268827",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is:\n\nThe documentation outlines the process of enrolling a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) in the Supabase authentication system. It provides the necessary code snippet and references to create, verify, and challenge-and-verify the MFA factor, which is the only currently supported factor type."
  },
  {
    "chunk_id": "797353a8-1a77-42f2-be7e-832f875cf819",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function allows creating a challenge for a specific factor identified by its `factor_id`. This challenge can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "79083404-9a3c-4b18-a896-977b4271dc56",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions in the \"create a challenge\" documentation. The summary provides an example code snippet demonstrating how to verify a challenge by specifying the factor_id, challenge_id, and the code received from the challenge."
  },
  {
    "chunk_id": "3ae1f94f-f079-4758-b60b-f9ebd1134413",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled MFA factor is required. The `challengeAndVerify()` method executes the `mfa.challenge()` and `mfa.verify()` functions in a single step, using the `factor_id` and a one-time `code` as input parameters."
  },
  {
    "chunk_id": "c594cc8b-fc93-4300-b8f7-6ef713ffddbb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary provides instructions for unenrolling a multi-factor authentication (MFA) factor from a Supabase authentication system. It shows an example code snippet that uses the `supabase.auth.mfa.unenroll()` function to unenroll a factor with the specified `factor_id`. This functionality allows users to remove unnecessary or unwanted MFA factors, enhancing the flexibility and control of the authentication process."
  },
  {
    "chunk_id": "a3122c1a-1c30-4f71-96be-75552e1c7f49",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, which is AAL2 if the user has a verified factor, or AAL1 otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "25359c91-9654-4728-80c0-63b2ebd0d56e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Function invocation requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the request body type, but this can be overridden by passing a custom Content-Type header. An example is provided that invokes the \"hello-world\" function with a request body containing a \"name\" field."
  },
  {
    "chunk_id": "0ab1e4a0-0b5f-4b9f-a586-4cdd1d2fcc12",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can enable this functionality by managing Realtime's replication. The summary also covers subscribing to different types of events, such as broadcasts, presence changes, and row-level database updates, and provides an example of how to implement a channel subscription and handle broadcast events."
  },
  {
    "chunk_id": "345fc6bd-86b3-4af1-a4e1-ffeb8132677e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel in Supabase is recommended to maintain performance of the Realtime service and database, as unused subscribed channels can degrade performance. The `supabase.remove_channel()` function can be used to remove a channel, which Supabase will automatically clean up 30 seconds after a client disconnects."
  },
  {
    "chunk_id": "690b3f40-edba-4724-86aa-5e7f2842468c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused Realtime channels can improve project performance and database efficiency. Supabase automatically cleans up disconnected channels after 30 seconds, but maintaining too many inactive channels can degrade overall system performance. The `supabase.remove_all_channels()` function provides a way to proactively remove all channels to optimize resource usage."
  },
  {
    "chunk_id": "b2f27614-e7ea-4cc9-8ac8-4b2e40b77eaa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is:\n\nThe `get_channels()` method in the Supabase library retrieves a list of all the channels available. This is a common operation in software applications that use a channel-based messaging system, allowing developers to access and work with the available communication channels."
  },
  {
    "chunk_id": "25a827d7-cdbd-498d-8a47-25a7de18dba9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. It provides an example of subscribing to a channel, and then broadcasting a message with cursor position data to all clients in the \"room1\" channel."
  },
  {
    "chunk_id": "8883a698-7da7-4c32-a45c-c334db415d0a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a new bucket in Supabase Storage, the user requires the `insert` permission on the `buckets` table. No permissions are needed on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "557332ce-2ac0-4823-bb3b-7d070363f731",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required permissions are 'select' on the 'buckets' table. Access control for storage is detailed in the Storage guide. The code to retrieve a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "88c21fdd-2a5c-4138-b52d-192ffd3b3d04",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. The Storage guide provides details on how access control works for storage operations."
  },
  {
    "chunk_id": "09cc5aa8-95cd-4922-804b-a20ff6508b45",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. Refer to the Storage guide for details on access control. The code to delete a bucket is `supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "2de13d72-6b34-4572-ab33-44893eac1f31",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. This operation can be performed using the `supabase.storage.empty_bucket()` function. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "47ae2a15-048a-47fb-b8f1-83126a327d19",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, you need the `insert` permission on the `objects` table. The appropriate MIME type should be specified for the file, which defaults to `text/html` if not provided. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file object and the desired path on Supabase Storage, along with the file's MIME type."
  },
  {
    "chunk_id": "469ab86b-fa4e-4e12-a56b-d27e448bb4d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase Storage, the user requires the `select` permission on the `objects` table. The code example demonstrates how to download a file using the Supabase storage client, writing the file contents to a local destination. Refer to the Storage guide for more information on Supabase access control."
  },
  {
    "chunk_id": "d96a9427-50c1-4b60-93d6-ba1e170585b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the user requires `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "8f819936-4273-4ac4-8783-fb6f5ea64552",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the 'supabase.storage.from_(\"bucket_name\").update()' method, which takes the file, path, and optional file options like cache control and upsert."
  },
  {
    "chunk_id": "366265e5-94a7-4883-925e-179eb47efbce",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file can be moved using the `move()` method of the `supabase.storage.from_()` function, specifying the source and destination file paths."
  },
  {
    "chunk_id": "eba9392b-168e-4451-a9e6-48715f5230d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file from a Supabase storage bucket, you need the `delete` and `select` permissions on the `objects` table. The RLS policy permissions required are none for the `buckets` table, and `delete` and `select` for the `objects` table. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "007d47c8-c79e-4223-b4a8-9f395e27e428",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required permissions are `select` on the `objects` table. The signed URL allows secure, time-limited access to a specific file in the storage bucket. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "30a40b88-b889-4768-93c7-0674eca92bba",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithpassword",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public. No permissions are required for the `buckets` or `objects` tables. The `supabase.storage.from_('bucket_name').get_public_url('file_path')` function can be used to obtain the public URL for a file in a public bucket."
  },
  {
    "chunk_id": "63a9460b-70fb-499b-b286-2b0d5b320c8b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of APIs to interact with a Supabase Postgres database, including functionality for database operations, real-time updates, edge function invocation, user management, and file storage. It serves as a powerful SDK for building Python applications that leverage the Supabase platform."
  },
  {
    "chunk_id": "92c8ed17-7100-4f39-89e4-a06eee1defc7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content summarizes how to install the supabase-py library using PyPi. It provides the terminal command to install the library using pip, which is the recommended method for Python versions greater than 3.7. The summary highlights the key installation steps and the supported Python versions."
  },
  {
    "chunk_id": "413870c8-84cf-45a7-8290-8e7a51a5a87c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters, and optionally allows configuring the authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the central entry point for developers working with the Supabase platform."
  },
  {
    "chunk_id": "c8151b60-7bc7-477e-970d-8823051d22dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers key points about fetching data in Supabase:\n1) Supabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `range()` query can be used to paginate through data.\n2) The `select()` function can be combined with filters and modifiers to customize data retrieval, but the `apikey` column should be avoided as it is a reserved keyword."
  },
  {
    "chunk_id": "2089b17d-5dcd-4728-9656-934df8570fb8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe 'insert data' functionality allows you to insert data into a table in the database. The main parameters are 'json' (a dictionary or list of dictionaries representing the data to be inserted), 'count' (to retrieve the count of inserted rows), 'returning' (to control the response format), and 'default95to95null' (to set missing fields to null instead of the default value). An example is provided to demonstrate how to insert a single row or multiple rows using the Supabase library."
  },
  {
    "chunk_id": "b23de607-eff4-4b0b-bd6e-0dc9a742bd27",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to update data in a table. It must be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or list of dictionaries containing the new values, and an optional `count` parameter to get the count of updated rows."
  },
  {
    "chunk_id": "df8d3e84-c0c0-4fbf-9d37-c3dece28c379",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"upsert\" operation in this software documentation allows inserting or updating data in a table, with the primary key specified in the \"values\" dictionary. It supports bulk upsert operations, as well as handling unique constraints and defaulting missing fields to null. The key parameters include the data to be inserted, the method to get the row count, and options to control the behavior of the upsert operation."
  },
  {
    "chunk_id": "b9727c72-9c2c-42b1-a565-b19da12bb057",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` method in Supabase should always be used with filters to target specific items for deletion. When using `delete()` with RLS (row-level security) enabled, only rows visible through SELECT policies are deleted. The `delete().in_()` method allows deleting multiple rows in a single query by specifying an array of values, which is useful for batch deleting entries with common criteria."
  },
  {
    "chunk_id": "ee242e6a-2709-4277-b3db-d66d00e74b8e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. The Supabase library provides an `rpc()` method to call Postgres functions, with optional parameters like `params`, `get`, `head`, and `count` to control the function's behavior and output."
  },
  {
    "chunk_id": "6754d4d1-25f9-42d0-adac-0265fe1d3dc6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specific conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can be chained together and used to filter by values within JSON columns or on foreign tables. The order of applying filters matters, as demonstrated by the two example code snippets."
  },
  {
    "chunk_id": "a729df04-e377-4af0-81fc-0b9f687e8685",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by checking if a specific column is equal to a given value. The `eq()` method is used to perform this filtering, with the column name and value as required parameters. This functionality is demonstrated in an example using the Supabase library to query a \"countries\" table."
  },
  {
    "chunk_id": "a5a68ba3-abfb-4509-ba9c-778abc4068ce",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to use the `neq()` method in Supabase's `select()` function to filter a table and only return rows where a specified column is not equal to a given value. The `neq()` method takes two parameters: the column name to filter on and the value to filter by. This functionality allows developers to quickly and easily exclude specific data from their database queries."
  },
  {
    "chunk_id": "417815c4-0243-4989-a6ae-4ebb5d31f436",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to filter rows in a database table where a specified column has a value greater than a given value. The key parameters are the column to filter on and the value to filter by. This functionality is demonstrated using the Supabase table() and gt() methods."
  },
  {
    "chunk_id": "e69d93df-a435-413d-b74a-1ed1e4e1f0c5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to only include rows where a specified column has a value greater than or equal to a provided value. The key parameters are the column name and the target value, and an example is provided using the `gte()` method with the Supabase library."
  },
  {
    "chunk_id": "dcd2fa44-67a8-445a-9172-e523bdb38e7d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content provides a summary of the \"Column is less than a value\" functionality, which allows filtering data based on a column value being less than a specified value. The key technical points include the required parameters of \"column\" (the column to filter on) and \"value\" (the value to filter by), as well as an example usage of the `lt()` method with the `select()` function in a Supabase query."
  },
  {
    "chunk_id": "83099787-507a-477a-a2bb-b118c5928032",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe 'lte' (less than or equal to) method filters the data in a column to include only rows where the value is less than or equal to the specified 'value' parameter. The 'columnRequired' parameter specifies the column to filter on, and 'valueRequired' is the value to filter by. This functionality can be used with the 'select()' method to retrieve the filtered data."
  },
  {
    "chunk_id": "eb564b06-54fb-4313-b023-2f8ec8f3ae68",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column matches a pattern\" feature allows filtering rows in a table where a specified column matches a given pattern case-sensitively. The key parameters are the column name and the pattern to match, and this functionality can be used with the `like()` method when querying a table, as shown in the example."
  },
  {
    "chunk_id": "6676479f-e0a8-415e-86d3-1c53253c6ee5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `ilike()` function in the Supabase library allows you to perform a case-insensitive pattern match on a specified column. The `columnRequired` parameter specifies the name of the column to filter, and the `patternRequired` parameter specifies the pattern to match. This can be useful for searching text data in a more flexible and user-friendly way."
  },
  {
    "chunk_id": "b93b61d8-6610-4538-9b02-e9284866d813",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' section describes a filter operation that matches rows where the specified column has the provided value. The parameters include the column name and the value to match, which can be null, true, or false. This filter can be used to check for nullness or boolean values in the data."
  },
  {
    "chunk_id": "4316c088-8ef8-4b35-88da-f2b98f889c25",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a filtering operation where only rows with a specified column value included in a given array of values are selected. The column to filter on and the array of values to filter by are required parameters. This filtering can be used in a `select()` query, as shown in the example provided."
  },
  {
    "chunk_id": "d394cf56-fa4c-4630-a07f-d85b0c8130af",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" filter is only applicable to jsonb, array, and range columns. It matches rows where the specified column contains every element present in the provided value. The column to filter on and the value to filter with are required parameters. This filter can be used to search for rows where a column, such as \"tags\", contains all the specified elements."
  },
  {
    "chunk_id": "127fd572-db3d-466c-b312-cdced2a01629",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` filter is used with `jsonb`, `array`, and `range` columns to match rows where every element in the column is contained within the specified `value`. This filter can be used to search for rows where the column's contents are a subset of the given value, such as finding classes that are held on a subset of the days \"monday\", \"tuesday\", \"wednesday\", and \"friday\"."
  },
  {
    "chunk_id": "3f0d04f3-48e7-4237-b703-452bfbaec238",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is only applicable for range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The summary covers the required parameters, `column` (the range column to filter on) and `range` (the range to filter with), along with an example usage within the `select()` method."
  },
  {
    "chunk_id": "b4483ad9-ea9f-4175-8aac-94eb4c3cab34",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than or equal to a range' filter is used to match rows where every element in the specified column is either contained within the given range or greater than any element in that range. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to select rows that meet this criteria."
  },
  {
    "chunk_id": "56ee2982-0778-466a-be76-fa33cea56913",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature in the documentation is specific to range columns, allowing you to filter rows where every element in the specified column is less than any element in the provided range. The parameters include the column name and the range to filter with. This functionality can be used in a Supabase query to select data where the values in the \"during\" column are less than the given time range."
  },
  {
    "chunk_id": "236f2d31-1d9c-4985-a4ae-d1fbe64c668d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, where it matches rows where every element in the specified column is less than any element in the given range. The filter is configured with a column name and an array of range values, and can be used in a Supabase query to select rows that fall within the specified range."
  },
  {
    "chunk_id": "61be6700-456f-44f3-a888-abacd56b9cfd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is used to filter range columns, where the column value must be mutually exclusive to the specified range, with no elements between the two ranges. It takes two parameters: the column to filter on and the range to filter with. This functionality is demonstrated using the Supabase .range_adjacent() method, which can be used to select records where the \"during\" column is mutually exclusive to the given date range."
  },
  {
    "chunk_id": "864a382c-654d-428e-88b0-d965497f2e7e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis feature is only applicable to array and range columns. It allows filtering rows where the specified column and value have at least one common element. The parameters include the column to filter on and the value to filter with. Examples are provided for applying this filter on array and range columns."
  },
  {
    "chunk_id": "bca52061-5278-4da7-9424-f67a7bb1578d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information about the `text_search()` function in Supabase, which allows matching a string against a text or tsvector column in a database. It explains that this function is only relevant for text and tsvector columns, and it supports various normalization options, such as basic, full, and websearch, to customize the search behavior."
  },
  {
    "chunk_id": "a91b6eae-9436-462f-a861-b07184dea926",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided code filters a table by matching the values in the `query` object to the corresponding columns in the table. It acts as a shorthand for multiple `.eq()` calls, allowing for efficient filtering of data based on multiple criteria. The `queryRequired` parameter is an object with column names as keys and their associated filter values."
  },
  {
    "chunk_id": "0560b052-b168-45b4-8652-faf05a41868a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe documentation explains how to use the `not_` function in PostgREST filters to match rows that don't satisfy the filter criteria. This includes examples of using `not_.in_()` for filtering based on a set of values, and `not_.contains()` for filtering based on array values. The documentation also shows how to use `not_.is_()` with the `select()` function to retrieve rows where a column is not null."
  },
  {
    "chunk_id": "6a0170f6-7407-413f-ae03-dd8b421fd937",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in Supabase expects the use of raw PostgREST syntax for filter names and values, such as using parentheses for 'in' filters, curly braces for array values, and 'cs' or 'cd' for 'contains()' or 'containedBy()' operations. The or95() function can be used in combination with and96 to filter records based on multiple criteria, and can also be used to filter on referenced tables."
  },
  {
    "chunk_id": "6e3ad600-45ef-4fe5-a49c-a307001e4136",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `filter()` method in the provided software documentation expects the use of raw PostgREST syntax for filtering values. It supports various operators like `in` and `cs` (contains) for filtering columns and array values, respectively. The example demonstrates how to use the `filter()` method on a foreign table to fetch data based on specific criteria."
  },
  {
    "chunk_id": "82e99f30-f9da-457f-904a-dd57b5d55f85",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the API response, such as returning a CSV string, rather than just filtering the rows. Modifiers must be specified after filters and are applicable to queries that return rows, such as `select()` or `rpc()` calls on a function that returns a table response."
  },
  {
    "chunk_id": "c8eec602-124d-453e-8ee0-8d9b5b89e847",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe \"Order the results\" section explains how to order the query results by a specified column. It provides parameters such as `column` to specify the column to order by, `desc` to order in descending order, `foreign_table` to order results from a foreign table, and `nulls_first` to show null values first. An example is provided that orders the results from the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "470a9998-a33d-4f11-a6e0-75947c58e887",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the number of rows returned in a database query. The `limit()` method is used to specify the maximum number of rows to return, and an optional `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table. An example query shows how to limit the results to 1 row from the \"countries\" table."
  },
  {
    "chunk_id": "302ec229-dfcf-4ff0-a49c-ba1551c18c7c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to limit the query result by specifying a range using the `from` and `to` parameters. The range is 0-based and inclusive, allowing you to retrieve a subset of the records in the query result. This can be useful when you want to paginate or limit the number of records returned."
  },
  {
    "chunk_id": "9f89148c-5140-46e1-9b56-bb265e3d0e30",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of how to retrieve a single row of data from a database table using the Supabase API. It highlights the use of the `select()`, `limit(1)`, and `single()` methods to return a single object instead of an array of objects, which can be useful for specific use cases."
  },
  {
    "chunk_id": "0462a60c-ab45-4fb9-b885-349329027f53",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a database table using the Supabase library's `select()` method. The `maybe_single()` function ensures that the response is returned as a single object rather than an array, simplifying the handling of the data."
  },
  {
    "chunk_id": "ade5428e-b5a8-4455-9283-677f9b2f5b77",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the \"Retrieve as a CSV\" functionality, which allows users to return the data from a Supabase table as a string in CSV format. This can be achieved by calling the `csv()` method on the `select()` operation, as shown in the example code provided. This feature is useful for exporting data in a structured, tabular format for further analysis or integration with other systems."
  },
  {
    "chunk_id": "8a89933d-602d-4a9e-9213-7b5e87dc86bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan for any query, including those for `rpc()` or writes. While `explain` is not enabled by default due to potential security concerns, it can be enabled for testing environments or production with proper safeguards. The `explain()` method supports various parameters such as `walOptional`, `verbose`, `settings`, `format`, `buffers`, and `analyze` to configure the output and behavior."
  },
  {
    "chunk_id": "fd742c9b-006f-420a-a76f-44dc611c8d83",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, users need to verify their email address before logging in. When sign_up() is called, a user is returned but the session is null if email confirmation is enabled. If email confirmation is disabled, both a user and a session are returned. Existing confirmed users can be handled by disabling email and/or phone confirmation in the project settings, which determines the behavior when sign_up() is called for an existing user."
  },
  {
    "chunk_id": "99b6e206-31c5-450d-b656-117d09822d3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, which can be passed as an option to the sign-in function. The function returns an anonymous user, and the response includes the user's metadata."
  },
  {
    "chunk_id": "4834225f-0fd0-4842-a70c-23d7f8c1771f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides code examples for the sign-in process using the Supabase authentication API, including the required parameters and the expected response."
  },
  {
    "chunk_id": "f01d73ee-e76c-4b0f-9eba-858dd4a8764f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The passage describes a method for signing in to an application using an OIDC ID token. It requires the authentication provider to be enabled and configured, and provides a code example of how to use the `sign_in_with_id_token()` function, which takes a provider name and the ID token as parameters. The response from this function can be used to authenticate the user and grant them access to the application."
  },
  {
    "chunk_id": "313d248b-8228-4880-8b11-d029963ac6af",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The content provides a summary of the Supabase authentication feature that allows users to sign in using a one-time password (OTP) sent to their email or phone number. Key points include: 1) OTP sign-in supports both existing and new users, with an option to restrict user creation; 2) OTP can be configured to be sent as a magic link or a one-time code; 3) the destination URL for magic links is determined by the `SITE_URL` setting, and additional redirect URLs can be added; 4) the OTP and magic link implementation are the same, with the email template determining whether a code or link is sent."
  },
  {
    "chunk_id": "109cb17d-d430-440d-8340-3350d9dca1db",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "This method allows users to sign in to the application using a third-party authentication provider such as GitHub. Supabase supports various third-party providers that can be configured. The `sign_in_with_oauth()` function is used to initiate the sign-in process, with the provider name passed as a parameter."
  },
  {
    "chunk_id": "e03fc9d7-9544-4075-b9a4-88de6a9ab0e9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the Supabase CLI. You can then initiate the sign-in flow by providing either the user's email domain or a specific provider ID, which allows for more customized authentication scenarios like mapping email addresses to identity providers or using contextual information to determine the appropriate provider."
  },
  {
    "chunk_id": "c968f809-c710-48b5-bafa-2c8844eeb7ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is already signed in. Signing out revokes the refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which remains valid until it expires. The `sign_out()` method uses the global scope by default, signing out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "ad827f01-d817-4fcb-a33d-b5f8c4b071af",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords for different authentication types, including SMS, email, and account changes. The verification type should match the corresponding auth method used previously to sign up or sign in a user. The `TokenHash` obtained from the email templates can be used for sign-in via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "f7707fbe-2d73-4a8e-99fd-40e0c1a79053",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "a935fc1a-21f5-42cc-a824-a41be13039cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The function `refresh_session()` returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token parameter, and if not provided, it will attempt to retrieve the refresh token from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that the session is always refreshed, whether the current one is expired or not."
  },
  {
    "chunk_id": "308b5bd6-ddab-46a9-9172-72115053aa7f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database, instead of the local session. This is useful for checking if the user is authorized, as it validates the user's access token JWT on the server. The method can optionally take in an access token JWT, or use the one from the current session if none is provided."
  },
  {
    "chunk_id": "bde1cafd-cd3e-4756-9a30-a9a3eae92c06",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the session data using an `access_token` and `refresh_token`, and will refresh the session if it has expired or the tokens are invalid. If the operation is successful, a `SIGNED_IN` event is emitted. This is a crucial function for maintaining a valid user session and ensuring seamless user experience."
  },
  {
    "chunk_id": "56fc0015-dd3b-468a-b7b9-b4bc148deba7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers the Multi-Factor Authentication (MFA) methods available in the Supabase Auth API, specifically focusing on time-based one-time password (TOTP) as the supported 2nd factor. Users can enroll multiple TOTP factors, up to a limit of 10, which provides a recovery option without the need for separate recovery codes, reducing the attack surface compared to a single backup TOTP factor."
  },
  {
    "chunk_id": "ab30e490-85e6-47a5-bb5c-557954578a1c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor as the only supported `factor_type`. The returned `id` can be used to create a challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` functions. This functionality allows implementing multi-factor authentication for user accounts."
  },
  {
    "chunk_id": "99e5ecf4-c70f-4bc8-99a2-71643670f331",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for a multi-factor authentication (MFA) factor, an enrolled factor is required. The `mfa.challenge()` method is used to initiate the challenge, and the `mfa.verify()` method can be used to verify the challenge response."
  },
  {
    "chunk_id": "86b62dc5-cc6d-4fa7-ac6d-ef62f0789dee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `supabase.auth.mfa.verify()` function, providing the `factor_id`, `challenge_id`, and `code` parameters. This is a critical step in the multi-factor authentication (MFA) process, allowing users to authenticate their identity by verifying a previously generated challenge."
  },
  {
    "chunk_id": "68ab8c85-71f6-4268-8a94-01823b613459",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary for the content regarding \"Create and verify a challenge\" is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` method executes the `mfa.challenge()` and `mfa.verify()` functions in a single step, allowing the user to challenge and verify a factor with a given code (e.g., '123456') and factor ID ('34e770dd-9ff9-416c-87fa-43b31d7ef225')."
  },
  {
    "chunk_id": "f8aefa8e-4451-4407-9e91-1442cc1cf385",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the `supabase.auth.mfa.unenroll()` method is used, passing the unique `factor_id` of the factor to be unenrolled as a parameter. This allows users to remove a specific MFA factor they had previously enrolled, providing them greater control over their account security settings."
  },
  {
    "chunk_id": "63be66da-9d40-45ab-912d-bf1da31c15e1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the user's verified authentication level, which can be used to determine the required level of security."
  },
  {
    "chunk_id": "2793df77-66ee-4b69-a632-9040c3683dd3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase Edge Functions can be invoked using the `supabase.functions.invoke()` method, which requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the payload type, but this can be overridden. The method supports error handling and custom headers, and can be used to pass in a request body as a JSON object."
  },
  {
    "chunk_id": "1224085b-8454-4c78-98bb-89af7ae284f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can enable listening to database changes by managing Realtime's replication and setting the table's REPLICA IDENTITY to FULL. The documentation provides examples of subscribing to various Realtime events, such as broadcasts, presence changes, and table-specific updates, inserts, and deletes."
  },
  {
    "chunk_id": "aac9d289-6c9c-41a8-925a-4fcac0016e8b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase Realtime channel is recommended to maintain performance, as unused channels can cause degradation with more clients subscribed. The `supabase.remove_channel()` method allows removing a specific channel, which Supabase will automatically clean up 30 seconds after a client disconnects."
  },
  {
    "chunk_id": "38f23f06-8f02-41d2-b09f-a1a6deeb5f98",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the connected database. The Supabase platform will automatically clean up unused channels after 30 seconds, but leaving them connected can cause degradation as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all subscribed channels."
  },
  {
    "chunk_id": "10beb3d1-7a26-47e1-aaf7-17b3999a32a5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code snippet `supabase.get_channels()` retrieves all available channels. This function can be used to fetch the complete list of channels in the Supabase platform, which is a common requirement in many application scenarios."
  },
  {
    "chunk_id": "0a777766-e35e-4f8c-a01b-214f4f98511d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided code snippet demonstrates how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. The key steps are: 1) subscribing to a channel and defining a callback function to be executed upon successful subscription, and 2) using the `send_broadcast()` method to transmit a message (in this case, random cursor coordinates) to all clients connected to the channel."
  },
  {
    "chunk_id": "c895ee89-9f12-4bc2-8711-35e1e83d0f83",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase storage, you need the `insert` permission on the `buckets` table. No permissions are required for the `objects` table. Refer to the Supabase storage security guide for more details on access control."
  },
  {
    "chunk_id": "3d0c8239-8ba1-42e8-be82-35888ff75b7c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on how access control works. Use the `supabase.storage.get_bucket(name)` function to retrieve the bucket."
  },
  {
    "chunk_id": "0780bc60-e54f-4a4c-a207-4ad531f92077",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "The summary for the given content is:\n\nTo list all buckets, the required permissions are 'select' on the 'buckets' table. No permissions are required for the 'objects' table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "a28eb287-c421-401a-824a-c2695b1f6e13",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, with no permissions required on the `objects` table. The `supabase.storage.delete_bucket(name)` method can be used to delete the bucket."
  },
  {
    "chunk_id": "251ec9fc-2fe9-424a-a0c3-aacf56a56774",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The Storage guide provides details on how access control works. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "d2c8df60-3a21-4011-bce2-ebd788e6778b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires `insert` permissions on the `objects` table. The content type of the file should be specified using the `file_options` parameter, which defaults to `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file object and the desired path on Supabase Storage."
  },
  {
    "chunk_id": "30f99392-4c11-4401-978d-039fbcf22fc7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires `select` permissions on the `objects` table but no permissions on the `buckets` table. The code example shows how to download a file from a Supabase storage bucket and save it to a local destination file."
  },
  {
    "chunk_id": "f4a9a367-b3e0-44d1-b4e1-6d47c7cb4b0e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `select` permission is required on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "542e5c12-29fb-4765-8fcf-33c9313572fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the required permissions are `update` and `select` on the `objects` table. The file should be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which allows setting the file, path, and various file options like cache control and upsert behavior."
  },
  {
    "chunk_id": "8e60dbf3-e1d4-4085-9abd-614683e95bb2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code to move a file from 'public/avatar1.png' to 'private/avatar2.png' in the 'bucket_name' bucket is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "7e35d36f-d2ad-4fd6-b238-7a7f6135031b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The summary provides the necessary RLS policy permissions and a code example for the `remove()` function to delete a file named `test.jpg` from the `bucket_name` bucket."
  },
  {
    "chunk_id": "982b8b57-8a31-4526-862d-4127698bac6c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the necessary permissions are `select` on the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, and the access control details are documented in the Storage guide."
  },
  {
    "chunk_id": "7016907d-bb51-4824-baff-b44eee744186",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithotp",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public either via the `updateBucket()` function or the Supabase dashboard. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` function can be used to obtain the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "db7d36e9-e2e0-4689-a79f-2db85cbb82cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of tools for interacting with Supabase's Postgres database, including capabilities for listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. The library is well-documented, with detailed information on all available objects and methods."
  },
  {
    "chunk_id": "750de7dd-ec3c-45be-9165-b34b58dd9d69",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content provides instructions for installing the Supabase-py library, which is compatible with Python 3.7 and later versions. The installation can be done through the terminal using the pip package manager or the Conda package manager, with the command `pip install supabase`."
  },
  {
    "chunk_id": "e63c4fc2-1f05-4883-941b-3e44419b61fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and Key as parameters. The client provides access to Supabase's various features and functionalities, and can be customized with optional client options."
  },
  {
    "chunk_id": "861e2386-fbb4-4fb0-89f0-926c5921fe5f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects return a maximum of 1,000 rows by default, which can be changed in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` is a reserved keyword that should be avoided as a column name. The `select()` function allows specifying the columns to retrieve, and the `count` parameter can be used to get the count of rows returned."
  },
  {
    "chunk_id": "4c8c7253-1cb3-407b-91e4-10ea253db8a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe \"insert data\" functionality allows users to insert data into a table, either a single row using a dictionary or multiple rows using a list. The method supports several optional parameters, including a count method, a return method, and a flag to set missing fields to null. An example is provided for bulk inserting data into a \"countries\" table."
  },
  {
    "chunk_id": "3fcc61da-fe78-4b77-b79f-6ce2124e3ff9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase Python library is used to update data in a table, and it must be combined with Filters to target the specific item(s) to be updated. The method takes a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted, and an optional `countOptionalCountMethod` parameter to specify the property to use for the count of rows returned."
  },
  {
    "chunk_id": "0648a70a-6a12-4082-95bd-5dd6566f13b6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The upsert operation in the provided documentation allows inserting or updating data in a table, with primary keys being required in the `values` dict. It supports various parameters such as `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null` to customize the behavior. The example demonstrates upserting a single row into the \"countries\" table."
  },
  {
    "chunk_id": "308b2ba7-d149-4f6c-b3c4-fcef74cbc134",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` method in the Supabase client library should always be used in conjunction with filters to target the specific items to be deleted. When using `delete()` with filters and Row-Level Security (RLS) is enabled, only rows visible through `SELECT` policies will be deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by specifying an array of values."
  },
  {
    "chunk_id": "1b47dd77-23f3-4eb0-968b-1ce28aaebfd6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to call Postgres functions as remote procedure calls. Postgres functions are useful for encapsulating logic that rarely changes, such as password resets and updates. The summary provides details on the various parameters that can be used when calling a Postgres function, including options for passing in arguments, handling set-returning functions, and executing the function in read-only mode."
  },
  {
    "chunk_id": "54bb64ae-afa2-414d-98b0-151fe34a8fc9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specified conditions in Supabase queries such as `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other query methods can affect the results, as demonstrated in the provided code example."
  },
  {
    "chunk_id": "23f8e3ec-ab60-42e5-b622-95d9d4efdc0f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe `eq()` method in the Supabase library is used to filter rows where a specific column is equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This functionality is demonstrated in an example query that selects all rows from the \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "6d9197b4-832e-4065-afe0-0a6f28e03759",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided code snippet demonstrates how to use the `neq()` function in Supabase to filter a table by a column that is not equal to a specified value. The `neq()` function takes two parameters: the column to filter on and the value to filter by. This functionality can be useful for retrieving data that does not match a particular criteria."
  },
  {
    "chunk_id": "e67627d7-6c7a-4af3-a6e2-b201295432aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers how to filter a database table to include only rows where a specified column has a value greater than a provided value. This is demonstrated using the `gt()` method with the `select()` function in the Supabase library, where the `id` column is filtered to include only rows with an `id` greater than 2."
  },
  {
    "chunk_id": "73ea2b10-2790-4402-8f39-60518378c8d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThis section describes the use of the `gte()` (greater than or equal to) filter in the Supabase library to match rows where the specified `column` is greater than or equal to the provided `value`. The `gte()` function takes two required parameters: the `columnName` to filter on and the `value` to filter by. An example is provided demonstrating the use of `gte()` in a `select()` query."
  },
  {
    "chunk_id": "3509febb-08dd-4ada-94e7-623dac2efef1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a filter that matches rows where the specified column has a value less than the provided value. The parameters include the column to filter on and the value to filter by. An example is provided using the `select().lt()` method in Supabase to filter a table by a column value less than 2."
  },
  {
    "chunk_id": "6a558cb5-ff41-4de5-94bc-601ce245fd70",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column has a value less than or equal to a given value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `lte()` (less than or equal to) function."
  },
  {
    "chunk_id": "43fa9ff3-3a02-4c68-b031-087a239324f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `column matches a pattern` feature allows users to filter rows where a specified column matches a given pattern, case-sensitively. It takes two required parameters: `column`, the name of the column to filter, and `pattern`, the pattern to match. This functionality can be used in conjunction with the `select()` method to retrieve rows that satisfy the filter criteria."
  },
  {
    "chunk_id": "9314f6c5-fb6f-43a2-8232-89d474a09fec",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the content provided is as follows:\n\nThe `ilike()` function in Supabase allows filtering rows where a specified column matches a case-insensitive pattern. The `columnRequired` parameter specifies the name of the column to filter on, and the `patternRequired` parameter specifies the pattern to match. This can be useful for performing case-insensitive searches on database data."
  },
  {
    "chunk_id": "ea38522c-cb6a-4951-8c26-c78437f17b26",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The 'column is a value' feature allows users to filter a table by checking if a specified column has a particular value, including checking for null values. The parameters include the column name and the value to match, and the feature can be used to filter data based on boolean or null conditions."
  },
  {
    "chunk_id": "4a6b38ea-26e6-4f24-82a2-b7edc017313f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe `in_()` method in the Supabase client library allows filtering rows in a table where a specified column contains any of the provided values in an array. This can be useful for efficiently querying a database and retrieving only the relevant rows based on a set of criteria."
  },
  {
    "chunk_id": "bbe62aab-2de1-4411-87a3-18adb30974ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` method in Supabase is used to filter rows in a table where the specified column contains all the elements in the provided value. This is applicable for `jsonb`, `array`, and `range` column types. The method takes two parameters: the column name and the value to filter with, which can be a `jsonb` object, array, or range."
  },
  {
    "chunk_id": "e36bd7cc-d2e8-4bba-af4e-202b9172d5b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Contained by value\" section is as follows:\n\nThe \"contained by value\" operation is only applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The operation takes two parameters: the column to filter on and the value to filter with. Examples are provided for array, range, and jsonb columns."
  },
  {
    "chunk_id": "f1945147-e513-4bdb-8808-a9e13a3f072a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the specified range. The feature takes two required parameters: the column name and the range to filter with. This functionality can be used in the `select()` method of a Supabase query to retrieve rows matching the specified criteria."
  },
  {
    "chunk_id": "d9549fa6-665b-4bc0-93b9-f15a93fe200d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" operation filters a range column, keeping only rows where every element in the column is either contained in the specified range or greater than any element in the range. The operation takes two required parameters: the column name and the range to filter with. This functionality is useful for querying data where date or time ranges are involved."
  },
  {
    "chunk_id": "e3db468b-a6da-4b8c-850c-023f705727ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used with range columns to match rows where every element in the specified column is less than any element in the provided range. It takes two parameters: the column to filter on and the range to filter with. This filter can be used in a Supabase query, as shown in the example, to select rows where the \"during\" column is less than the given range."
  },
  {
    "chunk_id": "208f00c7-f023-454b-8357-400f97e01301",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns in Supabase. It matches rows where every element in the specified column is less than or equal to any element in the provided range. The filter is defined by the `range_lte()` method, which takes the column name and a range array as parameters."
  },
  {
    "chunk_id": "919a39a2-6601-4976-b5ff-93a2a810e346",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is specific to range columns in a database. It allows filtering rows where the column value is mutually exclusive to the given range, ensuring that there are no elements between the two ranges. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to retrieve the relevant data."
  },
  {
    "chunk_id": "648f1f55-aa8a-42da-9bf0-42e6e77d978e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This filter operation is only relevant for array and range columns. It matches rows where the specified column and value have at least one element in common. The parameters are the column to filter on and the value to filter with. Examples are provided for both array and range columns."
  },
  {
    "chunk_id": "de8001c1-7f35-4913-9cb7-86ce6cba2283",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Match a string\" section describes a Postgres full-text search feature that allows filtering rows where a text or tsvector column matches a given query string. It provides parameters for specifying the column, query, and various search options such as normalization and configuration. This functionality is useful for implementing advanced search capabilities in applications."
  },
  {
    "chunk_id": "2f13a6b2-c10c-408a-a936-ce29847a81cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in the provided code allows filtering a table by matching each column in the `query` object to its associated value. This is a concise way to apply multiple `eq()` (equality) filters on a table. The `match()` function takes a dictionary `queryRequired` as a parameter, where the keys are the column names and the values are the filter criteria."
  },
  {
    "chunk_id": "bbc8a307-2ea0-442d-9b95-77e4e65bf1f5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe summary describes how to use the `not_` operator in PostgREST to match rows that do not satisfy a given filter, such as not matching a specific set of IDs or not containing a specific array value. It also demonstrates how to use the `not_.is_()` method with the Supabase library to select rows where the `name` column is not null."
  },
  {
    "chunk_id": "c604ec48-ac91-4e8f-ab48-152f458cc0a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `or95()` function in Supabase expects the use of raw PostgREST syntax for filter names and values, including the use of `()` for `in` filters, `\\{\\}` for array values, and `cs` or `cd` for `contains()` or `containedBy()` filters. The `or95()` function can be used to filter on referenced tables instead of the parent table by setting the `reference95table` parameter."
  },
  {
    "chunk_id": "97f75bb4-f0b9-4809-bc1c-cdbc29178f1d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in Supabase expects users to use the raw PostgREST syntax for the filter values. This includes using `()` for the `in` filter, `cs` for the `contains()` operator, and `\\{\\}` for array values. The `filter()` method takes three parameters: the column to filter on, the operator to use, and the value to filter with. An example is shown using the `select()` method on a foreign table to filter the \"countries\" table based on the \"name\" column."
  },
  {
    "chunk_id": "e67a45d3-4fa5-4742-854c-a7546b07fd76",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to transform the output format of a query, in contrast to filters which only select rows matching certain conditions. Modifiers must be specified after filters and are only applicable to queries returning tabular responses, such as `select()` or `rpc()` functions."
  },
  {
    "chunk_id": "284b3fff-85cc-4f8c-87cc-95f372ad3b63",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order() function allows ordering the query results by a specified column, with options to sort in descending order, include nulls first, and order by a foreign table's column. The example demonstrates how to order a table of \"countries\" by the \"name\" column in descending order."
  },
  {
    "chunk_id": "40df9340-e141-4bda-9b90-d3c3fea7a905",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `select()` method in Supabase allows limiting the number of rows returned from a table using the `limit()` parameter. The `sizeRequired` parameter specifies the maximum number of rows to return, while the `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. This functionality is useful for optimizing database queries and improving application performance."
  },
  {
    "chunk_id": "be33b94a-906b-4ff2-b9a1-ebfa26bffcbb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows returning only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, meaning the specified range will include the corresponding rows. Additionally, the `foreign_table` parameter can be used to limit the rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "00a132ef-875d-4379-a3e9-5286b4a8d4c6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of how to retrieve a single row of data from a Supabase table using the `select()` and `single()` methods. The `single()` method returns the data as a single object instead of an array of objects, making it easier to work with the retrieved data."
  },
  {
    "chunk_id": "26d2ed62-e0c6-48ea-b77c-4c9a02641168",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to retrieve a single row of data from a table using the `maybe_single()` method in the Supabase client library. This is useful when you expect to retrieve at most one row that matches a specific condition, such as filtering by a unique column like \"name\". The example demonstrates how to select all columns from the \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "84fd2e6c-3427-4f59-ab1f-47ed40cface0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the `csv()` method in the Supabase library, which allows users to retrieve data from a database table as a CSV string. The example code demonstrates how to use the `csv()` method to execute a query and retrieve the resulting data in CSV format."
  },
  {
    "chunk_id": "62711745-828f-4e1f-94b7-ccd8bc045b62",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. While `explain()` is not enabled by default due to potential security concerns, it can be useful for debugging slow queries. The method supports various parameters to customize the output format and level of detail."
  },
  {
    "chunk_id": "87d8e6a1-a0c9-4437-90d8-b1f389d3e30f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the project's auth settings determines whether a user needs to confirm their email address before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. If \"Confirm email\" is enabled, a user is returned but the session is null until email confirmation. The sign-up function supports various credential types, including email/password, phone number/password, and custom metadata."
  },
  {
    "chunk_id": "633fb270-7532-47e7-ab60-03f54ff0c110",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example code snippet for creating an anonymous user with custom user metadata. The key functionality is to return an anonymous user, which can be useful for certain use cases where user identity is not required."
  },
  {
    "chunk_id": "3dabe29f-b8f1-4837-8e10-dc748e77909f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides the required parameters, including the `credentialsRequiredSignInWithPasswordCredentials`, and an example of the API call to sign in with email and password using the Supabase library."
  },
  {
    "chunk_id": "1be5edb7-6e78-4eea-b8af-80442b87980d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content summarizes the \"Sign in with ID Token\" functionality, which allows users to authenticate by providing an OIDC ID token. This feature is enabled and configured on the authentication provider side. The summary includes the required parameters, such as the provider name and the ID token, and provides an example of how to call the sign-in function using the Supabase library."
  },
  {
    "chunk_id": "ceea05b7-fd5d-4870-b460-97f339a62ab6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes the process of signing in a user through One-Time Password (OTP). It explains that the user can sign in using either an email or a phone number, and the method supports both passwordless sign-in and user signup. The summary also notes that the behavior of user creation can be controlled, and the magic link's destination URL is determined by the site's configuration. Additionally, the content covers the implementation details of magic links and OTPs, and how to modify the email template to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "4a13a688-8cf6-48fa-8cb9-cab142ac4f83",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The content summarizes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It provides details on the `sign_in_with_oauth()` method, which takes a provider parameter (e.g., 'github') to initiate the OAuth flow and authenticate the user with the specified third-party provider."
  },
  {
    "chunk_id": "8848fca0-78f4-4c3a-97a2-37bb20ea1028",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the `domain` property to start the sign-in flow for a specific email domain, or the `provider_id` property to use a different way to identify the identity provider, such as mapping specific user email addresses or using company-specific hints."
  },
  {
    "chunk_id": "b458d2cc-e391-428a-b1aa-8e23c91f0c3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth is used to sign out a user. It revokes the refresh token and deletes the JWT from the client-side, but does not revoke the access token JWT itself, which remains valid until it expires. The method uses the global scope by default, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "a14e8e59-dfbf-4605-a4d8-36ec60149424",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and password recovery. The verification type should be determined based on the corresponding auth method called before `verify_otp`. The `TokenHash` contained in the email templates can be used to sign in, and may be used with Magic Links for the PKCE flow for Server Side Auth."
  },
  {
    "chunk_id": "1bc3719a-5991-43e3-9f59-a631c4e19041",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The `get_session()` method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data on the server, as it could be tampered with. If verified, trustworthy user data is required, the `get_user()` method should be called instead. Additionally, the method will automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "3ffaee75-6377-4de5-ad5e-f67afed5c990",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it has expired or not."
  },
  {
    "chunk_id": "3e9bad70-7733-47e1-b9d4-04cfa6ef4e97",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method fetches the user object from the database, validating the user's access token JWT on the server. It is useful for checking if the user is authorized, and can be called with an optional access token JWT or the current session's JWT."
  },
  {
    "chunk_id": "cee1e78e-c833-41a1-ac84-31b541761cf2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `set_session()` method sets the session data by providing an `access_token` and `refresh_token`. If the current session is expired, it will refresh the session to obtain a new one. If the tokens are invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted. This method is used to refresh the session and maintain a valid authentication context for the application."
  },
  {
    "chunk_id": "40c4b06c-21d2-496c-91b4-eb66f3da7c9b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation describes the multi-factor authentication (MFA) methods supported by Supabase, which currently includes time-based one-time password (TOTP) as the second factor. Supabase allows users to enroll multiple TOTP factors, up to 10, which provides a recovery mechanism without the need for separate recovery codes. This approach reduces the attack surface compared to using a single backup TOTP factor or separate recovery codes."
  },
  {
    "chunk_id": "2798819f-5bfc-47f2-98dc-e4ebde96f0f5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `mfa.enroll()` function enrolls a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` should be used to create a challenge, which can be verified using `mfa.verify()` or created and verified in a single step with `mfa.challenge_and_verify()`."
  },
  {
    "chunk_id": "51486fad-8e8a-4765-a08b-f47a8ae4b906",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can then be verified using the `mfa.verify()` method, which is demonstrated with example code."
  },
  {
    "chunk_id": "6839144b-5a4b-4762-b193-ade9ffd0f138",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions in the referenced documentation. The code example demonstrates how to verify a challenge for a specific factor, including the required parameters such as `factor_id`, `challenge_id`, and `code`."
  },
  {
    "chunk_id": "777a3331-d6c9-4a0c-9483-725b0b70a1f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` methods in a single step, allowing users to challenge and verify a factor with a given code."
  },
  {
    "chunk_id": "2cc7162a-0740-4e04-9cc8-865324f96936",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the `supabase.auth.mfa.unenroll()` function is used, passing the `factor_id` of the factor to be unenrolled as a parameter. This allows users to remove a specific MFA factor from their account, providing flexibility in managing their authentication methods."
  },
  {
    "chunk_id": "53808557-9254-4f8a-bd80-69b91f35d8e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. An AAL of 1 (aal1) represents a single-factor authentication like email and password, while AAL of 2 (aal2) represents two-factor authentication like a time-based, one-time-password (TOTP). The `next_level` field indicates the higher AAL that the user can achieve by adding a verified second factor."
  },
  {
    "chunk_id": "4a43b34b-99dc-4c36-845f-aadef25f05c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function, which requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type, but this can be overridden. The function can be invoked with a request body, and custom headers can also be passed."
  },
  {
    "chunk_id": "9ad0d544-fb32-49f7-9b5d-6b65180df450",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, but row-level security is not applied to delete statements. The provided code demonstrates how to subscribe to a channel, send broadcast messages, and handle received broadcasts."
  },
  {
    "chunk_id": "7033856d-365f-45b4-90b3-1e291eff0f28",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Realtime channel is recommended to maintain project performance and database efficiency, as unused channels can degrade service as more clients subscribe. The `supabase.remove_channel()` function allows you to manually unsubscribe from a channel, which Supabase will automatically clean up 30 seconds after the client disconnects."
  },
  {
    "chunk_id": "2a4e23fe-3ce5-42b8-8376-9805b5fb464d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and database. Supabase will automatically clean up channels 30 seconds after a client is disconnected, but keeping too many unused channels can degrade performance as more clients subscribe. To remove all channels, use the `supabase.remove_all_channels()` method."
  },
  {
    "chunk_id": "c6ac5091-2d3f-4853-ad14-7966d3a5f61d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the given content is:\n\nThe `supabase.get_channels()` function retrieves all the channels available in the system. This can be useful for displaying a list of all the channels or for performing operations on the full set of channels."
  },
  {
    "chunk_id": "e50ce881-c32a-4750-9ebc-4f022b4b3d57",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to broadcast a message to all connected clients in a specific channel using the Supabase realtime API. It includes an example code snippet that demonstrates subscribing to a channel, and then sending a broadcast message with random cursor position data to all connected clients."
  },
  {
    "chunk_id": "155a136f-b97d-4280-89e2-03b60d1eb5f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` permission on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more information on access control. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "5e040057-2b32-4d73-9009-b5f7bd4427f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the necessary RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for details on how access control works. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "1a6fa26e-611c-480e-addb-e017466c6228",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the RLS policy permissions required are 'select' on the 'buckets' table and no permissions on the 'objects' table. The Storage guide provides details on how access control works for this operation, which can be executed using the `supabase.storage.list_buckets()` method."
  },
  {
    "chunk_id": "8e084231-783d-4ae7-bbb9-a71867b985b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the user requires `select` and `delete` permissions on the `buckets` table, but no permissions on the `objects` table. The deletion is performed using the `supabase.storage.delete_bucket(name)` method. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "04b18044-5122-459b-ba4c-9177e16696bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. The storage guide provides more information on access control. The Supabase API function `supabase.storage.empty_bucket(name)` can be used to empty a bucket."
  },
  {
    "chunk_id": "ad2abccf-b10b-4e6c-b25a-b9a3dffa2cf9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "The summary of the given content is as follows:\n\nTo upload a file using Supabase storage, the required RLS policy permissions are insert access to the `objects` table. When uploading files, it is recommended to specify the appropriate MIME type, especially for images and audio. If no `file_options` are provided, the MIME type defaults to `text/html`. The file can be uploaded using the `upload()` method of the Supabase storage client, providing the file path and the desired path on the Supabase storage."
  },
  {
    "chunk_id": "c888f289-ff60-4844-9dd8-7e8945645951",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are 'select' access to the 'objects' table, but no permissions are needed for the 'buckets' table. The file can be downloaded using the Supabase storage client by specifying the source file and destination path, and writing the downloaded content to the destination file."
  },
  {
    "chunk_id": "22e244fa-d39e-490b-96ee-44e1ca13dbc7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the user requires `select` permissions on the `objects` table. The code snippet `supabase.storage.from_('bucket_name').list()` can be used to fetch the list of files in the specified bucket. Refer to the Supabase Storage guide for more details on access control and permissions."
  },
  {
    "chunk_id": "6a443567-35b4-464a-ad83-a92a50829d64",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user needs `update` and `select` permissions on the `objects` table. The file is updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file data, the path on Supabase Storage, and optional file options like cache control and upsert behavior."
  },
  {
    "chunk_id": "c603c513-061c-4dfb-b8d9-f6b967fb7059",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires 'update' and 'select' permissions on the 'objects' table in the RLS policy. The example code provided demonstrates how to move a file from 'public/avatar1.png' to 'private/avatar2.png' within a specified storage bucket using the Supabase storage client."
  },
  {
    "chunk_id": "d0b8b12c-ae78-49af-8091-ebe4eb2a07ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file from a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The storage guide provides details on how to configure access control for the storage service. The code snippet demonstrates the use of the 'remove' method to delete the 'test.jpg' file from the 'bucket_name' bucket."
  },
  {
    "chunk_id": "6f488509-9c6e-49a8-98a9-2e19b6829b99",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required permissions are `select` on the `objects` table, but no permissions are needed on the `buckets` table. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function can be used to generate a signed URL that provides temporary, restricted access to a file in the specified bucket."
  },
  {
    "chunk_id": "9a02ed3f-68ab-46a3-b057-066d309b72b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithoauth",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public. No specific permissions are required on the `buckets` or `objects` tables. The `supabase.storage.from_('bucket_name').get_public_url('file_path')` function returns the public URL for the specified file. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "f2b28eaf-c1c5-4505-ab0e-b1ca64aa41e8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library provides a Python interface for interacting with the Supabase platform, allowing developers to manage their Postgres databases, listen to changes, invoke Deno Edge Functions, build authentication and user management features, and handle large file storage, all from within their Python applications."
  },
  {
    "chunk_id": "737a6855-d147-431a-8188-bea0c8ae1ace",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content describes how to install the Supabase Python library using the PyPi package manager. It provides the specific command to run in the terminal to install the library, which is compatible with Python versions greater than 3.7."
  },
  {
    "chunk_id": "b137e97a-0079-42a0-af3e-a14e69cedbde",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary entry point for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and can also accept optional `ClientOptions` to customize the authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the recommended way for developers to interact with the platform."
  },
  {
    "chunk_id": "9911629c-1c0e-4042-852e-3031c3aa328e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be used to fetch data, and it can be combined with filters and modifiers. The `apikey` is a reserved keyword and should be avoided as a column name when using the Supabase Platform."
  },
  {
    "chunk_id": "aa5a13ef-b4e4-41cd-b132-4decc1c1ec1b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe 'insert data' section describes the parameters for inserting data into a table, including a single row or multiple rows using a dictionary or list, options to specify a count method and return method, and the ability to set missing fields to null or use default values. It provides an example of inserting a record into the 'countries' table using the Supabase library."
  },
  {
    "chunk_id": "47b7e5e3-8a34-4242-84d0-2d4cceecb319",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` function in the Supabase library is used to update data in a table, and should always be combined with filters to target the specific item(s) to be updated. The function takes a dictionary or list of dictionaries representing the new values to be inserted, and an optional count method to get the count of rows returned."
  },
  {
    "chunk_id": "43e5850d-3b61-4500-9a8a-f21cac07716d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `upsert` operation allows inserting or updating data in a table. Primary keys must be included in the `values` dict to use upsert. The `upsert` function supports parameters like `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null` to customize the behavior. Upsert is useful for tables with constraints, as demonstrated in the example."
  },
  {
    "chunk_id": "5192debb-957c-45dd-b3be-16109d534273",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` operation in Supabase should always be used with filters to target the specific data to be deleted. When using RLS (Row Level Security), only rows visible through the defined `SELECT` policies will be deleted. For batch deleting, `delete().in_()` can be used with an array of values to target multiple rows in a single query, but care must be taken to ensure all intended records are accurately represented."
  },
  {
    "chunk_id": "d758cea3-dfc2-411a-8080-922e6f8cb2e1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls, which are useful when the logic rarely changes, such as for password resets and updates. The `rpc()` function in Supabase can be used to execute Postgres functions, with optional parameters for filtering, read-only access, and different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "c9934f57-5e31-4a42-9508-4ce1265aa2a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specific conditions in Supabase queries, including `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other query methods is important, as demonstrated in the example code."
  },
  {
    "chunk_id": "af8542e6-7900-44d8-9bfe-464adc26cc41",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to filter a database table by matching rows where a specific column is equal to a given value. The key parameters are the column name and the value to filter by. An example is provided using the `eq()` method in the Supabase library to select rows from the \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "de45c0fe-f706-4eb4-8e2d-1eab046dcbd6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes how to filter a database table by a column that is not equal to a specified value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library to select all rows where the \"name\" column is not equal to \"Albania\"."
  },
  {
    "chunk_id": "50200fbb-fd14-4104-b81e-e51353a0e7e3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a table by a column where the value in that column is greater than a specified value. The key parameters are the column to filter on and the value to filter by. An example is provided using the `gt()` method with the `select()` function in Supabase."
  },
  {
    "chunk_id": "e2ae4f82-dc46-45d1-a57d-bdf44d63f20f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"greater than or equal to\" filter allows matching rows where the specified column value is greater than or equal to the provided value. The key parameters are the column name and the value to filter by, which can be used with the `gte()` method in the `select()` query to retrieve the filtered data."
  },
  {
    "chunk_id": "1a323cd3-e80e-4094-9917-4221e44b1038",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The content describes how to filter a table in Supabase, a database service, to only include rows where a specified column has a value less than a given value. The key parameters are the column name and the value to filter by, and an example is provided using the `lt()` method with the `select()` function."
  },
  {
    "chunk_id": "1eda77ed-953c-4f39-8686-56d1ce8be342",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `lte()` function in Supabase allows you to filter a table by a column value that is less than or equal to a specified value. The `columnName` parameter specifies the column to filter on, and the `value` parameter specifies the value to compare against. This can be useful for quickly retrieving a subset of rows that meet a certain criteria."
  },
  {
    "chunk_id": "8d58686b-1e8f-473f-a460-040c45449c42",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column matches a pattern\" feature allows filtering rows in a table where the specified column matches the provided pattern case-sensitively. The required parameters are the column name and the pattern to match. This functionality can be used with the `select()` method, as shown in the example where the \"name\" column of the \"countries\" table is filtered to only include rows where the name contains \"Alba\"."
  },
  {
    "chunk_id": "185f7b00-8c4a-4d8d-a356-3b166055f24c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by matching a column value to a case-insensitive pattern. The `ilike()` function is used to perform the case-insensitive matching, with the column name and pattern provided as parameters. This functionality is useful for implementing flexible search or filtering capabilities in an application."
  },
  {
    "chunk_id": "f9b35080-fbd3-45e6-8ea9-f3cb321a8e43",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The column filter matches rows where the specified column has the given value, which can be a null, boolean True, or False. The `is_()` function is used to check for these conditions, as demonstrated in the example of filtering the \"name\" column for null values."
  },
  {
    "chunk_id": "ba5409ed-09d3-4718-97e4-c686a76fee93",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes a database query operation that filters rows based on the values in a specified column. The `in_()` function is used to match rows where the column value is included in the provided array of values. This allows for efficient filtering of data based on specific column criteria."
  },
  {
    "chunk_id": "da84dfe8-5567-4f05-a3f5-ac84bbc7f490",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` operator is only applicable to `jsonb`, `array`, and `range` columns. It allows filtering rows where the column contains every element in the provided `value` parameter. The `columnRequired` parameter specifies the column to filter on, while the `valuesRequired` parameter provides the `jsonb`, `array`, or `range` value to filter with. This operator is useful for searching for specific elements within array or `jsonb` data stored in a database column."
  },
  {
    "chunk_id": "99293b57-918f-49e9-873a-26822ea63bca",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operation is only applicable to jsonb, array, and range columns. It allows matching rows where every element in the specified column is contained within the provided value. The operation takes two parameters: the column to filter on and the value to filter with, which must be of the same data type (jsonb, array, or range) as the column."
  },
  {
    "chunk_id": "073d8c16-055c-4f80-8823-64dcf387fb85",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is only relevant for range columns. It allows matching rows where every element in the specified column is greater than any element in the provided range. The range is passed as an array of values, and the `range_gt()` method is used to apply this filter in a `select()` operation."
  },
  {
    "chunk_id": "8ca07be3-4864-45a2-a909-222c32affdb5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The key parameters are the column name and the range to filter with. This functionality can be used with the `range_gte()` method in the Supabase library to select relevant rows from a table."
  },
  {
    "chunk_id": "fbbdae7a-6fb0-4262-afa3-b749666d1f1f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the specified column is less than any element in the provided range. It takes two parameters: \"column\" to specify the range column to filter, and \"range\" to provide the range to filter with. This functionality can be used in the `select()` method of a Supabase query, as shown in the example."
  },
  {
    "chunk_id": "7ee914d2-dd8a-402e-88cf-37322f2105ba",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Less than or equal to a range\" section is as follows:\n\nThe \"less than or equal to a range\" filter is used to match rows in a range column where every element in the column is less than or equal to any element in the specified range. The filter takes two parameters: the column name and the range to filter with. This can be used, for example, to filter a \"during\" column containing date/time ranges to only include rows where the entire range is within a specified time window."
  },
  {
    "chunk_id": "41221477-7ce9-46b8-89f6-be74fea2ed84",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe \"mutually exclusive to a range\" feature is applicable only to range columns. It allows filtering rows where the column value is outside the specified range, ensuring no elements exist between the two ranges. The feature is configured by providing the column name and the range as parameters."
  },
  {
    "chunk_id": "99c707ac-8633-443d-8273-e917f9981df6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This summary is for the \"With a common element\" section of the software documentation. The key points are:\n\nThe \"With a common element\" filter is only applicable to array and range columns. It matches rows where the specified column and value have at least one element in common. The parameters are the column to filter on (required) and the value to filter with (required, can be an iterable). This filter can be used in queries on both array and range columns, as demonstrated in the Supabase query example provided."
  },
  {
    "chunk_id": "c89a14c5-f8f5-4da7-9086-f1cf78adc322",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Match a string\" functionality, which is only relevant for text and tsvector columns in a database. It allows filtering rows where a specified column matches the provided query string, using Postgres full-text search capabilities. The summary includes the required parameters (column and query) as well as optional parameters (options) for customizing the search behavior, such as normalization and configuration settings."
  },
  {
    "chunk_id": "9e958206-fb46-487d-90aa-292e0a0ace40",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method filters a table by matching each column in the `query` object to its associated value. This is a shorthand for multiple `eq()` calls, allowing for more concise filtering operations. The `query` parameter is an object with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "69d67093-1b8b-4ecd-8c0d-28cd0a75e971",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to use the `not_` operator in PostgREST filters to match rows that do not satisfy the specified criteria, such as not being in a given set of IDs or not containing a specific value in an array column. It also provides an example using the Supabase library to select all rows from the \"countries\" table where the \"name\" column is not null."
  },
  {
    "chunk_id": "1e267754-01ad-4f35-b390-ff87eb5528a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `or95()` function in the provided software documentation allows users to match at least one filter, using the raw PostgREST syntax for the filter names and values. This includes the ability to use `in` filters, array values, and `contains()` or `containedBy()` operations. The function takes two parameters: `filtersRequired` for the filter string, and an optional `reference95table` to filter on referenced tables instead of the parent table."
  },
  {
    "chunk_id": "f4216a5e-dcb2-4545-b690-2cdb0d379f6c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the PostgREST library expects the use of raw PostgreSQL syntax for filter values. It supports various operators like 'in' for filtering on a set of values, and 'cs' for filtering on array columns that contain specific elements. The filter method can be used in conjunction with the select() method to retrieve data from a foreign table based on specific filter criteria."
  },
  {
    "chunk_id": "20f38a29-a547-45db-b2d7-5731a29ef228",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate on the row level. Modifiers must be specified after filters and are applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "995522b6-8eb8-4a4c-88c2-7e3744e597bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order the results section explains how to order the query result by a specified column. The key parameters are: `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the foreign table to order), and `nulls_first` (whether to show nulls first). An example is provided to order a `countries` table by the `name` column in descending order."
  },
  {
    "chunk_id": "7decae19-aa97-45a8-a6a5-c7992818fd99",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is as follows:\n\nThe documentation describes how to limit the number of rows returned by a database query using the `select()` function in Supabase. The `limit()` parameter is used to specify the maximum number of rows to return. Additionally, the `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "bf8c9a83-ec50-4779-bb25-09b60149f4cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in the Supabase library allows you to limit the query result by specifying a starting offset (`from`) and ending offset (`from + to`). This is useful for pagination, as it returns only the records within the specified range while preserving the query order. The `from` and `to` parameters are 0-based and inclusive, and you can also use the `foreign_table` parameter to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "2b8438e0-7a09-4eef-8aa6-a9e5cbeb19ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary retrieves a single row of data from the \"countries\" table using the Supabase client library. It demonstrates the use of the `select()`, `limit(1)`, and `single()` methods to return a single object instead of an array of objects, which is useful when you only need to retrieve one record."
  },
  {
    "chunk_id": "d6b5514a-94b5-4ba8-a9cd-d6ab9ab55e21",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The <code>maybe_single()</code> method in the Supabase query returns a single object instead of an array, handling cases where the query results in zero or one row. This is useful when the expected result is a single record, as it simplifies the handling of the response data."
  },
  {
    "chunk_id": "df98d200-012e-4e55-8ed2-19b0af07936c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The documentation describes the \"Retrieve as a CSV\" feature, which allows users to return the data from a Supabase table in CSV format. This is demonstrated with an example code snippet that selects all columns from the \"countries\" table and executes the CSV output. This functionality enables users to easily export and work with data in a widely-supported spreadsheet format."
  },
  {
    "chunk_id": "b9541e2f-abbc-4144-9d05-5c9887f14014",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to debug slow queries by providing the execution plan for a query. It can reveal sensitive database information, so it's recommended to only enable it in testing environments. The `explain()` method supports various parameters such as `wal`, `verbose`, `settings`, `format`, `buffers`, and `analyze` to customize the output and include additional details."
  },
  {
    "chunk_id": "d8fe82ae-c878-48ca-b5c6-927efd5505e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nTo create a new user in Supabase, the user can sign up with an email and password. By default, the user needs to verify their email address before logging in, but this can be disabled in the project settings. Depending on whether email confirmation is enabled or disabled, the response will either return a user object without a session, or both a user object and a session. Additionally, the redirect URL after email confirmation can be customized in the project settings."
  },
  {
    "chunk_id": "188493b2-3f30-4893-acc1-caee3c5a76eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `supabase.auth.sign_in_anonymously()` function returns an anonymous user. It is recommended to set up a captcha for anonymous sign-ins to prevent abuse, which can be passed in the `options` parameter. The function can also be used to create an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "dae8cfd5-830c-4ee0-9b2f-c95e64dafb19",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To sign in an existing user, the API requires either an email and password or a phone number and password. The `supabase.auth.sign_in_with_password()` method is used to authenticate a user by providing the necessary credentials, such as `email` and `password` or `phone` and `password`. The method returns a response object containing the authenticated user's data."
  },
  {
    "chunk_id": "57c84fdc-d58b-4061-bd9d-f58bcabd226d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is: Allows signing in with an OIDC ID token, where the authentication provider must be enabled and configured. The `sign_in_with_id_token` function is used, taking a provider and the ID token as parameters, and returns the authentication response."
  },
  {
    "chunk_id": "3dbb5d21-7f3a-4408-aae4-f9d68c479ef1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `sign_in_with_otp()` method is used for passwordless sign-ins, where an OTP is sent to the user's email or phone number. It can be used to sign in existing users or create new users if they don't exist. Developers can configure whether users receive a magic link or an OTP, and can customize the magic link's destination URL. This method provides a secure, convenient way for users to authenticate without a password."
  },
  {
    "chunk_id": "1b99a8fd-e3da-4cb2-a6ae-f9f00f17b26f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "This method allows users to sign in to the application using a third-party identity provider, such as GitHub, through the Supabase OAuth integration. Supabase supports various third-party providers, and the `sign_in_with_oauth()` function is used to initiate the OAuth flow and obtain the user's credentials. Developers can also specify scopes to request additional permissions from the third-party provider during the sign-in process."
  },
  {
    "chunk_id": "24bf249f-106d-42b6-be94-070b06d960ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the email domain associated with the identity provider or the provider ID, to initiate the authentication flow. This allows you to map specific user email addresses or use different hints to identify the appropriate identity provider."
  },
  {
    "chunk_id": "94b68ea0-1be2-4c38-bf63-0aa836904f78",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth is used to sign out a user, but it requires the user to be signed in first. When a user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side, but the access token JWT remains valid until it expires. The `sign_out()` method by default uses the global scope, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "d62a037a-b05e-4755-bcb0-d0c03f2dc4a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify a one-time password (OTP) for various authentication types, such as SMS, email, recovery, and email change. The verification type should match the corresponding auth method called previously. The TokenHash obtained from the email templates can be used to sign in with the PKCE flow for server-side auth."
  },
  {
    "chunk_id": "a87c8bb2-5840-449d-b397-5a5065e2f478",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified user data is required, the `get_user()` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "a6190a0c-51bb-4f4c-93ed-55f84a86c861",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it has expired or not."
  },
  {
    "chunk_id": "07071b5e-ce9b-4f8b-aa15-27ca64c66f1c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for verifying the user's authorization by validating their access token JWT on the server. The method can be called with an optional JWT parameter to fetch the user associated with a custom access token, or without any parameter to get the user associated with the current session."
  },
  {
    "chunk_id": "fcfc0619-6858-4f52-bb61-e64df2715485",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The `set_session()` method sets the session data by taking an `access_token` and `refresh_token` as parameters. If the session is expired, it will refresh the session. If the tokens are invalid, an error will be thrown. If the operation is successful, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "bb147598-bf58-4bc2-bc0d-19dc51928e55",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation describes the Auth MFA (Multi-Factor Authentication) functionality provided by Supabase. It currently supports time-based one-time password (TOTP) as the second factor, allowing users to enroll up to 10 TOTP factors for recovery, eliminating the need to store recovery codes. This approach enhances security by reducing the attack surface compared to a single backup TOTP factor."
  },
  {
    "chunk_id": "4efe5910-0acc-43aa-882f-4d58bdf3624b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The documentation describes how to enroll a time-based, one-time password (TOTP) factor as the only currently supported `factor_type`. The returned `id` can be used to create and verify a challenge using the `mfa.challenge()`, `mfa.verify()`, or `mfa.challenge_and_verify()` functions. The example code demonstrates how to enroll a TOTP factor with a specified `friendly_name`."
  },
  {
    "chunk_id": "1d278d15-de05-4d5f-b821-8a166bf30648",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for an MFA factor, the user must have an enrolled factor. The `mfa.challenge()` function can be used to initiate a challenge, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "d3bf4556-ee25-495d-a091-c4373904c99d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge by following the instructions in the \"/docs/reference/python/auth-mfa-challenge\" documentation. The verification process involves providing the `factor_id`, `challenge_id`, and `code` parameters to the `supabase.auth.mfa.verify()` function, which will validate the challenge and complete the authentication process."
  },
  {
    "chunk_id": "c4e2b1f4-0f61-4869-921b-19cfe3bd578c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking a factor ID and a code as input parameters."
  },
  {
    "chunk_id": "fa0a1c2a-9ef0-44ea-a853-e6e586471f26",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to unenroll a factor, which is a security mechanism that requires additional verification when logging in. The code snippet demonstrates the Supabase API call `supabase.auth.mfa.unenroll()` that can be used to unenroll a specific factor identified by the `factor_id` parameter."
  },
  {
    "chunk_id": "cf43ae69-960a-4d72-b8b0-a2feda60db52",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the user's verified authentication level, which can be used to determine the appropriate level of access or security."
  },
  {
    "chunk_id": "8264c528-94dc-4ef6-8d33-28f9dd9b159a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvoking a Supabase Edge Function requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type, but this can be overridden. The function is invoked using the supabase.functions.invoke() method, which takes the function name and an optional dictionary of invoke options, including the request body."
  },
  {
    "chunk_id": "02540a70-c8b0-41fd-90f6-1a52b7255ea5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary covers the key technical points about subscribing to a Supabase channel:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Developers can enable listening to specific table changes by setting the table's REPLICA IDENTITY to FULL. The summary also provides code examples for subscribing to various Realtime events, such as broadcasts, presence updates, and database changes."
  },
  {
    "chunk_id": "07460139-178b-4b76-b33f-095fd08cf68d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain Realtime service performance and database efficiency. The `supabase.remove_channel(myChannel)` function allows you to unsubscribe from a channel, which Supabase will automatically clean up 30 seconds after the client disconnection. Unused channels can degrade performance as more clients are subscribed simultaneously."
  },
  {
    "chunk_id": "0c558bcb-5b5b-4dd8-a969-6f17e51628a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically cleans up disconnected channels after 30 seconds, but keeping too many channels subscribed can degrade the system. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "db0cda66-440d-4adb-82f5-46272debe36f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code retrieves all available channels from the Supabase database. This functionality allows users to access and work with the full set of channels in the application."
  },
  {
    "chunk_id": "fa014d2a-af9c-4c56-842d-815886fef61f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to broadcast a message to all connected clients of a specific channel using the Supabase Realtime API. It provides an example of subscribing to a channel, and then sending a broadcast message with random cursor position data to all connected clients."
  },
  {
    "chunk_id": "deb23ede-6df6-4940-a0ec-d83d2b0b045b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase Storage, the user requires the `insert` permission on the `buckets` table. No permissions are needed for the `objects` table. Refer to the Storage guide for detailed information on access control. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "92d18e2e-df09-48b0-af1e-7727267a0caa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more details on how access control works. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "7533d23b-af0c-431b-b44d-932e65c6821b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the RLS policy requires `select` permissions on the `buckets` table but no permissions on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "39033489-b7c1-4697-8708-a574e458df2d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the user requires the `select` and `delete` permissions on the `buckets` table, but no permissions are needed on the `objects` table. The `supabase.storage.delete_bucket(name)` function can be used to perform the deletion operation."
  },
  {
    "chunk_id": "3410fed6-a9a9-44c4-baba-3b6bba4587ca",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: 'select' permission on the 'buckets' table and 'select' and 'delete' permissions on the 'objects' table. The Storage guide provides details on how access control works. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "d638cace-1fac-4715-8d1f-b4e74e01c812",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase storage, the required RLS policy permissions are 'insert' on the 'objects' table. The content MIME type should be specified, otherwise it defaults to 'text/html'. Files can be uploaded using the Supabase storage client and the 'upload' method, providing the file path and desired storage path, along with the appropriate content type."
  },
  {
    "chunk_id": "3060dcc9-aac7-48dd-acb6-deba2d5648cc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires the `select` permission on the `objects` table, but no permissions are needed on the `buckets` table. The code snippet demonstrates how to download a file from a Supabase storage bucket to a local destination file."
  },
  {
    "chunk_id": "0132ccdf-3883-45cd-b60a-27d108993902",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the user requires `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "5f648c81-deb3-4120-a3c0-8883d72bdf1b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase, you need \"update\" and \"select\" permissions on the \"objects\" table. The process involves opening the file, and then using the `supabase.storage.from_(\"bucket_name\").update()` method to update the file in the specified storage bucket, with optional cache control and upsert settings."
  },
  {
    "chunk_id": "dd69988c-7901-4b01-94bc-2e7a275ca7a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires 'update' and 'select' permissions on the 'objects' table, but no permissions on the 'buckets' table. The storage guide provides details on configuring access control. The code example shows how to move a file from 'public/avatar1.png' to 'private/avatar2.png' within the specified bucket."
  },
  {
    "chunk_id": "0f4652be-fab1-4ac7-9fb2-2118e91c35a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The `buckets` table permissions are not required. Refer to the Supabase Storage guide for more information on access control and permission management."
  },
  {
    "chunk_id": "4e103adb-74ab-45b8-9c37-2c46a447a705",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions must have `select` access. The signed URL allows time-limited access to a specific file in a storage bucket, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "a92e50e3-97ad-4cff-af1f-073c88d4d5d5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithidtoken",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in Supabase Storage, the bucket must be set to public. The required permissions are none for both the `buckets` and `objects` tables. The public URL can be obtained using the `get_public_url()` method of the `supabase.storage.from_()` interface, passing the file path as an argument."
  },
  {
    "chunk_id": "aabf9ca8-c597-4309-9caf-2818b62291f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library provides a Python client for interacting with the Supabase platform, which includes capabilities for working with Postgres databases, listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. This library serves as a comprehensive reference for all the available objects and methods in the supabase-py library."
  },
  {
    "chunk_id": "8308a773-8585-4ac2-abe3-7c3b1446fa27",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the supabase-py library via pip for Python 3.7 and above. The installation can be done through a terminal, and the command to install the library is `pip install supabase`."
  },
  {
    "chunk_id": "1b1b7f25-ddaf-47cd-8bd3-2f5cf546d8ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters. The client can also be configured with optional options to customize the authentication behavior."
  },
  {
    "chunk_id": "3e1ac8c0-355e-43e0-8abb-c14f0958f92d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Supabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `range()` function can be used to paginate through data.\n2. The `select()` function can be combined with filters and modifiers to customize data retrieval.\n3. The `apikey` is a reserved keyword in the Supabase Platform and should be avoided as a column name."
  },
  {
    "chunk_id": "0994806e-38bc-4c59-9962-f154a8a3d24e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe 'insert data' section describes the parameters for inserting data into a table using the Supabase library. The 'jsonRequireddict, list' parameter accepts a single dictionary or a list of dictionaries to insert one or more rows. Additional optional parameters include 'countOptionalCountMethod' to specify the property for row count, 'returningOptionalReturnMethod' to control the response format, and 'default95to95nullOptionalbool' to set missing fields to null. An example of a bulk insert operation is provided."
  },
  {
    "chunk_id": "9463f11b-2cd2-4df5-adb8-19a7bd5065cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to modify existing data in a table. It must be combined with filters to target the specific rows to be updated. The method accepts a dictionary or list of dictionaries representing the new values to be written, and an optional `count` parameter to retrieve the number of affected rows."
  },
  {
    "chunk_id": "71b32389-e353-4190-929c-119e69f47bae",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe 'upsert' function in the Supabase library allows inserting or updating data in a table. Primary keys must be included in the 'values' dictionary to use upsert. The function takes parameters such as 'values' (a dictionary or list of dictionaries for single or multiple row insertion), 'count' (to get the count of rows returned), 'returning' (to specify the return method), 'ignore_duplicates' (to ignore duplicate rows), 'on_conflict' (to specify columns to work with UNIQUE constraints), and 'default_to_null' (to make missing fields default to null). The summary demonstrates an example usage of the 'upsert' function."
  },
  {
    "chunk_id": "4668091b-8f8e-46b1-a5f7-1121fce5a016",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` function in Supabase should always be combined with filters to target specific items for deletion. When using `delete()` with RLS (Row-Level Security) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows for batch deleting of entries that share common criteria, such as deleting users by their IDs. The `countOptionalCountMethod` and `returningOptionalReturnMethod` parameters can be used to customize the delete operation further."
  },
  {
    "chunk_id": "52e2d1ea-1725-4748-a9b7-e7851eafa4f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nPostgres functions can be called as Remote Procedure Calls to execute database logic from anywhere. They are useful for operations that rarely change, such as password resets and updates. The documentation provides details on calling Postgres functions, including parameters like `fn`, `params`, `get`, `head`, and `count` for controlling the function call behavior."
  },
  {
    "chunk_id": "cc4f8ba7-1646-4e1c-8e5c-dca43b012389",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to restrict the rows returned by SQL queries, such as `select()`, `update()`, `upsert()`, and `delete()`. They can be applied to Postgres functions that return tables. Filters can be chained and used to filter by values within JSON columns or across foreign tables, enabling precise data retrieval."
  },
  {
    "chunk_id": "b7616ca3-6979-41d2-a13d-8d056f20d410",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a table by matching rows where a specified column is equal to a given value. The `eq()` function is used to apply this filter, taking the column name as a string parameter and the value to filter by as a parameter of any type. This is demonstrated in an example using the `select()` function to retrieve rows from a \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "dcb5d29e-114e-41e6-b9a8-86ae5c272c05",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a filter operation that selects rows from a table where the value in a specified column is not equal to a given value. The key parameters are 'column' (the column to filter on) and 'value' (the value to filter by). This functionality is demonstrated using the Supabase library's `neq()` method, which allows efficient filtering of data based on inequality comparisons."
  },
  {
    "chunk_id": "214fb199-66f6-428d-a257-bb9e30eccfad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The code snippet demonstrates how to filter a table in Supabase, selecting only the rows where the value in a specified column is greater than a given value. The key parameters are the column name and the comparison value, which can be used to create more complex queries."
  },
  {
    "chunk_id": "b24372d2-2334-4be9-9a66-11d5c73f4c54",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe documentation describes a filter operation that matches rows where the specified `column` is greater than or equal to the provided `value`. The `select()` method can be used to apply this filter, as shown in the example `supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()`. This functionality allows users to easily retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "9b898ad7-05b9-47e9-a9ef-ffffadadc0f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `lt()` function in Supabase allows filtering a table to include only rows where the specified `column` has a value less than the provided `value`. This is a common operation in data processing and querying, enabling users to quickly retrieve a subset of data that meets specific criteria."
  },
  {
    "chunk_id": "411e3698-1d5d-433e-be7a-0a944bbadc94",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe column filter `lte()` matches only rows where the specified `column` is less than or equal to the provided `value`. This can be used with the `select()` method to retrieve data from a Supabase table, as shown in the example: `supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()`."
  },
  {
    "chunk_id": "70efc45c-f1fd-4546-872f-3b923b2bdc59",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a SQL-like filter operation that matches rows where a specified column matches a given pattern case-sensitively. The operation is demonstrated with the `like()` method in the Supabase library, which can be used to filter a table by a pattern match on a column."
  },
  {
    "chunk_id": "bdc4ab6a-ea2e-4161-bb95-27e55e134eeb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis documentation describes the 'ilike' filter in the Supabase database, which allows for case-insensitive pattern matching on a specified column. The 'ilike' filter takes two required parameters: the column name and the pattern to match, and can be used in a 'select()' query to filter the data accordingly."
  },
  {
    "chunk_id": "d905cd21-2354-486c-a700-043e6147cd13",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" feature allows users to filter table rows based on a specified column and value. It supports checking for null, true, or false values. This functionality can be used in SQL queries to retrieve data that matches the given column-value criteria."
  },
  {
    "chunk_id": "d55e2ad1-312d-4565-bbd8-cc49ce819097",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes the \"in_\" operator in the Supabase library, which allows filtering rows based on whether a column value is included in a specified array of values. The \"in_\" operator takes two required parameters: the column name to filter on and an array of values to match against."
  },
  {
    "chunk_id": "76b309b6-7592-4ba1-9ab9-a26a02229853",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This column contains filter matches rows where the specified column (only relevant for jsonb, array, and range columns) contains every element of the provided value. The parameters are the column name and the value to filter with, which can be a jsonb object, an array, or a range. This is useful for filtering on complex data structures stored in database columns."
  },
  {
    "chunk_id": "5c2ce3dc-1284-46d3-b64d-be1b5a284775",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operator is only applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The operator takes two parameters: the column to filter on and the value to filter with. Examples are provided for using this operator with array, range, and jsonb columns."
  },
  {
    "chunk_id": "6c2213d1-23b7-4383-bd43-bedaa88da62f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is only applicable to range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The parameters include the column name and the range to filter with. This can be used in a `select()` query, as shown in the example."
  },
  {
    "chunk_id": "3d0cbb48-b751-49e8-8cf7-4e446b62ed4a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature allows filtering rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The key parameters are the \"column\" to filter on and the \"range\" to apply the filter with. This feature can be used in a Supabase query to select rows where the values in the \"during\" column are greater than or equal to the specified date range."
  },
  {
    "chunk_id": "2b18b306-f3c0-48a7-950f-d2ed01390237",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is specific to range columns, allowing you to filter rows where every element in the column is less than any element in the provided range. The key parameters are the column name and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column has values less than the specified range."
  },
  {
    "chunk_id": "446c91ba-1f38-47f4-8101-5fa9be0b02a9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns in Supabase, allowing you to match rows where every element in the specified column is less than or equal to any element in the provided range. The key parameters are the column name and the range to filter against, as demonstrated in the example query."
  },
  {
    "chunk_id": "aa20f623-fb74-41d9-b648-d052d8d99a87",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is used to filter rows in a range column, where the value in the column must be mutually exclusive to the specified range and there can be no element between the two ranges. The key parameters are the \"column\" to filter on and the \"range\" to filter with. This functionality can be used with the `range_adjacent()` method in Supabase to retrieve data that meets these criteria."
  },
  {
    "chunk_id": "c0ca93a0-8dd2-4b69-9ad5-2bba339c5fe2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis documentation discusses the \"With a common element\" filter for array and range columns in a database table. It allows matching rows where the specified column and value have at least one element in common. The key parameters are the column to filter on and the value to filter with. This type of filtering is useful for operations like finding issues that have specific tags."
  },
  {
    "chunk_id": "6293a266-1d1d-40b4-82bd-9bd27d74e54c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Match a string\" functionality, which is relevant for text and tsvector columns in a database. It allows filtering rows where the specified column matches the provided query string, with options for normalization and configuration. The example demonstrates using the Supabase library to perform a full-text search on a \"content\" column using the \"text_search\" method."
  },
  {
    "chunk_id": "4240bed5-2949-4ce2-b1cb-dda8c26fcaaa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in the provided code filters a database table by matching each column in the `query` object to its associated value. This is a shorthand way of expressing multiple `.eq()` calls. The `match()` function takes a dictionary as a parameter, where the keys are the column names and the values are the filter values to match."
  },
  {
    "chunk_id": "4650f9fd-96db-4514-bdac-4e6c65bb5708",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on how to use the `not_` operator in PostgREST filters to match rows that don't satisfy the specified criteria. It demonstrates examples of using `not_.in_()` for filtering based on a list of values and `not_.contains()` for filtering array values. Additionally, it shows how to use the `not_.is_()` filter with the `select()` method in the Supabase library to fetch rows where a column is not null."
  },
  {
    "chunk_id": "c67f6afc-ec07-46fc-8243-a86656d562cc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the documentation expects the use of raw PostgREST syntax for filter names and values, such as using parentheses for 'in' filters, curly braces for array values, and 'cs' or 'cd' for 'contains()' or 'containedBy()' filters. The or95() function can be used to filter on referenced tables instead of the parent table by setting the optional 'reference95table' parameter."
  },
  {
    "chunk_id": "8b064ec1-8056-438b-b1a4-846c7f5147cc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the provided example expects the use of raw PostgREST syntax for the filter values. It supports different operators such as `in` for filtering on a list of values and `cs` for filtering on an array column that contains specific elements. The examples demonstrate how to use the `filter()` method on a foreign table to select data based on specific column values."
  },
  {
    "chunk_id": "c7925500-168d-4437-a3ed-3d3fe9f95756",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response, such as returning a CSV string, rather than just filtering rows. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "bb43797d-97dc-4196-9caf-eed5811a1f2e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'order' function allows ordering the query result by a specified column, with optional parameters to control the order direction (ascending/descending) and handling of null values. This is demonstrated with an example of ordering a 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "31e778bf-8c1a-4b5e-a598-48daf992450d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `limit()` function in the Supabase library allows developers to specify the maximum number of rows to return from a database query. This can be useful for pagination, performance optimization, or retrieving a subset of data. The `limit()` function takes a single `number` parameter to set the maximum number of rows, and can be used when querying foreign tables by specifying the `foreign95table` parameter."
  },
  {
    "chunk_id": "2d88406e-98d1-4029-9b25-6a83e06da8f3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content explains how to limit the query results to a specific range by specifying the starting index (`from`) and the ending index (`to`). This allows the user to retrieve only the desired subset of records, which can be useful when dealing with large datasets. The range is 0-based and inclusive, meaning the specified indices are part of the result."
  },
  {
    "chunk_id": "90f63842-8bd7-447b-9392-073403fd3e1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The Supabase `select()` method can be used to retrieve a single row of data from a table, by setting the `limit(1)` and `single()` options. This allows you to retrieve data as a single object instead of an array of objects, which can be useful for certain use cases."
  },
  {
    "chunk_id": "6562b16b-1769-4bdc-8da4-cfe72d102461",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `maybe_single()` method in the Supabase API allows you to retrieve a single row of data from a table, or return `null` if no matching rows are found. This is useful when you expect to retrieve at most one row that matches a specific condition, such as filtering by a unique column like \"name\". The summary demonstrates how to use `maybe_single()` in a Supabase query to fetch a single object representing the data for the country \"Albania\"."
  },
  {
    "chunk_id": "669ab608-7a5a-4321-b985-19b4a34a4e3c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The content describes the 'Retrieve as a CSV' functionality, which allows returning data from a Supabase table as a CSV string. This can be achieved using the `csv()` method on the `select()` query, as shown in the example. The CSV format is useful for exporting and sharing data in a tabular format."
  },
  {
    "chunk_id": "2aa16384-54b7-4a63-91b2-d7c070009945",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe Postgres `EXPLAIN` command can be used to debug slow queries by revealing the execution plan. It can be enabled in a Supabase project by following the Performance Debugging Guide, but should be used carefully as it can expose sensitive information. The `explain()` method supports various optional parameters to control the output, such as including information on WAL record generation, configuration settings, buffer usage, and actual run time."
  },
  {
    "chunk_id": "9a58cd29-364f-4948-8c8b-5e1f29cac4f1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the project dashboard determines whether a user needs to verify their email before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. If it is enabled, only a user is returned, and the user must verify their email before logging in. The user can be fetched using the `get_user()` function."
  },
  {
    "chunk_id": "7ee8d241-d4fa-45e4-819b-df81a0ca7c03",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe function `supabase.auth.sign_in_anonymously()` returns an anonymous user. It is recommended to set up a captcha to prevent abuse, which can be passed in the `options` parameter. The response includes the signed-in anonymous user and their custom user metadata."
  },
  {
    "chunk_id": "ff7c6d92-05b0-435e-aca3-cac12383403d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. The required parameters include `credentialsRequiredSignInWithPasswordCredentials`, and the code example demonstrates signing in with an email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "e8666694-8ebf-46e7-a722-50768bafc564",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase authentication API allows signing in users with an OIDC ID token. This feature is useful when integrating Supabase with authentication providers that support ID tokens, such as Google. The `sign_in_with_id_token()` method takes the provider name and the ID token as parameters, and returns the authenticated user's session."
  },
  {
    "chunk_id": "00528a15-00d8-4257-ac47-ad1c44fa183b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the process of signing in a user through One-Time Password (OTP) authentication. It requires either an email or phone number, and can be used for passwordless sign-ins. The `sign_in_with_otp()` function can automatically create a new user if they don't exist, unless the `should_create_user` option is set to `false`. Users can receive either a magic link or an OTP code, and the magic link's destination URL is determined by the `SITE_URL` configuration. The summary also notes that magic links and OTPs share the same implementation, and the email template can be modified to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "25d8f504-b5f7-4522-95db-8d28077d7abe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a popular authentication method that allows users to sign in using third-party providers. Supabase supports various third-party providers, and the `supabase.auth.sign_in_with_oauth()` method can be used to initiate the OAuth flow, specifying the provider as a parameter. This authentication method is useful for allowing users to sign in conveniently without the need to create a separate account."
  },
  {
    "chunk_id": "ce6736b9-66f8-4314-b711-d011c28ecccb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then start the sign-in flow by providing either the user's email domain or a specific provider ID, which allows for more advanced use cases like mapping specific email addresses or using contextual information to identify the identity provider."
  },
  {
    "chunk_id": "db0cbebd-6138-419a-8b5a-cf129554815f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method can be used to sign out a user from the Supabase Auth system. It revokes the user's refresh token and deletes the JWT from the client-side, effectively logging the user out of all active sessions. However, the existing access token JWT will remain valid until it expires, as Supabase Auth uses JWTs for authentication."
  },
  {
    "chunk_id": "4c2a9ae1-313e-40a9-89c2-cd6cae8c6cd4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method in the Supabase authentication API is used to verify one-time passwords (OTPs) for various authentication types, including SMS, email, and account changes. The verification type should be determined based on the previous authentication method used. The `TokenHash` contained in email templates can be used for server-side authentication flows like the PKCE flow."
  },
  {
    "chunk_id": "3882005d-10f2-4db0-a61a-e31aea137321",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user()` method should be used instead. The method also handles expired access tokens by using the refresh token to get a new session."
  },
  {
    "chunk_id": "11acc1dc-8da2-405e-b1ce-cb951d5bf7d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve it from `get_session()`. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session without needing to check its expiry status."
  },
  {
    "chunk_id": "4f436731-9c1a-4fd6-87d7-049f2f4f3228",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. The method takes an optional access token JWT, and if none is provided, it uses the JWT from the current session."
  },
  {
    "chunk_id": "4b8797f8-2d47-4e6c-8518-e77794ef43f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data by taking an `access_token` and `refresh_token` as input parameters. If the current session is expired, it will refresh the session to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "24f7c5f5-ab74-4537-b03a-4868d46c5ec4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation describes the Auth MFA (Multi-Factor Authentication) functionality in the Supabase platform, which currently supports time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to a limit of 10, providing a more secure recovery mechanism compared to using recovery codes alone."
  },
  {
    "chunk_id": "d4cd4d6e-0047-4b46-a9cb-edd11b35f4d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `enroll()` method is used to enroll a time-based, one-time password (TOTP) factor with the `factor_type` set to `\"totp\"`. The returned `id` can be used to create a challenge, which can be verified using the `challenge()`, `verify()`, or `challenge_and_verify()` methods. These methods are part of the Supabase authentication MFA (multi-factor authentication) functionality."
  },
  {
    "chunk_id": "5f3abaea-14ed-43fb-94bc-858a9290579d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for multi-factor authentication, an enrolled factor is required. The challenge can be created using the `mfa.challenge()` method, passing the `factor_id` as a parameter. The challenged factor can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "f6b81443-2ad6-40ef-beb2-4cc035395e9d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge. The code example demonstrates how to verify a challenge by providing the factor_id, challenge_id, and code. This verification process is a key step in the multi-factor authentication (MFA) workflow."
  },
  {
    "chunk_id": "9990d7c7-77ac-4c1f-ad74-51818399da1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking a `factor_id` and a `code` as input parameters."
  },
  {
    "chunk_id": "586127f6-97cc-45d8-b45f-1c9901e35a7a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: To unenroll a factor, the Supabase authentication API provides a method `supabase.auth.mfa.unenroll()` that takes the `factor_id` as an argument. This operation allows users to remove a multi-factor authentication factor from their account, improving the ability to manage their security settings."
  },
  {
    "chunk_id": "0716d46d-9b6a-41ac-a25c-359742c019d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next required level of authentication, either AAL1 or AAL2, depending on whether the user has a verified factor."
  },
  {
    "chunk_id": "659b5f1e-9ade-4aac-b460-0ca95b99d82e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by making a request to the Supabase Functions service. Requires an Authorization header, and automatically attaches the Content-Type header for common data types like Blob, ArrayBuffer, File, FormData, and String. Allows passing a custom Content-Type header to override the default behavior. Provides an example of invoking a \"hello-world\" function with a JSON payload."
  },
  {
    "chunk_id": "040cf715-ce34-4045-9844-e00d815e170e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled due to performance and security concerns. Developers can enable listening to database changes by managing Realtime's replication, and receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The code example demonstrates how to subscribe to various Realtime events, such as broadcasting messages, presence changes, and database changes, and handle the received payloads."
  },
  {
    "chunk_id": "4820cee4-e31f-4bc2-a074-126382da0e46",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel is recommended to maintain Realtime service performance and database efficiency. Supabase automatically handles cleanup 30 seconds after a client disconnects, but unused channels can degrade performance as more clients subscribe. The `supabase.remove_channel()` function allows removing a channel."
  },
  {
    "chunk_id": "ba52e0a5-fdff-431c-bcd9-a3702e61f8fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain the performance of the Realtime service and the database, as unused channels can cause degradation when more clients are subscribed. Supabase automatically handles the cleanup of disconnected clients, but the `supabase.remove_all_channels()` function can be used to remove all channels manually."
  },
  {
    "chunk_id": "942d4c09-6479-47f4-8bc4-ae8e864a92ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: This code snippet demonstrates how to retrieve all channels using the `supabase.get_channels()` function. This is a common operation in channel-based communication systems, allowing users to access and interact with all available channels."
  },
  {
    "chunk_id": "b9691783-c7cb-48fd-aa53-adca8312102f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to broadcast a message to all connected clients of a specific channel using the Supabase Realtime API. It provides an example code snippet that demonstrates subscribing to a channel, and then sending a broadcast message with random cursor position data to all clients connected to the 'room1' channel."
  },
  {
    "chunk_id": "5ac8207f-8ed6-4f01-aaa6-0a7d566e0c9d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, you need the `insert` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for information on how access control works. The code to create a bucket is `_10  res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "8eaf75b1-b1bf-4978-a87f-0cd70d73583d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more details on access control. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "34c4f5d2-8bff-4e86-8c59-04dda1bcf17f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more information on access control. The code to list all buckets is `supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "0e306ae4-fb18-4fee-808b-bc24e2a1d848",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the user requires 'select' and 'delete' permissions on the 'buckets' table in the RLS policy. The 'objects' table permissions are not required. The Supabase storage guide provides details on how access control works for storage operations."
  },
  {
    "chunk_id": "523eb731-2024-4f32-8d81-dcf84efc298f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` access to the `buckets` table, and `select` and `delete` access to the `objects` table. The storage guide provides more information on access control. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "b6bdd69b-e167-41a6-8cdc-33517296f533",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the user requires `insert` permissions on the `objects` table. The appropriate MIME type should be specified, especially for images or audio files. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired path on Supabase Storage, along with the file's content type."
  },
  {
    "chunk_id": "4c3eee35-b5c6-48f5-8dae-7c4b1c8e41a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase Storage, you need 'select' permissions on the 'objects' table. The code snippet demonstrates how to download a file by specifying the source file path and the destination file path. Refer to the Storage guide for more details on access control for Supabase Storage."
  },
  {
    "chunk_id": "0716d1d5-1a35-450f-a161-e8bd553e0a49",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are `select` on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "abb18d87-fabb-4cd5-9087-5e378728079d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file can be updated using the `supabase.storage.from_()` method, specifying the bucket name, the file path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "42b7d1f5-aab3-40d5-8762-33c93d160f36",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are `update` and `select` on the `objects` table, but no permissions are needed on the `buckets` table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` method."
  },
  {
    "chunk_id": "b5c1ad76-2954-4f77-95e4-da18f487ebaa",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The RLS policy permissions needed are none for the `buckets` table and `delete` and `select` for the `objects` table. Users can refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "3c6d8518-74ef-4d22-836b-5685fa5d116e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the necessary permissions are: 'select' access to the 'objects' table, but no permissions are required for the 'buckets' table. The signed URL can be generated using the `create_signed_url()` method, which takes the file path and an expiry duration as parameters."
  },
  {
    "chunk_id": "c1e49e65-dd14-4c6b-997c-b659411c99ce",
    "source_url": "https://supabase.com/docs/reference/python/auth-signinwithsso",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must be set to public either through the updateBucket() method or the Supabase dashboard. No permissions are required for the buckets or objects tables. The public URL can be obtained using the get_public_url() method, passing the file path as an argument."
  },
  {
    "chunk_id": "03d7237e-b7a4-4412-baf4-e7c28a4646ba",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py Python library allows developers to interact with their Supabase Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods to integrate Supabase's features into Python applications."
  },
  {
    "chunk_id": "915afb54-f434-4cbf-8c1e-92ab9b596b49",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation describes how to install the Supabase Python client library, supabase-py, which requires Python 3.7 or newer. The installation can be done using the pip package manager or through the Conda package manager."
  },
  {
    "chunk_id": "df2861f6-b897-482e-84b9-53c6039dea0c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to interact with the Supabase ecosystem. It can be initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters, and optional client options to customize authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the essential starting point for working with the Supabase platform."
  },
  {
    "chunk_id": "c7bf37d0-0e0c-473d-8b05-d066573bcb77",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, and the `apikey` keyword should be avoided as a column name. Pagination can be achieved using the `range()` query, and the `count` option can be used to retrieve the count of rows returned."
  },
  {
    "chunk_id": "5807943c-3578-49de-a642-e4d0c2adb87b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Insert data\" section is as follows:\n\nThe `insert()` method in the Supabase library allows you to insert data into a table. It accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the data to be inserted. Additional optional parameters include `countOptional` to specify the property to use for the row count, `returningOptional` to control the response format, and `default95to95nullOptional` to set missing fields to null. The provided example demonstrates inserting a single row with the \"id\" and \"name\" fields."
  },
  {
    "chunk_id": "ecb9a8aa-a859-4652-b000-d54965e75363",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to update data in a database table. It must be combined with filters to target the specific item(s) to be updated. The method takes a dictionary or list of dictionaries as input, representing the new values to be inserted. An optional `count` parameter can be used to retrieve the number of rows affected by the update operation."
  },
  {
    "chunk_id": "169bb99e-6063-4842-85fe-43fb43c95568",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'upsert' operation allows inserting or updating data in a table, with the primary keys specified in the 'values' dictionary. Key parameters include the data to insert, options for returning the affected row count and representation, handling of duplicate rows, and default behavior for missing fields in bulk inserts."
  },
  {
    "chunk_id": "093fb806-e7af-4ea4-bf8e-ee5594725f05",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` method in Supabase should always be used with filters to target the specific items you want to delete. When using `delete()` with filters and row-level security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by specifying an array of values, which is particularly useful for batch deleting entries that share common criteria."
  },
  {
    "chunk_id": "5e20190f-e83f-44f7-8baa-6395140c4791",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes how to call Postgres functions as Remote Procedure Calls (RPCs) in your application. Postgres functions are useful for encapsulating logic that rarely changes, such as password resets and updates. The summary includes details on the available parameters for the RPC call, including options for passing arguments, handling return values, and controlling the count algorithm for set-returning functions."
  },
  {
    "chunk_id": "284123d1-5237-4685-8edb-7208764f072c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow returning only rows that match specified conditions in SQL queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return table responses. The order of applying filters and other query methods can impact the final result, as demonstrated in the provided code examples."
  },
  {
    "chunk_id": "78ca6f0d-ed04-4a91-86de-d44e03f3472f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is: The `eq()` function in the Supabase library is used to filter a table by matching rows where a specified column is equal to a provided value. The `eq()` function takes two required parameters: the column name and the value to filter by. This functionality is demonstrated in an example that selects all rows from the \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "8cf4958f-afc1-46f2-988a-5bad7fe3a69b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `neq()` function in Supabase allows filtering rows where a specified column is not equal to a given value. The function takes two parameters: `column` (the column to filter on) and `value` (the value to filter by). This can be used in a `select()` query to retrieve data that meets the specified condition."
  },
  {
    "chunk_id": "4912fe48-32e5-463c-a49b-3318040c6b94",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by a column value that is greater than a specified value. It provides the required parameters, `column` and `value`, and an example of using the `gt()` function with the `select()` method in the Supabase library to execute this query."
  },
  {
    "chunk_id": "f189719e-534d-4081-9de3-4550af3f8446",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This section explains how to filter a database table to only include rows where a specified column is greater than or equal to a given value. The key parameters are the column name and the comparison value. An example is provided using the Supabase library's `gte()` method to retrieve rows where the \"id\" column is greater than or equal to 2."
  },
  {
    "chunk_id": "4b4722a2-06ba-4260-b4f1-d6e61bca5f46",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column has a value less than a given value. The relevant parameters are the column name and the comparison value. An example is provided using the Supabase library's `select()` and `lt()` (less than) functions."
  },
  {
    "chunk_id": "dfcf53e0-e542-4d29-a62a-0a3676f9be22",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `lte()` function in Supabase allows you to filter a database table by a specific column, returning only rows where the value in that column is less than or equal to a provided value. The function takes two required parameters: the name of the column to filter on, and the value to compare against."
  },
  {
    "chunk_id": "53d07ea8-c79c-4c42-a8cf-8ea7d08e89eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"Column matches a pattern\" feature allows filtering rows where a specified column matches a given pattern case-sensitively. The key parameters are the column name and the pattern to match, and the feature can be used with the `select()` method, as shown in the example."
  },
  {
    "chunk_id": "ce73d694-accb-4964-9947-159aed3631da",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Column matches a case-insensitive pattern\" section is as follows:\n\nThis filter allows you to select rows from a database table where a specified column matches a given pattern case-insensitively. The `columnName` parameter specifies the column to filter on, and the `pattern` parameter defines the pattern to match. This functionality can be used with the `select()` method, as shown in the example, to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "6e9d45f4-0ac4-40e5-88db-4abae8d8403d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Column is a value\" feature allows you to filter a database table by matching rows where a specified column has a given value. The parameters include the column name and the value to match, which can be null, true, or false. This functionality is useful for retrieving data based on specific criteria within the table."
  },
  {
    "chunk_id": "cb17bf02-e611-4b52-8312-1a337846467d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the `in_()` function in the Supabase library to filter a table by checking if the values in the specified `column` are included in the `values` array. This allows for more complex filtering of data compared to simple equality checks."
  },
  {
    "chunk_id": "8bdf7bff-7c73-4b5d-aec4-6e2cb7f31c11",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" operation is applicable to jsonb, array, and range columns, allowing you to filter rows where the column contains all the elements present in the specified value. The operation requires two parameters: the column name to filter on, and the value (jsonb, array, or range) to filter with. This can be useful for querying data with complex structures, such as filtering issues by their tags."
  },
  {
    "chunk_id": "ec2b02d9-150f-4f2c-9b01-d2d3be15a4e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` operator is used to filter rows in a jsonb, array, or range column where every element in the column is contained within the provided `value` parameter. This is useful for filtering data in these column types, such as filtering classes by the days they are offered (`days` column contains [\"monday\", \"tuesday\", \"wednesday\", \"friday\"]). The operator takes the column name and the value to filter with as parameters."
  },
  {
    "chunk_id": "16b7b41e-f7ab-493e-a390-7b353a4dee42",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the specified range. The parameters include the column name and the range to filter with. This functionality can be used with the `select()` method in the Supabase library to retrieve data that meets this criteria."
  },
  {
    "chunk_id": "0611c73b-d94c-4881-9a4c-3dff8bf645e3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"greater than or equal to a range\" filter is used for range columns in Supabase, matching rows where every element in the specified column is either contained in the given range or greater than any element in the range. The filter is applied using the `.range_gte()` method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "9ad226d4-adc5-4886-9852-7efcbc41c904",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is applicable only for range columns. It allows filtering rows where every element in the specified column is less than any element in the provided range. The key parameters are the column to filter on and the range to use for the comparison."
  },
  {
    "chunk_id": "3f251466-5ff3-4689-bf56-e2dc0494dbd0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns in a database table. It allows you to match rows where every element in the specified column is less than or equal to any element in the provided range. The filter is applied using the `.range_lte()` method, which takes the column name and an array of range values as parameters."
  },
  {
    "chunk_id": "3aac3ee6-0e2e-4b70-811d-4e7d5b19f487",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "This documentation describes the \"Mutually exclusive to a range\" filter, which is only relevant for range columns. It allows matching rows where the column value is mutually exclusive to the provided range, meaning there can be no element between the two ranges. The filter is specified using the `range_adjacent` method, which takes the column name and a range array as parameters."
  },
  {
    "chunk_id": "f619bf72-c33f-4d17-93a9-53854cbbe419",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThis documentation describes the \"With a common element\" feature, which is only applicable to array and range columns. It allows filtering rows where the specified column and value have an element in common. The parameters include the column to filter on and the value to filter with. Examples are provided for using this feature with array and range columns in a Supabase table."
  },
  {
    "chunk_id": "40e2a9c3-24c6-4dcb-bcaf-13972ba5e698",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the `match_string` function in Supabase, which allows filtering text or tsvector columns based on a query string. It supports various text search options such as basic normalization, full normalization, and websearch. This function is useful for implementing full-text search capabilities in Postgres databases integrated with Supabase."
  },
  {
    "chunk_id": "7a31f00e-db73-4bbe-89a9-96365b04cfd9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in the Supabase API allows you to filter a table by matching rows where each column in the `query` parameter is equal to the associated value. This is a convenient shorthand for writing multiple `.eq()` calls. The `query` parameter is a dictionary where the keys are column names and the values are the filter values to match."
  },
  {
    "chunk_id": "3a7e0bee-1d04-496a-972b-6be89b02d51a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `not_` operator in PostgREST filters to select rows that do not match the specified criteria. It provides examples for filtering based on values in a column (`in_`) and the presence of specific elements in an array column (`contains`). The summary also demonstrates the use of the `not_` operator with the `select()` method in Supabase to retrieve rows where the `name` column is not null."
  },
  {
    "chunk_id": "aad4f5b3-237f-4aa6-91fa-57278a23676f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe or95() function in the Supabase client library allows you to use the raw PostgREST syntax for filter names and values, including `in()` for filtering on a list of values, `contains()` for filtering on array elements, and `containedBy()` for the opposite operation. The function supports filtering on the parent table as well as referenced tables, and can be combined with the and() function to create complex queries."
  },
  {
    "chunk_id": "f1682935-328b-43d4-892a-000e5409b33f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the Supabase client library expects the use of raw PostgREST syntax for filter values. It supports various operators like `in`, `cs` (contains), and allows for filtering on specific columns and values. The example demonstrates how to use `filter()` on a foreign table to select countries with names in the list `(\"Algeria\",\"Japan\")`."
  },
  {
    "chunk_id": "3ceab477-6085-4250-9de2-0b86bd67e672",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of a query response, in contrast to filters which operate on the row-level to return only matching rows. Modifiers must be specified after filters and apply to queries that return row-based responses, such as `select()` or `rpc()` on a function that returns a table."
  },
  {
    "chunk_id": "9d58eb83-4512-4c7d-8e43-6aa70605bc1b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Order the results\" section explains how to order the query results by a specified column. The available parameters include the column to order by, whether to order in descending order, the name of a foreign table to order, and whether to show nulls first. An example is provided demonstrating how to order the results of a `select()` operation on a foreign table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "e2c1bb7e-ebcd-4427-89e7-13afc1490d96",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes how to limit the number of rows returned in a Supabase database query. It outlines two parameters: `sizeRequired` to specify the maximum number of rows to return, and `foreign95table` to limit rows from a foreign table instead of the parent table. An example is provided demonstrating how to use the `limit()` function to return only the first row from the \"countries\" table."
  },
  {
    "chunk_id": "0fd86679-6267-446d-9d4d-374918a4e501",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe `range()` function in Supabase allows limiting the query result by specifying a starting offset (`from`) and an ending offset (`from + to`). This ensures that only records within the specified range are returned, respecting the query order. The `from` and `to` values are 0-based and inclusive, allowing precise control over the subset of data retrieved. This functionality is useful for implementing pagination or other scenarios where only a portion of the full query result is required."
  },
  {
    "chunk_id": "615a8f51-89a8-4b07-b302-8973764f6c0e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided code snippet demonstrates how to retrieve a single row of data from a Supabase table using the `select()`, `limit(1)`, and `single()` methods. This approach allows the response to be returned as a single object instead of an array of objects, which can be useful in scenarios where only a single record is required."
  },
  {
    "chunk_id": "13a0b6c1-0e4b-41c4-9581-94ac06781e7a",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is as follows:\n\nThe .maybe_single() method in the Supabase client library can be used to retrieve zero or one row of data from a database table, returning the data as a single object instead of an array. This is demonstrated in the example code, which selects the first row where the 'name' column equals 'Albania' from the 'countries' table."
  },
  {
    "chunk_id": "8694337c-9cec-40d2-8fde-0cb18ef896b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides information on how to retrieve data from a Supabase table as a CSV string. It shows an example of how to use the `.csv()` method to execute a query and get the data in CSV format, which can be useful for exporting or processing the data outside of the application."
  },
  {
    "chunk_id": "1e062a62-995d-4808-95ea-7d99cc0fdf30",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Using explain\" section is:\n\nThe `explain()` method in Postgres allows you to get the execution plan of a query, which is useful for debugging slow queries. While `explain()` is not enabled by default due to security concerns, it can be enabled in production environments using a `pre-request` function. The `explain()` method supports several parameters, such as `walOptional`, `verbose`, `settings`, `format`, `buffers`, and `analyze`, which allow you to customize the output and include additional information like WAL record generation, configuration parameters, and actual run time."
  },
  {
    "chunk_id": "62b2f759-ec23-4c27-80c8-d9af47e8c3ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to create a new user in Supabase. It discusses the \"Confirm email\" setting, which determines whether users need to confirm their email address before logging in. It also covers how to handle sign-up for existing confirmed users and how to fetch the currently logged-in user. The documentation provides example code for signing up with an email and password."
  },
  {
    "chunk_id": "ac617922-3cb7-4299-a9eb-1073203334a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe method `sign_in_anonymously()` returns an anonymous user. It is recommended to set up a captcha to prevent abuse, which can be passed in the `options` parameter. The method can be used to create an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "cb62b4cf-7e35-4633-8a0f-10f28ee4a1f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes the functionality to sign in an existing user using either an email and password or a phone number and password. The key parameters required are the user's credentials, and the method returns a response object. The code snippet demonstrates how to sign in a user with an email and password using the Supabase library."
  },
  {
    "chunk_id": "99d5d6b2-1032-4667-8504-ba92c64bf1b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nAllows signing in with an OIDC ID token by calling the `supabase.auth.sign_in_with_id_token()` function, which takes a `provider` and `token` parameter. The authentication provider used should be enabled and configured in the application."
  },
  {
    "chunk_id": "978c9831-ff04-411d-86f2-d7d8d1c470b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The software documentation describes a passwordless sign-in process using one-time passwords (OTPs) sent to the user's email or phone number. The `sign_in_with_otp()` function can be used to sign in existing users or create new ones, with optional configuration to control user creation. The method supports both email-based magic links and SMS/WhatsApp OTPs, with the destination URL for magic links determined by the `SITE_URL` setting."
  },
  {
    "chunk_id": "7ef7bf9d-4f06-4478-995d-9c45769e05bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "This method allows users to sign in to the application using a third-party provider, such as GitHub. Supabase supports integration with various third-party providers, enabling seamless authentication. The `supabase.auth.sign_in_with_oauth()` function can be used to initiate the sign-in process, with the provider name (e.g., 'github') passed as a parameter."
  },
  {
    "chunk_id": "1c950aa3-55bd-4417-9cee-195ee4a754ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, the user first needs to establish a connection to an identity provider using the Supabase CLI. The `sign_in_with_sso()` method can then be used to initiate the sign-in flow, either by specifying the user's email domain or a provider ID. This allows for more advanced authentication scenarios, such as mapping specific email addresses to identity providers or using different hints to identify the appropriate provider."
  },
  {
    "chunk_id": "315ce393-2175-4530-a1f8-b7cf4afa1a69",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method is used to sign out a user from the Supabase Auth system. It revokes the user's refresh token and deletes the JWT from the client-side, although the existing JWT remains valid until it expires. The method operates in the global scope, signing out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "b1b05932-52e0-4a56-bcd3-19b602483b01",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify One-Time Passwords (OTPs) for different authentication types, such as email, phone, and password recovery. The verification type should match the corresponding auth method used before `verify_otp`. The `TokenHash` from the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "7e4021df-4b6a-481c-92f7-844c3cf8646e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data, as it can be tampered with. If verified, trustworthy user data is required, the `get_user` method should be called instead. The method also handles expired access tokens by using the refresh token to get a new session."
  },
  {
    "chunk_id": "48dd7776-83a4-4d6a-91b4-709f19d85316",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `refresh_session()` method returns a new session regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if none is provided, it will attempt to retrieve it from the current session. If the refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it has expired or not."
  },
  {
    "chunk_id": "57a53f29-a3e9-43bc-8a17-0af9e609baa9",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"Retrieve a user\" fetches the user object from the database instead of the local session, allowing for validation of the user's access token JWT on the server. This is useful for checking if the user is authorized, and can be called either with the current session's JWT or a custom access token JWT provided as a parameter."
  },
  {
    "chunk_id": "b844155b-d47c-4a7d-8a7a-1f15b0324255",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data using an `access_token` and `refresh_token`. If the current session is expired, it will refresh the session to obtain a new session. If the refresh token or access token is invalid, an error will be thrown. If the operation is successful, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "916a11d5-b76f-4637-801e-9b460942898f",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers Multi-Factor Authentication (MFA) methods supported by Supabase, primarily time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, which provides a more secure authentication process compared to relying on recovery codes alone."
  },
  {
    "chunk_id": "690a0951-c057-4d5d-95b2-c9cf6cab0d83",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers how to enroll a TOTP (time-based one-time password) factor for multi-factor authentication (MFA) in Supabase. The `mfa.enroll()` function is used to enroll a TOTP factor, which returns an ID that can be used to create an MFA challenge. The documentation also provides links to other relevant functions for creating, verifying, and challenging MFA in a single step."
  },
  {
    "chunk_id": "9440450f-4155-42f4-8ffb-011d7465a490",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which takes the factor ID as an argument."
  },
  {
    "chunk_id": "ff6f9a12-d632-46ca-92de-fea9eda06150",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. The `supabase.auth.mfa.verify()` method is then used to verify a challenge by providing the `factor_id`, `challenge_id`, and `code` parameters."
  },
  {
    "chunk_id": "b3003807-f62e-4a85-8fc5-3c5539a6b71c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor with a provided code."
  },
  {
    "chunk_id": "c8de9996-1228-4f86-837b-4a3ccdc7ca1e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, you can use the `supabase.auth.mfa.unenroll()` function and provide the `\"factor_id\"` as a parameter. This allows you to remove a specific multi-factor authentication factor from the user's account, which can be useful for managing security measures or updating user preferences."
  },
  {
    "chunk_id": "1bd0f711-c6f1-46ec-bca9-f88ac4126952",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, which is AAL2 if the user has a verified factor, or AAL1 otherwise."
  },
  {
    "chunk_id": "56775556-9fd1-4a70-b6bb-fe08a311d99e",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase Edge Functions can be invoked using the `supabase.functions.invoke()` method, which requires an Authorization header. The method automatically attaches the appropriate Content-Type header for various data types, but this behavior can be overridden by passing a custom Content-Type header. The function call can also include a request body, which is automatically serialized if it does not match one of the recognized data types."
  },
  {
    "chunk_id": "0c0b0d58-ed58-4eae-83ea-3a8c63570d9d",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "This documentation describes how to subscribe to a Supabase Realtime channel and handle broadcast messages. It explains that by default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. It also covers how to receive \"previous\" data for updates and deletes, and how row-level security is applied to Realtime operations. The example code demonstrates subscribing to a channel, sending a broadcast message, and handling the received broadcast payload."
  },
  {
    "chunk_id": "0b286165-45e3-4692-97ce-27cf44668668",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and the connected database. Supabase automatically handles cleanup 30 seconds after a client is disconnected, but unused channels can cause degradation as more clients subscribe. The `supabase.remove_channel()` function is used to remove a channel."
  },
  {
    "chunk_id": "dd94fe82-4a0a-4eab-9f6a-cd967ebe3f11",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the database when listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "3b89e222-6010-44ef-9335-064b275b9eaf",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the content \"Retrieve all channels\" is:\n\nRetrieves all channels in the Supabase database using the `supabase.get_channels()` method. This allows users to access and work with the full set of available channels programmatically."
  },
  {
    "chunk_id": "64f35581-7b00-4411-b1da-bc99fb1c9670",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is: \nThe provided code demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase realtime API. The message is sent as a \"cursor-pos\" event with random x and y coordinates, which could be used to update the cursor positions of all connected clients in a collaborative application."
  },
  {
    "chunk_id": "c084c597-c9ca-444a-bb93-c9d97c3255bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the user requires `insert` permissions on the `buckets` table. No permissions are needed for the `objects` table. Refer to the Storage guide for details on Supabase's access control mechanism. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "22aca3cf-08c6-46ae-b600-2e8141669ec3",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the user requires `select` permissions on the `buckets` table, but no permissions on the `objects` table. Refer to the Storage guide for more details on Supabase's access control system."
  },
  {
    "chunk_id": "f7955266-490a-4908-a678-bf60593ab00b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are \"select\" on the \"buckets\" table and no permissions on the \"objects\" table. Refer to the Storage guide for more information on access control. The code to list all buckets is `supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "a7f54375-900e-4b28-9fd1-9438b3eb96b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the user requires `select` and `delete` permissions on the `buckets` table. No permissions are needed on the `objects` table. Refer to the Supabase Storage guide for details on access control. The deletion is performed using the `supabase.storage.delete_bucket(name)` function."
  },
  {
    "chunk_id": "219637f6-30a4-42eb-8c0e-d12e84be6aeb",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for details on access control. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "a9ef2353-7110-41fa-904a-d879300c8de8",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user must have `insert` permissions on the `objects` table and specify the appropriate MIME type, such as `audio/mpeg` for audio files. The file can be uploaded programmatically using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file object and the desired path on Supabase Storage. Refer to the Supabase Storage guide for more information on access control and file uploads."
  },
  {
    "chunk_id": "1b55d9a2-a2e1-4344-a6b3-afb7819f8b96",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase Storage, the user requires the `select` permission on the `objects` table. The code example demonstrates how to download a file using the `supabase.storage.from_()` method and write the content to a local file. Refer to the Storage guide for more information on Supabase access control."
  },
  {
    "chunk_id": "7db81f33-5861-47e0-9467-f9911d0fa4bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are `select` on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "1c7eac27-2bb4-463b-9307-7eda1fde6f57",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, you need the `update` and `select` permissions on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "8d633ad5-d9a2-4d1d-86f7-011828e11e6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The provided example code demonstrates moving a file from the 'public/avatar1.png' path to the 'private/avatar2.png' path within the 'bucket_name' bucket. Refer to the Supabase Storage guide for details on access control and permissions management."
  },
  {
    "chunk_id": "1b8eb836-f34a-4677-b08a-6b9a7a27ebef",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The process involves using the `supabase.storage.from_('bucket_name').remove('test.jpg')` method. Refer to the Storage guide for more information on access control and permissions management."
  },
  {
    "chunk_id": "da9894fa-a3e0-40b5-9f16-17501be3749c",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required permissions are 'select' on the 'objects' table. The signed URL allows limited and temporary access to a file in the specified storage bucket, and the expiry duration can be set. This feature enables secure, time-limited access to specific files without exposing the entire storage."
  },
  {
    "chunk_id": "bee1da65-103a-417f-a4cf-7c4c873b2f51",
    "source_url": "https://supabase.com/docs/reference/python/auth-signout",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public either through the `updateBucket()` method or by manually making the bucket public on the Supabase dashboard. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` method can be used to retrieve the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "7f90bcb9-1843-46a8-a575-94dbdd124aa8",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive suite of functionalities for interacting with a Supabase Postgres database. It enables developers to execute database queries, listen to real-time database changes, invoke Deno Edge Functions, manage user authentication and user data, as well as handle large file uploads and downloads."
  },
  {
    "chunk_id": "c499a085-960b-43d9-87b3-2313861029ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content describes how to install the Supabase-py library using the PyPi package manager. The installation can be done via the terminal, either using the standard pip command or through the Conda package manager. The summary highlights the key steps and tools involved in the Supabase-py installation process."
  },
  {
    "chunk_id": "459fedff-66b2-4426-8253-f533f60f8563",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and Key, and optionally accepts client options to customize authentication behavior. This initialization step provides the entry point for accessing all of Supabase's functionality."
  },
  {
    "chunk_id": "93ec6e27-6fe3-48dd-9f5b-add992dff969",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch specific data, and the `apikey` keyword should be avoided as a column name. The `select()` function allows you to retrieve specific columns, and the `count` option can be used to get the count of rows returned."
  },
  {
    "chunk_id": "73914ff3-20a0-4c94-9ebb-c73e5ff2807a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section describes the parameters for the insert() method in the Supabase library, which allows you to insert data into a table. The method supports inserting a single row using a dictionary, or multiple rows using a list. Additional parameters include options to specify the count method, return method, and whether to use null values for missing fields in bulk inserts."
  },
  {
    "chunk_id": "99871854-d651-4225-9c35-c8e345d8ca95",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase API is used to update data in a table. It must be combined with filters to target the specific item(s) to be updated. The method takes a dictionary or list of dictionaries as the `jsonRequired` parameter, representing the new data to be inserted, and an optional `countOptional` parameter to get the count of rows returned."
  },
  {
    "chunk_id": "f6ac93c4-48b5-4c49-a28b-48ff4aabad73",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe upsert operation in the provided documentation allows inserting or updating data in a table, with the requirement that primary keys must be included in the values. The key parameters include the values to insert, options for controlling the count and return methods, and settings for handling duplicate rows and null values. The provided example demonstrates upserting a single row into a \"countries\" table."
  },
  {
    "chunk_id": "28ea508e-216e-460c-abcf-879a9307a06b",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data, the `delete()` method must be combined with filters to target the specific items. When using RLS (Row Level Security), only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple rows in a single query by specifying an array of values. The `countOptionalCountMethod` and `returningOptionalReturnMethod` parameters can be used to control the count and response format, respectively."
  },
  {
    "chunk_id": "40510250-a561-41a7-8a51-c97fbc29ab6e",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation covers how to call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. It provides details on the function parameters, including options to control the count algorithm and read-only access mode, and demonstrates example code to call a \"hello_world\" function with and without arguments."
  },
  {
    "chunk_id": "85cea115-28f0-4d7b-a6f3-297e583be6ca",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return, update, upsert, or delete rows in a database table that match certain conditions. Filters can be chained together and applied to database queries, including those on JSON columns or foreign tables. The order of applying filters is important, as it can affect the output."
  },
  {
    "chunk_id": "88f18091-8e49-4572-9cd6-b77ac58bf194",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary summarizes the content about filtering a database table by a column that is equal to a specified value. It explains that the `eq()` method is used to filter the rows where the `column` is equal to the `value`, and provides an example usage with the `supabase.table().select().eq().execute()` syntax."
  },
  {
    "chunk_id": "f6acfb34-4224-4232-a2c6-12e89c0ac5b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `neq()` method in the Supabase library is used to filter a database table by selecting only rows where a specified column is not equal to a given value. The method takes two parameters: the column name and the value to filter by. This is a common operation in data processing and analysis, allowing users to exclude specific rows from the result set."
  },
  {
    "chunk_id": "022a9e14-fb8b-4415-be3e-207d515cdf62",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation explains how to filter a database table to include only rows where a specified column has a value greater than a given value. The key parameters are the column name and the comparison value. This functionality can be used with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "37c2b7c1-4eac-44f7-86e4-d44fc3ebe174",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to filter a database table by selecting rows where a specified column has a value greater than or equal to a given value. The key parameters are the column name and the comparison value, and an example is provided using the Supabase library's `gte()` method."
  },
  {
    "chunk_id": "dc33be37-5cad-49b6-9744-cf9dab1a74e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of the \"Column is less than a value\" functionality. It allows filtering rows where a specified column has a value less than the provided value. The key parameters are the column name and the value to filter by, with an example usage demonstrating how to apply this filter using the `lt()` method in the Supabase library."
  },
  {
    "chunk_id": "7e725460-bec4-4015-9c20-3ed14a3065e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe code snippet demonstrates how to filter a database table where a specific column is less than or equal to a given value, using the `lte()` method in the Supabase library. The `columnRequiredstring` parameter specifies the column to filter on, and the `valueRequiredany` parameter sets the value to filter by."
  },
  {
    "chunk_id": "dcd44560-5f89-451a-9275-073071d10b25",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering a table's rows based on a specified column value matching a given pattern case-sensitively. The function takes two required parameters: 'column', the name of the column to filter on, and 'pattern', the pattern to match. This can be used in a `select()` query to retrieve only the rows where the specified column value matches the provided pattern."
  },
  {
    "chunk_id": "b05b49a3-c061-46f3-b6c2-ef2b951fa4c0",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis function filters a database table by matching a case-insensitive pattern in a specified column. The two required parameters are the column name and the pattern to match. This can be useful for performing case-insensitive searches on textual data in the database."
  },
  {
    "chunk_id": "2ded7adc-5878-4a75-a237-b7190d2599de",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' feature allows filtering rows where a specified column matches a given value. The parameters include the column name and the value to match, which can be null, true, or false. This functionality is useful for querying and filtering data based on specific column values."
  },
  {
    "chunk_id": "99de76bc-586e-408b-beef-18f3c0a9b219",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a database query using the `in_()` function, which filters rows where the specified `column` has a value that is included in the provided `values` array. This allows selecting only the rows matching the specified criteria from a table named \"countries\", specifically where the \"name\" column is either \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "3bd24a95-05e2-4785-bc76-7c81354f2625",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"contains\" filter is only applicable for jsonb, array, and range columns. It matches rows where the column contains every element present in the provided value. The filter takes two parameters: the column name and the value (which can be a jsonb, array, or range) to filter with."
  },
  {
    "chunk_id": "43e53070-6cd7-495e-9593-b3ea7dde7c09",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` operator is used to filter rows in a jsonb, array, or range column where every element in the column is contained within the provided value. For array columns, it checks if the array is a subset of the provided array. For range columns, it checks if the range is contained within the provided range. For jsonb columns, it checks if the jsonb value is contained within the provided jsonb value."
  },
  {
    "chunk_id": "c0a4a416-95ef-43a8-bdc3-e7adf06c9fee",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter in Supabase is used for range columns, matching rows where every element in the specified column is greater than any element in the provided range. The parameters for this filter are the column name and an array representing the range to filter with."
  },
  {
    "chunk_id": "d12ec1a3-06a8-49c4-b9eb-0ecdfb6c64dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is used to filter rows in a range column, where each element in the column must either be contained within the specified range or greater than any element in the range. The key parameters are the \"column\" to filter on and the \"range\" to filter with, and this functionality can be used with the Supabase .range_gte() method to retrieve relevant data."
  },
  {
    "chunk_id": "aaac3955-7471-42e6-8c45-8ea4a14ac9cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is specific to range columns, allowing you to match rows where every element in the specified column is less than any element in the provided range. The key parameters are the column to filter on and the range to compare against. This can be useful for querying data based on time ranges or other numeric values."
  },
  {
    "chunk_id": "69aa1f01-9b5a-40b8-922b-ad094721e46c",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Less than or equal to a range' filter is used to match rows where every element in the specified column is less than or equal to any element in the provided range. This is a useful feature for range columns, allowing you to efficiently filter data based on a date/time or numeric range. The filter is applied using the `.range_lte()` method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "e200402a-78eb-45c4-88f8-6ace62a06600",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes the \"Mutually exclusive to a range\" filter, which is applicable only for range columns. This filter matches rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The filter is configured using the `range_adjacent` method, which takes the column name and an array of the range to filter."
  },
  {
    "chunk_id": "db0c6e7c-1a08-4de2-83ac-a7008caa5cfb",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThis section discusses the \"With a common element\" filter, which is only applicable to array and range columns. The filter matches rows where the column and the provided value have at least one element in common. The required parameters are the column to filter on and the value to filter with. Examples are provided for using this filter on array and range columns in a Supabase query."
  },
  {
    "chunk_id": "ae45c283-8b51-4a4f-a38e-82aba2a2fc85",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe \"Match a string\" section describes a PostgreSQL query function that allows matching rows in text or tsvector columns to a specified query string. It provides options for text search, basic normalization, full normalization, and websearch, enabling users to customize the search behavior. This function is useful for implementing full-text search capabilities in PostgreSQL-based applications."
  },
  {
    "chunk_id": "ab91ba7e-dcfa-4b90-bda5-d18c83e1027f",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'match()' method in the provided code filters the data from the \"countries\" table to only include rows where the values in the 'id' and 'name' columns match the specified values in the 'query' object. This is a concise way to apply multiple equality filters on a dataset, reducing the need for chaining multiple '.eq()' calls."
  },
  {
    "chunk_id": "80f1a513-4baa-4385-b566-ab6004b43468",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to use the `not_` modifier in PostgREST filters to select rows that don't match the specified criteria. This can be used to exclude rows based on their `id` values or the contents of array columns. The summary also shows an example of using `not_.is_()` to exclude rows where the `name` column is `null`."
  },
  {
    "chunk_id": "1e28dc44-f015-4d8c-b43f-eec2a715a11c",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary states that the `or95()` function in the Supabase client library expects the use of raw PostgREST syntax for filter names and values, including the use of parentheses for `in` filters, curly braces for array values, and `cs` and `cd` for `contains()` and `containedBy()` operations, respectively. It also mentions that the `or95()` function can be used in conjunction with `and96()` and on referenced tables to perform complex filtering operations."
  },
  {
    "chunk_id": "60fe58b0-bab9-4f12-9d60-d3023d4c5a14",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the Supabase client library expects the use of raw PostgREST syntax for the filter values. This includes using parentheses for the 'in' operator and braces for array values. Examples are provided, along with the parameters for the filter() method: column, operator, and value. The summary also includes an example of using the filter() method with the select() method on a foreign table."
  },
  {
    "chunk_id": "d6602723-f67f-47aa-9e5e-e17861033d6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response, such as returning a CSV string, rather than just filtering the rows. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "d32e795a-c94f-4dda-ab65-ea5e5789fe34",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'order()' method allows you to order the query results by a specified column, with options to sort in descending order, include nulls first, and order by a column in a foreign table. This is demonstrated in an example of ordering a 'countries' table by the 'name' column in descending order."
  },
  {
    "chunk_id": "a7892022-a4db-4242-9982-79eb4daf8b74",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe `limit()` function in Supabase allows you to specify the maximum number of rows to be returned from a database query. Additionally, you can set the `foreign95table` parameter to limit rows from a foreign table instead of the parent table. This is a useful feature for efficiently retrieving and displaying a limited set of data from a database."
  },
  {
    "chunk_id": "f805c42d-680f-4b23-9a02-e2fc7a7c4119",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe `range()` function in the query allows limiting the result set to a specific range of records, specified by the `from` and `to` parameters. This is useful for pagination or reducing the amount of data returned. The range is 0-based and inclusive, so `range(1, 3)` will return the 2nd, 3rd, and 4th rows. The `foreign_table` parameter can be used to limit the range to a foreign table instead of the parent table."
  },
  {
    "chunk_id": "9380fc5b-96b8-4120-8c8a-3bb761c2376e",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code demonstrates how to retrieve a single row of data from the \"countries\" table using the Supabase library's `select()` method with the `limit(1)` and `single()` modifiers. This approach returns the data as a single object instead of an array, which can be more convenient for certain use cases."
  },
  {
    "chunk_id": "53975e22-d77c-436a-9938-b0f1f52df7ba",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `maybe_single()` method in the Supabase client library is used to retrieve zero or one row of data from a database table, returning the data as a single object rather than an array. This is useful when you expect at most one matching row for a given query, such as when searching for a record by a unique identifier."
  },
  {
    "chunk_id": "9650e8c6-2b24-417e-95d3-58f4409b5615",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the \"Retrieve as a CSV\" functionality in the documentation. It explains that this feature allows the user to retrieve data from a table as a string in CSV format, which can be useful for exporting or further processing the data. The example code snippet demonstrates how to use the `.csv()` method to execute the CSV-formatted data retrieval."
  },
  {
    "chunk_id": "09f9bddc-7708-4ecf-8893-eaed946cb739",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres allows developers to view the execution plan of a query, which can be useful for debugging slow queries. This feature is not enabled by default as it can reveal sensitive database information, so it's best to only enable it for testing environments. The `explain()` method supports various parameters, such as `walOptional`, `verbose`, `settings`, `format`, `buffers`, and `analyze`, which can provide additional details about the query execution."
  },
  {
    "chunk_id": "4a16542a-1f0e-4773-8dc5-df766d72b6c4",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nWhen creating a new user, the \"Confirm email\" setting determines whether a user must verify their email address before logging in. If \"Confirm email\" is disabled, both a user and a session are returned, but if it is enabled, only the user is returned with no session. Additionally, the default redirect URL for email confirmation can be modified in the project settings, and attempting to sign up an already registered user will return an error or an obfuscated user object depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "68152825-be58-46c9-bc31-f090887b85ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `supabase.auth.sign_in_anonymously()` function returns an anonymous user. It is recommended to set up a captcha to prevent abuse, which can be passed in the `options` parameter. The function allows creating an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "76e97c31-4783-4b96-8e7b-2e673dd046e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user with either an email and password or a phone number and password. It provides sample code for signing in with email and password, and outlines the required \"credentialsRequiredSignInWithPasswordCredentials\" parameter. The sign-in functionality is a critical component for user authentication and access control in the application."
  },
  {
    "chunk_id": "f898a806-9705-4bad-aad8-ab7fa6aff135",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content describes the \"Sign in with ID Token\" functionality, which allows users to authenticate by providing an OIDC ID token. The authentication provider must be enabled and configured. The method `supabase.auth.sign_in_with_id_token()` can be used to sign in with an ID token, passing the provider and the token as parameters. The response from this method is returned."
  },
  {
    "chunk_id": "0bf3f851-bb74-46e5-9ea0-fac35a2417ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through one-time password (OTP) authentication. It supports sign-in with email or phone number, and allows configuring whether a magic link or OTP is sent to the user. If the user doesn't exist, the sign-in method can automatically create a new user account. Developers can also control whether user creation is allowed or not. The magic link's destination URL can be configured using the `SITE_URL` and additional redirect URLs can be added to the project."
  },
  {
    "chunk_id": "7127f572-4eca-49ce-a43e-bcf6764c3003",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. The method involves passing the appropriate provider (e.g., 'github') as a parameter to the `supabase.auth.sign_in_with_oauth()` function, which handles the sign-in process with the selected third-party provider. This functionality is useful for integrating Supabase with various third-party services to enable user authentication."
  },
  {
    "chunk_id": "c66f5cb6-6106-4b37-8680-1cf55cf93f71",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then initiate the sign-in flow by providing either the user's email domain or a specific provider ID, which allows for more customized authentication methods like mapping email addresses or using contextual hints to identify the provider."
  },
  {
    "chunk_id": "cce1b344-aab4-4d1a-b795-755e7e4f71ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This method revokes the refresh token and deletes the JWT from the client-side, but does not revoke the access token JWT, which remains valid until it expires. Signing out using the global scope will sign out the user from all other sessions as well."
  },
  {
    "chunk_id": "0c9ed478-bd23-4db2-ba09-3a5ba456406d",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and phone number changes. The verification type should match the corresponding auth method called before `verify_otp`. The `TokenHash` from the email templates can be used for signing in with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "f7603c1b-586e-438b-8186-6bad78dca0d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The `get_session()` method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it can be tampered with by the sender. If verified, trustworthy user data is required, the `get_user()` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "e5d630ed-3595-4380-a8a4-9a9f6b49e0a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "Retrieves a new session regardless of the expiry status of the current session. If a refresh token is not provided, it will attempt to retrieve it from the existing session. This method will refresh the session whether the current one is expired or not."
  },
  {
    "chunk_id": "e283cceb-486c-4fed-b7c7-20d703b8f6e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"Retrieve a user\" fetches the user object from the database instead of the local session, and is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to get the logged-in user with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "a4d59dab-fb89-436d-818d-204455dc7586",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session()` sets the current session data by taking an `access_token` and `refresh_token` as parameters. If the session is expired or the tokens are invalid, it will refresh the session and emit a `SIGNED_IN` event upon successful completion. This method is used to maintain an active user session and provide access to protected API resources."
  },
  {
    "chunk_id": "af406714-26f2-485c-9914-234546c81cb0",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers Multi-Factor Authentication (MFA) methods, specifically time-based one-time password (TOTP) as the supported 2nd factor. Users can enroll multiple TOTP factors up to 10, which provides a recovery mechanism without the need to store separate recovery codes. This approach reduces the attack surface compared to single recovery codes."
  },
  {
    "chunk_id": "f31f73bd-a04f-4998-b225-20b567874f16",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes the process of enrolling a TOTP (time-based one-time password) factor for multi-factor authentication (MFA) using the Supabase Python SDK. The `mfa.enroll()` function is used to enroll the TOTP factor, returning an `id` that can be used to create and verify MFA challenges. The documentation also provides references to the related `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions for managing the MFA challenge-response flow."
  },
  {
    "chunk_id": "7e257449-2673-425c-a263-bd827b22c213",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "58652158-09c9-4218-8726-ce71b5afa487",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions in the \"Create a challenge\" section. The summary provides an example of how to verify a challenge using the Supabase auth.mfa.verify() method, which requires the factor_id, challenge_id, and code parameters."
  },
  {
    "chunk_id": "1c5d16a8-19ea-430c-82a6-a7007ab1de6a",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing for efficient verification of an MFA code for a specified factor."
  },
  {
    "chunk_id": "37ed51e3-e37b-4639-9d79-6663c76c2332",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, the Supabase API provides the `supabase.auth.mfa.unenroll()` function, which takes the `factor_id` as an argument. This function can be used to remove a specific multi-factor authentication (MFA) factor from a user's account, allowing the user to manage their active MFA factors."
  },
  {
    "chunk_id": "20404a73-06d8-4f7a-9844-a479fd692800",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as an email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the level of authentication required, where `aal2` is returned if the user has a verified factor, and `aal1` is returned otherwise."
  },
  {
    "chunk_id": "260f1f8f-9608-4f9c-9363-002b7571ab43",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvoke a Supabase Edge Function by making a request with an Authorization header. The function automatically attaches the appropriate Content-Type header based on the request body, but this can be overridden. Provides examples of invoking a function named \"hello-world\" with a custom request body."
  },
  {
    "chunk_id": "3834aa0c-988a-4e61-96ac-371cfb402357",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The code example demonstrates subscribing to a channel, sending a broadcast message, and handling the received broadcast payload."
  },
  {
    "chunk_id": "3290a4d5-6f67-48f7-a405-72778868cbe0",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "To maintain performance and database usage, unsubscribing from a Supabase Realtime channel is recommended. Unused channels can degrade service as more clients subscribe, so the `supabase.remove_channel(myChannel)` function allows you to explicitly remove a channel and clean up associated resources."
  },
  {
    "chunk_id": "bf1047d0-7497-4acb-ae40-e1076dcf0559",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain the performance of the Realtime service and the database, as unused channels can cause degradation with more clients subscribed. The Supabase SDK provides a `remove_all_channels()` method to efficiently remove all subscribed channels, which can help optimize resource usage."
  },
  {
    "chunk_id": "51cfdee4-82a0-4615-8f74-025a7a85fc67",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the given content is:\n\nThe Supabase method `get_channels()` is used to retrieve all channels. This is a key functionality for accessing and managing the available channels in the system."
  },
  {
    "chunk_id": "58e21a61-dcbc-4c12-8b1c-e7e750fc52ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The content describes how to broadcast a message to all connected clients on a specific channel using Supabase's Realtime functionality. It provides an example of subscribing to a channel, and then sending a broadcast message with cursor position data to all subscribed clients."
  },
  {
    "chunk_id": "e92cf628-5241-486c-95c2-86ee003a59b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required permissions are `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The Supabase `create_bucket()` function is used to create a new bucket."
  },
  {
    "chunk_id": "c2ca274e-21b4-4769-ab49-8f9519777db3",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for details on Supabase's access control mechanism."
  },
  {
    "chunk_id": "42bc95ff-6437-4302-9c8f-1dc2be7731d4",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. The Supabase storage guide provides details on how access control works for storage features."
  },
  {
    "chunk_id": "49aecc72-30ce-4eb5-9d42-dc1a1b0692b2",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, with no permissions required on the `objects` table. The `supabase.storage.delete_bucket(name)` function can be used to delete the specified bucket."
  },
  {
    "chunk_id": "f37ea109-afac-4622-8644-13e7bb771ffc",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are SELECT on the `buckets` table and SELECT and DELETE on the `objects` table. The process involves using the `supabase.storage.empty_bucket(name)` function, as detailed in the Storage guide on access control."
  },
  {
    "chunk_id": "85a2a6b1-86c1-456f-af44-1dcd674811b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the user requires `insert` permissions on the `objects` table. The user should specify the appropriate MIME type for the file, such as `audio/mpeg` for audio files. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and optional file options."
  },
  {
    "chunk_id": "2a0a58b5-1b8d-45ec-8c8c-55832c3e39e0",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase storage, the user requires `select` permissions on the `objects` table. The example code demonstrates how to download a file by specifying the source file path and the destination file path. Refer to the Storage guide for more information on Supabase's access control system."
  },
  {
    "chunk_id": "7cd4458c-82e2-4569-9cf5-a9ab80caff80",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions must have `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "64ee9192-bc0e-4961-921a-8dc88a5952a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires \"update\" and \"select\" permissions on the \"objects\" table. The file can be updated using the Supabase Storage client's \"update\" method, which takes the file contents, the target path on Supabase Storage, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "ac118a88-ef25-40c1-b0ce-e99654497d64",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The code snippet demonstrates moving a file from the `public/avatar1.png` location to the `private/avatar2.png` location within the `bucket_name` bucket. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "9932f8ae-bb09-4b52-8fa7-7ff5261130b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The RLS (Row Level Security) policy governs access control, which is detailed in the Storage guide. The code snippet `supabase.storage.from_('bucket_name').remove('test.jpg')` demonstrates how to delete the file 'test.jpg' from the specified bucket."
  },
  {
    "chunk_id": "4c1ed178-cdcc-4373-93f2-826fd0612a85",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions require `select` access. The signed URL allows temporary access to a file in a specified storage bucket, with an expiration duration set by the user. This functionality is part of Supabase's storage access control mechanisms, as described in the Storage guide."
  },
  {
    "chunk_id": "d4317cef-3002-4943-8ab3-f7d9fb231419",
    "source_url": "https://supabase.com/docs/reference/python/auth-verifyotp",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To make a file publicly accessible, the bucket must be set to public either through the updateBucket() API or the Supabase dashboard. No specific permissions are required in the buckets or objects tables. The get_public_url() function can be used to retrieve the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "5777edf8-27eb-4ec8-8cc3-4af324554c7b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive interface for interacting with Supabase's Postgres database, including functionality for listening to database changes, invoking Deno Edge Functions, building login and user management features, and managing large files. It documents every available object and method, enabling developers to efficiently leverage Supabase's capabilities within their Python applications."
  },
  {
    "chunk_id": "2a2f5d49-a6c0-4441-8fe7-6dd0f3e58eaa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content summarizes the installation process for the Supabase-py library, which can be installed via PyPi using the pip package manager. The installation instructions are provided for both the Conda and standard Terminal environments, allowing users to easily set up the library for Python 3.7 and later versions."
  },
  {
    "chunk_id": "9e0a0a79-feee-4f53-ba7a-fddcecaadc78",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, along with optional client options to customize the authentication behavior. The Supabase client provides access to the full range of Supabase functionality."
  },
  {
    "chunk_id": "49495ec9-46c6-4d31-ab36-1b340334cf15",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the key points about fetching data in Supabase:\n\n1. Supabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `range()` query can be used to paginate through data.\n2. The `select()` function can be combined with filters and modifiers to customize the data retrieval.\n3. The `apikey` is a reserved keyword in the Supabase Platform and should be avoided as a column name."
  },
  {
    "chunk_id": "5d63e641-3ea8-41bf-9ab7-a97fcf3cc66e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'insert data' section describes the parameters for inserting data into a table, including the ability to insert a single row or multiple rows, as well as options to control the response format and handling of missing fields. It provides an example of how to insert a new record into a 'countries' table using the Supabase library."
  },
  {
    "chunk_id": "79fd52d7-d058-4ead-9928-403186aecb1f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided documentation is used to update data in a table, and should always be combined with filters to target specific items. The method accepts a dictionary or list of values to be updated, and an optional count method parameter to get the count of rows returned."
  },
  {
    "chunk_id": "7a602655-eb4f-4fc8-b73b-ac521dc238a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe upsert function in Supabase allows inserting or updating data in a table. Primary keys must be included in the values dictionary to use upsert. The function supports parameters for specifying the data to insert, handling duplicate rows, and controlling the response format. Upserting is useful for tables with unique constraints, as it can update existing rows or insert new ones as needed."
  },
  {
    "chunk_id": "8250efbb-5305-4651-a830-3dadfcea592c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` function in Supabase should always be combined with filters to target the specific item(s) you want to delete. When using `delete()` with filters and Row-Level Security (RLS) enabled, only rows visible through SELECT policies are deleted. The `delete().in_()` method allows for efficiently deleting multiple records that share common criteria, such as deleting users by their IDs."
  },
  {
    "chunk_id": "25bf719d-9136-453f-a863-62051bca72f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls to execute database logic from anywhere. Postgres functions are useful for operations that rarely change, such as password resets and updates. The documentation provides details on the different parameters that can be used when calling a Postgres function, including specifying required/optional parameters, read-only access, and count algorithms for set-returning functions."
  },
  {
    "chunk_id": "a82b0f80-39db-40c5-895b-2a23c4ac0ba6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions, which can be used in various CRUD operations such as `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other operations is important, as demonstrated in the example code."
  },
  {
    "chunk_id": "0d2cef2f-87eb-4b1c-8994-36a0388f2ae0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `eq()` function in the Supabase library allows you to filter a database table by matching rows where a specific column is equal to a provided value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter provides the value to match against."
  },
  {
    "chunk_id": "68829aca-b3e2-4be8-9ee5-26d3a55da814",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This code snippet demonstrates how to filter a database table by a column that is not equal to a specified value. The `neq()` function is used to select all rows where the \"name\" column is not equal to \"Albania\". The summary captures the key technical points of the code example and its purpose in a concise manner."
  },
  {
    "chunk_id": "cee3269d-52e1-4f0b-b217-28c78ce9e4bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by a column value that is greater than a specified value. It provides the required parameters, including the column name and the value to filter by, and gives an example usage with the `gt()` method in the Supabase client."
  },
  {
    "chunk_id": "11f9035e-7f17-4d02-905c-605658f84e7c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe documentation describes how to filter a database table to include only rows where a specified column has a value greater than or equal to a provided value. This is achieved using the `gte()` method, which takes the column name and the comparison value as parameters. This functionality is demonstrated with an example using the Supabase library to select data from a \"countries\" table."
  },
  {
    "chunk_id": "f603710c-b25e-4d7c-b207-766ae17e261c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column has a value less than a given value. The key parameters are the column name and the comparison value, which can be used with the `lt()` method in the Supabase library to execute the query."
  },
  {
    "chunk_id": "5d65b94a-6ae2-4a43-8e25-24bfa81f0804",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes the use of the \"lte\" (less than or equal to) operator to filter a database table by a specified column value. The \"lte\" operator takes two parameters: the column name and the value to filter by. This functionality is demonstrated with an example using the Supabase library."
  },
  {
    "chunk_id": "2ff7435e-371c-49bf-88c9-5cbf818d8778",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Column matches a pattern\" section is as follows:\n\nThis feature allows filtering a table by checking if a specified column matches a given pattern case-sensitively. The `column` parameter specifies the name of the column to apply the filter on, and the `pattern` parameter defines the pattern to match. This can be used in a `select()` query, as shown in the example, to retrieve only the rows where the \"name\" column matches the \"%Alba%\" pattern."
  },
  {
    "chunk_id": "89145622-6c96-417b-93fb-d8bc46536ca6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provided covers the key technical points of the documentation:\n\nThe \"Column matches a case-insensitive pattern\" feature allows filtering rows where the specified column matches the provided regular expression pattern in a case-insensitive manner. The two required parameters are the column name and the pattern to match, which can be demonstrated using the `ilike()` function in the Supabase library."
  },
  {
    "chunk_id": "29cac324-474a-46ab-94b7-a6e0921f28a0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' section explains how to filter a database table by checking if a column's value matches a specified value, which can be null, true, or false. It provides the required parameters of 'column' and 'value', and includes an example of filtering the 'countries' table by checking if the 'name' column is null."
  },
  {
    "chunk_id": "30265bcd-e1a6-4297-b0d6-93dcf4737dce",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to filter a table by checking if the values in a specified column are included in a provided array of values. The `in_()` function is used to perform this filtering, with the `columnRequired` parameter specifying the column to filter on and the `valuesRequired` parameter providing the array of values to match against."
  },
  {
    "chunk_id": "6b47816d-376a-42f5-8ec7-d9824948bd12",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the following key points:\n\nThe \"contains\" operator is only relevant for jsonb, array, and range columns. It matches rows where the specified column contains every element appearing in the provided value. The parameters are the column to filter on and the jsonb, array, or range value to filter with. This operator can be used on array, range, and jsonb columns, as demonstrated in the example."
  },
  {
    "chunk_id": "da66893f-8a0b-4ac0-947f-48064b43dcc3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` query operator is used to filter rows in a database table where the elements in the specified column (which can be a jsonb, array, or range type) are fully contained within the provided value. This is useful for querying data structures like arrays, ranges, and JSON, allowing you to efficiently find records that match a specific set of elements or values."
  },
  {
    "chunk_id": "5738e59e-b542-4c6b-a87d-9672cce778cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" functionality is only applicable to range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The key parameters are the column name and the range to filter with, as demonstrated in the example using the Supabase library."
  },
  {
    "chunk_id": "f976b969-eb8b-4328-9dd0-4ab8a070c3a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"greater than or equal to a range\" filter is used for range columns in a database. It matches rows where every element in the specified column is either contained within the given range or greater than any element in the range. The key parameters are the column name and the range to filter on. This can be used in a Supabase query to select data from a table based on a range of values in a particular column."
  },
  {
    "chunk_id": "63d6b776-a042-4f1d-bbec-b754e23b9d09",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns to match only rows where every element in the specified column is less than any element in the provided range. It takes two parameters: the column to filter on and the range to filter with. This can be used in a Supabase query to select data where the \"during\" column is less than the given range."
  },
  {
    "chunk_id": "500f15da-e209-472d-beab-109d04297e48",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Less than or equal to a range' feature is used in range columns to filter rows where every element in the specified column is less than any element in the provided range. The key parameters are the column name and the range values, which can be used in a Supabase query to select the relevant data."
  },
  {
    "chunk_id": "5918d01e-5858-4082-bf51-127c5303d8c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is about the \"Mutually exclusive to a range\" feature, which is only applicable to range columns. It allows filtering rows where the column value is mutually exclusive to a specified range, meaning there can be no element between the two ranges. The feature is configured using the \"range_adjacent\" method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "ff9b2a86-22af-4a4e-8ddb-c0689daab287",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section describes the \"With a common element\" filter, which is only applicable to array and range columns. It allows matching rows where the column and the provided value have at least one element in common. The filter is specified using the `overlaps` method, taking the column name and an array of values as parameters."
  },
  {
    "chunk_id": "ebdd9697-94e9-4bc3-a5b8-493adfcd5cdb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Match a string' feature allows filtering text and tsvector columns to match a specific query string. It provides options for basic and full text normalization as well as websearch mode. This functionality is useful for implementing advanced full-text search capabilities in Postgres-based applications."
  },
  {
    "chunk_id": "bff96909-dba9-443b-9d03-81e22d88366d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `.match()` method in the provided code example allows you to filter a database table by matching each column in the `query` object to its associated value. This is a concise way to apply multiple `.eq()` filters on the table. The `queryRequired` parameter is an object where the keys represent the column names, and the values are the corresponding filter values."
  },
  {
    "chunk_id": "06e5cfe1-e818-4ce1-bad6-c1471657fd8c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to use the `not_` operator in PostgREST filters to match rows that do not satisfy the filter criteria. This can be used for filtering based on array values or checking for null values. The example demonstrates using `not_.in_()` and `not_.contains()` to filter a table of countries, excluding rows where the name is null."
  },
  {
    "chunk_id": "657df405-fc3c-427a-8667-4c6309d69c6d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe or95() function in the Supabase client library allows you to apply multiple filters using the PostgREST syntax, such as in() for inclusion and contains() for array values. It supports filtering on the parent table as well as referenced tables. The or95() function can be used in combination with the select() function to retrieve data matching at least one of the specified filters."
  },
  {
    "chunk_id": "1dccff70-0e5a-4b50-8877-a2ffb1c05572",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"match the filter\" section explains how to use the `filter()` method in the PostgREST syntax to apply filters to queries. It demonstrates the required `columnName` parameter and optional `operator` and `value` parameters, including examples of using `in` and `contains()` operators. It also shows how to apply filters when using the `select()` method on a foreign table."
  },
  {
    "chunk_id": "9f373b64-1f06-40c9-b9d5-7c90ce696586",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which only return rows matching certain conditions. Modifiers must be specified after filters and some modifiers only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "a1b052dc-6159-4b9c-89ff-60d02b1406d5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` method allows ordering the query result by a specified column, with optional parameters to control the order direction (ascending or descending), whether to show nulls first, and the name of a foreign table to order by. This is demonstrated in an example query that orders the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "5fa639ff-cd94-4f69-a385-2ab9c4f10006",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The 'limit()' function in the Supabase library allows developers to specify the maximum number of rows to be returned from a database query. This can be applied to both the parent table and any foreign tables associated with it. The example demonstrates how to limit the response to a single row when querying the \"countries\" table."
  },
  {
    "chunk_id": "8b85f2c7-b8ae-4169-afec-beab196651dd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function allows limiting the query result to a specified range of records, defined by a starting offset (`from`) and an ending offset (`from + to`). This is useful for pagination or retrieving a subset of records. The range is 0-based and inclusive, and can also be applied to foreign tables using the `foreign_table` parameter."
  },
  {
    "chunk_id": "9ef52f4a-ae3d-4457-bc6f-e3dc2cff61a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise overview of how to retrieve a single row of data using the Supabase library's `select()` method with the `single()` modifier. This allows retrieving the data as a single object instead of an array, which can be useful in certain scenarios where only a single row is required. The example demonstrates selecting the \"name\" column from the \"countries\" table and executing the query to retrieve the first row."
  },
  {
    "chunk_id": "58430828-8fb6-46b8-8306-cb165e808078",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase library. This is useful when you expect to fetch at most a single row of data, such as when querying for a record by a unique identifier. The example demonstrates how to retrieve the record for the country \"Albania\" from a \"countries\" table."
  },
  {
    "chunk_id": "9ed91fe6-3ecb-4cba-aacb-f3c1755aab17",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the \"Retrieve as a CSV\" feature, which allows users to return data from a Supabase table as a string in CSV format. This is demonstrated with an example code snippet that selects all data from the \"countries\" table and executes the CSV response. The summary highlights the key functionality and usage of this feature."
  },
  {
    "chunk_id": "6f872d42-4b77-45e5-a483-01c9a8ffdf45",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, which is useful for debugging slow queries. It can reveal sensitive information, so it's best to only enable it for testing environments. The `explain()` method supports several optional parameters, such as `wal`, `verbose`, `settings`, `format`, `buffers`, and `analyze`, which provide different levels of detail about the query execution plan."
  },
  {
    "chunk_id": "78d1b8b9-5c7f-4769-b336-3ff90177688e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, users need to verify their email address before logging in. This can be disabled by turning off the \"Confirm email\" setting in the project dashboard. If \"Confirm email\" is enabled, a user object is returned but the session is null, while if it's disabled, both user and session are returned. The user is redirected to the SITE_URL upon email confirmation, which can be modified in the project settings. Attempting to sign up an existing confirmed user will return an obfuscated user object or an error message depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "10bf3cca-cc56-4569-9236-776d0f2a508e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe function `supabase.auth.sign_in_anonymously()` creates an anonymous user account, which is recommended to be set up with a captcha to prevent abuse. The function takes an `options` parameter that can include a `captcha_token` to handle captcha verification."
  },
  {
    "chunk_id": "9b4ce08a-a335-4e75-a5fa-82d7ea6ce737",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The provided content describes how to sign in an existing user using either an email and password or a phone number and password. The key parameters required for this operation are the `credentialsRequiredSignInWithPasswordCredentials`, and the summary includes an example of the code to perform the sign-in operation with an email and password."
  },
  {
    "chunk_id": "9d9cbe3a-b110-47e2-9a5d-2a42df078830",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nAllows signing in with an OIDC ID token. The authentication provider used should be enabled and configured. The `sign_in_with_id_token()` method takes a provider and token as parameters to authenticate the user."
  },
  {
    "chunk_id": "82d18c22-6411-4e3e-ae78-b58ca9999908",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe \"sign_in_with_otp()\" method is used for passwordless sign-in, where a one-time password (OTP) is sent to the user's email or phone number. It can automatically create a new user if they don't exist, and supports configuring whether to send a magic link or an OTP. The magic link's destination URL is determined by the SITE_URL, and additional redirect URLs can be added to the project."
  },
  {
    "chunk_id": "7e076bf7-f152-4a31-acdf-655d526a352a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided method allows users to sign in through a third-party OAuth provider, such as GitHub, which Supabase supports. The key parameters include `credentialsRequiredSignInWithOAuthCredentials`, which can be used to sign in with a third-party provider, either with a redirect or with specified scopes. This functionality enables integration with popular authentication services, simplifying the sign-in process for end-users."
  },
  {
    "chunk_id": "f55e14a6-2c5c-4f47-af64-13c072dadd09",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, the user must first establish a connection to an identity provider using the provided CLI commands. The `domain` property can be used to start the sign-in flow if an email domain has been associated with the identity provider, or the `provider_id` property can be used to specify a different way to initiate the authentication flow, such as mapping specific user email addresses or using company-specific hints to identify the identity provider."
  },
  {
    "chunk_id": "b2226519-8851-433c-b00e-978621d23cc7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the user's refresh token and deletes the JWT from the client-side, though the JWT itself remains valid until it expires. Signing out in the global scope logs the user out of all their other active sessions as well."
  },
  {
    "chunk_id": "42d406a8-4342-4671-9e1d-a7ef17726df3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for various authentication types, including SMS, email, and password recovery. The verification type should match the corresponding auth method used previously to sign up or sign in a user. The `TokenHash` contained in the email templates can be used for signing in with the PKCE flow for server-side auth."
  },
  {
    "chunk_id": "d39327c3-91fc-4312-85da-b2d38d966785",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with by the client. If you need trustworthy user data, you should instead call the `get_user` method. Additionally, if the session's access token has expired, this method will automatically use the refresh token to get a new session."
  },
  {
    "chunk_id": "4acaa860-67ed-4c70-9b09-814a59c050c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that the session is refreshed, whether the current one is expired or not."
  },
  {
    "chunk_id": "25864bd0-78c2-481c-899c-e5975d7188bf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the user object from the database, validating the user's access token JWT on the server. It is useful for checking if the user is authorized, and can be called with an optional access token JWT or the current session token."
  },
  {
    "chunk_id": "ca8b6925-bcbb-489b-adf2-000475e962e4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data by taking an `access_token` and `refresh_token` as parameters. If the current session is expired or the tokens are invalid, the method will refresh the session and throw an error if the refresh fails. Upon successful session set, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "f88c802a-4d98-4287-aeaf-1020e5e33609",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers the implementation of Multi-Factor Authentication (MFA) in Supabase, specifically supporting time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors, up to 10, for recovery purposes, which provides an alternative to recovery codes and reduces the attack surface."
  },
  {
    "chunk_id": "8ec35219-15d5-43f6-99c6-0a14ca659f14",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase Python library. The `mfa.enroll()` function is used to enroll a TOTP factor, and the returned `id` can be used to create and verify MFA challenges using the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "cbc82900-8ee2-4ee1-9490-6e2877f9b6ba",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge for multi-factor authentication (MFA), an enrolled factor is required. The `mfa.challenge()` function can be used to initiate the challenge, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "e2507313-c8e8-4b0e-9031-11bb891c1ca2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, the user must first create a challenge using the `supabase.auth.mfa.verify()` method, providing the `factor_id`, `challenge_id`, and `code` parameters. This allows the user to authenticate and verify their identity through multi-factor authentication."
  },
  {
    "chunk_id": "a48a6532-0e9c-4b0b-9db1-3e54877c87e2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes `mfa.challenge()` and `mfa.verify()` in a single step, taking a `factor_id` and a `code` as input parameters."
  },
  {
    "chunk_id": "3068de9e-1302-42e8-bf90-1d08dc212c00",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: \nTo unenroll a factor, you can use the `supabase.auth.mfa.unenroll()` function, passing the `factor_id` of the factor you want to unenroll. This allows you to remove a specific multi-factor authentication factor from a user's account."
  },
  {
    "chunk_id": "dd1cf8a3-dfeb-4e1e-ba89-9e66985e0323",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as an email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). Users can check their current AAL and the next available level using the `supabase.auth.mfa.get_authenticator_assurance_level()` function."
  },
  {
    "chunk_id": "a6a379b9-6c6d-4b51-a29a-fb404ddabb6e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes how to invoke a Supabase Edge Function. It requires an Authorization header, and automatically attaches the appropriate Content-Type header based on the data type. The function can be invoked with a request body, and custom headers can be passed as well. An example of invoking the \"hello-world\" function with a JSON request body is provided."
  },
  {
    "chunk_id": "45a7220f-6d1a-4ca5-b8a7-b07eed0704c3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can enable replica identity to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The code example demonstrates subscribing to a channel, sending a broadcast message, and handling the received broadcast."
  },
  {
    "chunk_id": "f4718ed9-52fe-44c7-bf60-3938faaf8fca",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and the connected database. The `supabase.remove_channel()` function can be used to unsubscribe from a channel, which helps clean up unused channels that may degrade system performance as more clients subscribe simultaneously."
  },
  {
    "chunk_id": "04e66168-b9bf-447b-bae4-763173cfa104",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically handles channel cleanup 30 seconds after a client disconnects, but keeping unused channels can degrade performance as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "cb6fc186-e054-4210-bdf9-cafeab4bce44",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the given content is: \n\nThe code snippet `_10  channels = supabase.get_channels()` retrieves all the channels available in the system. This function call allows the user to access and work with the complete set of channels provided by the Supabase platform."
  },
  {
    "chunk_id": "c4869c7e-c952-475c-9f75-9c9e8ec6fd01",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. The code subscribes to the 'room1' channel and, upon successful subscription, sends a broadcast message containing random x and y coordinates to all connected clients."
  },
  {
    "chunk_id": "7c3eaaa1-6b3d-4e70-acfe-0c8fb8bc3d0d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required permissions are 'insert' on the 'buckets' table, but no permissions are needed on the 'objects' table. Refer to the Storage guide for more information on how access control works. The Supabase client can be used to create a new bucket using the `create_bucket()` method."
  },
  {
    "chunk_id": "aa6e57c1-36dd-4a84-847b-68930362eb80",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, you need the `select` permission on the `buckets` table. No permissions are required for the `objects` table. Refer to the Storage guide for details on access control."
  },
  {
    "chunk_id": "7466aa66-3e31-4440-936a-74ebe59c12b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required RLS policy permissions are: `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "650634df-6371-4178-af33-d0643d67c5bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the user requires `select` and `delete` permissions on the `buckets` table, but no permissions on the `objects` table. The deletion is performed using the `supabase.storage.delete_bucket(name)` function, as detailed in the Storage guide on access control."
  },
  {
    "chunk_id": "ef76183c-72db-46dd-a169-58a04063769d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "24e25b51-b0ce-4b18-bbf6-66689d80b8ce",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the necessary permissions are `insert` on the `objects` table. The MIME type should be specified for certain file types, such as images or audio, and defaults to `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, where the file path, storage path, and content type can be specified."
  },
  {
    "chunk_id": "8f5fabfc-600d-4d65-a313-c526a2c68752",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase storage, the user requires `select` permissions on the `objects` table. The provided code snippet demonstrates how to download a file from a specified storage bucket and write its contents to a local destination file."
  },
  {
    "chunk_id": "5817d259-b79a-4ce4-80c0-85c694c8bee5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The code to perform this action is `supabase.storage.from_('bucket_name').list()`. Refer to the Supabase storage access control guide for more information on managing permissions."
  },
  {
    "chunk_id": "fbbcab80-1bad-4c4a-ba06-eecb706390d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file data, path, and optional file options like cache control and upsert."
  },
  {
    "chunk_id": "cab3037c-a092-47df-a89d-364271b9e1eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the necessary RLS policy permissions are 'update' and 'select' on the 'objects' table. The provided code example demonstrates how to move a file from 'public/avatar1.png' to 'private/avatar2.png' within the 'bucket_name' bucket. Refer to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "b13a3ff3-a588-4353-bb47-9220dfecec95",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the required permissions are `delete` and `select` on the `objects` table. The `buckets` table permissions are not needed. Refer to the Supabase storage access control guide for more information on managing permissions."
  },
  {
    "chunk_id": "ee5a2403-bfe4-458b-8261-a10592df3d31",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required permissions are 'select' on the 'objects' table, but no permissions are needed on the 'buckets' table. The signed URL allows temporary access to a specific file, and the expiry duration can be specified."
  },
  {
    "chunk_id": "d52a8106-6b30-4719-b2e0-d390efe89ec3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-api",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must first be set to public either through the `updateBucket()` function or the Supabase dashboard. No specific permissions are required in the `buckets` or `objects` tables. The `get_public_url()` function can then be used to retrieve the public URL for a given file path within the public bucket."
  },
  {
    "chunk_id": "955147d7-972c-4d84-a987-0da691249389",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Supabase Python client library, supabase-py, allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. This comprehensive library provides access to the full suite of Supabase features through a well-documented Python interface."
  },
  {
    "chunk_id": "8750d5f4-a43e-4bc5-8142-c42e53b7b8cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase Python library (supabase-py) using pip, the Python package installer, for Python versions 3.7 and above. The installation can be done directly in the terminal by running the command `pip install supabase`."
  },
  {
    "chunk_id": "2518f199-6a24-4636-9922-580267f3239d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary way to interact with the Supabase ecosystem, and it can be initialized using the `create_client()` method, which takes the Supabase URL and key as required parameters. The client can also be customized with optional `ClientOptions` to change the authentication behavior."
  },
  {
    "chunk_id": "3eeca672-1255-4bde-b1ec-163be8539bd5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, and the `apikey` keyword should be avoided as a column name. Key parameters include the columns to retrieve and the count method for the returned rows."
  },
  {
    "chunk_id": "6c2ebe8f-f64e-42b3-98c4-6d85dea8675b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Insert data\" section describes the parameters for inserting data into a table using the Supabase library. It outlines the required `jsonData` parameter, which can be a single dictionary or a list of dictionaries, and optional parameters such as `countMethod`, `returnMethod`, and `default95to95null`. The section also provides an example of how to use the `insert()` method to create a new record in the \"countries\" table."
  },
  {
    "chunk_id": "d017cb1d-c702-49b2-9803-6dd3b9eb1a9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to update data in a database table. It should be combined with filters to target the specific items to be updated. The `update()` method expects a dictionary or a list of dictionaries containing the new values, and an optional `count` parameter to get the count of rows affected."
  },
  {
    "chunk_id": "515fc252-a7f7-40b9-9476-db57b660a468",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe upsert operation in Supabase allows inserting or updating data based on primary keys. Primary keys must be included in the `values` dict to use upsert. The method supports various parameters, such as `count` to get the count of rows returned, `returning` to specify the response format, `ignore_duplicates` to ignore duplicate rows, `on_conflict` to handle unique constraints, and `default_to_null` to set missing fields to null for bulk inserts."
  },
  {
    "chunk_id": "9edd6d54-ce9c-4ccf-acba-51760534d98b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data, the `delete()` method should always be combined with filters to target the specific items to be deleted. When using row-level security (RLS), only rows visible through `SELECT` policies will be deleted. The `delete().in_()` method allows deleting multiple rows by specifying an array of values, which is useful for batch deleting entries with common criteria. The `count` and `returning` parameters can be used to control the response."
  },
  {
    "chunk_id": "c40cdf00-8a73-4db8-8f6f-9167461dd1b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls to execute database logic from anywhere. Functions are useful for operations that rarely change, such as password resets and updates. The `supabase.rpc()` method can be used to call Postgres functions, with optional parameters to control the function call behavior, such as read-only access mode and row count algorithms."
  },
  {
    "chunk_id": "fa1a54db-f007-43c4-aa05-5a0c98039ccf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return rows that match certain conditions in various Supabase query operations, such as `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other query methods is important, as demonstrated in the provided code examples."
  },
  {
    "chunk_id": "172c8e08-4862-44fc-a1d3-97674d1f9fa6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"eq()\" function is used to filter a database table by a specific column and value, returning only the rows where the column is equal to the specified value. The key parameters are the column name and the value to filter by, as demonstrated in the example using the \"supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()\" query."
  },
  {
    "chunk_id": "6614789d-f575-4ef1-b9e9-aca659f937c7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation covers the \"column is not equal to a value\" filter, which allows matching rows where a specified column is not equal to a given value. The key parameters are the column to filter on and the value to filter by. An example is provided using the Supabase library's `neq()` method to select all rows from the \"countries\" table where the \"name\" column is not equal to \"Albania\"."
  },
  {
    "chunk_id": "aae8f6d2-67c9-4883-ac7c-c40e003ba654",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `gt()` function in the Supabase library allows you to filter a database table by selecting rows where a specified column has a value greater than a given value. The `columnRequiredstring` parameter specifies the column to filter on, and the `valueRequiredany` parameter specifies the value to filter by."
  },
  {
    "chunk_id": "cc0597e3-33ca-42de-87a0-b1979eed35e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section explains how to filter a database query to only include rows where the specified column is greater than or equal to a given value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library to demonstrate the usage."
  },
  {
    "chunk_id": "6efa3476-1f99-4de0-a5ed-080877d5eea3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a table to include only rows where a specified column has a value less than a given value. The key parameters are the name of the column to filter on and the value to compare against. This functionality can be used with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "2036e3de-1b24-4e0d-805a-d582f11f4cd8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `lte()` function in the Supabase library allows you to filter a database table by selecting rows where a specified column is less than or equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This can be used in a `select()` query to retrieve the filtered data."
  },
  {
    "chunk_id": "a26cad1e-8b78-490b-aecc-b5afb457f04c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a column filter that matches rows where the specified column matches the given pattern case-sensitively. The key parameters are the column name and the pattern to match, and an example is provided demonstrating the use of the `like()` function to filter a table based on a pattern in the \"name\" column."
  },
  {
    "chunk_id": "291d3540-301a-4850-8361-12f5923a7e26",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'ilike' function in Supabase allows for case-insensitive pattern matching on a specified column. It takes two required parameters: the column name and the pattern to match against. This can be useful for filtering rows where the column value matches the given pattern, regardless of capitalization."
  },
  {
    "chunk_id": "4c0efbf5-e0b4-4b64-8af3-02505f19ef2c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` function in Supabase is used to filter rows where the value of a specified column matches a given value, which can be null, true, or false. The function takes two parameters: the column name and the value to match."
  },
  {
    "chunk_id": "549ed494-320e-4297-aa74-2fd5df242eed",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes a filter operation in a database query, where the rows are filtered based on the values in a specific column. The `in_()` method is used to check if the values in the `name` column are included in the provided `values` array (`[\"Albania\", \"Algeria\"]`). This allows the query to match only the rows where the `name` column contains one of the specified values."
  },
  {
    "chunk_id": "fed88345-39cf-45a2-a2a9-5299087667aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Column contains every element in a value\" functionality, which is relevant for jsonb, array, and range columns. It allows matching rows where the specified column contains every element in the provided value. The parameters include the column to filter on and the value (jsonb, array, or range) to filter with. This functionality can be useful for performing complex queries on data stored in these specialized column types."
  },
  {
    "chunk_id": "d0fec409-770b-4987-8fd5-6850684e1a8a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the provided value. The summary provides the required parameters, columnRequired and valueRequired, along with example usage for array, range, and jsonb columns."
  },
  {
    "chunk_id": "928b79b8-c26e-470a-8f93-bd0c64cdf1b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" function in Supabase is used to filter rows in a range column, where every element in the column is greater than any element in the specified range. The function takes two parameters: the column name and the range to filter with. This allows for more precise filtering of data based on date/time ranges."
  },
  {
    "chunk_id": "f9730b73-92e5-42f0-980d-915450294dc5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"greater than or equal to a range\" operation is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The parameters for this operation are the column name and the range to filter on. This can be used in the `select()` method to retrieve rows matching the specified criteria."
  },
  {
    "chunk_id": "8fa9866e-cb20-4bdf-b8e6-0238114c67ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature applies only to range columns, allowing users to filter rows where every element in the specified column is less than any element in the provided range. The key parameters are the column to filter on and the range to compare against. This functionality can be used in queries, as demonstrated in the provided example."
  },
  {
    "chunk_id": "25bc0d46-9896-42fa-b733-0e91f5089ebc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns in Supabase, allowing you to match rows where every element in the specified column is less than or equal to any element in the provided range. The filter is applied using the `.range_lte()` method, which takes the column name and the range array as parameters."
  },
  {
    "chunk_id": "277ff9de-d01b-4aad-9748-18e43c279642",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is used to filter range columns, matching only rows where the column value is mutually exclusive to the provided range, with no elements between the two ranges. It takes a column name and a range array as parameters, and can be used in a Supabase SQL query to filter the results."
  },
  {
    "chunk_id": "ac713980-95f2-4976-8b00-027a38e5143d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summarized content is about the \"With a common element\" filter in Supabase, which is used to match rows in array or range columns where the column value and the provided value have an element in common. The filter takes two required parameters: the column to filter on, and the value to filter with. This feature is useful for querying data with array or range columns, such as filtering issues by their tags."
  },
  {
    "chunk_id": "fe309fba-52dd-4857-b8a7-88a42a3791a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Match a string\" functionality allows filtering rows in a text or tsvector column based on a query string. It provides options for basic or full text normalization, and websearch mode. This can be useful for performing advanced Postgres full-text searches, such as searching for rows where the \"content\" column matches the query \"'eggs' & 'ham'\" with the \"english\" configuration."
  },
  {
    "chunk_id": "6c3c8b46-4e0a-40f2-bef7-2f1125788635",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method allows you to filter a table where each column in the `query` object has an equal associated value. This is a shorthand for multiple `.eq()` calls. The `query` parameter is a dictionary with column names as keys and their filter values."
  },
  {
    "chunk_id": "0d0c3878-b559-4b42-acd3-9d4a0caf8c54",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the usage of the `not_` operator in PostgREST filters to match rows that don't satisfy the given criteria. It demonstrates examples for filtering based on `in` and `contains` operations, as well as using `not_.is_` to exclude null values when fetching data from a \"countries\" table using the Supabase library."
  },
  {
    "chunk_id": "1ab262a7-9664-4f13-a49f-d6679f67cfdc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'or95()' function in the Supabase client library allows you to use the raw PostgREST syntax to match at least one filter, including 'in', 'contains', and 'containedBy' operations. The 'filtersRequired' parameter takes the filter string, and the 'reference95table' parameter can be used to filter on referenced tables instead of the parent table. The 'or()' function can be used with 'and()' to combine multiple filters."
  },
  {
    "chunk_id": "5002235a-b47c-45ee-bda9-f27fa9d790b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the Supabase client library expects the use of raw PostgREST syntax for the filter values. This includes using parentheses for the 'in' filter and backslashes for array values in the 'contains' filter. The method takes three parameters: the column to filter on, the operator to use, and the value to filter with."
  },
  {
    "chunk_id": "b82f4e44-31e8-4126-b502-4785459c74ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and are only applicable for queries that return row-based responses, such as `select()` or `rpc()` on a function that returns a table."
  },
  {
    "chunk_id": "f33b827b-f8ea-48b1-bb09-a94d5d546d0d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order() method allows you to order the query results by a specific column, with options to sort in descending order, show nulls first, and order by a column in a foreign table. The main parameters are column (the column to order by), desc (whether to sort in descending order), foreign_table (the foreign table name to order by), and nulls_first (whether to show nulls first). An example is provided showing how to order the results of a select() query on the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "b5956674-2fba-404c-84a5-c1a4d08d1ad7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Limit function allows users to specify the maximum number of rows to return from a database query. This can be applied to both the parent table and any foreign tables associated with it. The example demonstrates using the Limit function with the `select()` method on a \"countries\" table to return only the first row."
  },
  {
    "chunk_id": "c2f04fbd-18ae-4945-a200-a59895f5a08d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in the provided software documentation allows limiting the query result to a specified range of rows, defined by a starting offset (`from`) and an ending offset (`from + to`). This feature respects the query order and can be applied to both the parent table and foreign tables. The `from` and `to` parameters are 0-based and inclusive, allowing for precise control over the returned data subset."
  },
  {
    "chunk_id": "7e7e67be-6b2d-4500-a9b3-541137dabda3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation explains how to retrieve a single row of data from a Supabase table using the `select()` method with the `limit(1)` and `single()` modifiers. This allows returning the data as a single object instead of an array of objects, making it more convenient to work with in certain scenarios."
  },
  {
    "chunk_id": "90fc9108-570e-42a4-ab15-e0ea10b24249",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase client library. This is useful when you expect to retrieve at most one row that matches the query criteria, as it returns the data as a single object instead of an array. The example demonstrates using `eq()` to filter the \"countries\" table by the \"name\" column and returning the result as a single object."
  },
  {
    "chunk_id": "e9f61225-3271-4e1f-b912-b1aab5a89710",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the 'Retrieve as a CSV' functionality. It explains that this allows returning the selected data from a Supabase table as a CSV string, which can be useful for exporting data in a tabular format. The example code demonstrates how to execute this CSV retrieval operation."
  },
  {
    "chunk_id": "8506ad46-55d5-4249-90a7-3b853d8fa5fb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, which is useful for debugging slow queries. While explain is not enabled by default due to potential security concerns, it can be enabled with additional protection in production environments. The `explain()` method supports various parameters like `walOptional`, `verbose`, `settings`, `format`, `buffers`, and `analyze` to fine-tune the output of the execution plan."
  },
  {
    "chunk_id": "47d72b95-bbfb-43ec-8ca5-0124997a8ee5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the project's authentication configuration determines whether a user needs to verify their email address before logging in. If \"Confirm email\" is enabled, a user is returned but the session is null. If it's disabled, both a user and a session are returned. The user can be redirected to a custom URL after email confirmation, which can be configured in the project's URL settings."
  },
  {
    "chunk_id": "2145043a-af50-4659-a641-0d3d481d0fec",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example of the API call to create an anonymous user, which takes in an options parameter to include the captcha token. The function returns an anonymous user, which can be useful for certain use cases where a user doesn't need to be fully authenticated."
  },
  {
    "chunk_id": "a56f8400-a26e-4758-9738-1c0cfa6fd01d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of signing in an existing user with either an email and password or a phone number and password. It provides a code example for signing in with email and password using the Supabase authentication API, and lists the required parameters for the sign-in operation."
  },
  {
    "chunk_id": "86bb9f7d-a3b3-4310-9c7e-3ff3d54ebbfb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in using an OIDC ID token. It provides a code example for the `sign_in_with_id_token()` method, which takes a provider and token as parameters. This functionality allows users to authenticate with the application using an existing ID token, provided that the authentication provider is properly configured."
  },
  {
    "chunk_id": "83fe9bca-90ef-47f2-8341-589a4c045180",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through One-Time Password (OTP) authentication, which requires an email or phone number. This method allows passwordless sign-in, where an OTP is sent to the user's email or phone. The `sign_in_with_otp()` function can be used to sign in or sign up a new user, and options can be configured to control user creation behavior. The method supports both email-based magic links and SMS/WhatsApp OTPs, with the ability to customize the email template to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "2882dd7d-ac88-4352-9255-dbdce4d6109a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes the method for signing in a user through OAuth, a third-party authentication mechanism supported by Supabase. It outlines the `sign_in_with_oauth()` function, which takes a `provider` parameter (e.g., 'github') to initiate the sign-in process with the specified third-party provider. This functionality enables users to authenticate with Supabase using their existing accounts from various third-party platforms."
  },
  {
    "chunk_id": "e7d70be2-d715-4303-9267-d3091a7e03d4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can use the `domain` property to start a sign-in flow if you've associated an email domain to the identity provider, or the `provider_id` property to use a different way to start the authentication flow, such as mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "b2d86cfe-9483-4cdd-9cdb-5860cd68812f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method logs out the currently signed-in user, revoking the refresh token and deleting the JWT from the client-side. However, the access token JWT remains valid until it expires, as Supabase Auth uses JWTs for authentication. The method can be used to sign out the user from all their active sessions by default."
  },
  {
    "chunk_id": "f2383712-52d3-4b3b-97dd-12285ec9bf45",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify the one-time password (OTP) for user authentication. It supports various verification types such as SMS, email, and phone number changes. The TokenHash contained in the email templates can be used to sign in the user, and the PKCE flow for Server Side Auth can be implemented using the hash."
  },
  {
    "chunk_id": "eb4d8487-9bb2-4c59-a985-fb313d52b19f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is needed, the `get_user()` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "c184609f-0fb9-44a9-9b5f-ef01224c7e96",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` returns a new session, regardless of the expiration status of the current session. It takes an optional refresh token as a parameter, and if not provided, it attempts to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that a new valid session is always available, even if the current one has expired."
  },
  {
    "chunk_id": "e7dc9866-0688-4e99-83ee-e4ecfb104c51",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method fetches the user object from the database instead of the local session, and it is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to get the logged-in user with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "d6b0ff41-2dbb-42e9-a0ee-e9ca47a579b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `set_session()` method sets the session data using an `access_token` and `refresh_token`. If the current session is expired, it will refresh the session. If the tokens are invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "e0b64d88-2e0b-4147-8c52-aa8aaac1c631",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers Multi-Factor Authentication (MFA) methods, specifically focusing on time-based one-time password (TOTP) as the second factor. Supabase supports TOTP for MFA, allowing users to enroll multiple TOTP factors for recovery, which eliminates the need for recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "f0d86915-e43e-4f2b-974d-721624a3bf50",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "To enroll a TOTP (time-based one-time password) factor, use the `mfa.enroll()` method with `\"factor_type\": \"totp\"` and a `\"friendly_name\"`. The returned `id` can be used to create and verify MFA challenges using `mfa.challenge()`, `mfa.verify()`, or `mfa.challenge_and_verify()`."
  },
  {
    "chunk_id": "71d7096b-980d-45d6-91b8-45b510285f28",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a multi-factor authentication (MFA) challenge, an enrolled factor is required. The `supabase.auth.mfa.challenge()` method can be used to initiate an MFA challenge, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "3480f5a6-0f59-4979-ba76-22b642a05658",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions at \"/docs/reference/python/auth-mfa-challenge\". The code example demonstrates how to verify a challenge by providing the factor_id, challenge_id, and the 6-digit code received by the user."
  },
  {
    "chunk_id": "b4c13c7a-7cde-425b-b137-579db8efb84f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to quickly generate and validate an MFA code for a specific factor."
  },
  {
    "chunk_id": "61246241-a706-494f-9291-ea0eb8348fe3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, the provided code uses the `supabase.auth.mfa.unenroll()` function, passing the `\"factor_id\"` as a parameter. This allows the user to remove a specific multi-factor authentication factor from their account, which is useful for managing and securing user access."
  },
  {
    "chunk_id": "10012424-7a54-4f97-b7dd-39db5df700e3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the next level of authentication required, with AAL2 returned if the user has a verified factor, and AAL1 returned otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "45fb45da-dddb-4ba9-9ee8-1da3cc4b84fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by sending an HTTP request with an Authorization header. The function automatically sets the Content-Type header based on the input data type, but this can be overridden. The function call includes an optional body parameter to pass data to the function, which is then processed on the server-side."
  },
  {
    "chunk_id": "ce40e864-582e-49e7-ba0c-a5ad0f9e4ada",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Developers can enable this feature by managing Realtime's replication. Supabase provides various Realtime subscriptions, such as listening to broadcast messages, presence sync, and row-level database changes, which can be implemented using the provided channel API and event callbacks."
  },
  {
    "chunk_id": "f7bd169d-c118-48bd-afd7-ad9868bec544",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel in Supabase is recommended to maintain performance of the Realtime service and database, as unused channels can degrade performance as more clients subscribe. The `supabase.remove_channel()` function can be used to remove a channel, which Supabase will automatically clean up 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "b98fb964-3e28-413b-9ef0-917135e3faf0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the database, as unused channels can cause degradation with more clients subscribed. This can be achieved by calling the `supabase.remove_all_channels()` method, which automatically handles the cleanup of unused channels 30 seconds after a client is disconnected."
  },
  {
    "chunk_id": "d09efd21-a754-4083-a0c1-d1c203d8be9f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe 'get_channels()' function retrieves all channels from the Supabase database. This allows developers to access and work with the complete list of available channels programmatically."
  },
  {
    "chunk_id": "c0146bc8-3dad-4250-b38f-c1c5c0ee1c4f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. It demonstrates sending a 'cursor-pos' message with random x and y coordinates to the 'room1' channel, after subscribing to the channel and handling the successful subscription status."
  },
  {
    "chunk_id": "b8401399-46ce-4278-bc72-912f21bcad25",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a new bucket in Supabase Storage, you need the `insert` permission on the `buckets` table. No permissions are required for the `objects` table. Refer to the Supabase Storage guide for details on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "c1a9e3d6-4efe-49e5-83d9-2f53cd5a0faa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the RLS policy requires `select` permissions on the `buckets` table, but no permissions are needed for the `objects` table. Refer to the Storage guide for details on access control. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "067db46f-3752-4280-af44-6bca57d9a692",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the `supabase.storage.list_buckets()` function is used. This requires `select` permissions on the `buckets` table in the Supabase database. Refer to the Supabase Storage guide for information on access control for storage operations."
  },
  {
    "chunk_id": "c9d22c2e-961e-42e6-ace6-9cdcc1aaf17b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, while no permissions are needed on the 'objects' table. The process involves calling the `supabase.storage.delete_bucket(name)` function, and it's recommended to refer to the Supabase Storage guide for more details on access control."
  },
  {
    "chunk_id": "ce324a6d-6581-4407-956a-297e98fc2063",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the RLS policy permissions required are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty the specified bucket."
  },
  {
    "chunk_id": "b5d0adab-f4f6-4341-94b1-da33f6776e8c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file using Supabase Storage, the user requires the `insert` permission on the `objects` table. The MIME type of the file should be specified in the `file_options` parameter, otherwise it defaults to `text/html`. The file is uploaded by opening the file in binary mode and passing it to the `upload()` method of the Supabase Storage client."
  },
  {
    "chunk_id": "ce0895b4-2f61-46e3-bf8e-3bb27168b5ea",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required permissions are 'select' access on the 'objects' table. The process involves using the Supabase storage client to download the file from the specified bucket and write it to the local destination."
  },
  {
    "chunk_id": "18f38748-33ee-45ce-b381-53aaa3fe10bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions require `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "c486da35-7b37-4532-a917-90ee6af8aadd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are `update` and `select` on the `objects` table. The content updates the file by opening the local file, then using the Supabase storage client to update the file in the specified bucket and path, with optional cache-control and upsert settings."
  },
  {
    "chunk_id": "396c2423-44d5-4b68-bbcf-173502ce2443",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase, the user needs `update` and `select` permissions on the `objects` table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` method. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "deadb6c0-6f32-4547-9f3c-2be067d77985",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table, but no permissions on the `buckets` table. The Storage guide provides details on how Supabase's access control system works."
  },
  {
    "chunk_id": "9c47ece3-99bb-4868-a214-d9e773e30fe5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required RLS policy permissions are: no permissions for the `buckets` table and `select` permissions for the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, which allows controlled access to the specified file for the given duration."
  },
  {
    "chunk_id": "1b416746-83df-4b8c-a4b0-f5c22d558be1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-enroll",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public, either through the updateBucket() method or the Supabase dashboard. No specific permissions are required in the buckets or objects tables. The get_public_url() method can then be used to retrieve the URL for a file in a public bucket."
  },
  {
    "chunk_id": "413d4b87-c957-4bae-82e2-d3e3a06a5187",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods for integrating Supabase's features into Python applications."
  },
  {
    "chunk_id": "c895ee6c-175e-4b53-a098-b5aac9373a9d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the supabase-py library using pip for Python versions 3.7 and later. The installation can be done via the terminal using the command `pip install supabase`."
  },
  {
    "chunk_id": "6be1ffca-a1dd-40e7-ab02-a5c347d2b00a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase client is the primary interface to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and API key obtained from the project dashboard. The client can also be configured with optional settings to customize its behavior, such as the timeout option."
  },
  {
    "chunk_id": "271f48ff-7a2d-41ee-b7ff-d4218be66210",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. Developers can use the `select()` function combined with filters and modifiers to fetch data, and should avoid using the reserved keyword `apikey` as a column name. The `select()` function allows specifying the columns to retrieve, and the `count` option can be used to get the count of rows returned."
  },
  {
    "chunk_id": "a5960eb0-a29a-4566-8ef7-c0272b6af03d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Insert data\" functionality of the Supabase API. It allows inserting single or multiple rows into a table, with optional parameters to control the response, such as the count method, return format, and handling of missing fields. The example demonstrates inserting a single row into the \"countries\" table."
  },
  {
    "chunk_id": "6dc48d96-053b-48be-8712-8ffa418554af",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to update data in a table. It should be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted. An optional `countOptionalCountMethod` parameter can be used to specify the property to get the count of rows returned."
  },
  {
    "chunk_id": "09bf62a0-79a2-478d-a76a-81ddaecbff85",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'upsert' function in this documentation allows inserting or updating data in a database table. It requires including the primary keys in the 'values' dictionary, and supports various optional parameters such as 'count', 'returning', 'ignore_duplicates', 'on_conflict', and 'default_to_null'. The function can be used to upsert a single row or multiple rows in bulk."
  },
  {
    "chunk_id": "21b95f17-85f6-4890-acd6-1346a923d556",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` method in the Supabase client should always be used in combination with filters to target the specific items to be deleted. When using `delete()` with filters and row-level security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple records at once by providing an array of values."
  },
  {
    "chunk_id": "bcfe4b63-8961-4d31-9039-99acd78fd406",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes how to call Postgres functions as Remote Procedure Calls (RPC) from an application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The summary includes details on the different parameters that can be used when calling a Postgres function, including options for passing in arguments, controlling the count algorithm, and executing the function in read-only mode."
  },
  {
    "chunk_id": "87ecf7c9-1c3d-4a76-b04b-20ce7e4fb1ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specific conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other query operations is important, as demonstrated in the example code."
  },
  {
    "chunk_id": "d6d8988f-0a08-4558-8e95-3a597d3449e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'eq' method in the Supabase library is used to filter a database table by a specific column value. It takes two required parameters: the column name and the value to match. This allows retrieving only the rows where the specified column is equal to the provided value."
  },
  {
    "chunk_id": "8e6cdb44-4abe-4795-8d07-28a824bf81ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where the specified column is not equal to the provided value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `neq()` function to select all countries except Albania."
  },
  {
    "chunk_id": "15b6544a-d2c5-4c7b-b810-18066ba1a34e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The content describes a database query operation that filters rows where a specified column value is greater than a provided value. The key technical details include the required parameters, `column` and `value`, and an example usage with the `select()` method of a Supabase database table."
  },
  {
    "chunk_id": "5a22f4f5-37ad-4b54-818e-01e83c131361",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column is greater than or equal to a value\" feature allows you to filter a database table by selecting only the rows where a specified column has a value greater than or equal to a given value. The key parameters are the column name and the value to filter by. This can be used in a Supabase query, for example, to retrieve all rows where the \"id\" column is greater than or equal to 2."
  },
  {
    "chunk_id": "e9e6db63-b3fd-4be4-b7a4-d9e9a78789fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section explains how to filter a database table to only include rows where a specified column has a value less than a given value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library to select rows from the \"countries\" table where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "6b47b924-4710-4dc7-bc5e-6b25417db882",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The 'lte()' function in Supabase filters a table by selecting rows where the specified column is less than or equal to the provided value. The function takes two required parameters: the column name to filter on and the value to compare against."
  },
  {
    "chunk_id": "5d08a8a0-bada-409d-89c6-691b1f963c09",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column matches a pattern\" feature allows filtering a table by checking if a column matches a specified pattern case-sensitively. The required parameters are the column name and the pattern to match. This can be used, for example, to select all rows where the \"name\" column contains the substring \"Alba\"."
  },
  {
    "chunk_id": "c94cd161-58a8-4228-a107-eccad64aa6c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This function filters a database table to include only rows where the specified column matches the given pattern case-insensitively. The function takes two required parameters: the column name and the pattern to match. This can be useful for performing case-insensitive searches on a database."
  },
  {
    "chunk_id": "af267f25-548b-44b0-8330-e44d5a29986b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" feature allows you to filter a table by checking if a specified column has a given value, including checking for null values. The key parameters are the column name and the value to match, which can be null, true, or false."
  },
  {
    "chunk_id": "03601420-0cb8-4c51-b32c-703484134218",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table based on the values in a specific column. The `in_()` function is used to match rows where the specified column contains any of the provided values. This functionality is demonstrated in an example query using the Supabase library."
  },
  {
    "chunk_id": "eb394357-499c-498c-973c-3450f796bb32",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe \"contains every element\" filter is only applicable to jsonb, array, and range columns. It matches rows where the specified column contains every element in the provided value. The filter requires two parameters: the column to filter on and the jsonb, array, or range value to filter with. Examples are provided for using this filter on array, range, and jsonb columns."
  },
  {
    "chunk_id": "41fa9bbc-a3ba-45eb-9338-b5f9fa98ef27",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operation is applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The parameters include the column to filter on and the value to filter with. This operation is useful for querying data where the column contains a collection of elements, such as an array of weekdays."
  },
  {
    "chunk_id": "c44c39cc-ecd5-412a-9a21-141324c27b55",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature allows filtering rows in a range column where every element in the column is greater than any element in the provided range. The parameters include the column name and the range to filter with. This can be useful for querying data where the relevant rows must fall outside a specific time range."
  },
  {
    "chunk_id": "0b8e5d46-4c79-485d-b623-fa92ef67dabc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is only applicable for range columns. It allows filtering rows where every element in the specified column is either contained within the given range or greater than any element in the range. The parameters include the column name and the range to filter with. This functionality can be used in the `select()` method of a Supabase query to retrieve data that matches the specified range criteria."
  },
  {
    "chunk_id": "b562dc5c-bd13-4f41-87b8-59c098b6bb28",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter range columns, matching only rows where every element in the specified column is less than any element in the provided range. The key parameters are the column to filter on and the range to compare against. This can be used in a Supabase query to select rows where the \"during\" column is less than the given time range."
  },
  {
    "chunk_id": "2774b228-b780-45eb-940b-6f5e0a4681eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than or equal to a range' filter is used to match rows in a range column where every element is less than or equal to any element in the specified range. The filter takes two parameters: the column to filter on and the range to filter with. This can be useful for querying data based on date/time ranges."
  },
  {
    "chunk_id": "136e9691-7363-421b-9371-e6d10ad620db",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The Mutually exclusive to a range feature is relevant for range columns, allowing you to filter rows where the column value is mutually exclusive to a specified range, ensuring there are no elements between the two ranges. The key parameters are the column to filter on and the range to filter with, which can be used in a Supabase query to select data that matches this criteria."
  },
  {
    "chunk_id": "4d86646f-a0a6-4f03-8ab0-8c2ba6483c34",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis content describes a filter operation that matches rows where a specified column (an array or range) and the provided value(s) have at least one element in common. The `columnRequired` parameter specifies the array or range column to filter on, while the `valueRequired` parameter specifies the array or range value(s) to filter with. This functionality is demonstrated with an example query on a \"issues\" table, filtering the \"title\" column where the \"tags\" column overlaps with the values \"is:closed\" and \"severity:high\"."
  },
  {
    "chunk_id": "64cb7389-c5b6-453f-a3bd-317d0e595b0d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the 'Match a string' functionality in Supabase, which allows filtering text or tsvector columns to match a given query string. It provides details on the required parameters, 'columnRequiredstring' and 'queryRequiredstring', as well as optional parameters for configuring the text search. An example usage of the 'text_search' function is provided, demonstrating how to perform a basic text search on the 'content' column with the query \"'eggs' & 'ham'\" and the 'english' configuration."
  },
  {
    "chunk_id": "eb3c4d7d-346c-4512-9a7d-ce189efb407c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe `match()` method in the provided example filters a database table \"countries\" to only return rows where the values in the \"id\" and \"name\" columns match the specified values of 2 and \"Albania\", respectively. This is a convenient shorthand for chaining multiple `.eq()` calls to filter on multiple column values."
  },
  {
    "chunk_id": "4c98ab78-af82-4fb1-8cac-6b9118066a1f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to use the `not_` operator to match rows that don't satisfy a given filter. It demonstrates the syntax for `not_.in_()` and `not_.contains()` filters, as well as how to use `not_.is_()` with the `select()` method in the Supabase client to retrieve rows that don't match a specific condition."
  },
  {
    "chunk_id": "d1b38276-284c-43e1-a101-8d59894a2f72",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nor95() allows matching at least one filter using the raw PostgREST syntax for filter names and values, supporting features like in, contains, and containedBy. The filtersRequired parameter specifies the filters to use, and the reference95table parameter can be used to filter on referenced tables instead of the parent table. The or() method is used to chain multiple filters, and it can also be used on referenced tables."
  },
  {
    "chunk_id": "33e7d830-6e94-4bb2-b1cc-317508e3a3f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the PostgREST API expects the use of raw PostgREST syntax for the filter values, such as using `()` for the `in` filter and `\\{\\}` for array values. The method takes three parameters: `column` (the column to filter on), `operator` (the operator to filter with), and `value` (the value to filter with). An example is provided demonstrating how to use `filter()` on a foreign table to filter the `countries` table by name."
  },
  {
    "chunk_id": "71964b30-a943-4e24-916c-60b7cec22826",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and are applicable to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "a438c0aa-7e93-4162-8d2e-1ad1a754c28b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the order function in the Supabase library, which allows sorting query results by a specified column. The function takes several parameters, including the column to order by, whether to sort in descending order, the foreign table name, and whether to show nulls first. An example is provided demonstrating how to use the order function to retrieve and sort data from the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "8873958b-c055-400d-ba4f-e768a4b43fe8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `limit()` function in the Supabase client library allows developers to limit the number of rows returned by a `select()` query on a database table. The `sizeRequired` parameter specifies the maximum number of rows to return, while the optional `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. This functionality is useful for optimizing database queries and improving application performance."
  },
  {
    "chunk_id": "c97e23fa-5fff-4082-8269-0548aa5e1180",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows returning only the records within the specified range, which respects the query order. The `from` and `to` values are 0-based and inclusive, meaning they select the rows from the starting index up to and including the ending index. The content also demonstrates how to use the `range()` function with the `select()` method on a foreign table."
  },
  {
    "chunk_id": "79524c24-5680-49bd-8a69-9582d0226b92",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `select()` method with the `single()` modifier retrieves a single row of data from the \"countries\" table, returning the data as an object instead of an array. This is useful when you only need to retrieve a single record and want to simplify the response format."
  },
  {
    "chunk_id": "7ce65ee5-112a-4e34-a96d-7bfe6d380e92",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve a single row of data from a table using the `maybe_single()` method in the Supabase library. This is useful when you expect to find at most one row matching the query, and you want the result returned as a single object instead of an array. The example shows how to retrieve the row where the \"name\" column is \"Albania\"."
  },
  {
    "chunk_id": "b5dfad3e-e51f-4fe6-98bc-28a08537c4a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The Retrieve as a CSV functionality allows users to return data from a Supabase table as a string in CSV format. This can be achieved using the `.csv()` method chained to the `.select()` query, which executes the request and returns the data in CSV format. This feature is useful for exporting tabular data from a Supabase database for further analysis or sharing."
  },
  {
    "chunk_id": "890e58b3-948d-4580-b991-3b586d86d228",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to get the execution plan of a query, which is useful for debugging slow queries. However, `explain()` is not enabled by default as it can reveal sensitive information, so it's best to only use it in testing environments. The `explain()` method supports various parameters like `verbose`, `settings`, `format`, `buffers`, and `analyze` to customize the output."
  },
  {
    "chunk_id": "89462ccf-a12d-4b53-8755-c3a16e4966bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the \"Confirm email\" setting in the project dashboard determines whether the user needs to verify their email before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. If it is enabled, a user is returned but the session is null until email verification. The user can be fetched using the `get_user()` function after sign-up."
  },
  {
    "chunk_id": "c4cbfdcb-58cc-4416-9132-d98f7ca6b2ce",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in anonymously while passing a captcha token in the options parameter. The anonymous user can be created with custom user metadata."
  },
  {
    "chunk_id": "d5255657-e62f-4959-8330-0c6802db3407",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user by providing either an email and password or a phone number and password. It includes example code to sign in a user with email and password using the Supabase authentication library."
  },
  {
    "chunk_id": "3a555dbd-f135-4e30-b672-54b736d813ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Sign in with ID Token\" feature, which allows users to authenticate by providing an OIDC ID token. It details the required parameter \"credentialsRequiredSignInWithIdTokenCredentials\" and provides an example of how to use the `supabase.auth.sign_in_with_id_token()` function to sign in with an ID token, typically obtained from a third-party authentication provider like Google."
  },
  {
    "chunk_id": "3a33b6f2-8c85-492a-ab69-344274eadeb8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP method allows users to sign in without a password, by sending a one-time passcode to their email or phone number. This method can be used for both new user sign-ups and existing user sign-ins. Developers can configure whether the user receives a magic link or an OTP, and whether the user should be created if they don't already exist in the system."
  },
  {
    "chunk_id": "26eabb0d-1648-478a-85b4-9d5e832b27f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth in Supabase. It explains that this method is used for signing in using a third-party provider, and Supabase supports various third-party providers. The summary also includes an example code snippet demonstrating how to sign in with the GitHub provider using the Supabase authentication API."
  },
  {
    "chunk_id": "87d6726f-9e6b-4edd-b900-584c691602f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the CLI. You can then use the `domain` property to start the sign-in flow, or the `provider_id` property to specify a different way to initiate the authentication flow, such as mapping specific user email addresses or using company-specific hints. The `sign_in_with_sso()` method is used to handle the SSO sign-in process."
  },
  {
    "chunk_id": "f4213899-4a9d-4213-8066-1afbe96ed5f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This method revokes the refresh token and deletes the JWT from the client-side, but does not revoke the existing JWT, which will remain valid until it expires. By default, `sign_out()` signs out all other sessions the user is logged into."
  },
  {
    "chunk_id": "3b3214db-6cd1-4217-abd0-0348df678587",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and account changes. The verification type should match the corresponding auth method used before `verify_otp`. The `TokenHash` provided in the email templates can be used to sign in via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "73e3e51d-0e37-4968-b384-c9b617481dae",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data on the server, as it could be tampered with. If verified user data is required, the `get_user` method should be used instead. The method also handles expired access tokens by using the refresh token to get a new session."
  },
  {
    "chunk_id": "ed54f1b7-5430-4d56-95fb-56cd4031d66c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.refresh_session()` returns a new session, regardless of the current session's expiry status. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method can be used to refresh the current session, whether it is expired or not."
  },
  {
    "chunk_id": "65674326-5983-4288-9853-b11ebcc9f78b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. This method can be used with an optional access token JWT, or the JWT from the current session."
  },
  {
    "chunk_id": "8a26ad7c-b9b6-4d87-92b6-cb201669790e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session()` allows setting the session data, including an `access_token` and `refresh_token`. If the current session is expired or the tokens are invalid, the method will handle refreshing the session. If the operation is successful, a `SIGNED_IN` event is emitted. This method is used to refresh the session and maintain user authentication."
  },
  {
    "chunk_id": "b5dff421-90bd-47c7-aea7-0ebfe46252a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers Multi-Factor Authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, which eliminates the need to store recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "f6908000-b6f6-4ad1-a72e-d365836e0d55",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a TOTP (time-based one-time password) factor for multi-factor authentication (MFA) using the Supabase Python client. The `mfa.enroll()` function is used to enroll the TOTP factor, and the returned `id` can be used to create and verify MFA challenges using the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "956f4920-49c9-4ca4-b228-b28fd42db0f1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "f03e29fc-4a91-4aa9-b04f-b12c29380ae3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you need to create a challenge first. The code snippet demonstrates how to verify a challenge by providing the factor_id, challenge_id, and the code received from the user."
  },
  {
    "chunk_id": "177b8d7e-413a-44d5-9e44-78a3324f8410",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking a factor_id and code as input to authenticate the user."
  },
  {
    "chunk_id": "0d9744ab-c3b7-4cae-861f-ef932d213b23",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: To unenroll a factor in Supabase authentication, use the `supabase.auth.mfa.unenroll()` function, passing the `\"factor_id\"` of the factor to be unenrolled as a parameter. This allows users to remove a specific multi-factor authentication method from their account."
  },
  {
    "chunk_id": "33dc3eb1-9e91-4fcd-b27f-b7faffb3b097",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. An AAL of `aal1` indicates a single-factor authentication, such as email and password or OAuth sign-in, while `aal2` indicates a two-factor authentication, such as a time-based, one-time-password (TOTP). The `next_level` field can be used to determine the highest available AAL for the user's current authentication state."
  },
  {
    "chunk_id": "6ed00b6e-5221-4b35-9b89-381c744a3571",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function, which requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the input data type, but this can be overridden. The function can be invoked with a body containing custom parameters, and the response can be handled for potential errors."
  },
  {
    "chunk_id": "d7c6b894-6beb-4988-be68-89d12355db41",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Users can enable full replica identity to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The provided code example demonstrates how to subscribe to various Realtime events, such as broadcasts, presence changes, and database updates, and how to handle these events with custom callbacks."
  },
  {
    "chunk_id": "8b108425-ac8d-47fb-a6e0-7f834aea9173",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and the database, as unused channels can degrade performance as more clients subscribe. The `supabase.remove_channel(myChannel)` function can be used to remove a channel."
  },
  {
    "chunk_id": "a96bc767-4d11-4e9c-8f65-c31ddda620cc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels from your Supabase Realtime service can help maintain its performance and reduce database load. Supabase automatically cleans up disconnected channels after 30 seconds, but actively subscribing to too many unused channels can still degrade service. The `supabase.remove_all_channels()` function allows you to efficiently unsubscribe from all channels."
  },
  {
    "chunk_id": "a046a8bc-9e8f-4fe6-b53f-b4cec478d8c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: This section explains how to retrieve all channels using the `supabase.get_channels()` function. This function allows developers to access and work with all the channels available in the application, which is a common requirement in many software systems."
  },
  {
    "chunk_id": "f8c1114d-6fa0-4da2-9333-06c742202edc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe code snippet demonstrates how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and upon successful subscription, sends a broadcast message containing randomly generated x and y coordinates."
  },
  {
    "chunk_id": "bdbf9ab4-b3f3-4408-ad09-88fdf50964c8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the user requires the `insert` permission on the `buckets` table, but no permissions on the `objects` table. Refer to the Storage guide for details on access control. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "c6907eee-fddc-4d70-91bb-8f3380f81753",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` access to the `buckets` table, and no permissions required for the `objects` table. Refer to the Storage guide for more details on how access control works. The code to retrieve a bucket is `_10 res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "e7d0b5d4-5d6b-4026-bc59-34c0537f3a28",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "52073dac-c8cb-4d27-b4a4-c957f62a63bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, with no permissions needed on the `objects` table. Refer to the Storage guide for details on Supabase's access control mechanisms."
  },
  {
    "chunk_id": "15a9f4fd-4e01-4303-84c5-dbfae3b7dfd5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: (1) `select` on the `buckets` table, and (2) `select` and `delete` on the `objects` table. The Storage guide provides more details on access control. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "bf8e568d-f5dc-490e-be8e-ddacf66f6d4b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the `objects` table permission of `insert` is required. The appropriate MIME type should be specified, especially for images or audio files. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` function, providing the file path and desired content type."
  },
  {
    "chunk_id": "e21f454f-b3c9-4a96-bcc8-d9149cf1e6a8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table, but `select` permissions for the `objects` table. The file can be downloaded using the `supabase.storage.from_('bucket_name').download(source)` function, which writes the downloaded content to the specified `destination` file."
  },
  {
    "chunk_id": "1c5439fe-6ce6-4cdd-92cf-7a73670706c3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase Storage bucket, you need the `select` permission on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve a list of all files in the specified bucket. Refer to the Supabase Storage guide for more details on access control and permissions."
  },
  {
    "chunk_id": "a47ec99f-a469-4640-9dbc-39132df1cf3e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in the Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the 'update()' method of the 'storage.from_()' function, passing the file, path, and optional file options like cache-control and upsert. This allows seamless file replacement while maintaining access control policies."
  },
  {
    "chunk_id": "c733f910-4f10-42fc-8056-22f7990ff3cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are `update` and `select` on the `objects` table, but no permissions are needed on the `buckets` table. The example code `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` demonstrates how to move a file from the 'public/avatar1.png' path to the 'private/avatar2.png' path within the specified bucket."
  },
  {
    "chunk_id": "89991691-b436-42f6-bf62-8b952778eb6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file from a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The Storage guide provides details on how access control works for storage operations. The code snippet shows an example of using the 'remove' method to delete a file named 'test.jpg' from the 'bucket_name' bucket."
  },
  {
    "chunk_id": "a00d4069-e965-4ac6-9192-672d43a94bf8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the RLS policy requires the `objects` table to have `select` permissions. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method generates a temporary, signed URL that provides controlled access to a specific file in the storage bucket."
  },
  {
    "chunk_id": "6f38aafa-b987-4fc0-bd0b-ddaf3e396076",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challenge",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public, either via the `updateBucket()` API or the Supabase Dashboard. No specific permissions are required on the `buckets` or `objects` tables. The public URL can be obtained using the `get_public_url()` method, passing the file path as an argument."
  },
  {
    "chunk_id": "ba31d8cc-0cb1-450b-938f-4aca65ceb7bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functionality for interacting with a Supabase Postgres database, including querying the database, listening to database changes, invoking Deno Edge Functions, implementing user authentication and management, and managing large files. It serves as a powerful tool for developers to build applications using the Supabase platform."
  },
  {
    "chunk_id": "646bc481-df31-41f0-926d-f310f5ed93b6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>pip install supabase</code></p><hr />",
    "summary": "The content provides instructions for installing the supabase-py library using the pip package manager in the terminal, which is the recommended installation method for Python versions greater than 3.7. The summary highlights the key technical point that the library can be installed via the terminal using the `pip install supabase` command."
  },
  {
    "chunk_id": "5c103b50-d628-4499-9bf2-6b06d5328e85",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>import os    from supabase import create_client, Client        url: str = os.environ.get(\"SUPABASE_URL\")    key: str = os.environ.get(\"SUPABASE_KEY\")    supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. To initialize a new Supabase client, you need to provide the Supabase URL and the Supabase Key, which can be obtained from the Supabase project dashboard. The Supabase client can be configured with optional parameters to customize the authentication behavior."
  },
  {
    "chunk_id": "441357d6-c8aa-4e10-ae38-4cf1e4ed9584",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows, which can be adjusted in the API settings. To paginate through data, you can use the `range()` query. The `select()` function can be combined with filters and modifiers, and the `apikey` keyword should be avoided as a column name when using the Supabase Platform. The `select()` function allows you to retrieve specific columns, count rows, query referenced tables, filter through referenced tables, and query JSON data."
  },
  {
    "chunk_id": "afdccaad-a7cb-4575-b366-5f9d494cabab",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>response = (    supabase.table(\"countries\")    .insert({\"id\": 1, \"name\": \"Denmark\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section provides details on inserting data into a table using the Supabase library. It describes the required 'jsonRequired' parameter, which can be a dictionary or a list of dictionaries representing the data to be inserted. The optional 'countOptional' and 'returningOptional' parameters allow controlling the response format. The 'default95to95null' option can be used to set missing fields to null for bulk inserts."
  },
  {
    "chunk_id": "c984fae2-bbc7-4b60-a872-d9558a10a5bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>response = (    supabase.table(\"countries\")    .update({\"name\": \"Australia\"})    .eq(\"id\", 1)    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to modify data in a table. It should always be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or list of dictionaries as input, representing the new values to be inserted. An optional `count` parameter can be used to retrieve the count of rows affected by the update operation."
  },
  {
    "chunk_id": "20e8fef0-f755-4a3f-b879-845439d12fc9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>response = (    supabase.table(\"countries\")    .upsert({\"id\": 1, \"name\": \"Australia\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Upsert data\" section explains that primary keys must be included in the `values` dict to use upsert operations. It outlines the various parameters available, such as `jsonRequired`, `countOptional`, `returningOptional`, `ignore95duplicatesOptional`, `on95conflictOptional`, and `default95to95nullOptional`. The section includes an example of upserting data into a \"countries\" table using the Supabase library."
  },
  {
    "chunk_id": "51fcaf32-43b4-47c4-b3e2-f294aff00e7c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` method in Supabase should always be combined with filters to target specific items for deletion. When using `delete()` with RLS (Row Level Security) enabled, only rows visible through `SELECT` policies are deleted, so at least one `SELECT`/`ALL` policy must be in place. The `delete().in_()` method allows deleting multiple rows in a single query by providing an array of values."
  },
  {
    "chunk_id": "fa998249-e118-49b2-8b61-e37b0f94eae0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>create or replace function hello_world() returns text as $$    select 'Hello world';    $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to call Postgres functions as Remote Procedure Calls (RPCs) from a client application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides details on the parameters for the `rpc()` function, including options for passing arguments, handling set-returning functions, and executing read-only functions."
  },
  {
    "chunk_id": "35153be8-5225-48c0-a6ea-991ade79df47",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code># Correct    response = (    supabase.table(\"cities\")    .select(\"name, country_id\")    .eq(\"name\", \"Bali\")    .execute()    )        # Incorrect    response = (    supabase.table(\"cities\")    .eq(\"name\", \"Bali\")    .select(\"name, country_id\")    .execute()    )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return rows from database queries based on specific conditions. They can be used with various database operations, including `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return table responses. The summary highlights the key functionality and applicability of filters in Supabase database operations."
  },
  {
    "chunk_id": "8167cf6a-5208-47a0-97d1-794d028036b2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `eq()` method in the Supabase library is used to filter a table by a specific column, matching only rows where the column is equal to the provided value. It takes two required parameters: the column name and the value to filter by, and can be used in conjunction with the `select()` method to retrieve the filtered data."
  },
  {
    "chunk_id": "9e39927b-2227-41bd-bb17-5407999a7e7d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to filter a database table to include only rows where the value in a specified column is not equal to a given value. The key parameters are the column name and the value to filter by, and the example demonstrates how to use this functionality with the Supabase library."
  },
  {
    "chunk_id": "ba9864bc-0e3d-4135-974f-aac101c90002",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the provided content is as follows:\n\nThe content describes how to filter a database table by selecting only rows where a specified column has a value greater than a given value. The key parameters are the column name and the value to filter by. This functionality is demonstrated using the Supabase library's `gt()` method in a `select()` query."
  },
  {
    "chunk_id": "1c08755e-6800-49db-84bd-6abef0012b60",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `gte()` filter is used to match rows where the specified `column` is greater than or equal to the provided `value`. This is demonstrated in the example where the `select()` method is used to retrieve records from the \"countries\" table where the \"id\" column is greater than or equal to 2."
  },
  {
    "chunk_id": "ccbc5932-48b1-4aba-8fda-1040bb4587f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Column is less than a value\" feature allows filtering rows where a specified column has a value less than the provided value. It takes two required parameters: the column name to filter on and the value to filter by. This can be used in a Supabase query, for example, to select all rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "9f3ebeaa-fae2-436a-a947-9617d53835ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe documentation describes a method to filter a database table by selecting rows where a specified column is less than or equal to a provided value. The `lte()` function in the Supabase library can be used to implement this filtering, as shown in the example code snippet."
  },
  {
    "chunk_id": "04170f05-8bc4-4a29-880f-17ec2a3cf815",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Column matches a pattern\" section is as follows:\n\nThe `like()` function in Supabase allows filtering rows where a specified column matches a given pattern case-sensitively. The `columnRequired` parameter specifies the name of the column to filter, and the `patternRequired` parameter defines the pattern to match. This functionality can be used in a `select()` query to retrieve only the rows that satisfy the pattern-matching condition."
  },
  {
    "chunk_id": "28670703-9691-46cd-9bd0-07913765aeef",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `ilike()` function in Supabase allows for case-insensitive pattern matching on a specified column. It takes two parameters: the column name and the pattern to match. This can be useful for querying a table and retrieving rows where the column value matches the provided pattern, regardless of case."
  },
  {
    "chunk_id": "1ee54190-fd71-4a4f-9de0-eba951500421",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column is a value\" feature allows you to filter a table by checking if a specified column matches a provided value, including checking for nullness, true, or false. The required parameters are the column name and the value to match, which can be null, boolean, or any other data type. This is a useful function for querying and filtering data in a Supabase database."
  },
  {
    "chunk_id": "d9086d71-022a-4dba-a74e-f9b7939971aa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .in_(\"name\", [\"Albania\", \"Algeria\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to filter a database table by checking if the values in a specified column are included in a provided array. This is demonstrated using the Supabase library's `in_()` method, which can be used within a `select()` query to retrieve only the rows where the column value matches one of the values in the array."
  },
  {
    "chunk_id": "5a8bacde-2fac-4316-a64b-294c1570b305",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>response = (    supabase.table(\"issues\")    .select(\"*\")    .contains(\"tags\", [\"is:open\", \"priority:low\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The column contains every element in the specified value, which is useful for filtering jsonb, array, and range columns. The `contains()` function takes the column name and the value (an object, array, or range) to filter on, and returns rows where the column contains all the elements in the specified value."
  },
  {
    "chunk_id": "b284d24d-5536-4be1-98a4-1c28e5cb5863",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>response = (    supabase.table(\"classes\")    .select(\"name\")    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'contained by value' operator is used to filter rows in jsonb, array, and range columns, where every element in the column is contained within the provided value. It takes two parameters: the column to filter on and the value to filter with. This operator is particularly useful for filtering arrays and ranges, as demonstrated in the example query for a 'days' column containing certain weekdays."
  },
  {
    "chunk_id": "8d48ae99-864b-4f25-9870-32652bacfbe8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'greater than a range' filter is used for range columns in Supabase, allowing you to match rows where every element in the specified column is greater than any element in the provided range. The filter takes two required parameters: the column name and the range to filter with."
  },
  {
    "chunk_id": "f554b557-fa42-4c8d-adfc-bd6e2248ff13",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is applicable for range columns in a database table. It allows you to filter rows where every element in the specified column is either contained within the given range or greater than any element in the range. This is useful for querying data based on date/time ranges."
  },
  {
    "chunk_id": "d158db61-cdd8-4b84-b9ed-c2c8c46987d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'less than a range' filter is used for range columns in Supabase, allowing you to match only rows where every element in the specified column is less than any element in the provided range. The filter is applied using the `.range_lt()` method, which takes the column name and an array of range values as parameters."
  },
  {
    "chunk_id": "b4f36fb6-7083-45dd-8709-c8d069a0a5b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The Less than or equal to a range filter is used for range columns, allowing you to match rows where every element in the specified column is less than or equal to any element in the provided range. The filter takes two required parameters: the column name to filter on and the range to filter with. This can be used in a Supabase query to select data from a \"reservations\" table, for example, where the \"during\" column is filtered to match rows with a date/time range less than or equal to [\"2000-01-01 14:00\", \"2000-01-01 16:00\"]."
  },
  {
    "chunk_id": "8de6caa9-526d-45a1-a2d2-42880f3944eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"reservations\")    .select(\"*\")    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Mutually exclusive to a range\" feature is only applicable to range columns. It allows you to filter rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The parameters include the column name and the range to filter with."
  },
  {
    "chunk_id": "25407bf7-e2c4-4b6d-95d4-a2e2b186cdd3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>response = (    supabase.table(\"issues\")    .select(\"title\")    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"With a common element\" feature is used to filter array and range columns in a Supabase table. It allows matching rows where the column and the provided value have at least one element in common. The feature takes two parameters: the column to filter on and the value to filter with, which can be an array or a range."
  },
  {
    "chunk_id": "4d45258d-0f50-45b4-a9a8-bd49cf7d3ff2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>response = (    supabase.table(\"texts\")    .select(\"content\")    .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"Match a string\" feature is used to filter text and tsvector columns in a database based on a provided query string. It performs Postgres full-text search and supports various search options, such as basic normalization, full normalization, and websearch. This functionality enables users to efficiently search and retrieve relevant data from the database."
  },
  {
    "chunk_id": "ea23807a-a2ad-4a39-b88a-a418f5e058da",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .match({\"id\": 2, \"name\": \"Albania\"})    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The .match() method allows you to filter a table by matching each column in the provided 'query' object to its associated value. This is a shorthand way of chaining multiple .eq() calls. The 'query' parameter is an object with column names as keys and their respective filter values."
  },
  {
    "chunk_id": "d561a037-c484-403b-ab46-1613012a3f20",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>.not_.in_('id', '(5,6,7)') # Use `()` for `in` filter    .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .not_.is_(\"name\", \"null\")    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation explains how to use the `not_` operator in PostgREST filters to select rows that don't match the specified criteria. This includes examples of using `not_.in_()` for filtering based on array values, and `not_.is_()` for excluding null values. This functionality is demonstrated in a `select()` query on the \"countries\" table."
  },
  {
    "chunk_id": "073cba85-bb26-4494-aee5-6bf4efac70b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>.or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.    .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>response = (    supabase.table(\"countries\")    .select(\"name\")    .or_(\"id.eq.2,name.eq.Algeria\")    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nor95() in Supabase allows applying multiple filters using the PostgREST syntax, including filtering on specific columns, array values, and referenced tables. The or_() method is used to combine multiple filters, which can then be used with the select() method to retrieve data matching at least one of the specified filters."
  },
  {
    "chunk_id": "a5410ec7-ca2b-48f3-b9b4-4b06b7a7b6fa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>.filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter    .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `filter()` method in the provided documentation allows you to apply PostgreSQL-style filters to your data queries, using the raw PostgREST syntax for filter values. The method supports various operators like `in`, `cs` (contains), and can handle array values. The summary also shows an example of using `filter()` on a foreign table, demonstrating how to filter by column name, operator, and value."
  },
  {
    "chunk_id": "0424ad37-cbb2-4222-8a32-cf77186d0d69",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers allow you to change the format of a response, unlike filters which operate at the row level. Modifiers must be specified after filters and are primarily used with queries that return table responses, such as `select()` or `rpc()`. The key difference between filters and modifiers is that filters affect the rows returned, while modifiers transform the response format."
  },
  {
    "chunk_id": "e6d8babd-8e9f-44bc-b619-dc881f207d1f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .order(\"name\", desc=True)    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order() method allows you to order the query results by a specified column, with optional parameters to control the order direction (descending/ascending) and handling of null values. The method can be used on both local and foreign tables, as demonstrated in the example where the \"countries\" table is ordered by the \"name\" column in descending order."
  },
  {
    "chunk_id": "6b533d75-4487-42c6-a676-03250e29c5fa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `limit()` function in Supabase's `select()` queries allows you to specify the maximum number of rows to return. You can limit the rows of a foreign table by setting the `foreign95table` parameter. This is useful for optimizing queries and reducing the amount of data returned to the client."
  },
  {
    "chunk_id": "6195d486-0472-413f-a1d6-87a335202a34",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `range()` function in Supabase allows limiting the query result by specifying a starting offset (`from`) and an ending offset (`to`). This is useful for paginating large result sets, as it respects the query order and returns only the records within the specified range. The `from` and `to` parameters are 0-based and inclusive, and an optional `foreign_table` parameter can be used to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "804c2dc9-a1f3-4426-8f07-5c64f29e4134",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to retrieve a single row of data from a table using the Supabase library. The `single()` method is used to return the data as a single object instead of an array, and the `limit(1)` method is used to limit the response to a single row."
  },
  {
    "chunk_id": "31b43c22-b90e-4b0e-b294-3533e3add829",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>response = (    supabase.table(\"countries\")    .select(\"*\")    .eq(\"name\", \"Albania\")    .maybe_single()    .execute()    )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `maybe_single()` method in the Supabase `select()` query allows retrieving a single object instead of an array, when the query is expected to return zero or one row. This can be useful when you need to handle the response more efficiently, especially when working with a single record."
  },
  {
    "chunk_id": "f27b0f00-8ee7-4975-bec9-ce3a3e982ef2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe Retrieve as a CSV feature allows users to return the data from a Supabase table as a CSV string. This can be accomplished using the `.csv()` method in the Supabase client API, as demonstrated in the example code. This functionality is useful for exporting data from a Supabase database in a structured, tabular format for further processing or analysis."
  },
  {
    "chunk_id": "526acb07-96b6-4088-899a-f22cde757981",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe Postgres `EXPLAIN` command can be used to get the execution plan for a query, including information on WAL record generation, configuration settings, buffer usage, and actual run time. It can be enabled for testing environments, and a `pre-request` function can be used to provide additional protection in production. The `explain()` method in the provided code can be used to get the execution plan, with optional parameters to control the output format and level of detail."
  },
  {
    "chunk_id": "e591d840-7266-4e30-947d-f1c58a727f1f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>response = supabase.auth.sign_up(    {\"email\": \"email@example.com\", \"password\": \"password\"}    )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo create a new user, the user's email address can be set to require confirmation before login, which determines whether a user and session are returned. The user's email confirmation redirect URL can be customized, and signing up an existing confirmed user will return an obfuscated user object or an error message depending on the confirmation settings. The currently logged-in user can be fetched using the `get_user()` function."
  },
  {
    "chunk_id": "14bbbb8f-895f-4a2a-92e5-327854bae9ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>response = supabase.auth.sign_in_anonymously(    {\"options\": {\"captcha_token\": \"\"}}    )</code></p><p>Response</p><hr />",
    "summary": "The code snippet demonstrates how to create an anonymous user in Supabase. It shows that an anonymous user can be created by calling the `sign_in_anonymously()` function, and that it is recommended to set up a captcha to prevent abuse. The function takes an `options` parameter that can be used to provide a captcha token."
  },
  {
    "chunk_id": "ec34c8da-3b8d-4fae-918f-cb9ed6e82d4a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>response = supabase.auth.sign_in_with_password(    {\"email\": \"email@example.com\", \"password\": \"example-password\"}    )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of signing in an existing user using either an email and password or a phone number and password. It provides example code for signing in with email and password credentials, and specifies that the required parameters are the credentialsRequiredSignInWithPasswordCredentials object."
  },
  {
    "chunk_id": "4044719b-1338-491f-bdaa-032fd1af15bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>response = supabase.auth.sign_in_with_id_token(    {\"provider\": \"google\", \"token\": \"your-id-token\"}    )</code></p><p>Response</p><hr />",
    "summary": "The `sign_in_with_id_token()` method allows users to sign in using an OIDC ID token. This is useful for scenarios where the authentication provider is already configured and enabled. The method takes in a provider name (e.g., \"google\") and the ID token as parameters, and returns the authenticated user's information."
  },
  {
    "chunk_id": "2817b39c-1caa-4390-b005-5688e7ae6a56",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>response = supabase.auth.sign_in_with_otp(    {    \"email\": \"email@example.com\",    \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},    }    )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes how to sign in a user through a one-time password (OTP) sent to their email or phone number. The `sign_in_with_otp()` function can be used for passwordless sign-ins, and it will sign up a new user if they don't already exist (this behavior can be disabled). The OTP can be configured to be sent as a magic link or a one-time code, and the destination URL for the magic link can be customized using the `SITE_URL` and redirect URL settings."
  },
  {
    "chunk_id": "62f15b78-d3b9-4e36-9575-8a2d7b8236e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>response = supabase.auth.sign_in_with_oauth({    \"provider\": 'github'    })</code></p><hr />",
    "summary": "The summary is:\n\nThe method allows users to sign in to the application using a third-party provider, such as GitHub. Supabase supports various third-party providers that can be configured for this purpose. The `supabase.auth.sign_in_with_oauth()` function is used to initiate the sign-in process, with the `provider` parameter specifying the third-party provider to use."
  },
  {
    "chunk_id": "6aeeb020-9884-4a1e-b5b1-d64bcdc2e601",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `domain` property to start the sign-in flow if you've associated an email domain to the identity provider, or the `provider_id` property to use a different way to initiate the authentication flow, such as mapping specific user email addresses or using company-specific hints."
  },
  {
    "chunk_id": "64b5882a-9497-4c70-bad3-7b29d7f9ae6d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method is used to sign out a user from the Supabase Auth system. It revokes the user's refresh token and deletes the JWT from the client-side, effectively ending the user's current session. However, the access token JWT may still be valid until it expires, so the method does not immediately invalidate all of the user's active sessions."
  },
  {
    "chunk_id": "7814f6f8-64e4-4166-af68-ba35e1a40166",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>response = supabase.auth.verify_otp(    {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}    )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method in the Supabase authentication API allows users to verify their identity using a one-time password (OTP) sent via SMS or email. The supported verification types include `sms`, `phone_change`, `email`, `recovery`, `invite`, and `email_change`. The method returns a response that can be used to sign in the user, for example by using the `TokenHash` in a PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "3f4768ea-8073-4040-8beb-9feb341025ea",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of data on the server, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. Additionally, if the session has an expired access token, the method will use the refresh token to get a new session."
  },
  {
    "chunk_id": "c369529a-e31d-4c17-b155-cf1267dc43df",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether or not the current one has expired."
  },
  {
    "chunk_id": "02ab7dd3-373a-4265-bfa5-44d00b371565",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database, rather than the local session. This is useful for verifying the user's authorization by validating the access token JWT on the server. The method can be used to either get the logged-in user with the current session or with a custom access token JWT provided as an optional parameter."
  },
  {
    "chunk_id": "605656a3-84a0-4dca-8050-c2b34ecb0ada",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data using an `access_token` and `refresh_token`. If the current session is expired, it will refresh the session to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful session set, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "51969346-8ac2-423a-b55b-0f3349ba7505",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers Multi-Factor Authentication (MFA) methods, specifically time-based one-time password (TOTP) as the supported 2nd factor. It allows users to enroll multiple TOTP factors for recovery, which eliminates the need for separate recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "eaa7ecb3-7792-4176-b71f-1d375067ad0a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>res = supabase.auth.mfa.enroll({    \"factor_type\": \"totp\",    \"friendly_name\": \"your_friendly_name\"    })</code></p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor as the only currently supported `factor_type`. The returned `id` can be used to create and verify a challenge using the `mfa.challenge()`, `mfa.verify()`, or `mfa.challenge_and_verify()` functions."
  },
  {
    "chunk_id": "c4165e9c-69d4-476c-853b-f975174802ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>res = supabase.auth.mfa.challenge({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'    })</code></p><hr />",
    "summary": "To create a multi-factor authentication (MFA) challenge, an enrolled factor is required. The `supabase.auth.mfa.challenge()` function can be used to create a challenge, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "8eda3d71-05bb-4644-8f8d-2e5370afdafa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>res = supabase.auth.mfa.verify({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',    \"code\": '123456'    })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge by following the instructions in the \"Create a challenge\" section. To verify a challenge, you need to provide the factor_id, challenge_id, and code in the supabase.auth.mfa.verify() function."
  },
  {
    "chunk_id": "15709cb6-af37-491f-bb65-9f03aaa78917",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>res = supabase.auth.mfa.challenge_and_verify({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    \"code\": '123456'    })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` methods in a single step, taking a factor ID and a code as input parameters."
  },
  {
    "chunk_id": "b291acd3-15ef-49ef-b9ee-2ed751f197a7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>res = supabase.auth.mfa.unenroll({    \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',    })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, use the `supabase.auth.mfa.unenroll()` function, passing the `factor_id` of the factor to be unenrolled. This allows users to remove a specific MFA factor from their account, which can be useful if they need to update or replace an existing MFA method."
  },
  {
    "chunk_id": "f903b5c3-8e9f-42ab-8c14-93b89d350caa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of authentication strength in Supabase. AAL1 represents the first factor of authentication (e.g., email and password), while AAL2 represents the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the user's verified authentication level, which can be used to determine the required level of security for their session."
  },
  {
    "chunk_id": "490b7e56-e9b3-42f1-ad7c-34aae0d4c933",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>response = supabase.functions.invoke(    \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}    )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function by making a request with an Authorization header. Automatically attaches Content-Type header for common data types, but can be overridden. Provides basic error handling and ability to pass custom headers."
  },
  {
    "chunk_id": "39b4a614-3379-40b8-9359-87b50d627f27",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>channel = supabase.channel(\"room1\")        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })        def handle_broadcast(payload):    print(\"Cursor position received!\", payload)        channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, while listening to database changes is disabled due to performance and security concerns. Developers can set the table's REPLICA IDENTITY to FULL to receive previous data for updates and deletes, but row-level security is not applied to delete statements. The provided code example demonstrates how to subscribe to various Realtime events, such as broadcast messages, presence sync, and database changes for a specific table or multiple events."
  },
  {
    "chunk_id": "d94bad98-4d2e-49f4-bd48-5aa77ceaf7fb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain performance of the Realtime service and database. Supabase automatically handles cleanup 30 seconds after a client disconnects, but unused channels can degrade performance as more clients subscribe. The `supabase.remove_channel(myChannel)` method is used to remove a channel."
  },
  {
    "chunk_id": "b06f8fdf-c6bd-479e-9013-4af5f462625a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain the performance of Realtime service and database by reducing unused subscriptions. Supabase automatically handles cleanup 30 seconds after a client disconnects, but unused channels can cause degradation with more clients. The `supabase.remove_all_channels()` function allows removing all channels from the project."
  },
  {
    "chunk_id": "0134439a-89d8-4509-aa2e-b54afb78764c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code `supabase.get_channels()` retrieves all the channels available in the system. This function allows developers to access and work with the complete set of channels in their application."
  },
  {
    "chunk_id": "ba16b8be-92f7-4da6-9ea6-f959c8959b18",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>channel = supabase.channel('room1')        def on_subscribe(status, err):    if status == RealtimeSubscribeStates.SUBSCRIBED:    channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })        channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to broadcast a message to all connected clients in a specific channel using the Supabase real-time API. The example code demonstrates subscribing to a channel, and then sending a broadcast message containing randomly generated cursor positions to all connected clients."
  },
  {
    "chunk_id": "beec2bd5-70ca-4234-9a35-a3551b85ab8d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are: `insert` access to the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on Supabase's access control mechanisms. The `supabase.storage.create_bucket(name)` function can be used to programmatically create a new bucket."
  },
  {
    "chunk_id": "0b5d6abe-3b6d-4be4-90c3-6ce82ab51f64",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` permissions on the `buckets` table, and no permissions on the `objects` table. The code to get a bucket is `res = supabase.storage.get_bucket(name)`. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "896ffee4-8916-4e4f-9574-777d19b20ec1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the `select` permission is required on the `buckets` table. No permissions are needed for the `objects` table. Refer to the Storage guide for more information on Supabase access control."
  },
  {
    "chunk_id": "b8ef7094-ceb2-4aa8-9e84-54508a94e2f8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the user requires `select` and `delete` permissions on the `buckets` table, but no permissions on the `objects` table. The `supabase.storage.delete_bucket(name)` function can be used to delete the specified bucket."
  },
  {
    "chunk_id": "aa5fc640-127b-4ec2-9612-61c1020c4551",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty a bucket, and the Storage guide provides information on how access control works."
  },
  {
    "chunk_id": "f0df7706-9028-48a4-af75-45cf23bdfdf7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>with open(filepath, 'rb') as f:    supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the user requires the `insert` permission on the `objects` table, but no permissions on the `buckets` table. The MIME type should be specified, especially for images or audio files, and defaults to `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file object and the desired path on Supabase Storage, along with the appropriate `file_options` such as the MIME type."
  },
  {
    "chunk_id": "45263b73-07d5-4b79-8c31-8c2c7211e68d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>with open(destination, 'wb+') as f:    res = supabase.storage.from_('bucket_name').download(source)    f.write(res)</code></p><hr />",
    "summary": "To download a file, the required permissions are 'select' access to the 'objects' table, but no permissions are needed for the 'buckets' table. The code snippet demonstrates how to download a file from a Supabase storage bucket and write it to a local destination file."
  },
  {
    "chunk_id": "1ffca089-aa1e-4b90-93ff-42079dc37121",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the `select` permission is required on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "cc052e4f-de5a-424c-8c70-852f3b133737",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>with open(filepath, 'rb') as f:    supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the necessary permissions are `update` and `select` on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, specifying the file, path, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "99f75428-bd68-46e2-aae2-cc4e5df69686",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires `update` and `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` command can be used to move the file from the `public/avatar1.png` location to the `private/avatar2.png` location. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "eabc191f-fc13-49a1-9b16-e44b5553c7e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The provided example demonstrates how to remove the file 'test.jpg' from the 'bucket_name' bucket using the `supabase.storage.from_('bucket_name').remove('test.jpg')` command. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "f2d9ae90-60a2-4a30-8ced-988ee832e1b8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions must have `select` access. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method generates a time-limited, signed URL that can be used to securely access a file in the specified storage bucket."
  },
  {
    "chunk_id": "b94114ac-654b-4deb-8ba8-f420bfd0b40d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-verify",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public. No bucket or object permissions are required. The public URL can be obtained using the `get_public_url()` method, which takes the file path as an argument. This functionality enables easy access to publicly available assets stored in Supabase."
  },
  {
    "chunk_id": "4f6a7c46-12b8-4b0d-98a6-285156af1b6b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library provides a Python interface to interact with Supabase's services, including Postgres database management, database change monitoring, Deno Edge Functions invocation, authentication and user management, and file storage. The library allows developers to build applications that leverage Supabase's comprehensive backend functionality within a Python environment."
  },
  {
    "chunk_id": "bfb56159-ea3f-4ea4-93dd-06df464fa8ab",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: You can install the Supabase-py library using the pip package manager on the terminal, which is the recommended installation method for Python version 3.7 and above. The installation can be done either through the standard terminal or through the Conda package manager."
  },
  {
    "chunk_id": "7600a274-eee6-48ed-be13-5421011763e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary entry point for interacting with the Supabase ecosystem. It can be initialized using the `create_client()` method, which requires the Supabase URL and key, both of which are obtained from the project dashboard. The client can also be configured with optional options to customize the authentication behavior."
  },
  {
    "chunk_id": "1279830a-57b8-49b6-a464-93a3d3744f79",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Summary:\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` keyword should be avoided as a column name. Key parameters include `columns` to specify the columns to retrieve and `count` to get the count of rows returned."
  },
  {
    "chunk_id": "8e302f85-eeb7-42e1-bcac-34ec07a94400",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section describes the parameters for inserting data into a Supabase table, including the ability to insert a single row or multiple rows using a dictionary or list, respectively. It also covers optional parameters such as the count method, return method, and handling of missing fields. An example is provided for inserting a single row into the \"countries\" table."
  },
  {
    "chunk_id": "0bf5d522-aecf-4247-b95d-d25912a11312",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided documentation is used to modify existing data in a table. It should be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or a list of dictionaries representing the new values to be inserted, and an optional `count` parameter to get the count of rows returned."
  },
  {
    "chunk_id": "95ad136c-8854-4865-a740-ce3b57e84518",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe upsert operation in the provided documentation allows inserting or updating data in a table, with primary keys required in the `values` dict. It supports various parameters, such as `count` to get the count of rows returned, `returning` to specify the response format, `ignore_duplicates` to handle duplicate rows, and `default_to_null` to handle missing fields. The documentation provides an example of upserting data into a \"countries\" table."
  },
  {
    "chunk_id": "231d2c02-c29b-4daf-9314-4268fe541ba0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` operation in Supabase should always be used with filters to target the specific items to be deleted. When using `delete()` with filters and Row Level Security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple rows in a single query by providing an array of values."
  },
  {
    "chunk_id": "7bcc51c4-44a5-4c89-b727-28eb34ff5fc2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to call Postgres functions as Remote Procedure Calls (RPCs) from any application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides examples of calling functions with and without arguments, as well as options for handling pagination, filtering, and read-only access."
  },
  {
    "chunk_id": "d1ac61ab-3933-4d57-ae1d-a000fe0b5951",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match specific conditions. They can be used with various database operations, such as select, update, upsert, and delete, as well as with Postgres functions that return a table response. Filters can be chained together and used to filter by values within JSON columns or on foreign tables."
  },
  {
    "chunk_id": "ccd31411-ce0d-42fd-8d7e-d7eea693d6e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The content describes how to filter a database table by matching rows where a specific column is equal to a given value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `select()` and `eq()` methods."
  },
  {
    "chunk_id": "205e8ad7-e692-4066-9c0e-bc8309e7c374",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table where a specific column is not equal to a provided value. The `neq()` method is used for this purpose, with the column name and the value to filter by as parameters. This functionality is commonly used in database queries to exclude certain rows from the result set."
  },
  {
    "chunk_id": "0e76d396-3569-4e9b-ac16-b6a377e9fa5c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThis documentation describes how to filter a database table to include only rows where a specified column has a value greater than a given value. The required parameters are the column name and the comparison value. An example is provided using the Supabase library's `gt()` method to filter a \"countries\" table by an \"id\" column greater than 2."
  },
  {
    "chunk_id": "af1876a4-eb7f-4457-9bc6-eeac3654adfa",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for this section is:\n\nThe documentation describes how to filter a table by a column that has a value greater than or equal to a specified value. This is achieved using the `gte()` method, which takes the column name and the value to filter by as parameters. The example shows how to use this method with the `select()` function to retrieve rows that match the filter criteria."
  },
  {
    "chunk_id": "7cfa986a-ed35-4fa1-9b45-f18cba2b0315",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes a filter operation that selects rows where a specified column has a value less than a given value. The required parameters are the column name and the value to filter by. An example is provided using the Supabase library, where the `lt()` method is used to apply the less-than filter on the \"id\" column."
  },
  {
    "chunk_id": "fb56dca4-4444-4148-82c2-3b0ef3e7aa89",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a filter operation in a database query, where the rows are filtered to include only those where the specified column has a value less than or equal to the provided value. The key parameters are the column name and the filter value, and the example demonstrates the usage of this filter within a Supabase table query."
  },
  {
    "chunk_id": "7ab88378-4f75-4dde-bb7c-d89c2df731dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'column matches a pattern' functionality allows filtering data based on a specific column matching a given pattern case-sensitively. The required parameters are the column name and the pattern to match. This can be used in a Supabase query, as shown in the example, to select rows where the 'name' column contains the substring 'Alba'."
  },
  {
    "chunk_id": "8e5dbfc1-bffd-401b-98c3-ccd2bdd29cf5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes a Supabase SQL function, `ilike()`, that allows filtering rows in a table where a specified column matches a case-insensitive pattern. The `ilike()` function takes two parameters: the column name and the pattern to match. This can be useful for performing case-insensitive searches on text data in a database."
  },
  {
    "chunk_id": "617c4134-3932-48f4-ab2d-52877a8b58ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` function in Supabase allows you to filter rows where a column's value matches a specific value, including `null`, `true`, or `false`. The `columnRequired` parameter specifies the name of the column to filter on, and the `valueRequired` parameter specifies the value to match against, which can be `null`, `boolean`, or any other valid data type."
  },
  {
    "chunk_id": "0ca6c70f-dfb5-498e-86a8-eac99e73ac9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by checking if the values in a specified column are included in a provided array of values. The `in_()` method in the Supabase library is used to perform this filtering operation, which can be helpful when querying a table to retrieve only the rows that match the given criteria."
  },
  {
    "chunk_id": "f8a7b1f0-cf1d-4b39-b1fd-87f67c56608c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains()` function in Supabase is used to filter rows where a column (e.g., `jsonb`, `array`, or `range`) contains every element in the provided `value`. This is particularly useful for filtering on columns that store complex data structures like JSON, arrays, or ranges. The function takes two parameters: the column name and the value to filter with."
  },
  {
    "chunk_id": "4964616f-a709-47f1-8afc-cd65f5fc9fb0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature applies to jsonb, array, and range columns, allowing users to filter rows where every element in the specified column is contained within the given value. It takes two parameters: the column to filter on and the value to filter with. This functionality is particularly useful for querying data stored in these specialized data types."
  },
  {
    "chunk_id": "ab97a398-1724-4b3c-b653-f6f24125db27",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used for range columns, allowing you to match only rows where every element in the specified column is greater than any element in the provided range. The filter takes two required parameters: the column to filter on and the range to filter with. This functionality can be used in the Supabase .select() method to filter data, as demonstrated in the example code provided."
  },
  {
    "chunk_id": "751ac2b5-09fd-4cf8-acf1-2878d1872e66",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"greater than or equal to a range\" filter is used for range columns in a database table. It matches rows where every element in the specified column is either contained within the given range or greater than any element in the range. The filter is defined by two parameters: the column name and the range to filter on. This functionality can be used in a Supabase.js query to select data from a \"reservations\" table, filtering the \"during\" column to only include rows where the values are greater than or equal to the specified time range."
  },
  {
    "chunk_id": "692ba95d-e826-4d46-ba1e-251773febae4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used to match rows where every element in the specified column is less than any element in the provided range. It takes two parameters: the column to filter on and the range to filter with. This is particularly useful for filtering range columns, such as datetime columns, to only include rows where the values fall before a certain range."
  },
  {
    "chunk_id": "2439572a-0b31-4121-adea-c8cb1cabbd5f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns in Supabase. It allows you to match rows where every element in the specified column is less than or equal to any element in the provided range. The filter takes two parameters: the column name and the range to filter with."
  },
  {
    "chunk_id": "f91b32d0-ed17-49fd-87b2-f67da7cfd8b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers the \"Mutually exclusive to a range\" feature, which is relevant for range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The key parameters are the column to filter on and the range to filter with, as demonstrated in the example usage with the Supabase library."
  },
  {
    "chunk_id": "a465ce1c-e7d8-4a50-84ec-9e0694cbb9e8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis feature is only applicable to array and range columns. It allows filtering rows where the column and value have an element in common. The required parameters are the column to filter on and the value to filter with. Examples are provided for filtering on array and range columns using the Supabase API."
  },
  {
    "chunk_id": "0315e1b0-8759-4bb8-8944-dc804bdd4a38",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Match a string\" functionality, which is used to filter text or tsvector columns in a Postgres database. It allows matching rows where the specified column matches the provided query string, leveraging Postgres full text search capabilities. The summary includes the required parameters (column and query) and optional parameters (options for configuring the text search)."
  },
  {
    "chunk_id": "36940e7b-33ae-45bc-8e7c-af2bd43c6270",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` function in Supabase allows filtering data by matching each column in the `query` object to its associated value. This is a shorthand for multiple `eq()` calls, making it more concise to apply complex filters. The `match()` function takes a `query` object as a parameter, where the keys represent the column names and the values are the filter criteria."
  },
  {
    "chunk_id": "94feb7c8-2bdf-4563-9fa9-e300af1c83be",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the usage of the `not_` operator in PostgREST filters, which allows matching rows that do not satisfy the specified filter conditions. Examples are provided for filtering based on `in` and `contains` operations, as well as using the `not_` operator with the `select()` method in Supabase. The key technical points are the syntax for applying negated filters and the significance of this functionality in data retrieval and filtering."
  },
  {
    "chunk_id": "027d095c-5c0f-43da-8a3a-eceb6d22354c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the `or95()` function, which allows you to match at least one filter in a Supabase query. It explains the syntax for using `in`, `contains()`, and `containedBy()` filters, and provides example code demonstrating how to use `or()` with `and()` and on referenced tables."
  },
  {
    "chunk_id": "771f162e-13dd-409c-aaf8-3a73a53c2bde",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the provided context expects the use of raw PostgREST syntax for filter values. It supports various operators like `in` for filtering on a list of values and `cs` for containing a subset of array values. The example demonstrates how to use the `filter()` method on a foreign table to select records where the `name` column is \"Algeria\" or \"Japan\"."
  },
  {
    "chunk_id": "2d5424d2-aa20-4453-a3c3-8e658ea5668e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which only affect the rows returned. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "60219d6a-664e-4643-aff8-dd4cf4175e85",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe order() method allows ordering the query results by a specified column, with options to sort in descending order, include nulls first, and order by a foreign table column. This is demonstrated in an example using the Supabase table() and select() methods to order the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "3d602a0b-f9fe-4e19-a4b1-57acd9d1cf0f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The parameters `sizeRequired` and `foreign95table` allow limiting the number of rows returned from a database query. The `limit()` method can be used with the `select()` function on a foreign table to restrict the number of rows in the response, as shown in the example."
  },
  {
    "chunk_id": "6b320138-f34f-491f-b6b3-29537e26c754",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The query result can be limited to a range by specifying the starting index (`from`) and the ending index (`to`). This allows returning only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, so `range(1, 3)` will include the second, third, and fourth rows. An optional `foreign_table` parameter can be used to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "6a05865a-bf15-42d1-9517-ad4bfac3da68",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary focuses on the Supabase function `select().limit(1).single().execute()`, which retrieves a single row of data from the \"countries\" table, returning the data as a single object instead of an array. This is useful when you only need to retrieve a single record, reducing the amount of data returned and simplifying the processing of the response."
  },
  {
    "chunk_id": "30445708-05b2-46dc-a65e-f0b813fa8609",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `maybe_single()` method is used to retrieve zero or one row of data from the \"countries\" table, where the \"name\" column equals \"Albania\". This allows the response to be returned as a single object instead of an array of objects, simplifying the handling of the data."
  },
  {
    "chunk_id": "cce46076-5b8b-4874-ac21-d2e255c4ad9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the \"Retrieve as a CSV\" functionality, which allows users to return data from a Supabase table in CSV format. The key points are that the `csv()` method is used to format the `select()` response as a CSV string, and an example usage of this method is provided."
  },
  {
    "chunk_id": "d1ebce19-d8b4-4548-8001-62a61e305443",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres allows developers to debug slow queries by retrieving the execution plan for any query, including `rpc()` or write operations. While `explain()` is not enabled by default due to potential security concerns, it can be enabled with additional protection using a `pre-request` function. The method supports various parameters to customize the output, such as including information on WAL record generation, configuration parameters, buffer usage, and actual run time."
  },
  {
    "chunk_id": "abbc0217-adeb-4e8e-a945-ad06a3602049",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nTo create a new user, the \"Confirm email\" setting in the project dashboard determines if the user needs to verify their email before logging in. If \"Confirm email\" is enabled, a user is returned but the session is null. If it's disabled, both a user and a session are returned. The user can be redirected to a custom URL after email confirmation, which can be configured in the project dashboard."
  },
  {
    "chunk_id": "71f0b904-2b11-4a6a-8b18-4e5bb3511d1b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content describes the ability to create an anonymous user in the system. It is recommended to set up captcha for anonymous sign-ins to prevent abuse, and the captcha token can be passed in the `options` parameter. The code example demonstrates how to create an anonymous user with custom user metadata using the `supabase.auth.sign_in_anonymously()` function."
  },
  {
    "chunk_id": "d23bb9ce-f45a-400a-aac8-8d1e716107f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to log in an existing user using either an email and password or a phone number and password. The required parameters are `credentialsRequiredSignInWithPasswordCredentials`, and the example code demonstrates signing in with an email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "c3239080-0d58-4a3f-a9d2-8e6155ca1708",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Sign in with ID Token\" feature, which allows users to authenticate by providing an OIDC ID token. This is achieved by calling the `supabase.auth.sign_in_with_id_token()` method and passing the provider (e.g., \"google\") and the ID token. This authentication mechanism can be useful in scenarios where users need to sign in using an existing identity provider."
  },
  {
    "chunk_id": "88e9fa45-b763-482c-944f-3504d7927adb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through One-Time Passwords (OTPs). It supports signing in with either an email or phone number, with the option to create a new user if they don't exist. Users can receive a magic link or an OTP, and the magic link's destination URL is determined by the `SITE_URL`. The implementation of magic links and OTPs is the same, and the email template can be modified to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "fe5962cc-843c-4ce5-bdc2-0eb833a2ee3c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a method for authenticating users using a third-party provider. Supabase supports various third-party providers for this purpose. The key technical point is the `supabase.auth.sign_in_with_oauth()` method, which takes the provider as a parameter (e.g. 'github') and returns the authentication response."
  },
  {
    "chunk_id": "91c19c90-8282-4f54-ace1-ca4e8bdc9ec2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying the email domain or provider ID to start the authentication flow. This allows you to map specific user email addresses or use different hints to identify the identity provider, enabling flexible SSO integration."
  },
  {
    "chunk_id": "b955573b-463e-412b-96a9-cedc4c6caa59",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth is used to sign out a user. It revokes the user's refresh token and deletes the JWT from the client-side, but the access token JWT remains valid until it expires. The method uses the global scope by default, signing out all other sessions the user is logged into as well."
  },
  {
    "chunk_id": "0772b4a3-f0a3-411a-b815-7ea0a1b8851b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify and log in users through one-time passwords (OTPs). It supports different verification types such as SMS, email, and phone number changes. The method takes in parameters like the email, token, and type, and returns a response. The TokenHash contained in the email templates can be used for server-side authentication with the PKCE flow."
  },
  {
    "chunk_id": "3c1569f4-89cc-4a58-852e-d1f4dcf693a3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with. If you require trustworthy user information, you should call the `get_user()` method instead. Additionally, the method will automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "f5c0ae36-2efb-4b54-b404-ac80b44726cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The Retrieve a new session method returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve the refresh token from the current session. If the current session's refresh token is invalid, an error will be thrown. This method will refresh the session whether the current one is expired or not."
  },
  {
    "chunk_id": "5de653cc-5cf5-4e6d-b00f-e1bd729d8d6c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the current logged-in user from the database, validating the user's access token JWT on the server. This is useful for checking if the user is authorized, as it ensures the user's session is valid. Alternatively, the method can take an optional access token JWT parameter to retrieve a user with a custom token."
  },
  {
    "chunk_id": "d748e041-bfaf-4efe-b069-9d4ab2c6828a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session()` sets the session data using an `access_token` and `refresh_token`. If the current session is expired, it will be refreshed to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "dbea7633-76b7-4b23-a4a0-13e7f3a90ee8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers the Auth MFA (Multi-Factor Authentication) functionality provided by Supabase, which currently supports time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to a limit of 10, to enable recovery without the need for separate recovery codes, reducing the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "e3b86990-4fc7-48b3-913a-945e9f770802",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is:\n\nThe `mfa.enroll()` method is used to enroll a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` should be used to create a challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` methods."
  },
  {
    "chunk_id": "3e9f2842-b61c-40d0-868e-1011f9b84869",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled MFA factor is required. The `mfa.challenge()` method is used to create the challenge, which can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "c784409c-b733-4535-bbce-6744f752354d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `supabase.auth.mfa.verify()` function, providing the `factor_id`, `challenge_id`, and `code` parameters. This process is necessary to authenticate a user's multi-factor authentication (MFA) factor."
  },
  {
    "chunk_id": "6c7d7ec5-8ee2-417e-8522-f35f3ce568e6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled MFA factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking the factor ID and a one-time code as input parameters."
  },
  {
    "chunk_id": "6e180686-04e1-4944-a7f4-f5d9a1c2d790",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, the code `supabase.auth.mfa.unenroll({ \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225' })` can be used. This removes the specified MFA factor from the user's account, allowing them to authenticate without that additional verification step."
  },
  {
    "chunk_id": "373334f6-09bf-4af2-aed7-98e1b75c88c0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 represents a single-factor authentication like email/password or OAuth, while AAL2 represents two-factor authentication like TOTP. The `next_level` field indicates the next level of authentication the user can perform, either AAL1 or AAL2, depending on whether they have a verified second factor."
  },
  {
    "chunk_id": "17d1a4e8-968d-43e8-a495-ba6f85d2f809",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Functions feature allows invoking serverless functions with an Authorization header. The function call automatically sets the Content-Type header for common data types, but users can override this behavior by providing their own Content-Type header. A basic example shows invoking the \"hello-world\" function with a custom request body."
  },
  {
    "chunk_id": "c742eef6-ede9-4604-8350-31e31a262611",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence features are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Developers can turn on database change listening by managing Realtime's replication, and can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The summary also includes code examples for subscribing to various Realtime events, such as broadcasts, presence changes, and row-level database changes."
  },
  {
    "chunk_id": "529731ee-cb41-4ddf-930a-1ae038433a47",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain service performance and database efficiency. The `supabase.remove_channel()` function allows you to remove an unused channel, as Supabase will automatically handle cleanup 30 seconds after a client disconnects, but keeping unused channels active can degrade the system as more clients subscribe."
  },
  {
    "chunk_id": "e98b07fd-919e-4f69-8385-07cfdd489ad5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing channels is recommended to maintain performance of the Realtime service and database by cleaning up unused channel subscriptions. The Supabase `remove_all_channels()` function can be used to efficiently unsubscribe from all active channels, which helps prevent degradation caused by excessive simultaneous channel subscriptions."
  },
  {
    "chunk_id": "1ede5932-ee42-47ac-b49c-e51b6f5a26d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "Summary:\n\nThe code snippet `_10  channels = supabase.get_channels()` retrieves all the channels available in the system. This function call to the Supabase library allows users to access and work with the complete set of channels as part of their application or integration."
  },
  {
    "chunk_id": "53ae1b59-78a8-4934-8b0c-051354bc2ac4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. The example code demonstrates subscribing to a channel, then sending a broadcast message with random cursor position data to all connected clients."
  },
  {
    "chunk_id": "cc843ec5-e6df-4b6a-8213-3dc446ae4196",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase Storage, the user requires the `insert` permission on the `buckets` table. No permissions are needed for the `objects` table. Refer to the Supabase Storage guide for more information on access control. The `supabase.storage.create_bucket(name)` function can be used to create a new bucket."
  },
  {
    "chunk_id": "dde2ef99-e552-442c-9d71-16deebdac4bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The `supabase.storage.get_bucket(name)` function can be used to get the bucket."
  },
  {
    "chunk_id": "41a187ff-e186-48af-9a2f-45dcd69f46b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the `buckets` table requires `select` permissions, while the `objects` table requires no permissions. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "961a24d2-bcd3-4f2d-ac56-6c44fa8d212e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, while no permissions are needed on the 'objects' table. The example code `supabase.storage.delete_bucket(name)` demonstrates how to delete a bucket programmatically."
  },
  {
    "chunk_id": "7d5cea79-e0fa-4faa-bb84-a97bb2a5bb41",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: \"select\" access to the \"buckets\" table and \"select\" and \"delete\" access to the \"objects\" table. The Supabase storage guide provides more details on how access control works for this operation."
  },
  {
    "chunk_id": "cfc502e8-41b6-4ffc-9ca4-b6564d6f7f4e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the user requires `insert` permissions on the `objects` table. The MIME type should be specified for certain file types, such as images or audio, and defaults to `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` function, passing the file object and the desired path on Supabase Storage, along with the appropriate file options."
  },
  {
    "chunk_id": "cf951f53-9886-4119-8e5c-47966ce48be8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table, but `select` permissions for the `objects` table. The process involves using the Supabase storage client to download the file from the specified bucket and writing it to the local destination."
  },
  {
    "chunk_id": "e1ba0d4d-d135-4ef3-aaf4-d23ff0e19de5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are `select` on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "92dc0646-cbbf-42d3-bb24-4dd69443eb3f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires 'update' and 'select' permissions on the 'objects' table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "faf60286-9c65-4691-9244-8d28ee667db8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the user requires `update` and `select` permissions on the `objects` table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` method. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "1a255440-feaf-4cf6-9473-a26070469050",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file from a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The RLS policy permissions needed are none for the `buckets` table. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "ccb52bbb-cc54-4024-9f5f-b5e18686b7f4",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the necessary permissions are `select` on the `objects` table. The signed URL can be generated using the `create_signed_url()` method, which takes the file path and expiry duration as arguments. This allows secure, time-limited access to the specified object in the storage bucket."
  },
  {
    "chunk_id": "1c71ef7e-c5c9-40fb-a760-1b96aae8169d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-challengeandverify",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must be set to public by either updating the bucket permissions or through the Supabase dashboard. No specific table permissions are required. The `supabase.storage.from_('bucket_name').get_public_url('file_path')` function can be used to generate the public URL for the asset."
  },
  {
    "chunk_id": "cfd1d1e0-fd97-4c68-b9bb-5fae20b03b53",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of tools for interacting with Supabase's Postgres database, including functionality for listening to database changes, invoking Deno Edge Functions, building login and user management features, and managing large files. The library is well-documented and available on GitHub for developers to use in their Python applications."
  },
  {
    "chunk_id": "b07f4f1c-bb80-4bf4-b05f-9bbb5b5bc45c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the supabase-py library using pip for Python versions greater than 3.7. The library can be installed directly from the terminal by running the command `pip install supabase`."
  },
  {
    "chunk_id": "5e959d79-56c1-4d3e-b6d9-2ec12d61c499",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to the Supabase ecosystem, and it can be initialized using the `create_client()` method. This method takes two required parameters: the Supabase URL and the Supabase Key, which are obtained from the project dashboard. Optionally, it also accepts a `ClientOptions` parameter to customize the authentication behavior."
  },
  {
    "chunk_id": "ad7687ec-67fb-4a91-be62-8849dad1386f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, and the `apikey` keyword should be avoided as a column name when using the Supabase Platform. The `select()` function supports parameters for specifying columns and count methods."
  },
  {
    "chunk_id": "94935922-d7f0-49f7-b6b0-626de16d7f85",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Insert data\" section describes the parameters for inserting data into a table, including the required `jsonRequireddict` or `list` of values to insert, optional `countOptionalCountMethod` to get the count of rows returned, optional `returningOptionalReturnMethod` to specify the response format, and optional `default95to95nullOptionalbool` to make missing fields default to `null`. An example is provided for bulk inserting data into a \"countries\" table using the `supabase.table().insert().execute()` method."
  },
  {
    "chunk_id": "8a9220e9-e8e5-44f5-8a89-93ef9c9fe4f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation is used to update data in a Supabase table. It should be combined with filters to target the specific items to be updated. The `update()` method accepts a dictionary or list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted. An optional `countOptional` parameter can be used to specify the property for getting the count of rows returned."
  },
  {
    "chunk_id": "1e8e1423-f5e4-4456-9fc1-ba473c14bd1e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Upsert data function allows you to insert or update data in a table. It requires primary keys to be included in the `values` dict, and supports various parameters such as `returning`, `ignore_duplicates`, and `default_to_null`. The function can be used to perform bulk upserts, and is useful for working with tables that have unique constraints."
  },
  {
    "chunk_id": "7402445b-2375-4f8b-b04c-835619c96655",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` function in the Supabase API should always be used in conjunction with filters to target the specific data to be deleted. When using `delete()` with RLS (row-level security) enabled, only rows visible through `SELECT` policies will be deleted. The `delete().in_()` method can be used to delete multiple records that share common criteria in a single query. The `counting` and `returning` parameters can be used to control the count and response format of the deleted records."
  },
  {
    "chunk_id": "a9bc1cf6-8f56-4077-b170-08046a87e945",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation covers calling Postgres functions as remote procedure calls, which are useful for logic that rarely changes, such as password resets and updates. It provides details on the parameters for the `rpc()` function, including options for specifying required and optional parameters, read-only access mode, and different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "0067f5f2-3429-4bc5-9d9e-b308c7a576ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in Supabase queries like `select()`, `update()`, `upsert()`, and `delete()`. They can also be applied to Postgres functions that return a table response. Filters can be chained, used with JSON columns, and applied to foreign tables, providing a flexible way to precisely retrieve or modify data."
  },
  {
    "chunk_id": "455b545a-ec16-4a00-98af-36b3f85a3bf9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content explains how to filter a table in Supabase by matching rows where a specific column is equal to a given value. It outlines the required parameters, `column` and `value`, and provides an example usage with the `select()` method to retrieve only the rows where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "d11f0cde-b734-46cd-aa6e-5b4f6dbb1cba",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table to include only rows where a specified column is not equal to a given value. The parameters include the column name and the value to filter by. An example is provided using the Supabase library's `select()` method to retrieve records where the \"name\" column is not equal to \"Albania\"."
  },
  {
    "chunk_id": "8caff190-684a-421a-b559-4a13d6cbcb1b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The content describes how to filter a database table by selecting rows where a specified column has a value greater than a given value. The key parameters are the column name and the comparison value. This functionality is demonstrated using the Supabase library's `gt()` method within the `select()` operation."
  },
  {
    "chunk_id": "26c507e0-65c1-4b3e-be35-ba863bf1fbb0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section explains how to filter a database table to include only rows where a specified column is greater than or equal to a given value. The key parameters are the column name and the value to filter by, and the example shows how to use the gte() method with the select() function in the Supabase library to implement this filtering."
  },
  {
    "chunk_id": "57677651-3a7e-40f5-b401-227b34619632",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The given content describes how to filter a table by a column value less than a specified value. The `lt()` method in the Supabase library is used to apply this filter, with the column name and the comparison value as parameters. This functionality allows users to retrieve a subset of rows that match the given criteria."
  },
  {
    "chunk_id": "85090bec-217c-4967-bdc3-ecccd6eb24a9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'lte()' function in the Supabase library allows you to filter rows where a specified column is less than or equal to a given value. The function takes two required parameters: the column name and the value to filter by. This can be used in a Supabase 'select()' query to retrieve only the rows that match the specified condition."
  },
  {
    "chunk_id": "77c64261-270a-4702-8c40-913adcf8f6b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The \"Column matches a pattern\" feature allows filtering a database table by checking if the value in a specified column matches a given pattern, case-sensitively. The key parameters are the column name and the pattern to match, and the feature can be used in a `select()` query to retrieve only the rows where the condition is met."
  },
  {
    "chunk_id": "8577cae5-283f-4877-81aa-b16e187ed9fc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the content provided is:\n\nThe column matches a case-insensitive pattern feature allows you to filter a table by a column that matches a specified pattern, regardless of the case. It takes two required parameters: the column name and the pattern to match against. This can be used in the `select()` method, as shown in the example, to retrieve rows where the column value matches the pattern."
  },
  {
    "chunk_id": "295f2a27-baaa-48d2-a4c8-7a5e3e48e39b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` function in the Supabase API allows you to filter a database table by checking if a specific column value matches a given value, which can be `null`, `true`, or `false`. The function takes two parameters: the name of the column to filter on, and the value to match against."
  },
  {
    "chunk_id": "25e4c8f5-94b4-45d5-9a6b-31020922c2fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes the `in_()` function in the Supabase library, which allows filtering a table by checking if the values in a specified column are included in a provided array of values. The `in_()` function takes two required parameters: `column` (the column to filter on) and `values` (the array of values to match against)."
  },
  {
    "chunk_id": "65d23c91-422a-4719-9785-3cd2a037d385",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe `contains()` operator is only applicable for `jsonb`, `array`, and `range` columns. It allows filtering rows where the specified column contains all the elements present in the provided `value`. The `value` parameter can be a `jsonb`, `array`, or `range` data type. This operator is useful for querying data structures that can contain multiple elements, such as tags or ranges."
  },
  {
    "chunk_id": "708a0999-8c8d-4c8e-b8ff-debfdf9945d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature is applicable to jsonb, array, and range columns. It allows filtering rows where every element in the specified column is contained within the given value. The parameters include the column to filter on and the value to filter with. Examples are provided for array, range, and jsonb columns."
  },
  {
    "chunk_id": "4679d4f0-925b-40eb-9637-e0349bf5e98c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is only applicable to range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The parameters include the column name and the range to filter with, which can be used in a Supabase query to select the matching rows."
  },
  {
    "chunk_id": "ec362613-0e65-41b8-be37-17002e39a4b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is specifically for range columns, allowing you to filter rows where every element in the specified column is either contained within the given range or greater than any element in the range. The key parameters are \"column\" and \"range\", which define the column to filter on and the range to filter with, respectively. This can be used in a `select()` query, as shown in the example."
  },
  {
    "chunk_id": "a1c7da17-fc0d-498a-b674-7ba7e61c4a44",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" functionality is applicable only for range columns, allowing you to filter rows where every element in the specified column is less than any element in the given range. The key parameters are the column name and the range to filter with, which can be used in the Supabase `range_lt()` method as part of a `select()` query."
  },
  {
    "chunk_id": "2126914b-b5ef-42a2-ac23-8480a6bf04d9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"less than or equal to a range\" filter is used for range columns in Supabase, matching only rows where every element in the specified column is less than or equal to any element in the provided range. The filter is applied using the `.range_lte()` method, which takes the column name and the range as parameters."
  },
  {
    "chunk_id": "554fa9a1-c857-409e-b5bb-5cecf090d632",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is specific to range columns in a database. It allows filtering rows where the column value is mutually exclusive to the provided range, meaning there can be no element between the two ranges. The feature is configured by specifying the column name and the range to filter with, as demonstrated in the example usage with the `range_adjacent()` method."
  },
  {
    "chunk_id": "359ac02c-3006-49cc-a85c-817a9fa459ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This section describes a Supabase query filter that matches rows where the specified column (an array or range) and the provided value have an element in common. The `overlaps` function is used to perform this filtering, with the column name and the value to filter on as parameters."
  },
  {
    "chunk_id": "4ed7e8cb-a3fc-46d3-9abf-d89e64175a80",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Match a string\" functionality in Supabase, which allows filtering text or tsvector columns based on a query string. This is useful for performing full-text searches in Postgres databases. The key parameters are the column to filter on, the query text to match, and optional configuration options for text normalization and search behavior."
  },
  {
    "chunk_id": "953a971d-b7df-4dca-ae48-685eecdfe4cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows filtering a table by matching each column in the `query` object to its associated value. This is a concise way to perform multiple `eq()` comparisons. The `match()` method takes a `query` object as a parameter, where the keys represent the column names and the values represent the filter values for those columns."
  },
  {
    "chunk_id": "11101684-7bc3-4fe6-94f3-cd6a8c095506",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary discusses the use of the `not_` operator in the PostgREST filter syntax to match rows that don't satisfy the specified filter criteria. It provides examples of using `not_.in_()` for filtering based on a list of values and `not_.contains()` for filtering based on array values. The summary also includes an example of using `not_.is_()` with the Supabase `select()` function to retrieve rows where the `name` column is not null."
  },
  {
    "chunk_id": "485fc361-4a5d-4753-9a4f-cb98ea8426dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the `or95()` function in the Supabase library, which allows you to use the raw PostgREST syntax for filter names and values. It provides examples of using `or_()` to filter on multiple conditions, including `in()`, `contains()`, and `containedBy()` filters. The function also supports filtering on referenced tables, and the summary explains how to use `or()` in conjunction with `and()` for more complex queries."
  },
  {
    "chunk_id": "d08ec7e8-e29e-4dcc-b27d-7428dd710845",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in Supabase expects the use of raw PostgREST syntax for filter values. It supports various operators like `in` and `cs` (contains) for filtering, and can be used to filter on foreign tables with the `select()` method. Examples are provided to demonstrate the usage and parameters of the `filter()` method."
  },
  {
    "chunk_id": "374fa549-22dc-4874-8176-5ba74ef890c8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of a query response, unlike filters which only affect the rows returned. Modifiers must be specified after filters and are primarily applicable to queries that return tabular data, such as the `select()` or `rpc()` functions."
  },
  {
    "chunk_id": "562b158e-9936-4b3a-87d6-aa8711903f5b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The order() function in Supabase allows you to order the query results by a specified column. The available parameters include the column to order by, whether to order in descending order, the name of a foreign table to order, and whether to show nulls first. An example is provided demonstrating how to order the results of a select() query on a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "52d2a5ce-64b6-4581-b8ae-e52c852151c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `limit()` parameter in the `select()` function allows you to specify the maximum number of rows to return from a database query. This can be applied to both the parent table and foreign tables. For example, `supabase.table(\"countries\").select(\"name\").limit(1).execute()` will return a maximum of 1 row from the \"countries\" table."
  },
  {
    "chunk_id": "2c7b8ab5-4ffd-4f71-8b92-e0b8bc096705",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in Supabase allows limiting the query result to a specified range of records, defined by `from` (starting index) and `to` (ending index) parameters. This function respects the query order, and if no order is specified, the range behavior may be unpredictable. Additionally, the `foreign_table` parameter can be used to limit the range on a foreign table instead of the parent table."
  },
  {
    "chunk_id": "cc520c7d-5761-45f1-b856-013d3ca3a97e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `single()` function in the Supabase client library retrieves a single row of data from a table, returning the data as an object instead of an array of objects. This is demonstrated in the example, which selects the \"name\" column from the \"countries\" table and limits the response to a single row."
  },
  {
    "chunk_id": "c982cc4d-df9c-4425-9526-09f9365027a5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `maybe_single()` method in the Supabase library to retrieve zero or one row of data from a table, specifically the \"countries\" table. This is useful when you expect to retrieve at most one row of data based on a specific condition, such as filtering by the \"name\" column for \"Albania\". The method returns the data as a single object instead of an array of objects, simplifying the handling of the response."
  },
  {
    "chunk_id": "a946513e-15bb-40ca-a486-0c7aefdd9d9f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes the 'Retrieve as a CSV' feature, which allows returning data from a Supabase table as a CSV (Comma-Separated Values) string format. This can be useful for exporting data in a tabular format for further analysis or integration with other systems. The example code demonstrates how to execute this operation using the Supabase library."
  },
  {
    "chunk_id": "405a6ecb-00b1-471f-98a8-415a3a3af155",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual runtime. It can reveal sensitive database information, so it's best to enable it only in testing environments. The `explain()` method can be used with various optional parameters to customize the output format and level of detail."
  },
  {
    "chunk_id": "8c93a9d6-5902-4955-98b7-da38d321df91",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nCreating a new user in Supabase allows the user to sign up with an email and password. By default, the user needs to verify their email address before logging in, but this can be disabled in the project settings. The returned response depends on whether email confirmation is enabled - a user is returned but no session if confirmation is required, or both a user and a session are returned if it is disabled. Existing confirmed users cannot sign up again if email or phone confirmation is enabled."
  },
  {
    "chunk_id": "b903320e-bcd1-42cd-a17c-2409752931a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha for anonymous sign-ins to prevent abuse, and provides an example of how to create an anonymous user with custom user metadata by passing in the captcha token in the `options` parameter of the `supabase.auth.sign_in_anonymously()` function."
  },
  {
    "chunk_id": "c713c608-2615-4922-b22a-35a5b964c67c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides code examples for signing in with email and password, and signing in with phone and password, along with details on the required parameters and response."
  },
  {
    "chunk_id": "26465559-c6e9-4277-86a6-66402ac1c1f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "Allows users to sign in using an OIDC ID token. The authentication provider must be enabled and configured. The `supabase.auth.sign_in_with_id_token()` method is used to sign in with an ID token, passing the provider and token as parameters."
  },
  {
    "chunk_id": "a0f67d86-3bf4-4bef-a54c-e1b06a8a5e70",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user using a One-Time Password (OTP) sent to their email or phone number. This passwordless sign-in method can be used to sign up new users or restrict user creation. Developers can configure whether the user receives an OTP or a magic link, and can customize the magic link's destination URL. The OTP and magic link implementations are interchangeable, allowing developers to easily switch between the two."
  },
  {
    "chunk_id": "29a032ff-da28-4b7b-aa7d-39455fc8876b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It provides a code example for signing in using the GitHub provider, and mentions that Supabase supports various third-party providers that can be configured. The key technical points are the use of the `sign_in_with_oauth()` method and the ability to specify the provider and (optionally) scopes."
  },
  {
    "chunk_id": "05407f5a-327e-4e09-8611-07cebe2c2ad2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, the developer must first establish a connection to an identity provider using the provided CLI commands. The `domain` property can be used to start the sign-in flow if the email domain has been associated with the identity provider, or the `provider_id` property can be used to specify a different way to initiate the authentication flow, such as mapping specific user email addresses or using company-specific identifiers. The `sign_in_with_sso()` method is used to initiate the SSO sign-in process."
  },
  {
    "chunk_id": "7eeceab7-bbdc-49b0-a68e-8b35240c367a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be used after the user has already signed in. Signing out revokes the refresh token and deletes the JWT from the client-side, but the access token JWT will remain valid until it expires. The `sign_out()` method can sign out the user from all their active sessions by default."
  },
  {
    "chunk_id": "a28782b2-259b-458c-85f0-88a8a6d897ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and password changes. The verification type should match the corresponding auth method used prior to calling `verify_otp`. The `TokenHash` from the email templates can be used for sign-in via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "f023e088-6113-4202-a890-a9bdc3748d33",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with. If verified user data is required, the `get_user()` method should be used instead. The method also handles session refresh if the access token has expired."
  },
  {
    "chunk_id": "eb6d28e6-b915-4613-90c7-1d688b44274c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if none is provided, it will attempt to retrieve it from the existing session. This method is useful for refreshing the session, whether it has expired or not."
  },
  {
    "chunk_id": "8a133870-83bc-438d-a1d8-c0898293564f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"Retrieve a user\" fetches the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to either get the logged-in user with the current existing session or with a custom access token JWT."
  },
  {
    "chunk_id": "3299cd0a-1217-428a-b5f9-c846a81c2048",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session` method sets the session data in the current session by taking an `access_token` and `refresh_token`. If the current session is expired, it will refresh the session to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful session set, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "d769cde8-6e0f-49ee-b94a-c3eff2641324",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers multi-factor authentication (MFA) methods supported by Supabase, specifically time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors, up to 10, for recovery purposes, reducing the need to store recovery codes and improving security by diversifying the authentication factors."
  },
  {
    "chunk_id": "f61c751b-aef7-40f4-af82-3b5227253f5d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe document describes how to enroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase Python API. Currently, the only supported `factor_type` is `totp`, and the returned `id` should be used to create a challenge. The documentation provides references to the `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` functions for creating, verifying, and combining the challenge and verification steps, respectively."
  },
  {
    "chunk_id": "6ce173f3-8ecc-413d-9103-b55ddae0b775",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "b263bb5c-f3f5-4d56-91cc-472275ae8847",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `supabase.auth.mfa.create()` function. The `supabase.auth.mfa.verify()` function is then used to verify a challenge by providing the `factor_id`, `challenge_id`, and the one-time `code` received during the challenge creation."
  },
  {
    "chunk_id": "f803ae5d-b9d9-4ecf-b924-548f582e88c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor with the provided code."
  },
  {
    "chunk_id": "00059d80-0059-4a08-b149-d81293788a5a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to unenroll a factor from Supabase's multi-factor authentication (MFA) system. The `supabase.auth.mfa.unenroll()` function is used, taking the `factor_id` as a parameter to specify which factor to unenroll."
  },
  {
    "chunk_id": "292d49da-f524-48a5-8fc8-861524257439",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 represents a single-factor authentication (e.g. email and password), while AAL2 represents two-factor authentication (e.g. TOTP). The `next_level` field indicates the next level of authentication required, based on the user's verified factors. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "88574ee7-d407-4645-a5fd-1c3fc5e52f4b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invoke a Supabase Edge Function by making a request with an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type, but this can be overridden. The function provides basic invocation, error handling, and the ability to pass custom headers."
  },
  {
    "chunk_id": "b3a0d82a-c9f0-4690-9863-8fef92a4b6e5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled due to performance and security concerns. Users can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL, and can listen to various Realtime events, such as broadcasts, presence changes, and row-level database changes, through the provided channel API."
  },
  {
    "chunk_id": "aebfd9cf-8a62-4d04-9e62-513b294fa1cf",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and the connected database. The `supabase.remove_channel()` function allows you to unsubscribe from a channel, which can help prevent degradation caused by unused channels as more clients subscribe simultaneously."
  },
  {
    "chunk_id": "31b71f75-1bcd-42a5-9fdf-65c578efc74c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically cleans up disconnected channels after 30 seconds, but keeping too many unused channels can degrade performance as more clients subscribe. The `supabase.remove_all_channels()` function can be used to remove all channels."
  },
  {
    "chunk_id": "e0513ac7-3b8c-4276-8c79-4b1c54bf911e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: Retrieves all channels from the Supabase platform using the `get_channels()` function. This allows developers to access and work with the full list of channels available in their Supabase application."
  },
  {
    "chunk_id": "29cf92a7-77b9-43c6-87d4-11e6f6e210ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to broadcast a message to all connected clients in a channel using the Supabase realtime API. It provides an example of subscribing to a channel, then sending a broadcast message with random cursor position data to all clients in the 'room1' channel."
  },
  {
    "chunk_id": "8804ccfa-4597-497e-8593-0e0e10efc9a9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "bc95108d-ce3a-41de-af71-30bc9149aa77",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide on access control for more information. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "38a165f7-250e-421b-8c16-307aa71f1436",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the RLS policy requires `select` permissions on the `buckets` table but no permissions on the `objects` table. Refer to the Storage guide for details on access control. The code to list all buckets is `supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "ea6a416a-e874-4868-a8ef-d9f1c2fccc74",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the user requires the 'select' and 'delete' permissions on the 'buckets' table, but no permissions on the 'objects' table. The deletion is performed using the `supabase.storage.delete_bucket(name)` API call, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "5f64ec02-3372-489f-a280-45d13842139f",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the following permissions are required: 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The storage guide provides details on how access control works. The code snippet `supabase.storage.empty_bucket(name)` can be used to empty the specified bucket."
  },
  {
    "chunk_id": "41065118-1b38-4844-bc15-3812a7167cea",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, you need the `insert` permission on the `objects` table. Provide the appropriate MIME type for the file, especially for images and audio. The example demonstrates uploading a file using the `supabase.storage.from_(\"testbucket\").upload()` method, specifying the file path, storage path, and content type."
  },
  {
    "chunk_id": "e2586da0-e3d2-46d4-ab57-b0af543849d3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires the `select` permission on the `objects` table. The summary includes an example code snippet demonstrating the download process using the Supabase storage client."
  },
  {
    "chunk_id": "15721ca3-9efd-44e3-87df-2bb48fad6676",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions require `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "7d75bb06-ddba-4e8c-acce-fcd375a69693",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the required permissions are `update` and `select` on the `objects` table. The file is updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which allows specifying the file, path, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "136310ef-3210-4555-8e93-ba69a0c6f332",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the `update` and `select` permissions are required on the `objects` table. The `move()` method is used to relocate a file from one location to another, e.g., from `public/avatar1.png` to `private/avatar2.png`."
  },
  {
    "chunk_id": "06a7b9d9-284e-4b37-aab2-b4f625743cc9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file from a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The relevant access control policies are detailed in the Storage guide. The code example demonstrates how to remove the file 'test.jpg' from the 'bucket_name' bucket."
  },
  {
    "chunk_id": "13a694cb-5cb6-4ee4-b511-ae47009e2852",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required RLS policy permissions are to have 'select' access on the 'objects' table, while no permissions are needed on the 'buckets' table. The signed URL can be generated using the `create_signed_url()` method, which takes the file path and the expiry duration as parameters."
  },
  {
    "chunk_id": "e36dac09-864d-4ece-8789-14fabdcaf3a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-unenroll",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket needs to be set to public either through the updateBucket() method or the Supabase dashboard. No permissions are required for the buckets or objects tables. The get_public_url() method can be used to obtain the public URL for a file in a public bucket."
  },
  {
    "chunk_id": "43382712-0001-40ca-b32a-f90346142f0b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive reference for all available objects and methods in the library, enabling developers to effectively leverage the Supabase platform using Python."
  },
  {
    "chunk_id": "343c6d22-7063-4210-af7b-afb04a9e5902",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation describes how to install the Supabase Python library (supabase-py) using the Python package installer (pip), which is the recommended installation method for Python versions greater than 3.7. The installation can be performed from the terminal or via a Conda environment."
  },
  {
    "chunk_id": "25f5b754-7b69-4325-bd50-66e0ed9eaaf5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase client is the primary interface to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optional client options to customize the authentication behavior. The Supabase client provides the entry point to access the full range of Supabase functionality."
  },
  {
    "chunk_id": "c708ed71-d8ee-408e-8d6c-a67513bd1e82",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects return a maximum of 1,000 rows by default, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to retrieve specific data, and the `apikey` column should be avoided due to it being a reserved keyword. Key parameters include the columns to retrieve and the count method to use."
  },
  {
    "chunk_id": "ea01b8b4-d663-405e-ad12-8639b005a88c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Insert data\" section describes the parameters for the `insert()` function in the Supabase library, including the `jsonRequired` parameter to insert single or multiple rows, the `countOptional` parameter to get the count of rows returned, the `returningOptional` parameter to specify the response format, and the `default95to95nullOptional` parameter to control the handling of missing fields. It also provides an example of using the `insert()` function to create a new record in the \"countries\" table."
  },
  {
    "chunk_id": "028a6405-99ab-4673-8d0d-4ea96e1016e3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase API is used to update data in a table. It should always be combined with Filters to target the specific item(s) to be updated. The `update()` method takes a dictionary or list of dictionaries as input, representing the new values to be inserted. It also supports an optional `count` parameter to retrieve the number of rows affected."
  },
  {
    "chunk_id": "4f6b91cb-4a80-40b3-9d89-281d1167864e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe upsert method allows inserting or updating data in a table, with primary keys required in the `values` dict. It supports various parameters like `count`, `returning`, `ignore_duplicates`, `on_conflict`, and `default_to_null` to customize the behavior. The upsert operation can be performed on a single row or in bulk, and it is useful for tables with constraints like UNIQUE."
  },
  {
    "chunk_id": "c9010c8e-7f3f-4b54-bc04-31ad934e3a91",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` function in the Supabase client library should always be used with filters to target the specific items to be deleted. When using `delete()` with filters and Row Level Security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method can be used to delete multiple records in a single query by providing an array of values."
  },
  {
    "chunk_id": "6e6606f6-ef2f-496a-9747-06dd271d92b9",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The document describes how to call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. It provides details on the parameters for the `supabase.rpc()` function, including options for passing arguments, bulk processing, filtering, and read-only mode. The summary also mentions that the function can return a response, and provides an example of calling the \"hello_world\" function without arguments."
  },
  {
    "chunk_id": "3437c780-5fa4-4b42-9792-da2bb2d10620",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match certain conditions in select, update, upsert, and delete queries. They can also be applied to Postgres functions that return a table response. Filters can be chained, used to filter by values within JSON columns, and applied to foreign tables."
  },
  {
    "chunk_id": "05ecf1f1-6f8f-4837-8909-43ef24a91c93",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `eq()` method in Supabase allows you to filter a table by a specific column and value, returning only the rows where the column is equal to the provided value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter provides the value to match against."
  },
  {
    "chunk_id": "930879f6-7248-4635-8421-1e7e36151058",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided snippet describes how to use the `neq()` (not equal) function in a Supabase query to filter a table by a column value that is not equal to a specified value. The `neq()` function takes two parameters: the column to filter on and the value to filter by. This allows for selective querying of data where a particular column does not match a given criterion."
  },
  {
    "chunk_id": "b82375b7-caea-44e5-9497-b280380d2c3e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary focuses on the ability to filter a database table by a column value that is greater than a specified value. The relevant parameters are the column name and the value to filter by. This functionality is demonstrated using the Supabase library's `gt()` method in a `select()` query."
  },
  {
    "chunk_id": "40dc0322-9a49-46ce-8714-a20572203590",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes how to filter a database table by selecting rows where a specified column is greater than or equal to a given value. The key parameters are the column name and the comparison value. This functionality is demonstrated using the Supabase library's `gte()` method, which can be chained with the `select()` method to execute the filtered query."
  },
  {
    "chunk_id": "3dcd92de-ffa1-45a6-bb1b-cfae2c3ab7a6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the `lt()` (less than) method in Supabase to filter a table by a column value that is less than a specified value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by."
  },
  {
    "chunk_id": "b21890a5-7668-483e-a8bf-cb3df11e9034",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `lte()` (less than or equal to) method in the Supabase library allows you to filter a database table by a specific column, keeping only the rows where the column value is less than or equal to the provided value. The `lte()` method takes two required parameters: the column name and the value to filter by."
  },
  {
    "chunk_id": "5318e3ab-a7bb-40a2-b08d-c46da3108649",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Column matches a pattern' feature allows filtering a table by matching rows where a specific column's value matches a given pattern case-sensitively. The required parameters are the column name and the pattern to match, and it can be used in a `select()` operation to retrieve only the matching rows, as shown in the example."
  },
  {
    "chunk_id": "3f631702-c094-4be2-a444-e1b702da8128",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `ilike()` function in Supabase allows you to perform a case-insensitive pattern match on a specified column. It takes two required parameters: `column` (the name of the column to filter on) and `pattern` (the pattern to match against). This functionality is useful for searching and filtering data in a more flexible and user-friendly way."
  },
  {
    "chunk_id": "c5f3940c-c835-492f-99e9-24f0b51abd5d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column is a value\" feature allows filtering rows based on a specific column value, including checking for null, true, or false values. The key parameters are the column name and the value to match against, enabling precise filtering of data in a table."
  },
  {
    "chunk_id": "c1f24ee7-7248-48cf-beff-cf139cabc106",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a filter operation on a database table, where rows are matched based on the values in a specific column. The `in_()` function is used to filter the table by selecting rows where the \"name\" column contains values from the provided array (e.g., \"Albania\" or \"Algeria\"). This functionality is demonstrated in the example code snippet."
  },
  {
    "chunk_id": "7fd6f128-eb90-48d8-9853-52f6dbf76a1a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"contains every element\" filter is applicable to jsonb, array, and range columns. It matches rows where the specified column contains all the elements present in the provided value. The filter takes two parameters: the column name and the value (which can be a jsonb object, array, or range) to filter with."
  },
  {
    "chunk_id": "644d8dca-b5e5-4b6c-ae7c-9b80dee5dacc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Contained by value\" section is as follows:\n\nThe \"contained by value\" operation is only applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The parameters include the column to filter on and the value to filter with. This operation is demonstrated with examples for array, range, and jsonb columns."
  },
  {
    "chunk_id": "0e3a3133-eb48-4e9a-bec0-a426959103d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is only applicable to range columns. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The key parameters are the column name and the range to filter on, which can be used in a Supabase query to select relevant data."
  },
  {
    "chunk_id": "b220ae1b-c0e9-4ec8-85b7-041a589ef435",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" functionality is used to filter rows in a range column, where each element in the column is either contained within the specified range or greater than any element in the range. The parameters include the column name and the range to filter with. This can be used in a Supabase query to select rows where the values in the \"during\" column are greater than or equal to the specified range."
  },
  {
    "chunk_id": "833aeeda-67a4-4880-b2e5-de3afe08f054",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the column is less than any element in the provided range. The parameters are the column name and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column is less than the specified range."
  },
  {
    "chunk_id": "789aaa6e-b363-4d6f-8d2d-4a8170935e6e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" operation is used to filter a range column, where only rows are returned where every element in the specified column is less than any element in the provided range. The operation requires a column name and an array of range values as parameters, and can be used in a Supabase `select()` query."
  },
  {
    "chunk_id": "4da5a9a8-a9c0-4f46-a24f-5f9d74418e08",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is specific to range columns, allowing you to filter rows where the column value is mutually exclusive to a given range, ensuring there is no element between the two ranges. The key parameters are the column name and the range to filter on, which can be used in a Supabase query to select relevant rows."
  },
  {
    "chunk_id": "c7ca56d5-5862-4d1a-bd39-adebf031c087",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis feature is only applicable to array and range columns. It allows matching rows where the column and the provided value have a common element. The parameters include the column to filter on and the value to filter with. Examples are provided for using this feature with array and range columns."
  },
  {
    "chunk_id": "8144c41b-313d-42eb-88c6-86407a501245",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'Match a string' feature is only applicable to text and tsvector columns. It allows filtering rows where the specified column matches the provided query string. This functionality is based on Postgres full-text search and provides options for text search, basic normalization, full normalization, and websearch. An example usage is provided, demonstrating how to perform a text search on the 'content' column using the 'text_search' method."
  },
  {
    "chunk_id": "1497ed71-3411-484e-b265-acc088f3b513",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `match()` function in the Supabase library allows you to filter a table by matching the values in the `query` object to the corresponding column values. This is a concise way to apply multiple equality filters on a table, instead of using multiple `.eq()` calls. The `query` parameter is an object with column names as keys and their associated filter values."
  },
  {
    "chunk_id": "93db210b-0d3c-4fc1-bcaf-23e11b836171",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the use of the `not_` operator in PostgREST filters to match rows that don't satisfy the filter criteria. It provides examples of using `not_.in_()` for filtering on a list of IDs and `not_.contains()` for filtering on array values. The summary also includes an example of using `not_.is_()` with the `select()` method to fetch rows where the 'name' column is not null."
  },
  {
    "chunk_id": "724a0bc5-5151-4e0e-8153-6eaac70f3d3d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'or95()' function in the Supabase client library allows you to use the raw PostgREST syntax for filter names and values, including 'in', 'contains', and 'containedBy' filters. The 'filtersRequired' parameter takes a string of filters, and the 'reference95table' parameter can be used to filter on referenced tables instead of the parent table. The 'or()' function is used to combine multiple filters, and can also be used on referenced tables."
  },
  {
    "chunk_id": "ae3305b6-bae8-4a01-b445-f0c204f9d190",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe 'filter()' method in the provided code expects the use of raw PostgREST syntax for the filter values. It supports various operators such as 'in' for filtering on a set of values, and 'cs' for filtering on elements in an array column. The 'filter()' method can be used in combination with the 'select()' method to fetch data from a foreign table, as demonstrated in the example."
  },
  {
    "chunk_id": "ae5687b1-e6c3-4455-a062-ee71e8f09650",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response, such as returning a CSV string, but must be specified after filters. Certain modifiers only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "b9f6545a-5c3d-4622-8a55-12c1c284d00c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` method in the Supabase client library allows ordering the query result by a specified column. The method takes parameters such as `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the foreign table to order), and `nulls_first` (whether to show nulls first). This functionality is demonstrated in an example query that orders the results from the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "c2ea469b-4a24-4cf8-9590-049b1acdfc8e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to limit the number of rows returned in a database query using the `limit()` function. The `sizeRequired` parameter specifies the maximum number of rows to return, while the `foreign95table` parameter can be used to limit rows of foreign tables instead of the parent table. An example is provided showing how to use the `limit()` function with the `select()` method on a foreign table."
  },
  {
    "chunk_id": "9966c934-97cd-4ee3-9a8a-d18d6719d6fb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content explains how to limit the query result by specifying a range using the `from` and `to` parameters. The `from` and `to` values are 0-based and inclusive, allowing you to return a specific subset of the records. This is useful for paginating or retrieving a portion of the overall query result, while respecting the original query order."
  },
  {
    "chunk_id": "6a8147fe-b852-4749-b4de-09bfa823d5b6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary summarizes how to retrieve a single row of data from a database table using the Supabase library's `select()` method with the `single()` modifier. This allows returning the data as a single object rather than an array, which can be useful in certain scenarios where only one row of data is needed."
  },
  {
    "chunk_id": "c1c64330-53f4-40c2-8ddb-32bc8bd44f77",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The <code>maybe_single()</code> method in the Supabase client library retrieves zero or one row of data from a database table, returning the data as a single object instead of an array. This is useful when you expect at most one row to match the query criteria, such as when retrieving data by a unique identifier."
  },
  {
    "chunk_id": "44bc72f4-c445-4a71-95a9-97389e368e66",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: The documentation describes the \"Retrieve as a CSV\" functionality, which allows returning the data from a Supabase table as a CSV string. This can be useful for exporting data in a comma-separated format for further processing or analysis. The example code demonstrates how to execute this operation using the Supabase client library."
  },
  {
    "chunk_id": "2ec1097d-a912-4490-8e0a-f999449541b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres can be used to debug slow queries by providing the execution plan for a given query, even for `rpc()` or write queries. While `explain()` is not enabled by default due to potential security concerns, it can be enabled in a testing environment or with additional protection in production. The method supports various parameters to customize the output, such as including information on WAL record generation, configuration parameters, buffer usage, and actual run time."
  },
  {
    "chunk_id": "a3cddadb-6238-402f-be1a-fff842e47765",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nTo create a new user, the \"Confirm email\" setting in the project's authentication providers determines whether a user needs to confirm their email address before logging in. If \"Confirm email\" is disabled, both a user and a session are returned upon sign-up. The user's email confirmation redirect URL can be customized in the project's URL configuration settings. Attempting to sign up an existing confirmed user will return either an obfuscated user object or an error message, depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "d8c599b6-bae1-417d-b6b2-926caf545d34",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation details the ability to create an anonymous user in the system, which is recommended to be used with a captcha token to prevent abuse. The anonymous user can be created programmatically using the `supabase.auth.sign_in_anonymously()` function, passing in an optional `captcha_token` in the `options` parameter."
  },
  {
    "chunk_id": "965b63ff-ae65-4779-b935-62337fbadc4a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "To sign in an existing user, the API requires either an email and password or a phone number and password. The sign-in process can be performed using the `supabase.auth.sign_in_with_password()` function, passing in the appropriate credentials as a JSON object with either `email` and `password` or `phone` and `password` fields."
  },
  {
    "chunk_id": "d2142761-1992-456a-bee7-d32a1e470254",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in using an OIDC ID token. The authentication provider must be enabled and configured. The `sign_in_with_id_token()` method is used, passing in the provider name (e.g., \"google\") and the ID token. This allows users to authenticate without providing username and password credentials."
  },
  {
    "chunk_id": "6add8360-df50-459d-8357-201604636c94",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP feature allows users to authenticate without a password, using either an email or phone number. It can be used for both new user sign-ups and existing user sign-ins. Developers can configure whether the user receives a magic link or a one-time code, and can customize the redirect URL. This passwordless sign-in method provides a streamlined authentication flow for users."
  },
  {
    "chunk_id": "689a0801-5b65-4fc4-850d-311fbaa6ead1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "This method allows users to sign in to the application using a third-party identity provider, such as GitHub, as supported by Supabase. The `supabase.auth.sign_in_with_oauth()` function is used to initiate the OAuth sign-in flow, with the provider specified as a parameter. This functionality enables users to leverage their existing third-party accounts for authentication, providing a convenient and secure sign-in experience."
  },
  {
    "chunk_id": "08810d97-3058-431e-8741-847d9124849b",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the email domain associated with the identity provider or the provider's UUID. This allows you to integrate SSO authentication into your application, enabling users to sign in using their existing credentials from the connected identity provider."
  },
  {
    "chunk_id": "112596da-9be9-4a10-8a51-a6f1fcfaec45",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the user's refresh token and deletes the JWT from the client-side, but does not revoke the JWT itself, which remains valid until it expires. The `sign_out()` method by default signs out all other sessions the user is logged into under the global scope."
  },
  {
    "chunk_id": "41067a00-2ab4-41d3-a22c-c1e61f13df11",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTP) for different authentication types, such as SMS, email, recovery, invite, and email change. The verification type should match the corresponding auth method used before `verify_otp`. The `TokenHash` contained in the email templates can be used to sign in, and it can also be used with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "8f36fa66-edf6-43c7-98e7-8282538949f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted data source on the server, as it could be tampered with by the client. If verified user data is required, the `get_user()` method should be used instead. The method will also automatically refresh the session if the access token has expired."
  },
  {
    "chunk_id": "041299d8-667c-4f0c-bbe7-fb27211c0bca",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `supabase.auth.refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve it from `get95session()`. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session, whether it is expired or not."
  },
  {
    "chunk_id": "01d6ccde-e83e-4362-823e-8a519679eb46",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. This method can be used to either get the logged-in user with the current existing session or with a custom access token JWT provided as an optional parameter."
  },
  {
    "chunk_id": "6467bc70-fdaf-42bb-a012-4d7050e71661",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data by taking an `access_token` and `refresh_token` as parameters. If the current session is expired or the tokens are invalid, it will automatically refresh the session. Upon successful execution, a `SIGNED_IN` event is emitted. This method is used to refresh the session and maintain the user's authentication state."
  },
  {
    "chunk_id": "609efd94-133f-4163-beaa-212d3657a373",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "This section covers the Multi-Factor Authentication (MFA) methods supported by Supabase, which currently include time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to 10, to provide a recovery mechanism without the need for separate recovery codes, reducing the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "1d0e0461-b56d-4e9a-98b4-072ec78bc4ca",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `mfa.enroll()` function enrolls a time-based, one-time password (TOTP) factor, which is currently the only supported `factor_type`. The returned `id` can be used to create a challenge, which can be verified using the `mfa.verify()` function or the `mfa.challenge_and_verify()` function that combines challenge creation and verification in a single step."
  },
  {
    "chunk_id": "d095f39c-6fa7-430e-be76-67f5ee6847cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge is verified using the `mfa.verify()` function, which takes the factor_id as a parameter."
  },
  {
    "chunk_id": "b04caabe-c0bd-44ce-ad55-55fbb045eb05",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge by following the instructions in the \"Create a challenge\" documentation. The code example demonstrates how to verify a challenge by providing the factor_id, challenge_id, and code. This process is necessary to authenticate users with multi-factor authentication (MFA)."
  },
  {
    "chunk_id": "1226573d-2dd5-4cfb-8aa2-4b6931477510",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` method executes the `mfa.challenge()` and `mfa.verify()` functions in a single step, taking a factor_id and a code as input parameters."
  },
  {
    "chunk_id": "40d71802-a059-4114-a95e-afd7d5710b62",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to unenroll a multi-factor authentication (MFA) factor by specifying the `factor_id` parameter in a call to the `supabase.auth.mfa.unenroll()` function. This allows users to remove a previously enrolled MFA factor, which can be useful for managing their authentication settings."
  },
  {
    "chunk_id": "f882a871-3328-43f0-9e19-3a491955bad3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field in the API response indicates the higher level of authentication the user can achieve, either AAL1 or AAL2, depending on whether the user has a verified factor."
  },
  {
    "chunk_id": "5aa144ca-2042-49fc-b997-755c07427879",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "To invoke a Supabase Edge Function, you need to provide an Authorization header. The function can accept a body of various data types, which will automatically have the appropriate Content-Type header attached. You can also override this behavior by specifying your own Content-Type header. The summary demonstrates a basic example of invoking a Supabase Function named \"hello-world\" with a custom request body."
  },
  {
    "chunk_id": "3f794679-b9f8-48a2-b5e6-cd3b85407e9c",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The documentation covers subscribing to a Supabase channel, which allows listening to broadcast messages, presence sync, and database changes. By default, Broadcast and Presence are enabled, but listening to database changes is disabled for new projects. Developers can configure the REPLICA IDENTITY and enable row-level security to control the data sent to clients. The provided code example demonstrates how to subscribe to a channel, send a broadcast message, and handle incoming broadcast events."
  },
  {
    "chunk_id": "51af55c3-d265-4f56-9f0c-dbe6728a16cd",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a channel is recommended to maintain performance of the Realtime service and the database, as unused channels can degrade performance with more clients subscribed. The `supabase.remove_channel(myChannel)` function can be used to remove a channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "00d19c7d-e77e-482e-9bcc-4ee0d04e7cd3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database, as Supabase will automatically clean up disconnected channels after 30 seconds. The `supabase.remove_all_channels()` function can be used to remove all channels, which helps prevent performance degradation when more clients are subscribed to unused channels."
  },
  {
    "chunk_id": "420a1151-c216-4b21-be8a-39f18b7ae516",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code `_10  channels = supabase.get_channels()` retrieves all the channels from a Supabase database. This functionality allows users to easily access and work with the complete set of available channels in the application."
  },
  {
    "chunk_id": "ca2d07bc-6b71-4f04-9cc1-60aceb8060d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. It provides an example of subscribing to a channel, then sending a broadcast message with random cursor position data. This functionality allows for real-time updates and collaboration between connected clients within a specific channel or room."
  },
  {
    "chunk_id": "289d2611-1e2e-4af6-8091-2e8c14ada88d",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required permissions are: 'insert' permission on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for details on how access control works. The code to create a bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "117f4347-6a4d-48e4-ba56-c56ec7ff0eee",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on how access control works. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "7fc0288e-43e8-4786-8426-64ff61f2c16e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, you need the `select` permission on the `buckets` table. No permissions are required on the `objects` table. Refer to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "71471b68-1233-42fd-8793-c0e455f97603",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required permissions are `select` and `delete` on the `buckets` table, and no permissions are needed on the `objects` table. Refer to the Storage guide for more information on access control. The code to delete a bucket is `_10  res = supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "95e64b7d-abfa-44df-acdb-01f83a6decc3",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "d8242d91-0c31-40a5-a52b-527cf595d673",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires `insert` permissions on the `objects` table. The appropriate MIME type should be specified, especially for image or audio files, and the file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` function, providing the file path and the desired path on Supabase Storage. The Storage guide provides more information on access control for Supabase Storage."
  },
  {
    "chunk_id": "a4997db2-87ac-4b28-b154-9e163892c8d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table, and `select` permissions for the `objects` table. The process involves using the Supabase storage client to download the file from a specified bucket and write it to a local destination."
  },
  {
    "chunk_id": "a20f3a7c-4cc7-4505-9b67-e33b1f99082a",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions must have `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "2c804056-1335-41e3-8b8f-bafd8a66afed",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, you need the `update` and `select` permissions on the `objects` table. The file is updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file data, the path on Supabase storage, and optional file options such as cache control and upsert behavior."
  },
  {
    "chunk_id": "f26f715e-0a17-4cc5-9d8f-54a5fc2441dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires 'update' and 'select' permissions on the 'objects' table. The function `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` can be used to move a file from the 'public/avatar1.png' path to the 'private/avatar2.png' path within the specified storage bucket."
  },
  {
    "chunk_id": "6e9d9758-8569-4cf6-8d2a-5fd4aef638ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The RLS policy permissions needed are none for the `buckets` table and `delete` and `select` for the `objects` table. Refer to the Storage guide for details on access control."
  },
  {
    "chunk_id": "71666d7b-c258-4506-b1b1-f94bcf18122e",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the user requires `select` permissions on the `objects` table, but no permissions on the `buckets` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method and allows secure, time-limited access to the specified file in the storage bucket."
  },
  {
    "chunk_id": "4cb5f3f1-6103-4141-94d8-1d88a987c3d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-mfa-getauthenticatorassurancelevel",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public either via the `updateBucket()` function or the Supabase dashboard. No permissions are required for the `buckets` or `objects` tables. The `get_public_url()` function can be used to retrieve the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "5459f94d-5a82-4233-9799-df46c343992a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of functions for interacting with the Supabase platform. It enables developers to manage their Postgres database, listen to real-time changes, invoke Deno Edge Functions, implement login and user management, and handle large file uploads, all within a Python-based environment."
  },
  {
    "chunk_id": "331c61e5-e4a4-4646-a596-f8495c9342b7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The section describes how to install the Supabase-py library, which is used for interacting with the Supabase platform. It provides instructions for installing the library via the PyPi package manager, which can be done using pip or conda package managers in the terminal, for Python versions greater than 3.7."
  },
  {
    "chunk_id": "55661b59-2a74-4e76-a191-826191ff9588",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase client is the primary interface for interacting with the Supabase ecosystem. It can be initialized using the `create_client()` method, which requires the Supabase URL and API key. Additional options can be provided to customize the authentication behavior. The Supabase client serves as the entry point to the full suite of Supabase functionality."
  },
  {
    "chunk_id": "16fe420b-14a5-40d9-8d24-54f8d428454c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be changed in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` keyword should be avoided as a column name when using the Supabase Platform. The `select()` function allows you to retrieve specific columns or all columns (`*`) and provides options to count the number of rows returned."
  },
  {
    "chunk_id": "d1dee329-8d5b-4645-877c-fbc01e94fb99",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation covers the 'Insert data' functionality, which allows users to insert data into a database table. The key parameters are 'jsonRequired' to specify the data to insert (as a single dictionary or a list of dictionaries), 'countOptional' to control the count of returned rows, 'returningOptional' to customize the response format, and 'default95to95nullOptional' to control the handling of missing fields. An example is provided demonstrating how to insert a single row into the 'countries' table."
  },
  {
    "chunk_id": "678458f4-3ed7-495f-9809-e99cd30975b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase client library is used to update data in a table, and should always be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or list of values to update, and an optional count method parameter to get the count of rows affected."
  },
  {
    "chunk_id": "92808498-ee3f-429c-8da6-3e9d52360ef2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Upsert data\" section describes the functionality of the Supabase upsert operation, which allows inserting or updating data in a table based on the provided primary keys. Key parameters include the data to be inserted, options for handling conflicts and defaults, and examples of how to perform upsert operations in Supabase."
  },
  {
    "chunk_id": "e095f17b-1a2c-4851-acb6-3171edceaf3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `delete()` method in Supabase must be used with filters to target the specific items to be deleted. When using row-level security (RLS), only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple rows with a single query by specifying an array of values. The `countOptionalCountMethod` and `returningOptionalReturnMethod` parameters can be used to control the count and return behavior of the delete operation."
  },
  {
    "chunk_id": "b1e2dfce-b711-4679-af67-d9a5809c1138",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to call Postgres functions as remote procedure calls, which can be useful for logic that rarely changes, such as password resets and updates. It provides details on the parameters that can be used, including the required function call, optional parameters, and count algorithms for set-returning functions. Examples are given for calling a Postgres function without arguments, with arguments, with filters, and in read-only mode."
  },
  {
    "chunk_id": "2dadad8d-d52f-49ef-b73f-46f197779221",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions, and can be used with various Postgres query types, including `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other query operations is important, as demonstrated in the provided code examples."
  },
  {
    "chunk_id": "2eab3aea-a02d-469c-99c5-7ca04e30eb3d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe `eq()` function in the Supabase client library allows filtering rows in a database table where a specific column is equal to a provided value. The `columnRequired` parameter specifies the column to filter on, while the `valueRequired` parameter defines the value to match against. This functionality can be used in conjunction with the `select()` function to retrieve only the rows that satisfy the equality condition."
  },
  {
    "chunk_id": "2422cc85-3da6-4964-9150-e7d5d90d133b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis documentation describes the 'neq' (not equal) filter, which allows you to match rows where a specified column is not equal to a given value. The 'neq' filter is used with the 'select()' method, and the parameters are the column name and the value to filter by. This can be useful for querying a table and excluding specific rows based on the value of a particular column."
  },
  {
    "chunk_id": "87d98b09-0070-4b37-a93b-ab36067bd8a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column has a value greater than a given value. The relevant parameters are the column name and the value to filter by. An example is provided using the Supabase library's `select()` method with the `gt()` (greater than) function."
  },
  {
    "chunk_id": "76129a3a-5d81-486f-b7bb-1c9dcef1baea",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation section describes how to filter a database table by selecting only rows where a specified column is greater than or equal to a given value. The key parameters are the column name and the filter value, and an example is provided using the Supabase library's `gte()` method to achieve this filtering."
  },
  {
    "chunk_id": "71b369ea-cce5-4f55-a3a7-5befffb25465",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is:\n\nThis documentation describes a database query operation that filters rows where a specified column has a value less than a given value. The parameters include the column name and the value to filter by, and an example is provided using the `select()` and `lt()` (less than) functions in Supabase."
  },
  {
    "chunk_id": "2b39e412-5794-4b43-8e04-8982e3f6364d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content summarizes a method to filter a table by a column value that is less than or equal to a specified value. The key parameters are the column name and the value to filter by. An example is given using the Supabase library's `lte()` method to filter a \"countries\" table by an \"id\" column with a value less than or equal to 2."
  },
  {
    "chunk_id": "dd5bb63d-0428-4cbf-a9ce-2d29a4968035",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe 'Column matches a pattern' feature allows you to filter rows in a table where a specified column matches a provided pattern case-sensitively. The parameters required are the column name and the pattern to match against. This functionality can be used with the Supabase `select()` method, as shown in the example, to retrieve rows that match the specified pattern."
  },
  {
    "chunk_id": "d612480d-2e4e-4af4-b68e-fd87604287b6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column matches a case-insensitive pattern\" feature allows filtering a table's rows where a specified column matches a given pattern case-insensitively. The two required parameters are the column name and the pattern to match against. This functionality is demonstrated using the Supabase `ilike()` function, which performs a case-insensitive pattern match on the \"name\" column of the \"countries\" table."
  },
  {
    "chunk_id": "52b3d5b2-eed9-4b0a-8de0-271bd01c66ce",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the provided content is:\n\nThe `is_()` function allows filtering a database table by checking if a column value matches a specified value, including null, true, or false. The function takes two required parameters: the column name and the value to match."
  },
  {
    "chunk_id": "c87e594d-4a26-4f5f-8e01-3ad8e6bc26e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the \"in_\" filter operation in the Supabase library, which allows filtering rows where the value in a specified column is included in a given array of values. The parameters for this operation are the column name to filter on and the array of values to match against."
  },
  {
    "chunk_id": "9ef2f89d-21f5-4715-a92a-cdd28c8b9c58",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" filter is applicable to jsonb, array, and range columns, allowing you to match rows where the column contains every element in the specified value. The filter takes two parameters: the column name and the value to filter with, which can be a jsonb object, array, or range. This is useful for operations such as filtering an \"issues\" table by tags that contain \"is:open\" and \"priority:low\"."
  },
  {
    "chunk_id": "4a04123e-f27c-418d-9a69-092e34398c93",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` operation is used to filter rows in a jsonb, array, or range column where every element in the column is contained within the specified `value`. This is useful for querying data where the column contains a set of values, such as an array of weekdays. The operation takes two parameters: the column name and the value to filter against."
  },
  {
    "chunk_id": "6a0f6354-2fe0-4232-8107-9a9ef1934bc4",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used for range columns in Supabase. It matches rows where every element in the specified column is greater than any element in the given range. The filter is applied using the `range_gt()` method, which takes the column name and a range array as parameters."
  },
  {
    "chunk_id": "6aaac695-a177-4c7f-bf83-c824ec81c91d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature is relevant for range columns in a database. It allows filtering rows where every element in the specified column is either contained within the given range or greater than any element in the range. The feature is used by calling the `.range_gte()` method on a Supabase table, passing the column name and the range to filter with."
  },
  {
    "chunk_id": "edc7ed57-a774-4368-b9f0-b8574e3f2b1d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is only applicable to range columns. It allows filtering rows where every element in the specified column is less than any element in the provided range. The feature is configured by passing the column name and the range to filter with, as demonstrated in the example using the `range_lt()` method."
  },
  {
    "chunk_id": "13283140-9a5e-4ca2-b67f-5465c79865ed",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used with range columns to match rows where every element in the specified column is less than or equal to any element in the provided range. The filter is configured by passing the column name and the range array as parameters, and can be used in the `select()` method of a database query."
  },
  {
    "chunk_id": "419bc38b-b2ca-43fe-a51c-c94543ca04ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is applicable only for range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The feature is parameterized by the column name and the range to filter with, and can be used in the `range_adjacent()` method of the Supabase query builder."
  },
  {
    "chunk_id": "0f9c8d61-ef5f-47e1-be2c-1d43a62bac15",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis functionality is only applicable to array and range columns. It allows filtering rows where the 'column' and 'value' parameters have an element in common. The 'columnRequired' parameter specifies the array or range column to filter on, while the 'valueRequired' parameter specifies the array or range value to filter with. Examples are provided for using this feature on both array and range columns."
  },
  {
    "chunk_id": "28ba5ffb-de6f-40f6-897f-23e28947e8b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Match a string\" functionality, which is specifically for text and tsvector columns in a database. It allows you to filter rows where the specified column matches the provided query string, using Postgres full-text search capabilities. The summary includes the required parameters (column and query) and the optional \"options\" parameter, which allows you to configure the search behavior, such as normalization and search mode."
  },
  {
    "chunk_id": "7da23a02-73d8-4ee3-a9e2-6d1b8de4946e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows you to filter a table by matching rows where each column in the `query` object has an equal associated value. This is a concise way to perform multiple equality checks on a table, rather than chaining multiple `.eq()` calls. The `match()` method takes a `queryRequired` object as a parameter, where the keys are column names and the values are the filter values to match."
  },
  {
    "chunk_id": "52f52698-a3ec-408a-8b4c-6da183817f88",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content discusses how to use the `not_` operator in PostgREST to match only rows that do not satisfy a given filter. Examples are provided for using `not_.in_()` to exclude specific IDs and `not_.contains()` to exclude array values. Additionally, the summary shows how to use `not_.is_()` with the `select()` function to retrieve rows where the \"name\" column is not null."
  },
  {
    "chunk_id": "a53ef6dd-a5b1-4e41-9322-93d6d64071e7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() method in the Supabase API allows matching at least one filter, using the raw PostgREST syntax for the filter names and values. It supports various filter types like in, contains, and containedBy, and can be used to filter on the parent table or referenced tables. The or() method can be combined with the and() method to create complex filter combinations."
  },
  {
    "chunk_id": "85db2f1d-df7f-419f-93ee-12590994d38e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary:\n\nThe `filter()` method in Supabase's API expects the use of raw PostgREST syntax for filter values. It supports various operators like `in` and `contains()`, with the ability to filter on specific columns and provide array values using the appropriate syntax (e.g., `(5,6,7)` for `in` filter, `\\{\"a\",\"b\"\\}` for array values). The `select()` method can be used in conjunction with `filter()` to retrieve data from a foreign table based on the specified filter criteria."
  },
  {
    "chunk_id": "43153038-a51c-462e-8942-6236dfb514ef",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow you to change the format of the response, such as returning a CSV string, rather than operating at the row level. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "0fd42039-b0fc-4f44-bd76-50ba72c25fd0",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content provides information on ordering query results by a specified column. The key parameters are `column` to order by, `desc` to specify descending order, `foreign_table` to order results from a foreign table, and `nulls_first` to order nulls first. An example is provided showing how to order the results from a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "6ae7ccdd-9fc5-4cba-b279-9bd43de57be2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `limit()` function in the Supabase library allows you to specify the maximum number of rows to return from a database table query. This is useful for pagination or limiting the amount of data returned. The `limit()` function takes a single numeric parameter specifying the maximum number of rows, and can be used on both the main table and any foreign tables referenced in the query."
  },
  {
    "chunk_id": "84918993-668e-4773-b288-df8b2070cdc6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the query result by specifying a range using the `from` and `to` parameters. The `from` and `to` values are 0-based and inclusive, allowing you to retrieve a specific subset of records. This is useful for pagination or when you only need a portion of the query results."
  },
  {
    "chunk_id": "29db21c1-a165-42f5-93e6-0e22264f0113",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve a single row of data from a table using the Supabase library's `select()` method. By calling `limit(1)` and `single()`, the method returns the data as a single object rather than an array of objects, which can be more convenient for certain use cases."
  },
  {
    "chunk_id": "0a89eebb-5419-4910-a3f1-ee6addb8e7d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the ability to retrieve zero or one row of data using the Supabase library's `maybe_single()` method. This allows returning the data as a single object instead of an array, which can be useful when expecting at most one matching record. The example demonstrates querying the \"countries\" table and filtering by the \"name\" column to retrieve a single row of data."
  },
  {
    "chunk_id": "7f3f27fe-f695-4609-ae5d-16a0069c0be2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The content summarizes the \"Retrieve as a CSV\" functionality, which allows users to return the data from a Supabase table as a string in CSV format. This can be achieved by calling the `csv()` method after the `select()` operation, and the resulting response will contain the CSV data. This feature is useful for exporting data in a tabular format for further processing or analysis."
  },
  {
    "chunk_id": "6308caed-96f9-4866-9e58-7bca6f0580ce",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `explain()` method in Postgres allows you to get the execution plan of a query, which is useful for debugging slow queries. It can reveal sensitive information, so it's best to only enable it for testing environments, but it can be protected in production using a pre-request function. The `explain()` method supports several parameters, such as `verbose`, `settings`, `format`, and `analyze`, which allow you to customize the output and include additional information like buffer usage and actual run time."
  },
  {
    "chunk_id": "bfb36686-12f5-4af5-92f6-17366f588bfd",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation discusses creating a new user in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled. It also covers the behavior when the \"Confirm email\" setting is enabled or disabled, and how to fetch the currently logged-in user. Additionally, it provides information on different sign-up options, such as signing up with an email and password, a phone number and password, or additional user metadata."
  },
  {
    "chunk_id": "d6ed46a6-0f4e-40ce-9f75-57232ed2f338",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The function `supabase.auth.sign_in_anonymously()` creates an anonymous user with optional custom metadata. It is recommended to use a captcha token in the `options` parameter to prevent abuse of anonymous sign-ins. The function returns an anonymous user, which can be useful for providing access to certain features without requiring a full user account."
  },
  {
    "chunk_id": "84f87c5f-9fbe-4fb0-9bd8-aede061d4828",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user by providing either an email and password or a phone number and password. The required parameters are 'credentialsRequiredSignInWithPasswordCredentials', and the example code demonstrates signing in with email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "1e52eed0-5caa-40a4-9021-a812b7e221f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in using an OIDC ID token, which is a common authentication method. It provides the necessary parameters and an example code snippet for signing in with an ID token from a provider like Google. This functionality allows users to authenticate using their existing OIDC credentials, simplifying the sign-in process."
  },
  {
    "chunk_id": "760ce062-4f5b-4f7e-ad1d-046d721588ac",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP feature allows users to authenticate without a password, by sending a one-time code to their email or phone number. This method can be used for both new user sign-ups and existing user sign-ins. Developers can configure whether the user receives a magic link or an OTP, and have control over the redirect URL. The implementation for magic links and OTPs is the same, and the OTP can be sent by modifying the email template."
  },
  {
    "chunk_id": "e2ae4ed4-f350-410c-b76a-52e1f76b60ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The documentation describes how to sign in a user through OAuth, a third-party authentication method supported by Supabase. It includes details on the `sign_in_with_oauth()` function, which takes a `provider` parameter to specify the third-party provider, such as GitHub. This OAuth integration allows users to authenticate with Supabase using their existing third-party credentials, simplifying the sign-in process."
  },
  {
    "chunk_id": "5575ba01-8c94-4dee-ad27-48a7e328e3f9",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the provided CLI commands. You can then use either the `domain` property to start the sign-in flow for a specific email domain, or the `provider_id` property to use a different method for identifying the identity provider, such as mapping specific user email addresses or using company-specific hints."
  },
  {
    "chunk_id": "08c16131-7d38-4f2e-8914-0b3c87637477",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called, which revokes the refresh token and deletes the JWT from the client-side, effectively logging the user out of all sessions. However, the access token JWT remains valid until its expiration, and signing out does not revoke the JWT itself."
  },
  {
    "chunk_id": "48dedcbc-18ec-4559-97da-dc62664d9452",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for user authentication, supporting different verification types such as SMS, email, and phone number changes. The method takes in a `token` and `type` parameter to specify the type of verification, and the response can be used for server-side auth flows like the PKCE flow. The appropriate verification type should be determined based on the corresponding auth method called before `verify_otp` to sign up or sign in a user."
  },
  {
    "chunk_id": "5ff811a5-70df-4757-ab5e-11c1b21d302a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. The method also automatically uses the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "60279883-83ad-4212-9b17-cbb71348419a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. This method is useful when the current session's refresh token is invalid, as it will refresh the session whether it's expired or not."
  },
  {
    "chunk_id": "49bcb4c0-229c-4879-9f4f-821d8fd77a68",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "This method fetches the user object from the database, validating the user's access token JWT on the server. It is useful for checking if the user is authorized to access certain resources. The method can be used to retrieve the logged-in user either with the current existing session or by providing a custom access token JWT."
  },
  {
    "chunk_id": "55ed5fec-3ee5-4486-9cba-04b0d0843f3f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session` method sets the current session by taking an `access_token` and `refresh_token`. If the session is expired or the tokens are invalid, it will handle refreshing the session. Upon successful completion, a `SIGNED_IN` event is emitted. This method is used to maintain the user's authentication state within the application."
  },
  {
    "chunk_id": "8696edac-c312-41e4-8888-e1571688cd7e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The Supabase Auth MFA section provides methods for implementing Multi-Factor Authentication, specifically supporting time-based one-time password (TOTP) as the secondary factor. Users can enroll multiple TOTP factors for recovery, which eliminates the need to store recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "b3ad764e-3312-4a7c-b406-e9cac4299818",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `mfa.enroll()` function enrolls a time-based, one-time password (TOTP) factor, which is the only supported `factor_type` currently. The returned `id` is used to create a challenge, which can be verified using `mfa.verify()`. Alternatively, `mfa.challenge_and_verify()` can be used to create and verify a challenge in a single step."
  },
  {
    "chunk_id": "e595c73b-096c-414f-929a-5ac2c481d076",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create an MFA challenge, you must have an enrolled factor. The `mfa.challenge()` function creates a challenge for a specific factor identified by its `factor_id`. The challenge can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "937b2b76-f0bc-4192-b4f1-1bb789661f85",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. The `supabase.auth.mfa.verify()` function can then be used to verify a challenge by providing the `factor_id`, `challenge_id`, and the `code` received from the user."
  },
  {
    "chunk_id": "d6fb34e4-ca9d-4705-808a-52ad17b4060a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, taking a factor_id and a code as input parameters."
  },
  {
    "chunk_id": "1b077d08-d586-41ec-bc50-7aefb36d5f17",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to unenroll a factor from Supabase's multi-factor authentication (MFA) system. The code uses the `supabase.auth.mfa.unenroll()` function, which takes the `factor_id` as a parameter to identify the factor to be unenrolled."
  },
  {
    "chunk_id": "30a078e3-6315-4b7f-b627-cc2e3551d29f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, with AAL2 returned if the user has a verified factor, and AAL1 returned otherwise. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "85fea809-d807-40cf-8d43-8e17049df05d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function by making a request to the Supabase Functions service. Requires an Authorization header, and automatically attaches the appropriate Content-Type header based on the request body type. Allows passing custom headers and a request body, as demonstrated in the example."
  },
  {
    "chunk_id": "f10c778f-63c4-46ad-85b2-ec59665182c7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Broadcast and Presence are enabled by default for all Supabase projects, but listening to database changes is disabled by default due to performance and security concerns. \n2. Clients can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL.\n3. Row-level security (RLS) is not applied to delete statements, and only the primary key is sent to clients when RLS is enabled and replica identity is set to full.\n4. The provided code example demonstrates how to subscribe to different Realtime events such as broadcast messages, presence sync, and database changes, and how to handle those events."
  },
  {
    "chunk_id": "759b9806-4445-488d-82af-2cfa4653ebd8",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is an important task to maintain project performance and database efficiency. Removing an unused channel automatically cleans up the Realtime service and Postgres changes, preventing degradation from too many simultaneous subscriptions. The `supabase.remove_channel()` function is used to unsubscribe from a channel."
  },
  {
    "chunk_id": "2ebd277c-7755-4e4d-894b-5ca1590b972c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the database, as unused channels can cause degradation with more clients being subscribed. Supabase automatically handles the cleanup of disconnected clients after 30 seconds, but manually removing all channels with `supabase.remove_all_channels()` can help optimize the application's resource usage."
  },
  {
    "chunk_id": "362143ec-0eb0-4e47-856f-0607b8b534fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary for the given content is:\n\nThe `supabase.get_channels()` function retrieves all available channels. This allows developers to access and work with the complete set of channels in their application."
  },
  {
    "chunk_id": "3b381fcc-5a1c-4c15-a80d-00f2b36996a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe code snippet demonstrates how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and upon successful subscription, it sends a broadcast message containing randomly generated x and y coordinates to all connected clients."
  },
  {
    "chunk_id": "1abca46f-2881-4328-9098-3b95adf74916",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the required permissions are `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on Supabase's access control mechanisms. The code to create a bucket is `_10  res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "9a67ce24-7f62-471c-a98a-867c4bb197cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for information on access control. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "439409dd-dd22-4e1f-b28a-dd9e422be6d7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the `select` permission on the `buckets` table is required, but no permissions are needed on the `objects` table. Refer to the Storage guide for more information on how access control works."
  },
  {
    "chunk_id": "cbf611c2-bf08-40d7-a9cc-689b01ea86f1",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the user requires `select` and `delete` permissions on the `buckets` table. No permissions are needed on the `objects` table. The deletion process is performed using the `supabase.storage.delete_bucket(name)` function."
  },
  {
    "chunk_id": "070d8a7f-5365-4700-80af-e2c6480d9a4d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. The process can be done using the `supabase.storage.empty_bucket(name)` function, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "c6a3ed28-aa52-4fec-88ca-fe204a7170d6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires `insert` permissions on the `objects` table. The appropriate MIME type should be specified, especially for images or audio files. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and the desired storage path, along with the relevant file options, such as the content type."
  },
  {
    "chunk_id": "7e2136ea-e23a-4771-b36d-96e5a9b03419",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase storage, the user needs the 'select' permission on the 'objects' table. The file can be downloaded using the `supabase.storage.from_('bucket_name').download(source, destination)` function, which writes the downloaded content to the specified local file."
  },
  {
    "chunk_id": "30d3d6cd-a6a9-4e8c-b8dd-2757ac161970",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The list() method on the storage.from_() client can be used to retrieve the file list, as shown in the example code."
  },
  {
    "chunk_id": "3c80a8bb-bdc4-4f17-b7be-6ffaf2b80a0b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires the `update` and `select` permissions on the `objects` table. The file is updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file content, the path on Supabase Storage, and optional file options like cache control and upsert."
  },
  {
    "chunk_id": "ebbbacab-a9b7-4424-aafe-ceae10b418eb",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are `update` and `select` on the `objects` table. The operation is performed using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` command, and the Storage guide provides more information on access control."
  },
  {
    "chunk_id": "2bbf8ed1-8787-4471-a885-a5bf355f3003",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The Storage guide provides details on access control. The code snippet `supabase.storage.from_('bucket_name').remove('test.jpg')` demonstrates how to delete the file 'test.jpg' from the specified bucket."
  },
  {
    "chunk_id": "f55545d3-32d0-4dee-adbe-ed9d207b2288",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required permissions are `select` on the `objects` table. The signed URL allows time-limited access to a specific file in the storage bucket, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "813a70dc-e22e-422c-a206-d3d6e29ad7bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-getuser",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must be set to public either through the updateBucket() method or the Supabase dashboard. No specific permissions are required in the buckets or objects tables. The public URL can be obtained using the get_public_url() method, passing the file path as an argument."
  },
  {
    "chunk_id": "af1dc520-1bb1-4179-9c58-d2c1940f0019",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library provides a Python interface to interact with Supabase, a Postgres-based database service. It allows developers to perform various tasks such as interacting with the Postgres database, listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files."
  },
  {
    "chunk_id": "bd0d30bc-e3f4-496b-a8b4-ed35127ec547",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation describes how to install the Supabase Python library (supabase-py) using the PyPi package manager. The installation can be done via the terminal or a Python package manager like pip or conda, and is suitable for Python versions 3.7 and above."
  },
  {
    "chunk_id": "e8cc2f8d-0423-4da4-8060-a0265c0479ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the main entry point for interacting with the Supabase ecosystem. It can be initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, as well as optional client options to configure the authentication behavior. The Supabase client provides access to all of the Supabase functionality, making it the primary way to interact with the Supabase platform."
  },
  {
    "chunk_id": "4cfe17d2-1f5c-46e6-8e2f-e39a4819a80c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Supabase projects by default return a maximum of 1,000 rows, which can be changed in the project's API settings. The `select()` function can be combined with filters and modifiers to fetch specific data, and the `apikey` keyword should be avoided as a column name when using the Supabase Platform. The `select()` function supports parameters like `columns` to retrieve specific columns and `count` to get the count of rows returned."
  },
  {
    "chunk_id": "e64547d6-2071-4e56-b1ea-46a8df8f6475",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Insert data\" section describes the parameters for inserting data into a table using the Supabase library. The `jsonRequired` parameter accepts a dictionary or list of dictionaries representing the data to be inserted. The `countOptional` and `returningOptional` parameters control the response format. The `default95to95nullOptional` parameter can be used to set missing fields to `null` during bulk inserts. An example of inserting a single record is provided."
  },
  {
    "chunk_id": "2150d018-8c86-4328-9794-e3f4de2ce209",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the documentation is used to update existing data, and it should always be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted, and an optional `countOptional` parameter to get the count of rows returned."
  },
  {
    "chunk_id": "b20a3978-9079-4b8e-8fac-4a387aed1013",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'upsert' function allows you to insert or update data in a table based on primary key values provided in the 'values' dict. Key parameters include 'returning' to specify the response format, 'ignore_duplicates' to handle duplicate rows, and 'default_to_null' to set missing fields to null for bulk inserts. Example code demonstrates upserting a single row into a 'countries' table."
  },
  {
    "chunk_id": "be839a8d-c4d8-4e7a-8568-c2059b10d1d5",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Summary:\n\nThe `delete()` operation in Supabase should always be combined with filters to target the specific items to be deleted. When using `delete()` with RLS (Row-Level Security) enabled, only rows visible through `SELECT` policies will be deleted. The `delete().in_()` method allows deleting multiple rows with a single query by specifying an array of values, which is useful for batch deletions based on common criteria."
  },
  {
    "chunk_id": "20310e5a-0b70-4126-960b-57d800e5ab5c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: You can call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. The Supabase library provides a `rpc()` method to call Postgres functions, with optional parameters for passing arguments, returning data, and controlling the count algorithm."
  },
  {
    "chunk_id": "5fc4d99e-0a59-4762-bbdf-9099a66595ea",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specific conditions in Supabase queries (select, update, upsert, and delete). Filters can be chained and used on Postgres functions that return table responses. The order of applying filters is important, as demonstrated in the provided code examples."
  },
  {
    "chunk_id": "fdd36072-5b5f-4c7c-bd3f-6d13f1bde114",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a table by matching rows where a specific column is equal to a given value. The `eq()` method is used to apply this filter, with the column name and value as parameters. This is a common operation when querying data in a database."
  },
  {
    "chunk_id": "9342ef7c-77da-46ae-9dd4-62f3667ab99c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes the `neq()` function in Supabase, which filters a table by selecting only the rows where a specified column is not equal to a given value. The function takes two required parameters: the column name and the value to filter by. This allows developers to easily exclude certain rows from their queries based on a specific condition."
  },
  {
    "chunk_id": "65d5f14b-b6a3-4c0a-86fd-4569700eceae",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation describes how to filter a database table by a column value, where the column value is greater than a specified value. The key parameters are the column name and the comparison value. Using the `gt()` method in the Supabase library, you can execute a query to retrieve rows where the specified column has a value greater than the provided value."
  },
  {
    "chunk_id": "c79f0340-c471-4f76-adb0-6c8d8ae3d6bf",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis filter matches rows where the specified column is greater than or equal to the provided value. The two required parameters are the column name and the value to filter by. This functionality can be used with the `select()` method, as shown in the example, to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "fa148d59-8051-4b5b-a4f4-1d2f2cf31ea0",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "This feature allows filtering a table by a column value being less than a specified value. The required parameters are the column name and the value to filter by. This can be used with the `select()` method, as shown in the example where rows with an \"id\" less than 2 are selected from the \"countries\" table."
  },
  {
    "chunk_id": "beb57af9-ffdc-4613-9666-290f82f58c7d",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `lte()` function filters a database table to include only rows where the specified `column` has a value less than or equal to the provided `value`. This is demonstrated in the example of selecting all rows from the \"countries\" table where the \"id\" column is less than or equal to 2."
  },
  {
    "chunk_id": "960a7e60-8beb-4ec0-9d6e-32b1fd2a1a57",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe \"column matches a pattern\" feature allows you to filter a database table by matching rows where a specified column matches a given pattern, case-sensitively. The required parameters are the column name and the pattern to match, and the feature can be used with the `select()` method, as shown in the example."
  },
  {
    "chunk_id": "37d286ea-a692-4286-858b-413a90824c13",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `ilike()` function in Supabase allows you to perform a case-insensitive pattern match on a specific column. It takes two required parameters: the column name (`columnRequired`) and the pattern to match (`patternRequired`). This can be useful for filtering data based on a case-insensitive search, as demonstrated in the example where the countries table is filtered to only include rows where the name column matches the pattern \"%alba%\"."
  },
  {
    "chunk_id": "62d629ce-f54d-41dd-9eb9-24c86eddbf18",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The 'Column is a value' section describes a filter operation in a database API, where users can match rows based on the value of a specific column. The key parameters are the column name and the value to match, which can be null, true, or false. This functionality allows users to effectively filter and retrieve data based on specific column values."
  },
  {
    "chunk_id": "f45c739b-5f9c-48fb-8d4e-ea7ed7df9968",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the `in_()` function in the Supabase library, which allows filtering a table by checking if the value in a specified column is included in a provided array of values. The function takes two required parameters: `column`, the name of the column to filter on, and `values`, the array of values to filter by."
  },
  {
    "chunk_id": "c0c7e57a-ff3c-4888-8267-d0551bade07b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` filter is used to match rows where the specified column contains every element in the provided JSON, array, or range value. This is applicable for jsonb, array, and range columns. The filter takes two parameters: the column name and the value to match against."
  },
  {
    "chunk_id": "757c95c5-71c5-4ebc-9391-5a8a27ecc806",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"contained by value\" operation is applicable to jsonb, array, and range columns. It filters rows where every element in the specified column is contained within the provided value. For example, you can use this to find classes that are held on specific days of the week by filtering the \"days\" column with an array of weekdays."
  },
  {
    "chunk_id": "34beac0d-d4bc-43a6-97d2-4617abfe16f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used for range columns in Supabase, allowing you to match only rows where every element in the specified column is greater than any element in the provided range. The filter takes two required parameters: the column name and the range to filter with, and can be used in the `select()` method to retrieve the relevant data."
  },
  {
    "chunk_id": "69a306da-7484-4c42-9ad6-a2c5098fd17c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe \"greater than or equal to a range\" filter is used for range columns, matching rows where every element in the specified column is either contained in the provided range or greater than any element in the range. The filter is applied using the `range_gte()` method, which takes the column name and a range value as parameters."
  },
  {
    "chunk_id": "b1074c1f-82ea-49c1-9cd3-8ab5e5810fbf",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is only applicable to range columns, allowing you to filter rows where every element in the specified column is less than any element in the provided range. The key parameters are the column name and the range to filter with, as demonstrated in the example using the Supabase library to select rows from the \"reservations\" table where the \"during\" column is less than the given time range."
  },
  {
    "chunk_id": "0b447bb0-66c3-4024-a164-52abab2bed9c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is only applicable for range columns. It allows you to filter rows where every element in the specified column is less than or equal to any element in the provided range. The parameters required are the column name and an array representing the range to filter with."
  },
  {
    "chunk_id": "1fa1c997-2358-4578-87bf-06e36ebfc2bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is applicable only for range columns. It allows filtering rows where the value in the specified column is mutually exclusive to the provided range, meaning there can be no element between the two ranges. The key parameters are the column name and the range to filter with, which can be used in the `range_adjacent()` function of the Supabase query builder."
  },
  {
    "chunk_id": "8203130e-7342-44c7-91b2-754b565aedb0",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'With a common element' filter is only applicable to array and range columns. It matches rows where the column and the provided value have at least one element in common. The filter takes two required parameters: the column to filter on and the value to filter with. This can be useful for operations like finding issues with specific tags."
  },
  {
    "chunk_id": "0ab803a9-01dd-4c44-92aa-9f2b7516796a",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The section provides information on the \"Match a string\" feature in Supabase, which allows filtering text or tsvector columns based on a query string. It explains the parameters for the feature, including the column to filter on, the query text to match, and optional parameters for text search configuration. An example is provided demonstrating how to use the feature to perform a full-text search on a \"content\" column."
  },
  {
    "chunk_id": "70a52bba-75ef-43fc-85ec-b77d0049fc3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the Supabase library allows you to filter a table by matching rows where each column in the `query` keys is equal to its associated value. This is a shorthand for multiple `.eq()` calls. The `query` parameter is an object with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "b55fcdfa-fd62-43e2-b64c-f48d66477a93",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation explains how to use the `not_` operator in PostgREST filters to select rows that don't match the specified criteria. This includes examples of using `not_.in_()` for filtering on a list of values and `not_.contains()` for filtering on array values. Additionally, it demonstrates how to use `not_.is_()` in a `select()` query to exclude rows where a column is `null`."
  },
  {
    "chunk_id": "9dd92627-8c49-4205-b215-a854f3af89fe",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the section on \"Match at least one filter\" is as follows:\n\nThe or95() function in Supabase expects the use of raw PostgREST syntax for filter names and values, such as using () for in filters, \\{\\} for array values, and cs/cd for contains()/containedBy() filters. The filtersRequired parameter takes the filters to use, and the reference95table parameter can be set to filter on referenced tables instead of the parent table. The or() function can be used with the and() function to combine multiple filters."
  },
  {
    "chunk_id": "c03739ad-637f-4380-ad41-0dbe6172470c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the provided code expects the use of raw PostgREST syntax for the filter values. This includes using parentheses for 'in' filters and curly braces for array values. The method takes three parameters: the column to filter on, the operator to use, and the value to filter with. The example shows how to use the filter() method on a foreign table to select data where the name is 'Algeria' or 'Japan'."
  },
  {
    "chunk_id": "a39c5404-585e-4d0a-beb8-8dc2e042e026",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, allow users to change the format of the response, such as returning a CSV string, rather than just filtering the rows. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "73d51e54-bf94-4759-a510-6002850724bf",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe \"Order the results\" section describes how to order the query results by a specified column. It includes parameters for the column to order by, whether to order in descending order, the foreign table name, and whether to show null values first. An example is provided that orders the results from a \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "e327d150-5bef-4deb-87b2-32ce4a69fad4",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `select()` method in Supabase allows limiting the number of rows returned from a table using the `limit()` parameter, which takes the maximum number of rows to return as an argument. Additionally, the `foreign95table` parameter can be used to limit rows from a foreign table instead of the parent table."
  },
  {
    "chunk_id": "36194194-b677-485d-a5ae-7c8627e05862",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function in the query can be used to limit the result set to a specified range of records, defined by a starting offset (`from`) and an ending offset (`from + to`). This allows returning only a subset of the full query result, which can be useful for pagination or other scenarios where the entire result set is not needed. The `from` and `to` parameters are 0-based and inclusive, and the function can also be applied to foreign tables."
  },
  {
    "chunk_id": "4336923e-33e7-46d9-84be-3cf6d9dbdb8c",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise explanation of how to retrieve a single row of data using the Supabase library's `select()` method. It demonstrates the usage of the `limit(1)` and `single()` methods to return a single object instead of an array, which can be useful when only a single result is needed."
  },
  {
    "chunk_id": "b8914b8a-2b0e-4c18-8f7a-9cb7b824c83b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `maybe_single()` method in the Supabase library is used to retrieve zero or one row of data from a database table. This is useful when the query is expected to return at most one result, as the response is returned as a single object rather than an array of objects."
  },
  {
    "chunk_id": "79add0c9-0194-4b2f-9a4e-360bfaf833cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes how to retrieve data from a Supabase table in CSV format. It includes an example of how to execute a `select` operation and retrieve the result as a CSV string. This functionality can be useful for exporting data in a tabular format, which can be easily imported into spreadsheet applications or further processed."
  },
  {
    "chunk_id": "ed66c95a-a37c-4b92-913e-ad735bad55b0",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method can be used to get the Postgres query execution plan for debugging slow queries, even for `rpc()` or write operations. While `explain()` is not enabled by default due to potential security concerns, it can be enabled with additional safeguards. The `explain()` method supports various parameters to control the output, such as including WAL record generation, configuration settings, buffer usage, and actual query execution time."
  },
  {
    "chunk_id": "d07f93db-cb3f-4b2c-b9fb-2d9392345775",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, users need to verify their email address before logging in, which can be disabled by turning off the \"Confirm email\" setting. If \"Confirm email\" is enabled, a user is returned but no session, while if disabled, both user and session are returned. Users can be redirected to a custom URL after email confirmation, which can be configured in the project settings. If a user tries to sign up with an existing confirmed account, a fake user object or an error message is returned, depending on the \"Confirm email\" and \"Confirm phone\" settings."
  },
  {
    "chunk_id": "067e83fc-0f5e-4eda-b981-1526a14afaf7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides a code example for signing in anonymously with custom user metadata. The anonymous user feature is useful for allowing users to interact with the system without providing credentials."
  },
  {
    "chunk_id": "e1b97979-6d05-44bc-bdc5-0b3921814e54",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using email and password or phone number and password. It provides the required parameters and an example code snippet to sign in a user with email and password."
  },
  {
    "chunk_id": "f98239df-2d6e-4ff9-8648-f6b9d56005ba",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to sign in to the Supabase service using an OIDC ID token, which allows authentication via a configured provider like Google. The key steps involve calling the `supabase.auth.sign_in_with_id_token()` function and providing the relevant provider and token details."
  },
  {
    "chunk_id": "a26fa4a5-a30b-4a1f-a3ba-127993a95de3",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation explains how to sign in a user through a one-time password (OTP) sent to their email or phone number. This passwordless sign-in method can automatically create a new user if they don't already exist, though this behavior can be disabled. The documentation also covers configuring the OTP to be a magic link or a one-time code, and provides examples of the API call to sign in with OTP."
  },
  {
    "chunk_id": "4fcc9fd4-31d5-4d92-ae76-fdf1a6deeb5f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The content describes how to sign in a user using a third-party OAuth provider in Supabase. It outlines the `sign_in_with_oauth()` method, which takes a provider parameter (e.g. 'github') to initiate the OAuth flow. This allows users to authenticate with their existing third-party accounts, without the need to create a new account on the application."
  },
  {
    "chunk_id": "e60007cc-e033-4aa3-ae17-13dc5328a943",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the CLI commands. You can then use the `domain` property to start the sign-in flow if you've associated an email domain to the identity provider, or the `provider_id` property to use a different way to start the authentication flow, such as mapping specific user email addresses or using company-specific hints."
  },
  {
    "chunk_id": "dff92c83-732c-4f37-b9c1-6cf80358c695",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This method revokes the refresh token and deletes the JWT from the client-side, but the access token JWT will remain valid until it expires. Signing out in the global scope will sign out all other sessions the user is logged into."
  },
  {
    "chunk_id": "e42327ef-a950-46fc-9889-44d7f6437f79",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method verifies one-time passwords (OTPs) for various authentication types, such as SMS, email, and account changes. The verification type should match the corresponding authentication method used earlier. The `TokenHash` from the email templates can be used for signing in users via the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "81ff131b-387e-4bf8-954b-f8fa5a23ec7b",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source on the server, as it could be tampered with. If verified user data is required, the `get_user` method should be used instead. The method will also automatically use the refresh token to get a new session if the access token has expired."
  },
  {
    "chunk_id": "a760ca02-fdf1-4987-8ff1-76cba38990d8",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `refresh_session()` returns a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if none is provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method is useful for refreshing the session whether it has expired or not."
  },
  {
    "chunk_id": "7fcf4148-5643-4a8a-ac6c-0c662aaf75c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"Retrieve a user\" fetches the user object directly from the database rather than the local session, and it validates the user's access token JWT on the server. This is useful for checking if the user is authorized to perform certain actions. The method can be called with an optional access token JWT, and it returns the logged-in user information."
  },
  {
    "chunk_id": "bc7ed43c-3fd7-436c-81ce-b5ec4c772ced",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `setSession()` sets the session data from the current session, refreshing the session if it has expired. It takes an `access_token` and `refresh_token` as parameters and emits a `SIGNED_IN` event upon successful completion. This is a crucial function for maintaining user authentication and session management in the application."
  },
  {
    "chunk_id": "9da6a7b4-31c2-4f2b-96a7-85cd1ac15d3e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers methods for Multi-Factor Authentication (MFA) in the Supabase platform, specifically focusing on time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors for recovery, which reduces the burden of managing recovery codes and provides an additional layer of security compared to a single backup TOTP factor."
  },
  {
    "chunk_id": "e0d35d12-aa73-45fe-805b-483f51f53765",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `mfa.enroll()` function enrolls a TOTP (time-based one-time password) factor, which is currently the only supported `factor_type`. The returned `id` can be used to create a challenge, which can be verified using `mfa.verify()` or created and verified in a single step using `mfa.challenge_and_verify()`."
  },
  {
    "chunk_id": "314a663e-7645-4c21-b426-f4973188b537",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which takes the challenge as input."
  },
  {
    "chunk_id": "68aa994d-b5cc-4803-9f60-808ac9e88a72",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, the user must first create a challenge by following the instructions in the \"create a challenge\" documentation. The summary then provides an example code snippet demonstrating how to verify a challenge using the `supabase.auth.mfa.verify()` function, which requires the `factor_id`, `challenge_id`, and `code` as input parameters."
  },
  {
    "chunk_id": "9629ba9d-6ed3-463b-af61-9aefb0070e1e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nTo create and verify a challenge, an enrolled Multi-Factor Authentication (MFA) factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify an MFA factor by providing the factor ID and the verification code."
  },
  {
    "chunk_id": "e2b49a5b-b034-4bc1-912f-41b9662b8f38",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to unenroll a multi-factor authentication (MFA) factor from a Supabase application. It uses the `supabase.auth.mfa.unenroll()` method, which takes the `factor_id` as a parameter to identify the specific factor to be unenrolled."
  },
  {
    "chunk_id": "026146b0-c687-4ae4-9e90-c0c9709e61fa",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) represents the strength of an authentication mechanism in Supabase. AAL1 refers to a single authentication factor such as email/password or OAuth, while AAL2 indicates the presence of a second factor like a time-based, one-time password (TOTP). The `next_level` field indicates the minimum AAL required for the user to access certain resources."
  },
  {
    "chunk_id": "90030cdb-5b47-4f4e-9d2e-5a35bc117318",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is:\n\nThe Supabase Edge Functions feature allows you to invoke a Supabase Function, which requires an Authorization header. The function can accept a body in the form of Blob, ArrayBuffer, File, FormData, or String, and the Content-Type header is automatically set accordingly. You can also override the default behavior by providing a custom Content-Type header. The summary includes an example of how to invoke a Supabase Function called \"hello-world\" with a body containing a \"name\" field."
  },
  {
    "chunk_id": "8a7ce3c7-30ac-4444-86da-9f1f054e1d82",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Broadcast and Presence are enabled by default for all Supabase projects, but listening to database changes is disabled by default for performance and security reasons.\n2. You can enable listening to database changes by managing Realtime's replication, and can receive \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL.\n3. The example code demonstrates how to subscribe to a Supabase channel, listen for broadcast messages, and send a broadcast message when the subscription is successful."
  },
  {
    "chunk_id": "f34dd217-c5ec-424b-b45c-bc54e4fd534f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain project performance and database efficiency. Unused channels can degrade the system as more clients subscribe, so the `supabase.remove_channel()` method allows programmatic removal of a channel, which Supabase will automatically clean up 30 seconds after the client disconnects."
  },
  {
    "chunk_id": "f29630f7-2aac-4dbd-96fc-85b85dcc0bc6",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the connected database. Supabase automatically cleans up disconnected channels after 30 seconds, but having too many subscribed channels can degrade the system. The `supabase.remove_all_channels()` method can be used to remove all channels programmatically."
  },
  {
    "chunk_id": "753d6e0a-61a7-4507-a18a-b5c275f5c5f7",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to retrieve all channels using the `supabase.get_channels()` function. This function allows developers to fetch and access all available channels, which is a common operation in channel-based communication systems or content management applications."
  },
  {
    "chunk_id": "e96d78dc-f638-4d01-a317-32729ec406c5",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nBroadcast a message to all connected clients in a specific channel using the Supabase Realtime API. The example code demonstrates how to subscribe to a channel, and then send a broadcast message containing random cursor position data."
  },
  {
    "chunk_id": "ea7fdc35-f182-46aa-a80c-a125e93346bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the user requires the `insert` permission on the `buckets` table, but no permissions are required on the `objects` table. Refer to the Storage guide for more information on access control. The code to create a bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "04c1eaa5-fd52-490f-9343-9eec321b67fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for information on how access control works. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "8f63175f-f124-41d4-bd43-a44442d248ec",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. The Supabase storage guide provides more information on access control for storage operations."
  },
  {
    "chunk_id": "a9b39bc7-22aa-4f12-9601-71e57be6d747",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase Storage, the required permissions are `select` and `delete` on the `buckets` table, with no permissions required on the `objects` table. The process involves calling the `supabase.storage.delete_bucket()` method with the bucket name as the argument."
  },
  {
    "chunk_id": "c6deb167-7e3f-4910-b1cf-9b1c7ed4de1f",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. The process involves calling the `supabase.storage.empty_bucket(name)` function, as described in the Storage guide on access control."
  },
  {
    "chunk_id": "6d3b1463-aa2c-422a-96b1-ec784dc16140",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the following is required: 1) The `objects` table permission must have `insert` access; 2) The appropriate MIME type should be specified, especially for images or audio, otherwise the default is `text/html`; 3) The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file handle and the desired path on Supabase Storage, along with the file's MIME type."
  },
  {
    "chunk_id": "d8f35234-0cd3-4bf0-a11d-f64dbf1d873e",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the user requires the `select` permission on the `objects` table, but no permissions are needed on the `buckets` table. The file can be downloaded using the Supabase storage client, which provides a `download()` function to fetch the file contents and write them to the specified destination."
  },
  {
    "chunk_id": "6c960c5a-e975-4459-8bfd-1686108165f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions require `select` access. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket."
  },
  {
    "chunk_id": "ff4002f8-1a03-43e5-927d-56447de26735",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The file is updated by opening the local file, then using the `supabase.storage.from_()` method to update the file on the Supabase storage, specifying the file, path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "d58c6018-e445-401d-95f5-d232df7218c2",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase, the user requires `update` and `select` permissions on the `objects` table. The example code shows how to move a file from the `public/avatar1.png` path to the `private/avatar2.png` path within a specified bucket. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "2bc449c1-07b6-4832-95f3-7c464d619277",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table, but no permissions on the 'buckets' table. The Supabase Storage guide provides details on how access control works. The file can be deleted using the `remove()` method on the `supabase.storage.from_()` client."
  },
  {
    "chunk_id": "82108508-aa5d-452b-8711-15650107d2ba",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, the required permissions are `select` on the `objects` table. The `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function can be used to generate a signed URL that provides time-limited access to a specific file in the storage bucket."
  },
  {
    "chunk_id": "2ad48930-bd05-4e3d-ac12-fdcbfe61f5bf",
    "source_url": "https://supabase.com/docs/reference/python/auth-getsession",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public either via the `updateBucket()` function or the Supabase dashboard. No specific permissions are required in the `buckets` or `objects` tables. The `get_public_url()` function returns the public URL for an asset in a public bucket."
  },
  {
    "chunk_id": "db6e740a-95c0-4884-af35-6640908eb7bf",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of APIs for interacting with a Supabase Postgres database. It enables developers to perform database operations, listen to real-time changes, invoke Deno Edge Functions, implement user authentication and management, as well as manage large files, all through a Python-based interface."
  },
  {
    "chunk_id": "f4914bb2-da0f-416b-a145-9253d526f905",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is as follows:\n\nYou can install the Supabase Python client library using pip. The library supports Python 3.7 and later versions. The installation can be done via the terminal by running the command `pip install supabase`."
  },
  {
    "chunk_id": "419e20dd-aced-4ee0-a2ea-49a755a04774",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It can be initialized using the `create_client()` method, which takes the Supabase URL and key as required parameters, as well as optional client options to configure authentication behavior. This initialization allows developers to access the full range of Supabase functionality within their application."
  },
  {
    "chunk_id": "0bb8b0e0-63c7-4e69-950d-e860ffb2788f",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default limit of 1,000 rows that can be adjusted in the API settings. The `select()` function can be combined with `Filters` and `Modifiers` to fetch and paginate data, while avoiding the reserved keyword `apikey` as a column name. The `select()` function accepts parameters for specifying columns and count methods, enabling flexible data retrieval from referenced tables, including querying with JSON data and inner joins."
  },
  {
    "chunk_id": "7ae958d5-3eba-465d-9e00-977cb11bc3c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe \"Insert data\" section discusses the parameters and usage of the `insert()` method in the Supabase library. The method accepts a dictionary or a list of dictionaries to insert one or more rows into a table. It provides optional parameters to control the count and representation of the returned data, as well as the default behavior for missing fields in bulk inserts."
  },
  {
    "chunk_id": "befec439-57a4-4011-970f-78a7168f0d1b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase API is used to update data in a table, and it must be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter to specify the new values, and an optional `countOptionalCountMethod` parameter to get the count of updated rows."
  },
  {
    "chunk_id": "ea715f99-bfdc-4f70-861c-44cbe71cf8ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'upsert' function in the documentation allows for inserting or updating data in a table, with primary keys required in the 'values' dict. It supports various parameters such as 'count', 'returning', 'ignore_duplicates', 'on_conflict', and 'default_to_null' to customize the upsert operation. The function can be used to perform both single-row and bulk upserts, and is useful for working with tables that have unique constraints."
  },
  {
    "chunk_id": "34a380ba-e2c9-4b74-b3eb-d696c829aa53",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The delete() function in Supabase must be used with filters to target the specific items you want to delete. When using RLS (row-level security), only rows visible through SELECT policies will be deleted. The delete().in_() method allows you to delete multiple rows with a single query by specifying an array of values, which is useful for batch deleting entries with common criteria. The delete() function also supports optional parameters for counting the affected rows and specifying the response format."
  },
  {
    "chunk_id": "6d64376f-94ab-4e1c-8883-06c8ca68ad0a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nYou can call Postgres functions as Remote Procedure Calls, which provide a way to execute database logic from any location. Functions are useful for tasks that rarely change, such as password resets and updates. The documentation covers how to call Postgres functions with various parameters, including optional parameters for controlling the count method and read-only access mode."
  },
  {
    "chunk_id": "3c75269d-2779-442d-be3b-a7548c1d25a8",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specified conditions in Supabase queries, including `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. Filters can be chained and used to filter by values within JSON columns or foreign tables."
  },
  {
    "chunk_id": "91b49955-6a04-461d-af4c-26359045205d",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by checking if a specific column is equal to a given value. The key parameters are the column to filter on and the value to match against. This functionality is demonstrated with an example using the Supabase `select()` method to retrieve rows from the \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "5b542ba8-da07-46c2-b4db-b0a52a166f75",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `neq()` function in Supabase allows you to filter rows where a specified column is not equal to a given value. The function takes two parameters: `column` (the column to filter on) and `value` (the value to filter by). This can be useful for retrieving data that does not match a particular criteria."
  },
  {
    "chunk_id": "01be69d3-a90f-4d3f-a4c7-57366e8a0b3b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the content about \"Column is greater than a value\" is as follows:\n\nThe `gt()` function in the Supabase library allows you to filter a database table by selecting only the rows where a specified column has a value greater than a provided value. The required parameters are the column name and the value to compare against."
  },
  {
    "chunk_id": "af3e86c7-71c9-4ce2-864a-9141c6d849ad",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe column filter \"greater than or equal to\" allows matching rows where the specified column value is greater than or equal to the provided value. This can be used with the `gte()` method in the `select()` function, for example `supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()` to retrieve rows where the \"id\" column is greater than or equal to 2."
  },
  {
    "chunk_id": "90959ac9-9445-4f1a-a5c4-b473a935cc77",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThis section explains how to filter a database table by selecting rows where a specified column has a value less than a given value. The key parameters are the column name and the value to filter by. An example is provided using the Supabase library's `lt()` method to select all rows where the \"id\" column is less than 2."
  },
  {
    "chunk_id": "01bd3150-d10e-4ef7-9ccf-59d56ce9a751",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This method filters rows where the specified column is less than or equal to the provided value. The required parameters are the column name and the value to filter by. This can be used with the `select()` method to retrieve the filtered data, as shown in the example."
  },
  {
    "chunk_id": "c1cd3236-167e-4c4e-ab82-261bf152dbe7",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a column filter that matches rows where the specified column value matches the given pattern case-sensitively. The key parameters are the column name and the pattern to match against. This filter can be used in a Supabase `select()` query to retrieve data that meets the specified criteria."
  },
  {
    "chunk_id": "fdf430cc-d3d4-4322-be87-d82a9db1c057",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is:\n\nThis documentation describes the 'ilike' function in Supabase, which allows for case-insensitive pattern matching on a specified column. The 'ilike' function takes two required parameters: the column name and the pattern to match against. This functionality can be useful for performing flexible string-based filtering on database tables."
  },
  {
    "chunk_id": "3db1508b-1ba3-4477-ac57-4051e9e80ba4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" feature allows filtering rows where a specified column matches a given value, including checking for null, true, or false values. The key parameters are the column name and the value to match, enabling precise data selection and filtration."
  },
  {
    "chunk_id": "d5ac3829-b49f-4463-b156-6a7fff76f5ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes a SQL-like `in_()` function that allows filtering a database table by checking if the value in a specified column is included in a provided array of values. This is demonstrated with an example of filtering a \"countries\" table by the \"name\" column, keeping only rows where the name is \"Albania\" or \"Algeria\"."
  },
  {
    "chunk_id": "ab9b7f98-c2c8-4e04-a6de-7ba3b9c140b4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Column contains every element in a value\" functionality, which is relevant for jsonb, array, and range columns. It allows filtering rows where the specified column contains every element in the provided value. The summary includes the required parameters, columnName and values, and provides an example usage for filtering issues based on tags."
  },
  {
    "chunk_id": "d4e4689c-0ac9-4df9-b648-81b308a2bc3c",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" filter is used with jsonb, array, and range columns to match rows where every element in the column is contained within the provided value. The filter takes two parameters: the column to filter on and the value to filter with. Examples are provided for using this filter on array, range, and jsonb columns."
  },
  {
    "chunk_id": "315381ee-f0fd-42c2-860e-82d15eba02bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is applicable to range columns in a database. It allows filtering rows where every element in the specified column is greater than any element in the provided range. The parameters include the column name and the range to filter with, which can be used in a Supabase query to select data that meets this condition."
  },
  {
    "chunk_id": "956a1d0f-1b05-4279-b732-18e066938b91",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature in the documentation applies to range columns, allowing you to filter rows where every element in the column is either contained in the specified range or greater than any element in the range. The key parameters are \"column\" to specify the range column to filter on, and \"range\" to provide the range to filter with. This functionality can be used in the `select()` method, as demonstrated in the example code."
  },
  {
    "chunk_id": "5e8a56cd-2249-417d-8744-80bb8671b924",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the column is less than any element in the specified range. The relevant parameters are the column name and the range to filter with. This is demonstrated in the example using the Supabase table \"reservations\" and the \"during\" column."
  },
  {
    "chunk_id": "55691649-7283-48c9-a47d-31b8c57bd6bb",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, matching only rows where every element in the specified column is less than or equal to any element in the given range. It takes two parameters: the column to filter on and the range to filter with. This filter can be used in a Supabase table query to select rows where the \"during\" column is less than or equal to the specified date range."
  },
  {
    "chunk_id": "aab128b8-d2e6-41eb-816f-865d16958fb0",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the provided content is:\n\nThis feature is only applicable to range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The parameters required are the column name and the range to filter with, as demonstrated in the example using the Supabase library."
  },
  {
    "chunk_id": "6bf8c871-07f2-479f-ab5e-acd4d9db44f2",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section describes the \"With a common element\" filter, which is only applicable to array and range columns. The filter matches rows where the specified column and value have at least one element in common. The key parameters are the \"columnRequired\" (the array/range column to filter on) and \"valueRequired\" (the array/range value to filter with). Examples are provided for applying this filter on both array and range columns."
  },
  {
    "chunk_id": "77793530-d951-4717-8fde-39be54b06b39",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The section describes the \"Match a string\" functionality, which allows filtering rows where a specified column matches a given query string. This is useful for text and tsvector columns and can be leveraged for Postgres full-text search. The summary includes details on the required parameters (column and query) as well as optional parameters for customizing the search behavior, such as normalization and weighting."
  },
  {
    "chunk_id": "2e38ebb6-3c2e-4f8b-8118-461699b580b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided documentation allows filtering a database table by matching rows where each column in the `query` object has an equal associated value. This is a concise way to apply multiple `.eq()` filters at once. The `query` parameter is a dictionary with column names as keys and their filter values."
  },
  {
    "chunk_id": "5607baa0-03cb-47c9-9d29-13af85daeadb",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides instructions on how to use the `not_` operator in the PostgREST syntax to match rows that do not satisfy the given filter. It demonstrates examples of using `not_.in_()` for filtering based on a list of values, and `not_.contains()` for filtering based on array values. Additionally, it shows how to use the `not_.is_()` filter with the `select()` function in Supabase to retrieve rows where the `name` column is not `null`."
  },
  {
    "chunk_id": "bd7923b3-a4d7-447a-a739-48912f4ab69a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the key technical points related to the \"Match at least one filter\" functionality in the software documentation. It explains that the or95() function expects the use of raw PostgREST syntax for filter names and values, including the use of parentheses for \"in\" filters, curly braces for array values, and the use of \"cs\" and \"cd\" for \"contains()\" and \"containedBy()\" operations. The summary also mentions the available parameters, the use of \"or\" and \"and\" filters, and provides an example of how to use the or95() function with the supabase.table() method."
  },
  {
    "chunk_id": "700b1ddb-4f00-4ce2-9176-1d2f0f673ec1",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'filter()' function in the documentation expects the use of raw PostgREST syntax for filter values, such as using '()' for 'in' filters and '\\{\\}' for array values. The documentation provides example usage of 'filter()' on a foreign table, demonstrating how to filter by column name, operator, and value according to PostgREST syntax."
  },
  {
    "chunk_id": "dc183a92-74ab-4f04-b927-2f88c6e7e3bc",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, as opposed to filters which operate on the row level. Modifiers must be specified after filters and only apply to queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "99988e38-8f36-40d1-adcf-55f6f27f822d",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation explains how to order the results of a query by a specified column. The `order()` function takes parameters such as the column name, sort order (ascending or descending), and whether to show null values first. An example is provided demonstrating how to order the results of a query on a foreign table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "74a1539a-8ba4-4c51-bd4c-2ee6298bab65",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation covers how to limit the number of rows returned in a database query. The `limit()` method is used to specify the maximum number of rows to be returned, and the `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. This functionality is demonstrated in an example using the Supabase library to query a \"countries\" table and return a single row."
  },
  {
    "chunk_id": "af141bcd-7d88-42f5-a060-e27e08d7f06f",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `range()` function in this software allows limiting the query result to a specified range of records, defined by an offset (`from`) and a number of records to return (`to`). This can be useful for pagination or returning a subset of data, while respecting the query order. The function takes `start` and `end` parameters to define the range, and optionally a `foreign_table` parameter to limit the range to a foreign table instead of the parent table."
  },
  {
    "chunk_id": "9361f203-8b3a-4ced-bc47-8cbdaee8ba5e",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a method to retrieve a single row of data from a database table using the Supabase library. It demonstrates the use of the `select()`, `limit(1)`, and `single()` methods to return a single object instead of an array of objects, which can be more efficient for certain use cases."
  },
  {
    "chunk_id": "62f89837-a2ec-496b-be59-ed8069a2b07c",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Retrieve zero or one row of data section explains how to use the `maybe_single()` method in Supabase's `select()` function to retrieve a single object instead of an array of objects, even if the query returns zero or one row. This is demonstrated with an example that selects the \"countries\" table and returns the row where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "b07cb09c-c363-4c97-898e-f4c60443e277",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the \"Retrieve as a CSV\" functionality. It explains that this feature allows users to return data from a Supabase table as a CSV string. The example code demonstrates how to execute this operation, which can be useful for exporting data in a structured, comma-separated format."
  },
  {
    "chunk_id": "71376c6a-88b5-46a0-a18f-803b02bac128",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. While `explain()` can be a useful debugging tool, it should be used with caution as it can reveal sensitive database information, and it's recommended to only enable it for testing environments."
  },
  {
    "chunk_id": "5b4b2382-3b58-4835-9fc1-3cc214f6f3e0",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary of the content is:\n\nBy default, users need to verify their email address before logging in. If email confirmation is disabled, both a user and a session are returned. When signing up an existing confirmed user, an obfuscated/fake user object is returned if email and phone confirmation are enabled, or an error message is returned if either is disabled. To fetch the currently logged-in user, the `get_user()` function can be used."
  },
  {
    "chunk_id": "aacf6e5c-8f16-49ef-bf50-d442606950f6",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the Supabase authentication system. It recommends setting up a captcha to prevent abuse, and provides an example code snippet for signing in anonymously with custom user metadata. The key technical points are the ability to create an anonymous user and the use of a captcha to enhance security."
  },
  {
    "chunk_id": "c2cafba8-d21b-4712-bce1-7eac809ac575",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the process of signing in an existing user using their email and password or phone number and password. It provides a code example of signing in with email and password using the Supabase library, and lists the required parameters for the sign-in operation."
  },
  {
    "chunk_id": "2c237603-1683-4773-bca7-5c427afc84a4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in using an OIDC ID token. It provides a code example for signing in with the Google provider by passing the ID token as a parameter to the `supabase.auth.sign_in_with_id_token()` method. This functionality allows users to authenticate with the application using their existing identity provider credentials, simplifying the sign-in process."
  },
  {
    "chunk_id": "d9b7d7f1-6186-442f-81b8-49f63197b300",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nUsers can sign in through one-time passwords (OTPs) sent to their email or phone number. This passwordless sign-in method can automatically create a new user account if the user doesn't exist, though this behavior can be disabled. The magic link or OTP sent to the user is determined by the email or phone number provided, and the destination URL is configured by the `SITE_URL` setting. Developers can also customize the email template to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "c168f9db-efc4-4714-97eb-8e9513d35cd1",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "This method provides a way to sign in a user through OAuth, a popular authentication protocol that allows users to sign in using third-party providers such as GitHub. Supabase supports integration with various third-party providers, and the `supabase.auth.sign_in_with_oauth()` function can be used to initiate the sign-in process with a specific provider, like GitHub, and optionally specify scopes."
  },
  {
    "chunk_id": "1eea545d-18be-404b-aee8-e06686c3170b",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then start the authentication flow by providing either the domain associated with the identity provider or the provider's UUID. This allows you to map specific user email addresses or use other hints to identify the appropriate identity provider."
  },
  {
    "chunk_id": "333db8c4-6d95-40c9-af31-ca4273d85aa5",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth is used to sign out a user, which revokes the refresh token and deletes the JWT from the client-side. However, the access token JWT will remain valid until it expires, as Supabase Auth uses JWTs for authentication. The `sign_out()` method uses the global scope by default, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "73ca99d2-52fb-4145-8052-12a7dce1c16e",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for user authentication, supporting different verification types such as SMS, email, recovery, invite, and email change. The verification type should be determined based on the corresponding auth method called before `verify_otp`. The `TokenHash` contained in email templates can be used to sign in and is useful for implementing server-side auth with the PKCE flow."
  },
  {
    "chunk_id": "827414f1-47a1-4955-b508-df70cf94b112",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be trusted as a source of verified user data, as it could be tampered with. If trustworthy user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "a9ef6842-f4ba-475d-8834-bee3946e21a1",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "Retrieves a new session regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the existing session. If the refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "fe48a5d8-1cda-453c-8ed8-f407847d3b8a",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `get_user()` fetches the user object from the database instead of the local session, and is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be used to retrieve the logged-in user with the current session or with a custom access token JWT."
  },
  {
    "chunk_id": "b0a0dd6a-6b73-40a4-8353-9b6e4ea43a05",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data using an `access_token` and `refresh_token`, refreshing the session if it has expired. If the session is successfully set, a `SIGNED_IN` event is emitted. This method is useful for maintaining the user's session and automatically renewing it when necessary."
  },
  {
    "chunk_id": "b8a74b99-8e99-4d7c-8369-48a88a142bf3",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The Supabase Auth MFA (Multi-Factor Authentication) section supports time-based one-time password (TOTP) as the second factor, allowing users to enroll multiple TOTP factors (up to 10) for recovery instead of relying on separate recovery codes. This approach reduces the attack surface and provides a more convenient user experience by eliminating the need to store recovery codes separately."
  },
  {
    "chunk_id": "b1ce93a9-7086-4262-a081-f769bbf00065",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe `enroll()` method is used to enroll a time-based, one-time password (TOTP) factor, which is the only currently supported `factor_type`. The returned `id` can be used to create a challenge, which can be verified using the `mfa.verify()` or `mfa.challenge_and_verify()` methods."
  },
  {
    "chunk_id": "a7822dcd-9767-4ecc-9c11-5b228536804d",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` method can be used to create a challenge for a specific factor identified by its `factor_id`. This challenge can then be verified using the `mfa.verify()` method."
  },
  {
    "chunk_id": "5fb75b01-038c-4fb6-b7e7-720a83479c22",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the provided code example. The code demonstrates how to verify a challenge by specifying the factor_id, challenge_id, and the code received from the user, which is required to complete the verification process."
  },
  {
    "chunk_id": "3661b9f4-e5c5-4bf4-847a-714892d7ed14",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` methods in a single step, taking the factor ID and a code as input parameters."
  },
  {
    "chunk_id": "636a1d7b-da3c-4bae-84d9-b1fe461b9fd4",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is:\nThe code snippet demonstrates how to unenroll a multi-factor authentication (MFA) factor by providing the `factor_id` parameter to the `supabase.auth.mfa.unenroll()` function. This functionality allows users to remove an enrolled MFA factor, which can be useful for managing their authentication settings."
  },
  {
    "chunk_id": "e2fa8547-3c2d-4e9d-a92b-8cfc109834a2",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 represents the first factor of authentication, such as an email and password or OAuth sign-in, while AAL2 represents the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field in the API response indicates the user's current AAL level and the next level they can achieve."
  },
  {
    "chunk_id": "446741ed-11c2-4da7-9756-da712ced928e",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The Supabase Edge Functions feature allows you to invoke custom server-side logic. To do so, you need to include an Authorization header, and the service will automatically attach the appropriate Content-Type header based on the payload type. The example shows how to invoke a \"hello-world\" function and pass in a body object."
  },
  {
    "chunk_id": "3111c20e-fa68-44a9-9988-03a46f580511",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, while listening to database changes is disabled for new projects due to performance and security concerns. Users can enable listening to \"previous\" data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The content provides example code for subscribing to various Realtime event types, such as broadcasts, presence changes, and table-specific updates."
  },
  {
    "chunk_id": "dac24545-e9af-40e9-a519-942f98b16c43",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a Supabase channel is recommended to maintain the performance of the Realtime service and the database, as unused channels can cause degradation with increasing client subscriptions. The `supabase.remove_channel()` function can be used to remove a specific channel, which Supabase will automatically clean up 30 seconds after a client disconnection."
  },
  {
    "chunk_id": "0721db2d-f4bc-488f-8c76-3e7e00f99ce1",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels from your Realtime service and Postgres database can help maintain performance. Supabase automatically cleans up channels 30 seconds after a client disconnects, but keeping too many inactive channels can degrade performance as more clients subscribe. To remove all channels, use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "4874a1a7-a258-4bf8-8100-b48979814da7",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary of the provided content is:\n\nThe `supabase.get_channels()` function retrieves all channels available in the system. This is a useful operation for fetching the complete list of channels, which can be helpful for various use cases such as displaying a channel selection menu or performing operations across all channels."
  },
  {
    "chunk_id": "8fb35944-429d-4e40-9246-8d3367cf1cb5",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nBroadcast a message to all connected clients in a channel using the Supabase Realtime API. The example code demonstrates how to subscribe to a channel, then send a broadcast message with cursor position data to all subscribed clients."
  },
  {
    "chunk_id": "d0ebc0e7-5630-40bd-aec1-fdd296a5995d",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the required RLS policy permissions are: `insert` access to the `buckets` table, and no permissions required for the `objects` table. Refer to the Supabase Storage guide for more details on access control. The code to create a new bucket is `_10 res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "e1efbfef-57b3-4bbd-b4de-5f592b57dce8",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the user requires `select` permissions on the `buckets` table, but no permissions on the `objects` table. The process of retrieving a bucket is demonstrated with the example `_10 res = supabase.storage.get_bucket(name)`. Refer to the Storage guide for more information on access control mechanisms."
  },
  {
    "chunk_id": "02ee031d-1497-490c-9cfa-06788333f909",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the `select` permission is required on the `buckets` table, but no permissions are needed for the `objects` table. Refer to the Storage guide for details on configuring access control."
  },
  {
    "chunk_id": "284bd73f-4ba9-4623-a8e5-7db38d34ccdf",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a Supabase storage bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, but no permissions are needed on the `objects` table. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "79062884-eeb4-4887-83c5-463cb44f51ac",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the user requires `select` permissions on the `buckets` table and `select` and `delete` permissions on the `objects` table. The `supabase.storage.empty_bucket(name)` function can be used to empty the specified bucket. Refer to the Storage guide for more information on Supabase access control."
  },
  {
    "chunk_id": "e0a93591-6f51-4eeb-87ed-122be1fb3647",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the required RLS policy permissions are `objects` table `insert` permissions. The appropriate MIME type should be specified, especially for images or audio, and if not provided, the default is `text/html`. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and optional file options, such as the content type."
  },
  {
    "chunk_id": "6d89c59e-5fff-4b35-91fc-77cd88895769",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase Storage, the user requires the `select` permission on the `objects` table. The code snippet demonstrates how to download a file from a specified bucket and save it to a local destination. Refer to the Storage guide for more details on Supabase access control."
  },
  {
    "chunk_id": "d688d103-4202-42f9-8862-0d4db3de73f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a bucket, the required permissions are 'select' on the 'objects' table. The code to perform this operation is `supabase.storage.from_('bucket_name').list()`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "0e23f39c-7e35-48f6-b262-2be288ca9fdb",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the Supabase storage client, specifying the file path, bucket name, and optional file metadata like cache-control. This operation allows overwriting an existing file in the Supabase storage."
  },
  {
    "chunk_id": "a46135ad-b45e-42d2-8879-48bd7b276d32",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are `update` and `select` on the `objects` table. The example code demonstrates moving a file from `public/avatar1.png` to `private/avatar2.png` within the `bucket_name` bucket. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "b8e9bd6a-90a4-42ac-bc76-aa40cbe383ae",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase bucket, the user requires 'delete' and 'select' permissions on the 'objects' table, but no permissions on the 'buckets' table. The Storage guide provides details on how access control works for Supabase storage operations."
  },
  {
    "chunk_id": "712ce342-ee3e-4d8d-a4c3-2dc585a39909",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required permissions are `select` on the `objects` table. The Signed URL allows temporary access to a specific file in the Supabase storage bucket, with a configurable expiry duration."
  },
  {
    "chunk_id": "91a2bb86-8766-4e0d-93d5-908270646e03",
    "source_url": "https://supabase.com/docs/reference/python/auth-setsession",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase Storage bucket, the bucket must be set to public. This can be done either through the Supabase Dashboard or by calling the `updateBucket()` method. No specific permissions are required on the `buckets` or `objects` tables. The public URL can be obtained using the `get_public_url()` method on the storage client."
  },
  {
    "chunk_id": "f98d09ce-dc20-459f-8791-d73c8bb02a22",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive interface to interact with a Supabase Postgres database. It enables developers to perform database operations, listen to real-time changes, invoke Deno Edge Functions, manage user authentication and profiles, as well as handle large file storage and retrieval."
  },
  {
    "chunk_id": "9faaa742-08da-4b9b-83ef-8db3c768fc33",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The content summarizes the installation process for the Supabase-py library, which can be installed via PyPi using the pip command. The library supports Python 3.7 and above, and the summary provides the exact command to install it from the terminal or Conda environment."
  },
  {
    "chunk_id": "994e1ce8-cc86-405e-ae0a-882a14dcfdd6",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe Supabase client is the primary interface for interacting with the Supabase ecosystem. It can be initialized using the `create_client()` method, which takes the Supabase URL and API key as required parameters, and optional client options to customize the authentication behavior. The Supabase client provides access to the full suite of Supabase functionality, making it the central entry point for developers working with the Supabase platform."
  },
  {
    "chunk_id": "d95164f4-49b3-4cfa-90a7-535a15182471",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the following key points:\n\n1. Supabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `range()` function can be used to paginate through the data.\n2. The `select()` function can be combined with filters and modifiers to refine the data retrieval. The `apikey` column should be avoided when using the Supabase Platform.\n3. The `select()` function supports various parameters, including specifying columns, count methods, and querying JSON data or referenced tables."
  },
  {
    "chunk_id": "9faba803-5f9e-4278-b3ce-88bcdcec7168",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'Insert data' section describes how to insert data into a table using the Supabase library. The key parameters are 'jsonRequired' (a dictionary or list of dictionaries representing the data to insert), 'countOptional' (the property to use for the returned row count), 'returningOptional' (the format of the returned data), and 'default95to95nullOptional' (whether to use null or default values for missing fields in bulk inserts). An example of inserting a single row and multiple rows is provided."
  },
  {
    "chunk_id": "00cbb69f-1798-4720-b338-e34f473ed264",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided software documentation is used to update data, and it must be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, which represents the values to be inserted. Additionally, an optional `countOptionalCountMethod` parameter can be used to retrieve the count of rows returned by the update operation."
  },
  {
    "chunk_id": "8b01d757-c68f-4a97-95dc-a224b1018c4e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `upsert` operation in this documentation allows inserting or updating data in a table. The `values` parameter must include the primary keys, and additional parameters like `returning`, `on_conflict`, and `default_to_null` can be used to customize the behavior. Example code demonstrates how to perform a bulk upsert operation on a `countries` table."
  },
  {
    "chunk_id": "acc3ea50-1fea-4fba-b31b-44c42a53a901",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The delete() method in Supabase should always be used with filters to target the specific data you want to delete. When using delete() with RLS (row-level security) enabled, only rows visible through SELECT policies are deleted. The delete().in_() method allows deleting multiple rows in a single query by specifying an array of values, which is useful for batch deleting entries with common criteria. The delete() method supports optional parameters for counting the rows returned and specifying the return method."
  },
  {
    "chunk_id": "70fb6b82-d263-44db-9b49-2feacffbbb07",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "Summary:\n\nThe documentation describes how to call Postgres functions as Remote Procedure Calls, which are useful for executing database logic that rarely changes, such as password resets and updates. It provides details on the function parameters, including how to call a function without arguments, with arguments, with filters, and in a read-only mode. The summary also mentions that the function supports different count algorithms for set-returning functions."
  },
  {
    "chunk_id": "112a91f0-5cbc-42ac-a7e8-480eaba663fd",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only rows that match specific conditions in Supabase `select()`, `update()`, `upsert()`, and `delete()` queries, as well as in Postgres functions that return a table response. Filters can be chained and applied to filter by values within JSON columns or foreign tables, enabling precise data retrieval."
  },
  {
    "chunk_id": "79888145-d47c-41ff-87a8-403646c150b3",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The code snippet demonstrates how to filter a database table by a specific column value using the `eq()` method of the `select()` function. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This allows you to retrieve only the rows where the specified column is equal to the provided value."
  },
  {
    "chunk_id": "410a8664-0ef1-4f56-bca1-a92f1e5ee792",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `neq()` function in Supabase allows you to filter a table by a column that is not equal to a specified value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This can be useful when you want to exclude certain rows from your query."
  },
  {
    "chunk_id": "6e48cca4-8b8c-42e7-a3f9-7ae8c7e84598",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a table by a column value, where the column is greater than a specified value. The `gt()` method is used to apply this filter, with the column name and value as parameters. This functionality is demonstrated in an example using the Supabase library to query a \"countries\" table."
  },
  {
    "chunk_id": "94f7fa9d-2b9d-460f-90cb-025feab25104",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes a filter operation that selects rows from a database table where the value in a specified column is greater than or equal to a provided value. The key parameters are the column name and the filter value, which can be used in a Supabase `select()` query to retrieve the filtered data."
  },
  {
    "chunk_id": "fc5088dd-5ff5-4fed-adee-a1e7edb5ac5d",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to filter a table to include only rows where the value in a specified column is less than a given value. The key parameters are the column name and the comparison value. An example is provided using the Supabase library's `select()` and `lt()` (less than) methods."
  },
  {
    "chunk_id": "09f45f7f-d232-405b-b919-89bd0b39f532",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `lte()` function in Supabase allows filtering a table to include only rows where the specified `column` has a value less than or equal to the provided `value`. This is a common use case for querying and filtering data in a database using Supabase's query builder."
  },
  {
    "chunk_id": "4b5bc263-63c4-4408-ae98-fedf7f8e9f4b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Column matches a pattern\" feature allows you to filter rows based on whether a specified column matches a given pattern case-sensitively. The required parameters are the column name and the pattern to match. This can be used in the `select()` function, as shown in the example, to retrieve only the rows where the \"name\" column matches the pattern \"%Alba%\"."
  },
  {
    "chunk_id": "98225c45-b789-403f-8900-a80ca6f4ee68",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the `ilike()` method in Supabase, which allows you to perform a case-insensitive pattern match on a specified column. The `ilike()` method takes two parameters: the name of the column to filter on and the pattern to match against. This functionality is useful for querying data where the case of the column values is not important."
  },
  {
    "chunk_id": "df58c2cb-c588-4edb-989a-a49bf6d3e16b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe 'Column is a value' feature allows filtering table rows based on the value of a specified column, including checking for null, true, or false values. It takes two required parameters: the column name and the value to match, and can be used with the Supabase table API to execute the filter operation."
  },
  {
    "chunk_id": "be163d94-1233-47b1-84c5-1faef604f898",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe passage describes a method to filter rows in a database table where the value in a specified column is included in a provided array of values. The `in_()` function is used to perform this filtering, as demonstrated in the example with the `countries` table. This functionality allows for targeted data retrieval based on specific column values."
  },
  {
    "chunk_id": "0ed9781a-c206-4001-8fed-841c235e3f1d",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `contains` operation is only applicable to `jsonb`, `array`, and `range` columns. It allows filtering rows where the specified column contains every element of the provided `values` object. The `values` parameter can be a `jsonb`, array, or range value. Examples are provided for using `contains` on array, range, and `jsonb` columns."
  },
  {
    "chunk_id": "a0c7d35e-7de2-4515-8b9b-9daa92e44f77",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `contained_by` operator is used to filter rows in a jsonb, array, or range column where every element in the column is contained within the specified value. It takes two parameters: the column to filter on and the value to filter with. This can be useful for querying data stored in JSON, arrays, or ranges, such as finding classes that take place on specific days of the week."
  },
  {
    "chunk_id": "d10459c5-0f52-44d0-ad78-8da6db8209af",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" filter is used to match rows where every element in the specified column is greater than any element in the provided range. This is particularly useful for filtering on range columns. The filter is applied using the `.range_gt()` method, which takes the column name and an array of range values as parameters."
  },
  {
    "chunk_id": "ea159448-55b0-4357-bd20-35fb93212d50",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers the \"Greater than or equal to a range\" functionality, which is relevant for range columns in a database. It allows filtering rows where every element in the specified column is either contained in the given range or greater than any element in the range. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to retrieve the desired data."
  },
  {
    "chunk_id": "11e3d26f-7fce-420c-931f-65aaf02bc6c6",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is used for range columns in a database. It matches rows where every element in the specified column is less than any element in the provided range. The filter takes two parameters: the column to filter on and the range to filter with. This can be useful for querying data within a certain time range, for example."
  },
  {
    "chunk_id": "747d73ae-1070-42ab-9967-551766f6d39d",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature is only applicable for range columns. It allows filtering rows where every element in the specified column is less than or equal to any element in the provided range. The parameters include the column name and the range to filter with, as demonstrated in the example using the `range_lte()` method."
  },
  {
    "chunk_id": "8a204988-975a-45e3-bb4d-5226f9abf877",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"Mutually exclusive to a range\" feature is only applicable for range columns in a database. It allows filtering rows where the value in the specified column is mutually exclusive to the provided range, ensuring there are no elements between the two ranges. The key parameters are the column name and the range to filter with."
  },
  {
    "chunk_id": "d6f9df65-47f9-4564-9978-d77ebec12c0a",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on the \"With a common element\" filter in Supabase, which is only relevant for array and range columns. This filter matches rows where the specified column and value have at least one element in common. The key parameters are the column to filter on and the value to filter with, which can be an array or range."
  },
  {
    "chunk_id": "6b492394-c9ad-4c2d-9766-ab304b21f050",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Match a string\" functionality in the documentation is relevant for text and tsvector columns, allowing users to filter rows where the specified column matches the provided query string. It supports various options for text search, including basic normalization, full normalization, and websearch. The example provided demonstrates how to use the text_search function to search for the phrase \"'eggs' & 'ham'\" in the \"content\" column, with the \"english\" configuration."
  },
  {
    "chunk_id": "fc11374c-7bba-41fa-9610-67a5694ad931",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `match()` method in Supabase filters a database table to only include rows where each column in the `query` object has an equal associated value. This is a shorthand for chaining multiple `.eq()` calls. The `match()` method takes a `query` object as a parameter, with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "a65c986d-78a2-44f1-a396-5cb671fdcaf8",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content discusses how to use the `not_` operator in PostgREST to match rows that do not satisfy a given filter. This can be used to filter out specific IDs or array values. The example demonstrates using `not_.in_` and `not_.contains` to exclude rows based on ID and array values, respectively. Additionally, the content shows how to use the `not_.is_` operator with the Supabase library to select rows where the `name` column is not null."
  },
  {
    "chunk_id": "e5e1b49c-e346-41a6-8f87-7dc796a156f5",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nor95() function in Supabase allows matching at least one filter using the raw PostgREST syntax. Filters can be specified using the 'or_' method, and can include 'in', 'contains', and 'containedBy' operations. The 'filtersRequired' parameter specifies the filters to apply, and the 'referencedTable' parameter allows filtering on referenced tables."
  },
  {
    "chunk_id": "f97a0139-a25c-49cd-b70a-d0954e9a5196",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the Supabase client library expects the use of raw PostgREST syntax for filter values. It supports various operators like `in`, `cs` (contains), and allows for the use of array values. The `filter()` method can be used in conjunction with the `select()` method to filter data from a foreign table, as demonstrated in the example."
  },
  {
    "chunk_id": "ab40f696-9dd6-49ac-9dbf-ab6b437ad1bf",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and are applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "f5594f59-42ed-4941-a841-94eee2467ebd",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` function in the Supabase API allows you to order the query results by a specified column. The function takes four parameters: `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the foreign table whose results to order), and `nulls_first` (whether to show null values first). This can be useful for sorting data retrieved from a database table, as demonstrated in the example of ordering a list of countries by name in descending order."
  },
  {
    "chunk_id": "adf53bb2-92c7-4afc-a730-7b8b353c727e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content provides information on how to limit the number of rows returned in a database query using the Supabase library. The `limit()` function can be used to specify the maximum number of rows to return, and the `foreign95table` parameter can be used to limit rows of a foreign table instead of the parent table. The summary includes the key technical details and their significance for users of the Supabase library."
  },
  {
    "chunk_id": "ddf825bb-73aa-4e7b-ba98-3d5a13ac8cec",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function allows limiting the query result to a specified range of records, defined by a starting offset (`from`) and an ending offset (`from + to`). This is useful for paginating large result sets. The `from` and `to` values are zero-based and inclusive, and the function can be applied to both the main table and to foreign tables."
  },
  {
    "chunk_id": "8217fee3-ed94-4274-8ed3-da9ec0595096",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to retrieve a single row of data from a table using the Supabase library's `select()` method with the `limit(1)` and `single()` modifiers. This allows you to retrieve a single object instead of an array of objects, which can be useful for certain use cases."
  },
  {
    "chunk_id": "e6fafceb-e632-42d5-ba6b-c8394ce4e25b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary highlights a method to retrieve a single row of data from a database table using the Supabase client library. The `maybe_single()` function is used to return the data as a single object rather than an array of objects, which can be useful when expecting a single result. This approach is demonstrated through an example query that retrieves a country record by its name."
  },
  {
    "chunk_id": "951bc87b-6934-435e-a01a-096f7a7b87c4",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation covers the \"Retrieve as a CSV\" feature, which allows users to return the data from a Supabase table as a CSV string. This is useful for exporting data in a comma-separated format, which can be easily integrated into other applications or used for data analysis. The example code demonstrates how to use the `.csv()` method to execute a table query and retrieve the results as a CSV string."
  },
  {
    "chunk_id": "69c1230a-901f-4cba-82ea-23a65299b894",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres allows developers to get the execution plan of a query, which is useful for debugging slow queries. It can reveal sensitive information, so it's best to enable it only in testing environments. The `explain()` method supports various parameters, such as `verbose`, `settings`, `format`, and `analyze`, to customize the output and provide additional details about the query execution."
  },
  {
    "chunk_id": "6f2ecc51-e231-4361-b987-e723d5968692",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, users must verify their email address before logging in. This behavior can be disabled by turning off the \"Confirm email\" option in the project settings. When email confirmation is enabled, a user is returned but the session is null until the email is verified. Disabling email confirmation returns both a user and a session. The redirect URL after email confirmation can be customized in the project settings."
  },
  {
    "chunk_id": "8a5dac16-5172-43ff-9caa-e6be0c6ade8b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse when signing in anonymously. The code example demonstrates how to sign in anonymously and pass in a captcha token as an option."
  },
  {
    "chunk_id": "572c9634-c71f-4845-8eaa-2cd2a4a4c36b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides code examples for signing in with email and password, and signing in with phone and password, along with details on the required parameters and the response format."
  },
  {
    "chunk_id": "0dea7ba0-2caf-4f55-9c18-b64f28b4050a",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The content summarizes the \"Sign in with ID Token\" feature, which allows users to authenticate by providing an OIDC ID token. It outlines the required parameters, including the credentials and provider, and provides an example code snippet to demonstrate the sign-in process. This feature enables secure authentication with external identity providers, simplifying the integration of third-party authentication into the application."
  },
  {
    "chunk_id": "c9f1eaeb-74ba-4f88-83aa-6b4322ce10bd",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP (One-Time Password) feature allows users to sign in without a password, by receiving an OTP on their email or phone number. It can be used for both new user sign-ups and existing user sign-ins. Developers can configure whether to send an OTP or a magic link, and can customize the magic link's destination URL. The implementation for magic links and OTPs is the same, allowing developers to easily switch between the two options."
  },
  {
    "chunk_id": "bf044164-d17f-45ba-a118-24b08907c3ee",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided documentation describes the method for signing in a user through OAuth, a third-party authentication mechanism supported by Supabase. It outlines the `sign_in_with_oauth()` function, which takes a `provider` parameter to specify the third-party service (e.g., GitHub) and can be used with additional scopes. This functionality allows users to authenticate with Supabase using their existing third-party accounts, simplifying the sign-in process."
  },
  {
    "chunk_id": "d0d81664-1540-489a-bc6b-fb02f4920614",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the provided CLI commands. You can then use the `domain` property to start a sign-in flow based on the associated email domain, or the `provider_id` property to specify a different way to initiate the authentication flow, such as mapping specific user email addresses or using company-specific hints."
  },
  {
    "chunk_id": "118a36f6-17bd-4e06-8f13-ffec6047158b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth signs out the currently signed-in user, revoking the refresh token and deleting the JWT from the client-side. However, the access token JWT remains valid until it expires, even after sign-out. To use `sign_out()`, the user must be signed in first, and it will sign out all other sessions the user is logged into by default."
  },
  {
    "chunk_id": "6822dc6b-5b2e-4fbb-94b5-8f2bf472c2e1",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `verify_otp` method in the authentication API can be used to verify various types of one-time passwords (OTP), including SMS, email, and account recovery. The appropriate verification type should be determined based on the previous authentication method used. The `TokenHash` from the email templates can be used to sign in, and may be used with the PKCE flow for server-side auth."
  },
  {
    "chunk_id": "92b28458-5c21-4953-9ee4-2b917e759825",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method `get_session()` retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data on the server, as it could be tampered with. If you need verified, trustworthy user data, you should use the `get_user()` method instead. The method also automatically refreshes the access token if it has expired."
  },
  {
    "chunk_id": "1d9eefe5-793a-4b72-89f3-bd9017e3fce7",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The Retrieve a new session method returns a new session regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the current session. If the refresh token is invalid, an error will be thrown. This method is useful for refreshing the session whether or not the current one has expired."
  },
  {
    "chunk_id": "de809bde-cdab-4a27-801f-c14ce1194f9a",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. This method can be called with an optional JWT parameter, which if not provided, will use the JWT from the current session."
  },
  {
    "chunk_id": "d6be5845-239e-4c2f-a1c3-de0ea848d6c1",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The set_session method sets the session data using an access_token and refresh_token, refreshing the session if it has expired. If successful, a SIGNED_IN event is emitted. This method is critical for maintaining a valid session and handling session expiration."
  },
  {
    "chunk_id": "a54f3e52-1a38-4021-9379-5392e75545e1",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation outlines the multi-factor authentication (MFA) capabilities of the Supabase authentication system, which currently supports time-based one-time password (TOTP) as the secondary factor. Users can enroll up to 10 TOTP factors for recovery, eliminating the need to store recovery codes and reducing the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "3078965a-8864-4f5d-8875-5c089259dcdb",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a TOTP (time-based one-time password) factor using the Supabase Python library. The `mfa.enroll()` function is used to enroll the TOTP factor, and the returned `id` should be used to create a challenge. The documentation also provides references to other related functions, such as `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()`, which can be used to create, verify, and challenge the TOTP factor in a single step."
  },
  {
    "chunk_id": "3f7ef87e-a260-4e38-92be-809232d3892f",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which is demonstrated in the provided code example."
  },
  {
    "chunk_id": "5759e27a-8989-4208-8371-5e13bf92f3d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `supabase.auth.mfa.verify()` method, providing the `factor_id`, `challenge_id`, and the `code` received from the user. This is a critical step in the multi-factor authentication (MFA) process, where the system validates the user's identity before granting access."
  },
  {
    "chunk_id": "08979140-1bb0-449b-ab3a-4f4b4041be28",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` functions in a single step, taking in the `factor_id` and `code` as parameters."
  },
  {
    "chunk_id": "cfcc2454-2638-46ba-8375-045ad879ca1b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "The summary is: This section explains how to unenroll a multi-factor authentication (MFA) factor from a Supabase account. It provides an example code snippet showing the use of the `supabase.auth.mfa.unenroll()` function to unenroll a factor with the specified `factor_id`."
  },
  {
    "chunk_id": "2ec6c1fc-48b0-4019-b145-ad1cd883a9c9",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 represents the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 represents the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the AAL level the user will be authenticated at, based on their verified factors."
  },
  {
    "chunk_id": "391c636c-2a79-4c73-bd1f-d2eaf9f6211b",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function by making a request with an Authorization header. The function automatically attaches Content-Type headers for common data types, but allows overriding this behavior by providing a custom Content-Type header. Example invocation uses the \"hello-world\" function and passes a JSON payload in the request body."
  },
  {
    "chunk_id": "291dd92d-eadd-4140-85cf-60874180512e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The documentation covers the Supabase Realtime API for subscribing to various database events, including broadcasts, presence updates, and row-level changes. It explains how to enable database replication, set the replica identity, and handle different types of events using example code. The key points are the default settings for new projects, the ability to receive previous data for updates and deletes, and the limitations of row-level security for delete statements."
  },
  {
    "chunk_id": "47d0273b-7926-43bf-9b87-0864573110f0",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Removing a channel is recommended to maintain the performance of the Realtime service and database by reducing unused subscriptions. The `supabase.remove_channel()` function can be used to unsubscribe from a channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "5d87a458-d965-4efc-aa29-8eabada289b1",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain Realtime service performance and database efficiency. Supabase automatically cleans up disconnected channels after 30 seconds, but keeping too many active channels can degrade the system. The `supabase.remove_all_channels()` function allows users to remove all channels programmatically."
  },
  {
    "chunk_id": "3c7e90c2-84ba-45f4-b909-82c93511556c",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is:\n\nThe code snippet `_10  channels = supabase.get_channels()` retrieves all available channels from the Supabase platform. This functionality is useful for applications that need to display or interact with the full set of channels managed by the Supabase service."
  },
  {
    "chunk_id": "12b7858d-b56a-4bc6-a870-e29036d7dfa3",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It subscribes to a channel named \"room1\", and upon successful subscription, it sends a broadcast message containing random cursor position coordinates to all connected clients."
  },
  {
    "chunk_id": "3367733b-9a20-442f-ad2b-bc745155dd3f",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required RLS policy permissions are insert access to the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for details on access control. The `supabase.storage.create_bucket(name)` function is used to create a new bucket."
  },
  {
    "chunk_id": "6adc3bf2-44a6-4133-b6b5-90b626dcf9d2",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more details on how access control works. The code to get a bucket is `_10 res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "eb73aa86-af3b-43c8-b7dd-e0ebfb57c0dc",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the `select` permission is required on the `buckets` table. The `objects` table permissions are not required. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "6592af0c-b7e7-4ac6-897e-2fa370fff0cb",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are `select` and `delete` on the `buckets` table, with no permissions needed on the `objects` table. The specific command to delete a bucket is `_10 res = supabase.storage.delete_bucket(name)`. Refer to the Storage guide on access control for more information."
  },
  {
    "chunk_id": "6cd703cf-79bd-4201-91fc-22aeca2cf897",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. Refer to the Storage guide for more information on access control. The API method to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "48ba0a5b-a4c1-4336-99f0-615f02887124",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The appropriate MIME type should be specified for media files, otherwise the default is `text/html`. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and optional file options such as the content type."
  },
  {
    "chunk_id": "4e9b1292-1bb8-404a-b445-126dd3a85a1e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table, but `select` permissions for the `objects` table. The process involves using the `supabase.storage.from_()` method to download the file from the specified bucket, and then writing the downloaded content to the destination file."
  },
  {
    "chunk_id": "6b303e19-937a-42ce-9848-7eee958c0835",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The code to list the files is `supabase.storage.from_('bucket_name').list()`. Refer to the Storage guide for more information on Supabase storage access control."
  },
  {
    "chunk_id": "a6ae0964-df61-4c95-888a-e90eddb5f96e",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase storage, the required permissions are 'update' and 'select' on the 'objects' table. The file can be updated using the Supabase storage client by providing the bucket name, file path, and optional file options such as cache control and upsert."
  },
  {
    "chunk_id": "bbd683fc-6a25-41da-b3b4-4e0e8441b1ff",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase, the user requires \"update\" and \"select\" permissions on the \"objects\" table. The file can be moved using the `supabase.storage.from_('bucket_name').move()` function, specifying the source and destination file paths."
  },
  {
    "chunk_id": "79384630-8b83-4be4-8cc5-69c3a52ca9b5",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The `supabase.storage.from_('bucket_name').remove('test.jpg')` command can be used to delete the specified file. Refer to the Supabase Storage guide for more details on access control and permissions."
  },
  {
    "chunk_id": "aba743be-12f4-4b61-a4f7-6914dfda1a9f",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL for a file in Supabase Storage, the user requires `select` permissions on the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method and is valid for the specified expiry duration. Refer to the Supabase Storage guide for more details on access control."
  },
  {
    "chunk_id": "e44c88d5-cc51-4770-98df-1a4b7ba093d1",
    "source_url": "https://supabase.com/docs/reference/python/auth-refreshsession",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset in a Supabase storage bucket, the bucket must be set to public either via the `updateBucket()` function or the Supabase dashboard. No specific permissions are required for the `buckets` or `objects` tables. The `get_public_url()` function can then be used to obtain the public URL for a file, such as `supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')`."
  },
  {
    "chunk_id": "c4f2ca32-936b-4025-a89c-a744a2c7f97d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a powerful interface to interact with Supabase's services, including Postgres database management, real-time updates, Deno Edge Functions, authentication, and file storage. It offers a comprehensive set of objects and methods to build robust, scalable applications leveraging Supabase's backend infrastructure."
  },
  {
    "chunk_id": "8eff2d93-e65f-4b36-aec5-796e41755803",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: You can install the Supabase Python library (supabase-py) using the pip package manager. The library supports Python 3.7 and later versions, and the installation can be done through the terminal or a conda environment."
  },
  {
    "chunk_id": "5ad1628f-d886-4ebf-a833-537481e52c94",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to the Supabase ecosystem, allowing developers to interact with various Supabase functionalities. It can be initialized using the `create_client()` method, which requires the Supabase URL and Key as parameters, and optionally accepts client options to configure the authentication behavior."
  },
  {
    "chunk_id": "639724ac-c26f-4013-b51b-d23cfb322836",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to fetch data, and the `apikey` keyword should be avoided as a column name. The `select()` function supports parameters for specifying columns, count methods, and other advanced querying options, such as querying JSON data and referenced tables."
  },
  {
    "chunk_id": "89ddba6b-8e78-4f23-84af-536572b89cf8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The insert data functionality allows you to insert single or multiple rows into a table. It takes in a dictionary or a list of dictionaries as the `json` parameter, and optionally accepts parameters to control the count method, return method, and default behavior for missing fields. The example shows how to insert a single row with an `id` of 1 and a `name` of \"Denmark\" into the \"countries\" table."
  },
  {
    "chunk_id": "bc22f4b2-cffd-497a-a76e-ae213d916f12",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided documentation is used to modify existing data in a table. It should always be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or a list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted. An optional `countOptional` parameter can be used to specify the property to retrieve the count of rows affected by the update."
  },
  {
    "chunk_id": "9adfd87d-aa0f-441f-8a4b-cf02c2ca0c87",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Upsert data feature allows inserting or updating rows in a table based on primary key values. It requires including primary keys in the `values` dict, and supports options like specifying columns for UNIQUE constraint handling, defaulting missing fields to `null`, and controlling the response data. Upsert is useful for efficiently managing data updates in tables with constraints."
  },
  {
    "chunk_id": "fb650bfd-3086-4161-824d-703fcaefb31f",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `delete()` function in the Supabase client library should always be used with filters to target the specific items you want to delete. When using `delete()` with RLS (row-level security) enabled, only rows visible through the defined `SELECT` policies will be deleted. The `delete().in_()` method allows deleting multiple rows in a single query by passing an array of values, which is useful for batch deleting entries that share common criteria."
  },
  {
    "chunk_id": "dd1a55bd-05f5-499b-b4a9-8fee934feddf",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nYou can call Postgres functions as Remote Procedure Calls, which are useful when the logic rarely changes, such as for password resets and updates. The function call can take various parameters, including the function name, input parameters, read-only mode, and count algorithm for set-returning functions."
  },
  {
    "chunk_id": "8d77e538-9c0e-48ea-a20e-0d92d79a1690",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows in a database table that match certain conditions, and can be used with various database operations like `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other operations is important, as demonstrated by the example code."
  },
  {
    "chunk_id": "50e8b1ae-b8d6-4992-81eb-23f0e815200b",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe 'eq()' function in the Supabase library allows you to filter a table by a specific column being equal to a given value. The 'columnRequired' parameter specifies the column to filter on, and the 'valueRequired' parameter specifies the value to filter by. This can be used in conjunction with the 'select()' function to retrieve only the rows that match the filter criteria."
  },
  {
    "chunk_id": "27489ce3-72ac-4ea8-9a56-495447cc8889",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The content describes a filter operation that matches rows where a specified column is not equal to a given value. The key parameters are the column name and the value to filter by, as illustrated in the example using the Supabase library."
  },
  {
    "chunk_id": "ca82168d-5f42-4277-aa36-1b7224f232cd",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The provided content describes how to filter rows in a database table where a specified column has a value greater than a given value. The key parameters are the column name and the value to filter by. This functionality is demonstrated using the `gt()` method in the Supabase library, which allows for executing the filtered query."
  },
  {
    "chunk_id": "08c93729-38d9-4a30-95ef-acea375d5491",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to filter a database table to include only rows where the value in a specified column is greater than or equal to a provided value. The key parameters are the column name and the filter value. An example is provided using the Supabase library, where the `gte()` method is used to execute this filter on the \"countries\" table."
  },
  {
    "chunk_id": "6a4e0ac8-c27c-40e3-be41-1bc1eeb66f31",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes a filter operation that selects rows from a table where a specified column's value is less than a given value. The key parameters are the column name and the filter value. This functionality is demonstrated using the `lt()` method with the `select()` operation in the Supabase library."
  },
  {
    "chunk_id": "0db6ef32-a173-4243-87f2-db803b1d1301",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe column is filtered to include only rows where the specified column is less than or equal to the provided value. The parameters required are the column name and the value to filter by. This functionality can be used with the `select()` method, as shown in the example `supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()`."
  },
  {
    "chunk_id": "f6ea6dd7-7d14-47c4-b216-f3f1e20914a0",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Column matches a pattern\" feature allows filtering rows where a specified column matches a given pattern case-sensitively. The required parameters are the column name and the pattern to match. This functionality can be used with the `select()` method, as demonstrated in the example where the \"name\" column is filtered to include only rows containing \"Alba\"."
  },
  {
    "chunk_id": "1101be0a-2272-4fdd-bc19-8a71327628f4",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes a filter operation that matches rows where the specified column value matches the provided case-insensitive pattern. The `ilike()` function is used to perform this case-insensitive pattern matching, with the column name and pattern as required parameters. This can be useful for filtering data based on a flexible, case-insensitive search criteria."
  },
  {
    "chunk_id": "23e56483-507d-45af-a58e-211d6f39c40a",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe 'column is a value' feature allows filtering a table's rows where a specified column matches a given value, including checking for null, true, or false values. The parameters required are the column name and the value to match."
  },
  {
    "chunk_id": "e8e8d9b7-75e4-458a-b373-7d01a1ae3b26",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThis section describes the `in_()` function in the Supabase library, which allows filtering rows where the value in a specified column is included in a provided array of values. The `in_()` function takes two parameters: `column` (the column to filter on) and `values` (the array of values to filter by)."
  },
  {
    "chunk_id": "1bfaef7a-8e4e-4281-ac65-cfb23ff062ae",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content summarizes the functionality of the \"contains\" filter in Supabase, which is only applicable to jsonb, array, and range columns. This filter allows matching rows where the specified column contains every element present in the provided value. The summary highlights the required parameters, \"column\" and \"values\", and provides an example usage for filtering issues based on tags."
  },
  {
    "chunk_id": "4328797d-8a21-49f2-965f-4274cc7e787e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" operation is only relevant for jsonb, array, and range columns. It matches rows where every element in the specified column is contained by the provided value. The operation takes two parameters: the column to filter on and the value to filter with. Examples are provided for using this operation with array, range, and jsonb columns."
  },
  {
    "chunk_id": "7809b9b1-07d4-440c-88bd-50852cdcc00a",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" functionality is used to filter rows in a range column, where every element in the column is greater than any element in the specified range. The parameters include the column name and the range to filter with. This feature can be used with the `select()` method, as shown in the example, to retrieve data that matches the filter."
  },
  {
    "chunk_id": "025608d6-8675-49a1-9432-5ab1293994a8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the given content is:\n\nThe \"greater than or equal to a range\" filter is used to match rows where every element in the specified column is either contained in the given range or greater than any element in the range. This filter is applicable only for range columns, and the parameters are the column name and the range to filter with. The example demonstrates using this filter with the Supabase library to select rows from a \"reservations\" table where the \"during\" column matches the specified date/time range."
  },
  {
    "chunk_id": "b7b23e0b-c17f-4620-b08a-aaa751990839",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" section describes a filter for range columns in a database table. It allows selecting only rows where every element in the specified column is less than any element in the given range. The key parameters are the column name and the range to filter against, as demonstrated in the example using the Supabase library."
  },
  {
    "chunk_id": "145ad145-340b-432d-a9c7-ac38bdf66644",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary covers the \"Less than or equal to a range\" filter, which is only relevant for range columns. It allows matching rows where every element in the specified column is less than any element in the provided range. The filter is configured by passing the column name and the range as parameters, and can be used in a Supabase query to filter the data."
  },
  {
    "chunk_id": "b543be8f-cab4-47f5-94f2-1c2d4b859935",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Mutually exclusive to a range\" section is as follows:\n\nThis feature is only applicable to range columns. It filters rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The parameters include the column name and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column is mutually exclusive to the given date range."
  },
  {
    "chunk_id": "f793172e-c283-4b1e-bdf5-5fb81e9471fb",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This feature is only relevant for array and range columns. It allows filtering rows where the column and the provided value have an element in common. The key parameters are the column to filter on and the value to filter with. This can be used, for example, to filter issues where the tags column overlaps with the provided list of tags."
  },
  {
    "chunk_id": "874cb10a-5f0c-44f0-bd1d-b2f8db766dc8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Match a string\" functionality in the Supabase database, which allows filtering rows where a specified text or tsvector column matches the given query string. The summary includes the key parameters (column, query, and options) and a code example demonstrating how to use the text_search function for full-text search with normalization and configuration options."
  },
  {
    "chunk_id": "e8bf8feb-a7d5-4903-8ff4-0ff220a3a987",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is as follows:\n\nThe `match()` method in Supabase allows filtering rows where each column in the `query` keys has an equal associated value. It provides a concise way to perform multiple `.eq()` operations. The `match()` method takes a dictionary `queryRequired` as a parameter, where the keys represent the column names and the values represent the filter values."
  },
  {
    "chunk_id": "ffe93e09-da08-4ac0-9453-3dc80f1c36dd",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to use the `not_` operator in PostgREST filters to match rows that do not satisfy the given filter conditions. Examples are provided for filtering based on `in` and `contains` operations. Additionally, the summary shows how to use the `not_.is_()` method in the Supabase library to select rows where a column is not null."
  },
  {
    "chunk_id": "701510a3-9c53-4159-8862-f293a32b18e4",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the Supabase API expects the use of raw PostgREST syntax for filters, including the use of parentheses for 'in' filters, curly braces for array values, and the 'cs' and 'cd' modifiers for 'contains' and 'containedBy' operations. The or95() function can be used to combine multiple filters, and it can also be used to filter on referenced tables."
  },
  {
    "chunk_id": "de541636-1ac4-4993-8514-89a0cfbb2916",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the Supabase client library expects the use of raw PostgREST syntax for filter values. It supports various operators like `in`, `cs` (contains), and allows for filtering on specific columns and providing array values. The example demonstrates using `filter()` on a foreign table to select rows where the `name` column is in the set `(\"Algeria\",\"Japan\")`."
  },
  {
    "chunk_id": "95239fe3-8d6a-43da-be99-153fc1ba66a4",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers, unlike filters, can change the format of a query response, such as returning a CSV string. Modifiers must be specified after filters and only apply to queries that return rows, like `select()` or `rpc()` on a function with a table response."
  },
  {
    "chunk_id": "e0539787-6e34-4e82-887c-212095a50496",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the \"Order the results\" section is as follows:\n\nThe order() method allows you to order the query results by a specified column. The parameters include the column name, whether to order in descending order, the name of a foreign table to order, and whether to display null values first. An example is provided for ordering the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "58360ae0-d579-4c39-a82f-c7f669f810e7",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to limit the number of rows returned by a database query. The `limit()` method is used to specify the maximum number of rows to return, and can be applied to both the parent table and foreign tables. This functionality is useful for paginating data or optimizing query performance when only a subset of the data is required."
  },
  {
    "chunk_id": "aba7a8af-a4f6-43a1-a5ef-d1cf4e179874",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes how to limit the query result by specifying a range using the `from` and `to` parameters. This allows retrieving only the records within the specified range, respecting the query order. The `from` and `to` values are 0-based and inclusive, and the range can be applied to foreign tables as well as the parent table."
  },
  {
    "chunk_id": "dfcc208a-70af-4115-a2ce-24b515e97339",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe 'select().limit(1).single().execute()' method allows retrieving a single row of data from a Supabase table, rather than an array of objects. This is useful when you only need to retrieve a single record, as it returns the data as a single object instead of an array."
  },
  {
    "chunk_id": "a83696cb-48bd-4543-a3f3-3d714b81ef74",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a way to retrieve zero or one row of data from a table in Supabase, using the `maybe_single()` method. This is useful when you expect to find at most one matching row, as it returns the data as a single object instead of an array. The example demonstrates querying the \"countries\" table to find a row with the name \"Albania\"."
  },
  {
    "chunk_id": "722672bf-ab95-4404-9de8-3d8d9317f2ed",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary provides a concise overview of the \"Retrieve as a CSV\" functionality in the software documentation. It explains that this feature allows users to retrieve data from a table as a CSV (Comma-Separated Values) string, which can be useful for data export and integration purposes. The summary also includes an example of how to use the `csv()` method to execute the CSV retrieval."
  },
  {
    "chunk_id": "81323478-80fe-4ba1-ae92-b20ab23574ba",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe `explain()` method in Postgres allows developers to view the execution plan of a query, including details on WAL record generation, configuration parameters, buffer usage, and actual run time. While explain is not enabled by default for security reasons, it can be a valuable tool for debugging slow queries in non-production environments."
  },
  {
    "chunk_id": "d9f4e19e-810e-4fcb-a15d-8b69d03b083e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe create a new user functionality in Supabase allows users to sign up with an email and password, a phone number and password, or additional user metadata. By default, users need to verify their email address before logging in, but this can be disabled. If sign_up() is called for an existing confirmed user, an obfuscated/fake user object is returned if both email and phone confirmation are enabled, or a \"User already registered\" error is returned if either confirmation is disabled."
  },
  {
    "chunk_id": "4ef0672d-5d5e-4428-aaf0-93af38be2bf6",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up a captcha to prevent abuse, and provides an example of how to sign in anonymously using the `supabase.auth.sign_in_anonymously()` function, passing in the captcha token as an option. The key purpose is to allow users to interact with the system without providing any credentials."
  },
  {
    "chunk_id": "628213ec-f850-4ca8-96b3-c8146dee180b",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user to the application using either an email and password or a phone number and password. It provides a code example for signing in with email and password, and lists the required `credentialsRequiredSignInWithPasswordCredentials` parameter."
  },
  {
    "chunk_id": "125d116b-b2ad-4426-a47e-17cfca7af6dd",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in with an OIDC ID token using the Supabase authentication provider. It provides an example of the `sign_in_with_id_token()` function, which takes a `provider` and the user's `token` as parameters. This allows users to authenticate using an external identity provider, such as Google, without requiring them to create a separate account."
  },
  {
    "chunk_id": "b9e3e198-0027-4461-9628-10a90161cf2d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign in with OTP method allows users to sign in or sign up without a password, by sending a one-time passcode to the user's email or phone number. This passwordless approach can be configured to send either a magic link or an OTP. The method will automatically create a new user account if the user doesn't already exist, unless the `should_create_user` option is set to `false`. The destination URL for the magic link is determined by the `SITE_URL` configuration."
  },
  {
    "chunk_id": "5e5de04c-bbc3-4260-950b-1af2127eb4fe",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth, a method for authenticating users with a third-party provider. Supabase supports various third-party providers for this purpose. The method involves calling the `sign_in_with_oauth()` function and passing the provider as a parameter, such as `'github'`."
  },
  {
    "chunk_id": "d267e5dd-4d82-4e03-bf72-e5285be535cb",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, the developer must first establish a connection to an identity provider using the provided CLI commands. The `domain` property can be used to start the sign-in flow if an email domain has been associated with the identity provider, or the `provider_id` property can be used to specify a different way to initiate the authentication flow, such as mapping specific user email addresses or using company-specific tracking information."
  },
  {
    "chunk_id": "a7f3eb26-5dc9-4cd5-9359-767a6d79aa0d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the user's refresh token and deletes the JWT from the client-side, though the access token JWT will remain valid until it expires. The `sign_out()` method uses the global scope by default, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "03ea988c-1ed2-4f2e-8ffa-8e2ace086b6d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, recovery, and email change. The verification type should match the corresponding auth method called before `verify_otp`. The `TokenHash` from the email templates can be used for sign-in with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "2fd3e20f-1c5b-434d-b583-8bdc68f67548",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified user data is required, the `get_user` method should be used instead. The method also automatically refreshes the session if the access token has expired."
  },
  {
    "chunk_id": "479a9638-270e-43f1-aca0-750e751e9b6d",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.refresh_session()` retrieves a new session, regardless of the current session's expiration status. It takes an optional `refresh_token` parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown. This method ensures that the session is refreshed, whether the current one is expired or not."
  },
  {
    "chunk_id": "a50457a5-8ca1-48cb-b255-219addc61a0c",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method \"get_user()\" retrieves the user object from the database instead of the local session. It is useful for checking if the user is authorized by validating the user's access token JWT on the server. The method can be called either with the current session's JWT or with a custom access token JWT provided as an optional parameter."
  },
  {
    "chunk_id": "3f824eb7-be52-4bde-9401-ce3638ac9481",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session` sets the session data by taking an `access_token` and `refresh_token` as parameters. If the current session is expired, `set_session` will refresh it to obtain a new session. If the refresh token or access token is invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "e228780d-1f96-4733-9e5d-091ed3c3730c",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers Multi-Factor Authentication (MFA) methods supported by Supabase, which currently includes only time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors for recovery, up to a limit of 10, which provides a more secure alternative to recovery codes and reduces the attack surface."
  },
  {
    "chunk_id": "617e4dc1-9098-4d6e-8983-06aa124fe25b",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor as the only supported `factor_type` using the `mfa.enroll()` method. The returned `id` can be used to create, verify, or challenge and verify a TOTP factor in a single step using the corresponding `mfa` methods."
  },
  {
    "chunk_id": "4259872f-7f08-4d53-b7bc-a536220322b9",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The challenge can be verified using the `mfa.verify()` function, which takes the factor_id as a parameter."
  },
  {
    "chunk_id": "76eb76c0-777e-4dd6-918e-5e4ac2ba827a",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, the user must first create a challenge using the `supabase.auth.mfa.verify()` function, providing the `factor_id`, `challenge_id`, and `code` parameters. This allows the user to authenticate a multi-factor authentication (MFA) challenge for a specific factor."
  },
  {
    "chunk_id": "162a5390-5d2e-43e8-a154-612e3f1e04f8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes both the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor with a provided code."
  },
  {
    "chunk_id": "ac6506c6-ee5c-4eca-8345-5af4b625da88",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, the code `supabase.auth.mfa.unenroll({ \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225' })` can be used. This API call removes the specified multi-factor authentication factor from the user's account, allowing them to bypass that additional verification step during authentication."
  },
  {
    "chunk_id": "a7258df4-18bc-40bf-9aa9-6b881d73f77e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL of `aal1` represents the first factor of authentication (e.g., email and password), while `aal2` represents the second factor (e.g., time-based, one-time-password). The `next_level` field indicates the user's verified authentication level, either `aal1` or `aal2`. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "6bbb2160-c66c-4f05-93b1-8beb01975046",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is:\n\nInvokes a Supabase Edge Function by making a request with an Authorization header. The function automatically attaches content-type headers for common data types, but this behavior can be overridden by providing a custom content-type header. An example is provided that invokes the \"hello-world\" function and passes a JSON payload in the request body."
  },
  {
    "chunk_id": "204acc81-e5d4-4f86-9178-81bdf8c557cb",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all Supabase projects, but listening to database changes is disabled due to performance and security concerns. Developers can enable this feature by managing Realtime's replication. The Realtime API provides various event listeners, such as broadcasting messages, tracking presence changes, and listening to database insert, update, and delete events. This allows real-time collaboration and data synchronization features to be easily implemented in applications."
  },
  {
    "chunk_id": "fe3480bc-f1f8-4b90-b073-b3ad433b9e4e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain the performance of the Realtime service and the database by removing unused channels. The `supabase.remove_channel(myChannel)` function can be used to remove a specific channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "c4a57a41-fa4c-4bc5-81ff-7e9a1ec56ad8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain Realtime service and database performance. Supabase automatically cleans up disconnected channels after 30 seconds, but excessive unused channels can cause degradation. The `supabase.remove_all_channels()` function can be used to remove all channels, which helps optimize resource usage."
  },
  {
    "chunk_id": "ead4158b-ae5a-4fe7-897c-45c52fb23ced",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code `_10  channels = supabase.get_channels()` retrieves all channels from the Supabase database. This functionality allows users to access and work with the complete set of available channels programmatically."
  },
  {
    "chunk_id": "aaa27136-08a5-4cb4-b4b3-7c151fcf86ae",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to broadcast a message to all connected clients in a channel using the Supabase realtime API. The code subscribes to a channel named 'room1' and upon successful subscription, sends a broadcast message containing random x and y coordinates to all connected clients."
  },
  {
    "chunk_id": "5ddbe3b3-e9b0-4299-b467-7c90302b6fd4",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a new bucket, the required RLS policy permissions are `insert` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more information on access control. The code to create a new bucket is `_10  res = supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "6849f148-6986-4720-a5b4-eb0d73f37c01",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. Refer to the Storage guide for information on how access control works. The code to get a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "7315c305-ac53-40c1-9596-fa05cd77682f",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all storage buckets, the `supabase.storage.list_buckets()` function is used. This requires `select` permissions on the `buckets` table, but no permissions on the `objects` table. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "921f94e3-bc5e-4b46-b565-ed811dad5cf8",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the user requires `select` and `delete` permissions on the `buckets` table, but no permissions on the `objects` table. The `supabase.storage.delete_bucket(name)` function can be used to delete the specified bucket."
  },
  {
    "chunk_id": "5b250aaf-e7f1-4e05-8355-57f5f9a8c5d2",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The Supabase storage guide provides information on how access control works for this operation, which can be invoked using the `supabase.storage.empty_bucket(name)` function."
  },
  {
    "chunk_id": "0252f7df-6932-4732-9dda-23f8e6c56594",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the `objects` table permissions must include `insert`. The appropriate MIME type should be specified, especially for images or audio files. Files can be uploaded using the `supabase.storage.from_().upload()` method, providing the file path and the desired storage path, along with the file's content type."
  },
  {
    "chunk_id": "70d54e2c-523a-462a-8843-26106bcdb40a",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are `select` on the `objects` table. The download operation is performed by opening the destination file in write mode and writing the content retrieved from the Supabase storage using the `download()` method."
  },
  {
    "chunk_id": "7f104ed3-8795-4f49-9c08-5d45ed819b1e",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list files in a Supabase storage bucket, the `select` permission is required on the `objects` table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve a list of all files in the specified bucket."
  },
  {
    "chunk_id": "fa3d76ca-9573-458f-9fb1-0e432ff57120",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the necessary permissions are 'update' and 'select' on the 'objects' table. The file can be updated by opening the local file, then using the `supabase.storage.from_()` method to update the file on Supabase Storage, specifying the bucket name, file path, and optional file options such as cache control."
  },
  {
    "chunk_id": "6c34dd15-4d77-4290-94fc-8c4c72796807",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file in Supabase storage, the required RLS policy permissions are `update` and `select` on the `objects` table. The file can be moved using the `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` method. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "ba751386-a82f-46a1-a9a2-234220ee6591",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete files in a Supabase storage bucket, the required permissions are 'delete' and 'select' on the 'objects' table, while no permissions are needed on the 'buckets' table. The 'supabase.storage.from_().remove()' method can be used to delete a file, such as 'test.jpg', from the specified bucket."
  },
  {
    "chunk_id": "faf72b5f-aa52-45c6-8fd2-09e2a3494ae4",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the `objects` table permissions must have `select` access. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, and the expiration duration can be specified. This allows users to access the file temporarily without requiring full storage permissions."
  },
  {
    "chunk_id": "a0556513-f70d-403a-a48c-2685d4da5a86",
    "source_url": "https://supabase.com/docs/reference/python/select",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve the public URL of an asset in a Supabase storage bucket, the bucket must be set to public either through the updateBucket() method or the Supabase dashboard. No specific permissions are required for the buckets or objects tables. The public URL can be obtained using the get_public_url() method, passing the file path as an argument."
  },
  {
    "chunk_id": "67da67d2-a6db-4a57-9c3c-bc6cfdb198eb",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive set of features to interact with Supabase's Postgres database, including listening to database changes, invoking Deno Edge Functions, building login and user management functionality, and managing large files. This library offers a convenient way for Python developers to leverage the Supabase platform and its capabilities within their applications."
  },
  {
    "chunk_id": "53700229-b480-4ed8-8ee5-8cafce979833",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The summary is: You can install the Supabase Python library (supabase-py) using pip, the standard Python package installer. The library supports Python 3.7 and newer versions, and the installation can be done via the terminal or using a Conda environment."
  },
  {
    "chunk_id": "52bcce6e-68ac-4362-8b08-eacc12880bdd",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface to interact with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and Key as required parameters, and optional client options to configure authentication behavior. The Supabase client provides access to the full range of Supabase functionality, making it the central entry point for working with the platform."
  },
  {
    "chunk_id": "f2cf0029-4f01-41b4-a3ba-ce7ec2b29dad",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes how to fetch data from a Supabase project, including information on pagination, combining `select()` with filters and modifiers, and avoiding the reserved keyword `apikey`. It also provides example code and outlines key parameters like columns and count methods for querying the database."
  },
  {
    "chunk_id": "d0d2a4e2-26c7-494a-9d89-ff099a4b268c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Insert data\" section provides details on the parameters and usage of the `insert()` method in the Supabase library. It allows inserting a single row or multiple rows of data into a table, with optional parameters to control the response format and default behavior for missing fields. The example demonstrates how to use the `insert()` method to create a new record in the \"countries\" table."
  },
  {
    "chunk_id": "345734bf-029f-46ae-ac48-46011dd5a6c3",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to modify existing data, and it must be combined with filters to target the specific items to be updated. The `update()` method takes a dictionary or list of dictionaries representing the new values to be inserted, and an optional `count` parameter to retrieve the number of affected rows."
  },
  {
    "chunk_id": "fc25181d-b818-436b-a92e-64647bf3bd8c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe upsert operation in Supabase allows inserting or updating data in a table based on the primary key. Primary keys must be included in the `values` dict to use upsert. The `upsert()` method supports several parameters, such as `count` to get the count of rows returned, `returning` to specify the data to be returned, `ignore_duplicates` to ignore duplicate rows, and `default_to_null` to set missing fields to null. Upsert is useful for tables with unique constraints, as it can handle conflicts without throwing errors."
  },
  {
    "chunk_id": "c10d2fa2-0d3b-479b-ba41-a309bc0494af",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nTo delete data, the `delete()` method should be combined with filters to target specific items. When using `delete()` with row-level security (RLS) enabled, only rows visible through `SELECT` policies are deleted. The `delete().in_()` method allows deleting multiple rows in a single query by specifying an array of values. The `countOptional` and `returningOptional` parameters can be used to control the count and returned data, respectively."
  },
  {
    "chunk_id": "d966522a-2018-48ca-8b66-9ccf28057b92",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes how to call Postgres functions as Remote Procedure Calls (RPC) in a Supabase client. It provides details on the parameters available for the RPC call, including options to pass arguments, use filters, and execute the function in read-only mode. The key technical points are the ability to execute database logic from anywhere and the different counting algorithms available for set-returning functions."
  },
  {
    "chunk_id": "165bba4a-d223-463a-9e34-303600387450",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specific conditions when performing select, update, upsert, and delete queries in Supabase. Filters can also be applied to Postgres functions that return a table response. The correct way to apply filters is to chain them before the select operation, as demonstrated in the example code."
  },
  {
    "chunk_id": "2f130aae-cc8c-4027-9b2f-54206cae4a30",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to filter a database table by a specific column being equal to a given value. It outlines the required parameters, `column` and `value`, and provides an example of using the `eq()` method with the `select()` function to execute this query."
  },
  {
    "chunk_id": "55b16064-c482-4fbc-b94b-8d7be6257dea",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe documentation describes the \"column is not equal to a value\" filter, which allows matching only rows where the specified column is not equal to the provided value. The filter takes two required parameters: the column name and the value to filter by. This functionality can be used with the `select()` method to retrieve data that does not match the specified value."
  },
  {
    "chunk_id": "57e30037-403e-4000-87c0-7859312ac276",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to only include rows where a specified column has a value greater than a given value. The key parameters are the column name and the filter value. An example is provided using the Supabase library's `gt()` method to filter a \"countries\" table by an \"id\" column greater than 2."
  },
  {
    "chunk_id": "93dc6d42-f06e-45b0-a3cd-94f41a137bb6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for this section is:\n\nThe `gte()` method in the Supabase client library allows filtering a database table to include only rows where the specified column is greater than or equal to the provided value. The method takes two required parameters: the column name and the value to filter by."
  },
  {
    "chunk_id": "db75154b-827b-4c5b-b9db-a90e00ae2a80",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the `lt()` (less than) method in the Supabase library to filter a table and retrieve rows where the specified column value is less than the provided value. The `columnRequired` and `valueRequired` parameters define the column to filter on and the value to compare against, respectively."
  },
  {
    "chunk_id": "29b08d91-49ef-4e20-85a3-10fe5b295e61",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This section describes how to filter a database table to include only rows where a specified column is less than or equal to a given value. The key parameters are the column name and the value to compare against, and an example is provided using the Supabase library's `lte()` method."
  },
  {
    "chunk_id": "873672b6-7909-42d6-9e7f-de1ec2098bbe",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column matches a pattern\" feature allows filtering rows where a specified column matches a given pattern case-sensitively. The parameters include the column name and the pattern to match. This can be used in a `select()` query, for example, to retrieve countries where the \"name\" column contains \"Alba\"."
  },
  {
    "chunk_id": "8e91468b-9d8f-49ad-b871-591795a12cb6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the `ilike()` function, which allows you to apply a case-insensitive filter on a column using a provided pattern. The function takes two parameters: `column` (the name of the column to filter on) and `pattern` (the pattern to match against). This is a useful feature for querying data without having to worry about the capitalization of the values in the specified column."
  },
  {
    "chunk_id": "0e046a4e-e9a4-45c5-b205-9b83a7ec1be1",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Column is a value\" section describes a filter that matches rows where the specified column has the provided value. The key parameters are the column name and the value to match, which can include checking for null, true, or false values. This filter can be useful for querying data sources and inspecting the response."
  },
  {
    "chunk_id": "e1404055-616c-4bcc-ab44-ea72e8347467",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis section discusses the 'in_' function in the Supabase library, which allows filtering a table based on whether a column's value is present in a provided array. The 'columnRequired' parameter specifies the column to filter on, while the 'valuesRequired' parameter is the array of values to match against. This functionality is demonstrated in an example query that selects rows from the 'countries' table where the 'name' column is 'Albania' or 'Algeria'."
  },
  {
    "chunk_id": "e49e18af-2495-4529-aa15-6cd63d63d333",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"contains\" filter is only applicable to jsonb, array, and range columns. It matches rows where the specified column contains every element present in the provided value. The filter takes two parameters: the column name and the value (which must be a jsonb object, array, or range) to filter against. This can be useful for querying data structures like tags or priority ranges stored in database columns."
  },
  {
    "chunk_id": "04c35e1a-b859-4423-92f3-c8da295a0904",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" operation is applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The parameters include the column name and the value to filter with. This operation is useful for querying data stored in array, range, or jsonb formats."
  },
  {
    "chunk_id": "e020ab48-841c-4b45-8c8f-1ddf404065d0",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" functionality is relevant for range columns, allowing you to match only rows where every element in the specified column is greater than any element in the provided range. The key parameters are the column name and the range to filter with. This can be used in a Supabase query to select rows where the \"during\" column has values greater than the given date range."
  },
  {
    "chunk_id": "5fee0e94-45f1-4a5b-86bf-ded217eb2ff2",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" functionality is only applicable to range columns. It allows filtering rows where every element in the specified column is either contained in the given range or greater than any element in the range. The parameters required are the column name and the range to filter with."
  },
  {
    "chunk_id": "5741ce11-3613-4418-a0f4-f0487883e39d",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter range columns, matching only rows where every element in the specified column is less than any element in the provided range. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to select the relevant data."
  },
  {
    "chunk_id": "d1a53014-fde1-405d-86ec-1012b556b656",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" filter is used for range columns, allowing you to match rows where every element in the specified column is less than or equal to any element in the provided range. It takes two parameters: the column to filter on and the range to filter with. This functionality can be used in the `select()` method to filter data, such as selecting reservations where the \"during\" column is less than or equal to the given date range."
  },
  {
    "chunk_id": "1fd32749-f138-47d8-833a-d44f73a788c5",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe \"Mutually exclusive to a range\" feature is applicable only for range columns in a database table. It allows filtering rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. The required parameters are the column name and the range to filter with, which can be used in a Supabase `select()` query to retrieve the relevant data."
  },
  {
    "chunk_id": "1b9ce9e6-449f-4976-b998-7196c74d058c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis feature is only applicable to array and range columns. It allows filtering rows where the specified column and value have an element in common. The parameters include the column to filter on and the value to filter with. Examples are provided for filtering on array and range columns."
  },
  {
    "chunk_id": "8d01a2ed-a234-4422-b7dd-82f1b9d3ce65",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content summarizes the \"Match a string\" feature, which is used to filter rows in a text or tsvector column based on a query string. It provides details on the required parameters (column and query) and optional parameters (options object for specifying text search configuration). The feature is useful for implementing full-text search functionality in a database, as demonstrated in the example code."
  },
  {
    "chunk_id": "535178ca-c575-42d4-8857-0facbc8a19c2",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `match()` method in the Supabase client library allows filtering a database table by matching each column in the `query` object to its associated value. This is a shorthand for multiple `eq()` calls, making it more concise to filter data based on multiple criteria. The `match()` method takes a required `query` parameter, which is an object with column names as keys and their corresponding filter values."
  },
  {
    "chunk_id": "488fe3bf-4e4f-45e4-b9b8-f7afbd8fdd8e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on how to match rows that do not satisfy a given filter in a PostgreSQL database. It demonstrates the use of the `not_` modifier to negate the filter criteria, including examples for `in` and `contains` filters. The summary also shows an example of using the `not_.is_` function in a Supabase query to select rows where the `name` column is not `null`."
  },
  {
    "chunk_id": "7506016a-91f9-4911-b34c-f69cdda17673",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation explains how to use the `or_()` function in the or95 library to match at least one filter in a query. It provides examples of using the `in`, `contains`, and `containedBy` operators with the `or_()` function, and notes that the filter syntax follows the PostgREST syntax. The documentation also mentions the optional `reference95table` parameter to filter on referenced tables instead of the parent table."
  },
  {
    "chunk_id": "53c887c7-027a-4a36-a51b-135812efbd96",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the Supabase client library expects the use of raw PostgREST syntax for the filter values. Examples include using parentheses for the 'in' operator and backslashes for array values. The filter() method can be used in conjunction with the select() method to filter data from foreign tables, such as filtering the 'countries' table by name."
  },
  {
    "chunk_id": "9fc2d69a-244a-4ffd-a890-f975d74e2535",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate on the row level. Modifiers must be specified after filters and are applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "380a79e0-1c9e-4895-ae64-0b6dc0ef7af8",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` function allows ordering the query results by a specified column in ascending or descending order. The key parameters are `column` (the column to order by), `desc` (whether to order in descending order), `foreign_table` (the foreign table to order results from), and `nulls_first` (whether to show null values first). This can be used with the `select()` function on a foreign table to order the results."
  },
  {
    "chunk_id": "1cdbdcbb-bf11-4d3f-bcc0-bc1e2e836daf",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to limit the number of rows returned in a database query. The `limit()` function is used to specify the maximum number of rows to return, and can be applied to both the parent table and foreign tables. This feature is useful for pagination, performance optimization, and retrieving a subset of data."
  },
  {
    "chunk_id": "e7038a85-86f1-41df-82ec-e572f6500b99",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `range()` function in the query allows limiting the result set to a specified range of records, defined by an `from` (starting index) and `to` (ending index) parameter. This can be useful for paging through large result sets, while respecting the query order. The function can also be used to limit rows of foreign tables instead of the parent table."
  },
  {
    "chunk_id": "d5c02dcc-ad0f-46f5-bd36-15cd04d2de40",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides a concise way to retrieve a single row of data from a Supabase table using the `select()` method with the `limit(1)` and `single()` modifiers. This approach returns the data as a single object instead of an array, simplifying the processing of the response."
  },
  {
    "chunk_id": "bafc1c63-481d-45a0-804e-d3fb297b4c01",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase library. This method returns the data as a single object instead of an array of objects, which is useful when the query is expected to return at most one result. The example shows how to use `maybe_single()` to retrieve a row from the \"countries\" table where the \"name\" column equals \"Albania\"."
  },
  {
    "chunk_id": "9c180e6b-04fd-489a-b609-d896fb688b70",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes how to retrieve data from a Supabase table as a CSV string. This is achieved by calling the `csv()` method on the table's `select()` operation, which generates a CSV representation of the selected data. This feature is useful for exporting data in a common, structured format for further analysis or sharing."
  },
  {
    "chunk_id": "f984aa59-cdb9-4d14-91cf-708b8c0e2209",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, even for `rpc()` or write operations. While `explain()` is not enabled by default due to potential security concerns, it can be enabled for testing environments or production with additional safeguards. The `explain()` method supports various parameters such as `wal`, `verbose`, `settings`, `format`, `buffers`, and `analyze` to customize the output and behavior."
  },
  {
    "chunk_id": "594b9983-5441-4491-ba87-fbbd5a5cdca7",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers creating a new user in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled in the project settings. It also discusses the behavior when sign_up() is called for an existing confirmed user, and how to fetch the currently logged-in user using the get_user() function. The documentation provides details on the various sign-up options, including email/password, phone number/password, and additional user metadata."
  },
  {
    "chunk_id": "50ef0b8a-9667-469c-aa2b-d2d2b522488e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the `sign_in_anonymously()` function, which returns an anonymous user. It is recommended to use a captcha token in the `options` parameter to prevent abuse of anonymous sign-ins. The function can also be used to create an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "ce226edd-cab9-48f3-b108-612d6888dbbe",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides code examples for the `supabase.auth.sign_in_with_password()` function, which takes the user's credentials as input and returns a response."
  },
  {
    "chunk_id": "799f3215-20b3-49d1-8d49-bfd47bb3189f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary for the provided content is:\n\nAllows signing in with an OIDC ID token by calling the `supabase.auth.sign_in_with_id_token()` function, which takes the provider (e.g., \"google\") and the ID token as parameters. This feature enables authentication using a configured OIDC provider, providing a convenient way for users to sign in with their existing identities."
  },
  {
    "chunk_id": "11df97ef-c4e0-49dc-a4d8-8e4921b842e5",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes how to sign in a user through One-Time Password (OTP) authentication, which requires an email or phone number. This passwordless sign-in method can automatically create a new user if they don't already exist, with an option to disable this behavior. The method supports sending either a magic link or an OTP, and the magic link's destination URL is determined by the configured `SITE_URL`. The implementation of magic links and OTPs is shared, and the email template can be modified to send a one-time code instead of a magic link."
  },
  {
    "chunk_id": "e0929372-1b67-4b42-897f-34d16d234fca",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The method `sign_in_with_oauth` is used to sign in a user through a third-party provider such as GitHub. Supabase supports various third-party providers for authentication. The method takes a `provider` parameter to specify the provider, and the response contains the signed-in user's credentials."
  },
  {
    "chunk_id": "b788bbc0-c63c-472e-b25d-063a7c51474c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the user's email domain or a provider ID to start the authentication flow. This allows for various sign-in options, such as mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "70c12fb2-4371-4454-a9a8-4b9fb967dcf1",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is already signed in. This revokes the user's refresh token and deletes the JWT from the client-side, but does not invalidate the existing JWT until it expires. By default, `sign_out()` signs out the user from all their active sessions."
  },
  {
    "chunk_id": "dbf7e710-b908-4e21-8a84-93c3280aa7d1",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify the one-time password (OTP) for user authentication, supporting different verification types like SMS, email, recovery, and invite. The verification type should be determined based on the corresponding auth method used before calling `verify_otp`. The `TokenHash` obtained from the email templates can be used for signing in the user, and it can also be used with Magic Links for the PKCE flow in server-side authentication."
  },
  {
    "chunk_id": "92b384e0-8071-4d93-b2cb-4539acadca3f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The `get_session()` method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user()` method should be used instead. The method also handles refreshing the access token if it has expired."
  },
  {
    "chunk_id": "c7fac056-ec2f-40be-93e8-b54f85cb7fd7",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token as a parameter, and if none is provided, it will attempt to retrieve it from the existing session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "e9a5a9e9-e4ad-4bc5-8693-80a5ab944d07",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` fetches the user object from the database instead of the local session, which is useful for checking if the user is authorized by validating the user's access token JWT on the server. It can be called with an optional access token JWT, otherwise the JWT from the current session is used."
  },
  {
    "chunk_id": "61ae349a-dc4b-4264-a562-78864741c01c",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The method `set_session()` sets the session data using an `access_token` and `refresh_token`. If the current session is expired, it will refresh the session to obtain a new session. If the tokens are invalid, an error will be thrown. Upon successful execution, a `SIGNED_IN` event is emitted."
  },
  {
    "chunk_id": "632df8e5-5cf3-4bd0-a85b-716562c61e0f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The section covers the methods for Multi-Factor Authentication (MFA) provided by Supabase, which currently supports time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to 10, to enable recovery and reduce the attack surface compared to using recovery codes."
  },
  {
    "chunk_id": "c2702f53-210b-4b60-9ecc-45174dd57a3e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation covers the process of enrolling a TOTP (time-based one-time password) multi-factor authentication factor with the Supabase Python client. The `mfa.enroll()` method is used to enroll the TOTP factor, and the returned `id` can be used to create and verify challenges. The documentation also references related methods for creating, verifying, and combining challenge and verification steps."
  },
  {
    "chunk_id": "fdd82e5e-0b11-4034-8eab-43565cc5ef05",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "6f81af2c-663c-4bc0-afa7-fe58d2f8a781",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the `/docs/reference/python/auth-mfa-challenge` endpoint. The `supabase.auth.mfa.verify()` function can then be used to verify a challenge by providing the `factor_id`, `challenge_id`, and the `code` received from the user."
  },
  {
    "chunk_id": "94a0590f-4e8b-4424-bf24-8e8897868fc3",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` methods in a single step, allowing developers to challenge and verify a factor's authentication code in a single operation."
  },
  {
    "chunk_id": "d2330165-de27-4a0b-823f-c52e86de0fb5",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, you can use the `supabase.auth.mfa.unenroll()` method, passing the `factor_id` as a parameter. This allows you to remove a previously enrolled multi-factor authentication factor from the user's account."
  },
  {
    "chunk_id": "0df961ec-0c89-4f53-b968-4bfd07aff838",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password or OAuth sign-in), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field in the API response indicates the level of authentication required for the user, with AAL2 returned if the user has a verified factor, and AAL1 returned otherwise."
  },
  {
    "chunk_id": "360c7139-9d64-46ce-b632-2f0205d0ab63",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function, which requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the payload type, but this can be overridden. The function can be invoked with a custom body, and the response can be handled for any errors."
  },
  {
    "chunk_id": "b631ec01-391b-40be-b332-7e8a3ffc2cb4",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The content discusses the default behavior of Broadcast and Presence features in Supabase projects, as well as techniques for listening to database changes, such as setting the table's REPLICA IDENTITY to FULL and handling row-level security. It also provides example code demonstrating how to subscribe to various Realtime channel events, including broadcasting messages and handling received broadcasts."
  },
  {
    "chunk_id": "344f3c9c-d840-43a9-860c-e8530b168c63",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain performance of the Realtime service and database, as unused channels can cause degradation with more clients subscribed. The `supabase.remove_channel()` function allows you to remove a specific channel, which Supabase will automatically clean up 30 seconds after the client disconnects."
  },
  {
    "chunk_id": "372cb85a-717a-4fd0-b530-c2d553398860",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Removing unused channels is recommended to maintain the performance of the Realtime service and the database. Supabase automatically handles channel cleanup 30 seconds after a client disconnects, but unused channels can degrade performance as more clients subscribe. To remove all channels, use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "5829d413-44b3-4b13-84df-6d29b4b1adc6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code `_10  channels = supabase.get_channels()` retrieves all channels from the Supabase database. This is a fundamental operation for accessing and working with channel data in the application."
  },
  {
    "chunk_id": "7964108b-9c79-40c8-94a8-a0d25d815674",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The provided code demonstrates how to broadcast a message to all connected clients on a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and when the subscription is successful, it sends a broadcast message containing randomly generated x and y coordinates."
  },
  {
    "chunk_id": "b1690957-48a5-4fdd-8698-a60d5ede5629",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the required RLS policy permissions are `insert` access to the `buckets` table and no permissions needed for the `objects` table. Refer to the Storage guide for details on how access control works."
  },
  {
    "chunk_id": "13103edb-e16b-43b1-8d0c-619766ae64e6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and no permissions on the 'objects' table. The Storage guide provides information on how access control works for this operation."
  },
  {
    "chunk_id": "34d27a16-ea51-41ce-bc54-355977ae4828",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more details on access control. The code to list buckets is `supabase.storage.list_buckets()`."
  },
  {
    "chunk_id": "23c364e4-3b35-43b8-8c65-0554b65367f0",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are: `select` and `delete` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide on access control for more information. The code to delete a bucket is `res = supabase.storage.delete_bucket(name)`."
  },
  {
    "chunk_id": "d1f02fa8-f2ce-4224-aff6-256de51786c6",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are: `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for more information on access control. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "2868596c-7058-4329-bef1-39ddad44bb71",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the user requires the `insert` permission on the `objects` table. The appropriate MIME type should be specified for the file, defaulting to `text/html` if not provided. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, passing the file content and path, along with the desired MIME type in the `file_options` parameter."
  },
  {
    "chunk_id": "87360f94-9994-479b-a20c-0df39d0d135e",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file from Supabase storage, the user requires the `select` permission on the `objects` table. The download process involves opening the destination file and using the `supabase.storage.from_()` method to download the file content and write it to the destination file."
  },
  {
    "chunk_id": "69a95006-c958-4fe1-ad80-eab1a7fe863d",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The code to execute this operation is `supabase.storage.from_('bucket_name').list()`. Refer to the Storage guide for more information on Supabase access control."
  },
  {
    "chunk_id": "0cd4cf55-b986-4250-92f2-d6d13184f730",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which allows setting file metadata like cache control and upsert behavior."
  },
  {
    "chunk_id": "b5f4a763-1de7-4b6e-a993-5a4d1a5f7714",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code to move a file from 'public/avatar1.png' to 'private/avatar2.png' within the 'bucket_name' bucket is `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')`. Refer to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "61c6d707-303e-4747-bff6-d63ea7ee387f",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file from a Supabase storage bucket, the user requires the `delete` and `select` permissions on the `objects` table. The summary also notes that the Storage guide provides more information on Supabase access control."
  },
  {
    "chunk_id": "b7a14ef0-05ca-4b18-a831-1a425c716e1a",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the required RLS policy permissions are: no permissions for the `buckets` table, but `select` permissions for the `objects` table. The signed URL can be created using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` method, which allows secure, time-limited access to a specific file in the storage bucket."
  },
  {
    "chunk_id": "3117affa-7726-4be7-88db-37d16eaf8f46",
    "source_url": "https://supabase.com/docs/reference/python/insert",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must first be set to public, either via the `updateBucket()` API or the Supabase dashboard. No permissions are required for the `buckets` or `objects` tables. The `get_public_url()` function can then be used to retrieve the public URL for a specific asset in the public bucket."
  },
  {
    "chunk_id": "b2b94db5-f60d-421c-ba75-13c2f1546f59",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The supabase-py library is a Python client library that allows developers to interact with their Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files. It provides a comprehensive set of objects and methods to programmatically access and manipulate data within the Supabase ecosystem."
  },
  {
    "chunk_id": "e583b1d7-dc7e-4d68-b7f3-bb74ea69d974",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "The documentation describes how to install the supabase-py library using PyPi, the Python package index. Users can install the library via the terminal using the `pip install supabase` command, which works for Python versions greater than 3.7. The installation process is straightforward and can be done using either the native pip tool or through the Conda package manager."
  },
  {
    "chunk_id": "1da56cc8-ac60-45bb-bf8f-b11dccec2027",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which takes the Supabase URL and key as required parameters, and optional `ClientOptions` to configure authentication behavior. The Supabase client provides access to all of Supabase's functionality, making it the central starting point for developers using the Supabase platform."
  },
  {
    "chunk_id": "47c1c67c-87d8-457d-a625-b54f225a03b3",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Supabase documentation covers fetching data, including the default 1,000-row limit that can be adjusted, using `select()` with filters and modifiers, and avoiding the reserved keyword `apikey` when using the Supabase Platform. It also provides parameters for selecting specific columns and using count options when querying data, including JSON data and referenced tables through joins."
  },
  {
    "chunk_id": "d648b53a-c786-4ad0-bba3-c226224cbe02",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the given content is as follows:\n\nThe 'insert data' section outlines the parameters for inserting data into a table, including the required 'jsonRequired' parameter to pass a single row or multiple rows, and optional parameters to specify the count method, return method, and whether to use null values for missing fields. It provides an example of how to perform a bulk insert operation using the Supabase library."
  },
  {
    "chunk_id": "53b0ef60-ff33-4e29-8570-55eb451eca31",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the Supabase library is used to modify existing data in a table. It must be combined with filters to target the specific rows to be updated. The `update()` method takes a dictionary or list of dictionaries as the `jsonRequired` parameter, representing the new values to be inserted. An optional `countOptionalCountMethod` parameter can be used to retrieve the number of rows affected."
  },
  {
    "chunk_id": "ac7ae57c-89dd-4cfa-bdf3-aa5e8613fea3",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the above content is as follows:\n\nThe \"upsert\" operation allows inserting or updating data in a table, with the primary keys specified in the `values` dict. It supports bulk upserts, and provides options to control the behavior, such as ignoring duplicates, specifying columns to work with unique constraints, and defaulting missing fields to null. The \"upsert\" method is demonstrated with an example of inserting or updating a row in the \"countries\" table."
  },
  {
    "chunk_id": "82ce2f7c-7693-4c92-b230-ab8350ef7e13",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nWhen deleting data, always use filters to target the specific items you want to delete. If row-level security (RLS) is enabled, only rows visible through the defined SELECT policies will be deleted. The delete() method can be used with the in_() function to delete multiple records in a single query, which is useful for batch deletions. The delete() method also supports optional count and returning parameters to control the response."
  },
  {
    "chunk_id": "5af39aab-1b33-4533-879f-e382f3175f5d",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to call Postgres functions as Remote Procedure Calls (RPCs) from an application. Postgres functions are useful for encapsulating database logic that rarely changes, such as password resets and updates. The documentation provides details on the various parameters that can be used when calling a Postgres function, including options for passing in arguments, getting return values, and controlling the count algorithm for set-returning functions."
  },
  {
    "chunk_id": "e7338d1f-7329-4bc1-950d-067a50806651",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to return only the rows that match specific conditions in Postgres queries such as `select()`, `update()`, `upsert()`, and `delete()`. Filters can also be applied to Postgres functions that return a table response. The order of applying filters and other query operations is important, as demonstrated in the examples provided."
  },
  {
    "chunk_id": "f1a81aaa-373a-4641-85cd-b0dc81773452",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `eq()` method in the Supabase client library allows filtering a table to only include rows where a specified column is equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is demonstrated in the example, where the `select()` method is used to retrieve all rows from the \"countries\" table where the \"name\" column is equal to \"Albania\"."
  },
  {
    "chunk_id": "23e8016e-e5b6-4694-8d34-ee9b8553115f",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column is not equal to a value\" feature in the documentation allows users to filter a database table by a specific column, matching only rows where the column value is not equal to the provided value. The key parameters are the column name and the value to filter by, and an example is provided using the Supabase library's `select()` method to retrieve rows where the \"name\" column is not equal to \"Albania\"."
  },
  {
    "chunk_id": "24b09711-6d48-4ba9-86fc-f0db123e7a08",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to filter a database table to include only rows where a specified column has a value greater than a provided value. The key parameters are the column name and the comparison value. This functionality is demonstrated using the Supabase library's `select()` and `gt()` methods."
  },
  {
    "chunk_id": "ae128bf9-52be-4030-924f-03749746b483",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided content describes a method to filter a database table by a column, where the column value is greater than or equal to a specified value. The method takes two parameters: the column name and the value to filter by. This functionality can be used with the `select()` method to retrieve rows matching the specified criteria."
  },
  {
    "chunk_id": "9c189181-d022-4d18-86a1-3651448732a1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: This documentation describes how to filter a database table by selecting rows where a specified column has a value less than a given value. It provides the required parameters, 'column' and 'value', and an example of how to use the 'lt()' method with the 'select()' function to execute this type of database query."
  },
  {
    "chunk_id": "24e0d4cb-9b80-4beb-874e-f803f7bc6ea8",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThis documentation covers the use of the `lte()` (less than or equal to) filter in Supabase's `select()` method. It allows matching rows where a specified `column` has a value less than or equal to the provided `value`. The method takes two required parameters: `column` (the column to filter on) and `value` (the value to filter by). This functionality is useful for applying numerical or date-based filters on database tables."
  },
  {
    "chunk_id": "cdf5593f-ba7a-4856-82d4-b340be5fc968",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `column matches a pattern` feature allows filtering rows where a specified `column` matches the provided `pattern` case-sensitively. The `columnRequiredstring` parameter specifies the column name, and the `patternRequiredstring` parameter defines the pattern to match. This functionality can be used with the `select()` method, as demonstrated in the example where the `name` column is filtered for rows containing the pattern `\"%Alba%\"`."
  },
  {
    "chunk_id": "236d6532-bdad-4f12-96a7-0b874daeddf1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe documentation describes a feature that allows filtering a database table by matching a column's values against a case-insensitive pattern. The `ilike()` function is used to perform this case-insensitive pattern matching, with the column name and pattern provided as parameters. This functionality can be useful for implementing flexible search and filtering capabilities in an application."
  },
  {
    "chunk_id": "6d55460d-918b-4bab-9281-92648d5346c5",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `is_()` function in the Supabase library allows you to filter rows based on the value of a specific column. It takes two parameters: the column name and the value to match (which can be `null`, `true`, or `false`). This is useful for checking for null values or boolean conditions in the database."
  },
  {
    "chunk_id": "c527ce11-728e-463a-8ba4-0a02d917d619",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe content describes the `in_` function in the `select()` method, which allows filtering rows where the value in the specified `column` is included in the provided `values` array. This is a useful feature for selecting rows based on an array of values, as demonstrated in the example query that filters the \"countries\" table by the \"name\" column."
  },
  {
    "chunk_id": "7ada2f4e-8f1b-4443-8df4-eac79e9fbaa9",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the provided content is:\n\nThis method is used to filter rows in a database table where the specified column contains all the elements in the provided value. It is applicable for columns of type jsonb, array, and range. The method takes two parameters: the column name and the value to filter with, which can be a jsonb object, an array, or a range."
  },
  {
    "chunk_id": "381a8a19-ddf8-46bb-960d-7eacd88aaf91",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers the \"Contained by value\" filter, which is applicable to jsonb, array, and range columns. It matches rows where every element in the specified column is contained within the provided value. The parameters required are the column name and the value to filter with. Examples are provided for using this filter on array, range, and jsonb columns."
  },
  {
    "chunk_id": "91d4c0d5-15be-465c-90d8-1be0d106a253",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the provided range. The parameters for this filter include the column name and the range to filter with. This functionality can be leveraged using the `range_gt()` method in the Supabase client library."
  },
  {
    "chunk_id": "56bfcc31-1ca5-47b1-a07d-8504aa9eb291",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than or equal to a range\" feature in the software documentation allows users to filter data where the values in a specified column are either contained within a given range or greater than any element in that range. This is particularly useful for working with range columns, and the feature can be implemented using the `range_gte()` method in the provided example code."
  },
  {
    "chunk_id": "1f6ca197-a103-45cc-a549-9b72514fdb1a",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" feature is used to filter rows in a range column, where every element in the column is less than any element in the specified range. It takes two parameters: the column to filter on and the range to filter with. This can be useful for querying data where the time or date range needs to be constrained to a specific period."
  },
  {
    "chunk_id": "d6b671ae-c4e4-46cd-a6c7-cae6b8cb2d16",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than or equal to a range\" feature allows filtering on range columns, where rows are matched only if every element in the specified column is less than any element in the provided range. The key parameters are the column name and the range to filter with, which can be used in a Supabase query to select relevant data."
  },
  {
    "chunk_id": "c0e4dfa3-7ab9-425d-aabc-220d44f0379b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThis section explains the \"mutually exclusive to a range\" filter, which is applicable only for range columns. It allows filtering rows where the column value is mutually exclusive to the specified range, ensuring there is no element between the two ranges. The filter is configured using the \"columnRequired\" and \"rangeRequired\" parameters, and can be used in a Supabase select() query to filter the data accordingly."
  },
  {
    "chunk_id": "f65f00dd-1138-435a-8d9a-564c9e9298cc",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The 'With a common element' feature is applicable only for array and range columns. It allows filtering rows where the column value and the provided value have at least one element in common. The key parameters are the 'column' to filter on and the 'value' to filter with, which can be an iterable of any type."
  },
  {
    "chunk_id": "e38dd6a4-cd58-4352-9fbf-e3731e1e0eea",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Match a string\" feature, which allows filtering rows in a text or tsvector column based on a provided query string. This is useful for implementing Postgres full-text search functionality. The feature supports various text search options, including basic normalization, full normalization, and websearch, which can be specified as parameters."
  },
  {
    "chunk_id": "45e23273-240c-4165-a99e-af8612e8f4f6",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `.match()` method in the Supabase library allows you to filter a table by matching each column in a `query` object to its associated value. This is a shorthand for multiple `.eq()` calls, making the filtering process more concise. The `query` parameter is a dictionary where the column names are the keys and their respective filter values are the values."
  },
  {
    "chunk_id": "dd06fea3-5b29-47aa-8701-b8c5215dc26e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary covers how to use the `not_` operator in PostgREST filters to match rows that do not satisfy the filter criteria. It demonstrates examples of using `not_.in_()` for filtering based on specific ID values and `not_.contains()` for filtering based on array values. Additionally, it shows how to use the `not_.is_()` filter with the `select()` function to retrieve data where the `name` column is not null."
  },
  {
    "chunk_id": "a51340ab-93cb-4320-8bc2-aa9181dd3074",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe or95() function in the documentation expects the use of raw PostgREST syntax for filter names and values, allowing for complex filtering with features like in(), contains(), and containedBy(). The function takes two parameters: filtersRequired for the filter expression, and reference95table to filter on referenced tables instead of the parent table. The or() function can be used with and() to combine multiple filters."
  },
  {
    "chunk_id": "89cff672-70a3-430e-9d41-5fa7a9474a6e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe filter() method in the provided context expects the use of raw PostgREST syntax for the filter values. Examples are provided for filtering on a column using the 'in' operator with an array of values, and for filtering on an array column using the 'cs' (contains) operator. The filter() method supports specifying the column, operator, and value as parameters, and can be used in conjunction with the select() method to filter data from a foreign table."
  },
  {
    "chunk_id": "56931de8-c64f-493c-9bdf-f83d03247dcd",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to change the format of the response, unlike filters which operate on the row level. Modifiers must be specified after filters and are only applicable for queries that return rows, such as `select()` or `rpc()` on a function that returns a table response."
  },
  {
    "chunk_id": "e4166efe-0971-4925-b610-37c08377f2e0",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `order()` function in the Supabase API allows ordering the query result by a specified column. The function takes parameters for the column to order by, whether to order in descending order, the foreign table name if ordering on a foreign table, and whether to show nulls first. This functionality is demonstrated in an example query that orders the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "36039dd2-a58f-4011-b108-f4f9c4085ceb",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The Limit the number of rows returned section describes two parameters: 'sizeRequired' to set the maximum number of rows to return, and 'foreign' to limit rows of foreign tables instead of the parent table. An example is provided, showing how to use the `limit()` function to return only 1 row from the \"countries\" table."
  },
  {
    "chunk_id": "1e3491d6-38c3-4d0e-ac77-881009babd21",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `range()` function in the query allows you to limit the result to a specific range of records, defined by a starting index (`from`) and an ending index (`to`). This is useful for pagination or when you only need a subset of the data. The `from` and `to` values are 0-based and inclusive, meaning they specify the range of rows to return. You can also use `range()` on foreign tables by setting the `foreign_table` parameter."
  },
  {
    "chunk_id": "c5f1d59c-e654-4638-b33e-ef78f8a16838",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `single()` method in the Supabase client library retrieves a single object from the \"countries\" table, instead of an array of objects, by limiting the response to 1 row and selecting the \"name\" column. This allows for more efficient data retrieval when only a single record is required."
  },
  {
    "chunk_id": "b24c18c6-2213-4eb2-bd41-c634ab0fc8be",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The `.maybe_single()` method in the Supabase client library retrieves zero or one row of data from the \"countries\" table, where the \"name\" column matches \"Albania\". This is useful when you expect at most a single result, and can simplify the response handling compared to using `.select()` which always returns an array."
  },
  {
    "chunk_id": "16634494-d9ab-47b8-91e0-015908b52aed",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is:\n\nThe documentation describes the 'Retrieve as a CSV' feature, which allows users to return the data from a Supabase table as a CSV string. This is demonstrated with an example code snippet that selects all columns from the 'countries' table and executes the CSV retrieval. This functionality is useful for exporting data in a widely-supported format for further processing or analysis."
  },
  {
    "chunk_id": "5e38eed3-6e0a-42da-a68e-39058ba412cf",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe `explain()` method in Postgres can be used to get the execution plan of a query, including information on WAL record generation, configuration parameters, buffer usage, and actual run time. While explain is not enabled by default due to potential security concerns, it can be useful for debugging slow queries. Developers can enable explain functionality by following the Performance Debugging Guide and using a pre-request function for additional protection."
  },
  {
    "chunk_id": "f6a26f31-045d-464e-836b-fe2099256e9d",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation discusses creating a new user in Supabase. It explains that by default, users need to verify their email address before logging in, but this can be disabled. It also covers the behavior of the `sign_up()` function, including how the `user` and `session` objects are returned based on the `Confirm email` setting, and how to fetch the currently logged-in user using `get_user()`. Additionally, it provides information on various sign-up parameters and sample code for signing up with an email and password."
  },
  {
    "chunk_id": "82bb7b0b-73a7-4e2f-8376-f39ee2cc625b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes how to create an anonymous user in the system. It recommends setting up captcha to prevent abuse, and provides an example of how to sign in an anonymous user programmatically, including passing a captcha token in the options parameter. The key technical points are the ability to create anonymous users and the importance of implementing captcha to secure anonymous sign-ins."
  },
  {
    "chunk_id": "cfb83169-066a-4b2c-a03c-c408dd9a9c27",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe documentation describes how to sign in an existing user using either an email and password or a phone number and password. It provides a code example demonstrating the sign-in process with an email and password using the Supabase authentication API."
  },
  {
    "chunk_id": "d193914a-2825-4de2-948a-0a40154dd9d8",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nAllows signing in with an OIDC ID token, where the authentication provider must be enabled and configured. The `sign_in_with_id_token()` function is used, taking a `provider` parameter (e.g., \"google\") and the `token` parameter containing the ID token. This functionality enables users to authenticate using a third-party identity provider without the need for a separate sign-in flow."
  },
  {
    "chunk_id": "8d92fe14-2ce9-4de3-9338-f712dea21450",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the \"Sign in a user through OTP\" feature, which allows users to sign in without a password by sending a One-Time Password (OTP) to their email or phone number. This method can be used for passwordless sign-ins, and if the user doesn't exist, the `sign_in_with_otp()` function will sign up the user. Developers can configure whether to send a magic link or an OTP, and can also control the redirect URL for the magic link."
  },
  {
    "chunk_id": "615d3aa1-307a-43a5-9119-f4bcb5a32acf",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "This method is used to sign in a user through OAuth, a third-party authentication provider supported by Supabase. It requires passing the provider name as a parameter and returns the user's credentials, which can be used to sign in the user. This functionality allows integrating third-party authentication into Supabase-based applications."
  },
  {
    "chunk_id": "64fe1d28-45b1-4bd7-a42a-3f894eb4deb1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you must first establish a connection to an identity provider using the provided CLI commands. You can then use the `domain` property to start the sign-in flow, or the `provider_id` property to use a different way to identify the identity provider, such as mapping specific user email addresses or using company-specific hints. The `sign_in_with_sso()` method is used to execute the sign-in process."
  },
  {
    "chunk_id": "23c56379-8b10-42d3-873c-8bfabd6f2cbc",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "The `sign_out()` method in Supabase Auth allows users to sign out of the current session. However, it does not automatically revoke the valid JWT, which will remain active until it expires. Signing out revokes the refresh token and removes the JWT from the client-side, but the existing JWT remains valid until its expiration."
  },
  {
    "chunk_id": "48f67d2b-7e16-49ae-9be7-9761497e26d6",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify a one-time password (OTP) for different authentication flows, such as sign-up, sign-in, and email/phone number changes. The verification type should match the corresponding auth method used earlier. The `TokenHash` from the email templates can be utilized for server-side authentication using the PKCE flow."
  },
  {
    "chunk_id": "4e41fd5e-a739-46d3-8886-5c6eda7fc2ce",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "This method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source of user data, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. Additionally, if the session has an expired access token, this method will use the refresh token to get a new session."
  },
  {
    "chunk_id": "7ede21ed-6b7c-440d-b53e-645cc0d02a2c",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiration status of the current session. It takes an optional refresh token as a parameter, and if not provided, it will attempt to retrieve it from the current session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "e1fd09c3-7a08-4e83-8c99-524a635669d1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the logged-in user from the database, instead of relying on the local session. This is useful for checking if the user is authorized, as it validates the user's access token JWT on the server. The method can take an optional `jwtOptional` parameter to use a custom access token instead of the current session's token."
  },
  {
    "chunk_id": "9fbbe907-99f9-4e3f-b4e3-efdd81224fe3",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data using an `access_token` and `refresh_token`, refreshing the session if it has expired. If the tokens are valid, it emits a `SIGNED_IN` event, allowing the application to update the session state. This method is crucial for maintaining a seamless user authentication experience, handling token expiration and renewal automatically."
  },
  {
    "chunk_id": "6e5a30ae-dac2-41b0-a811-5b38ff44811a",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "Supabase supports Multi-Factor Authentication (MFA) using time-based one-time password (TOTP) as the second factor. Users can enroll multiple TOTP factors, up to a limit of 10, which provides a recovery mechanism and reduces the attack surface compared to using recovery codes. This MFA implementation frees users from having to store recovery codes while enhancing the security of their accounts."
  },
  {
    "chunk_id": "1c0c8a03-6427-4ad0-8666-16826bb9d3d1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to enroll a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase Python client. The `mfa.enroll()` method is used to enroll the TOTP factor, which returns an ID that can be used to create and verify MFA challenges. The `mfa.challenge()`, `mfa.verify()`, and `mfa.challenge_and_verify()` methods are provided to manage the MFA challenge and verification process."
  },
  {
    "chunk_id": "58aa64d0-dcd3-4266-a1db-f190ccd5867b",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled factor is required. The `mfa.challenge()` function is used to create a challenge for a specific factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "a5016731-9017-4d3f-aa46-88878f8d41da",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, you must first create a challenge using the provided method. The code snippet demonstrates how to verify a challenge by providing the factor_id, challenge_id, and code parameters to the mfa.verify() function."
  },
  {
    "chunk_id": "364b5437-3465-4040-b87a-0af53b211214",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing users to challenge and verify a factor by providing the factor ID and a verification code."
  },
  {
    "chunk_id": "36710376-e98e-46e6-8068-ae4cd91a8aaf",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a factor, the user can call the `supabase.auth.mfa.unenroll()` function, passing the `factor_id` as a parameter. This allows the user to remove a specific multi-factor authentication factor from their account, which may be necessary if they want to switch to a different authentication method."
  },
  {
    "chunk_id": "2646e4db-7b24-4b73-a69a-a70214d7db78",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of the strength of an authentication mechanism in Supabase. AAL1 refers to the first factor of authentication, such as email and password or OAuth sign-in, while AAL2 refers to the second factor, such as a time-based, one-time-password (TOTP). The `next_level` field indicates the next level of authentication required, either AAL1 or AAL2, based on the user's verified factors."
  },
  {
    "chunk_id": "acb0445f-7f98-4654-97a0-3eae73a371cf",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "The summary is as follows:\n\nInvokes a Supabase Edge Function, which requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type of the request body, but this can be overridden by providing a custom Content-Type header. The function can be invoked with a request body, and the response can be handled for any errors that may occur."
  },
  {
    "chunk_id": "fa5328c7-d6b8-457b-a2f4-e1900c9a663f",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. You can enable it by managing Realtime's replication. Clients can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The code snippet demonstrates how to subscribe to a channel, send a broadcast message, and handle incoming broadcast events."
  },
  {
    "chunk_id": "c3bbdc2b-71bf-4bbb-a147-a11fa283b6e0",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Supabase channel is recommended to maintain performance, as unused channels can degrade the Realtime service and database if too many clients are subscribed simultaneously. The `supabase.remove_channel()` function can be used to remove a specific channel, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "75568514-c215-45d4-a62c-d9981e87b5c0",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the connected database. Supabase automatically handles the cleanup of unused channels, but keeping too many open channels can degrade the overall system performance. To remove all channels, you can use the `supabase.remove_all_channels()` function."
  },
  {
    "chunk_id": "7095bab0-b206-428e-ac74-ba33ad440e2c",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The provided code snippet allows users to retrieve all available channels from the Supabase platform. This functionality is useful for applications that need to display or manage a list of channels, such as in a chat or collaboration tool."
  },
  {
    "chunk_id": "404a71de-edb0-47b5-b8e5-97909748c31d",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is: This code snippet demonstrates how to broadcast a message to all connected clients in a specific channel using the Supabase Realtime API. It subscribes to the 'room1' channel, and upon successful subscription, it sends a broadcast message containing randomly generated x and y coordinates."
  },
  {
    "chunk_id": "bbcc6f09-c384-4503-b2de-7a00d1519588",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket in Supabase, the required RLS policy permissions are: `insert` access to the `buckets` table, and no permissions required for the `objects` table. Refer to the Storage guide for details on Supabase's access control mechanisms. The code to create a new bucket is `supabase.storage.create_bucket(name)`."
  },
  {
    "chunk_id": "60eceed0-2f99-4542-b291-7b630879f25f",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required RLS policy permissions are: `select` on the `buckets` table, and no permissions on the `objects` table. Refer to the Storage guide for more information on access control. The code to get a bucket is `_10  res = supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "14c32730-21b0-49fb-8a4a-b09311d6a411",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": "To list all buckets, the required permissions are `select` on the `buckets` table and no permissions on the `objects` table. The Storage guide provides details on how access control works for this operation."
  },
  {
    "chunk_id": "f67b53a1-0402-4f3c-9635-cd86c1e534a1",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket, the required RLS policy permissions are 'select' and 'delete' on the 'buckets' table, with no permissions needed on the 'objects' table. Refer to the Storage guide for details on access control. The Supabase storage client method 'delete_bucket()' can be used to delete a bucket."
  },
  {
    "chunk_id": "1cec40d3-9dbe-4572-9f95-47c9f7bf25f9",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are `select` on the `buckets` table and `select` and `delete` on the `objects` table. Refer to the Storage guide for details on access control. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "fee072e0-3d2f-44b7-ad60-0bced5212120",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file, the user requires the `insert` permission on the `objects` table in the RLS policy. The file's MIME type should be specified, with the default being `text/html` if not provided. Files can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` function, passing the file content, path, and optional content type."
  },
  {
    "chunk_id": "2523561b-38e0-42cd-ba5e-8d6de893d970",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are `select` for the `objects` table. The file can be downloaded using the `supabase.storage.from_('bucket_name').download(source)` method, which writes the downloaded content to the specified `destination` file."
  },
  {
    "chunk_id": "50e17813-6b92-495a-952c-3540ea5a8f05",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the required permissions are 'select' on the 'objects' table. The `supabase.storage.from_('bucket_name').list()` function can be used to retrieve the list of files in the specified bucket. Refer to the Supabase Storage guide for more information on access control and permissions."
  },
  {
    "chunk_id": "a7e3da42-6422-45ff-8898-dfe6e1d39b25",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires 'update' and 'select' permissions on the 'objects' table. The file can be updated by opening the local file, then using the Supabase storage client to update the file on the Supabase storage with optional file options like cache control and upsert."
  },
  {
    "chunk_id": "26e72145-613b-4e6e-8043-8ab30dfbc51e",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the user requires \"update\" and \"select\" permissions on the `objects` table, but no permissions on the `buckets` table. The process involves using the `supabase.storage.from_('bucket_name').move()` function to move the file from `'public/avatar1.png'` to `'private/avatar2.png'`."
  },
  {
    "chunk_id": "3e7e5d41-4532-479b-8d66-561f9e6f1a93",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires 'delete' and 'select' permissions on the 'objects' table. The Storage guide provides details on how to set up access control. The code example demonstrates using the `supabase.storage.from_('bucket_name').remove('test.jpg')` method to delete the 'test.jpg' file from the specified bucket."
  },
  {
    "chunk_id": "1038644e-bf9c-48ec-9ff3-06fd90c27f61",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL, the RLS policy permissions required are: no permissions for the `buckets` table, and `select` permissions for the `objects` table. The signed URL can be generated using the `supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)` function, which allows controlled access to specific files in the storage bucket for a limited duration."
  },
  {
    "chunk_id": "3cb35f30-4565-41a0-ab17-2ba2fa41e657",
    "source_url": "https://supabase.com/docs/reference/python/update",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public either through the updateBucket() method or the Supabase web dashboard. No specific permissions are required in the buckets or objects tables. The get_public_url() method can then be used to retrieve the public URL for a file in the public bucket."
  },
  {
    "chunk_id": "fd0d0f40-e4cf-4d4e-afdd-d92a09d45cbd",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Python Client Library",
    "content": "<p>supabase-py<a href=\"https://github.com/supabase/supabase-py\">View on GitHub</a></p><p>This reference documents every object and method available in Supabase's Python library, <a href=\"https://github.com/supabase/supabase-py\">supabase-py</a>\n. You can use supabase-py to interact with your Postgres database, listen to database changes, invoke Deno Edge Functions, build login and user management functionality, and manage large files.</p><hr />",
    "summary": "The Python Client Library, supabase-py, provides a comprehensive API for interacting with Supabase's services, including the Postgres database, Deno Edge Functions, user management, and file storage. It allows developers to build full-stack applications in Python, leveraging Supabase's unified API and real-time capabilities."
  },
  {
    "chunk_id": "a8a27151-c680-49cc-b519-e72e9c23fab6",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Installing",
    "content": "<h3>Install with PyPi<a href=\"#install-with-pypi\">#</a></h3><p>You can install supabase-py via the terminal. (for &gt; Python 3.7)</p><p>PIPConda</p><p>Terminal</p><p><code>_10  pip install supabase</code></p><hr />",
    "summary": "You can install the Supabase Python library (supabase-py) using the pip package manager. The library is compatible with Python versions greater than 3.7 and can be installed directly from the command line or using a Conda environment."
  },
  {
    "chunk_id": "a7c85988-a851-4f15-875a-bc1d76da4297",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Initializing",
    "content": "<p>You can initialize a new Supabase client using the <code>create_client()</code> method.</p><p>The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.</p><h3>Parameters</h3><ul><li><p>supabase\u000295\u0003urlRequiredstring</p><p>The unique Supabase URL which is supplied when you create a new project in your project dashboard.</p></li><li><p>supabase\u000295\u0003keyRequiredstring</p><p>The unique Supabase Key which is supplied when you create a new project in your project dashboard.</p></li><li><p>optionsOptionalClientOptions</p><p>Options to change the Auth behaviors.</p><p>Details</p></li></ul><p>create\u000295\u0003client()With timeout option</p><p><code>_10  import os  _10  from supabase import create_client, Client  _10  _10  url: str = os.environ.get(\"SUPABASE_URL\")  _10  key: str = os.environ.get(\"SUPABASE_KEY\")  _10  supabase: Client = create_client(url, key)</code></p><hr />",
    "summary": "The Supabase client is the primary interface for interacting with the Supabase ecosystem. It is initialized using the `create_client()` method, which requires the Supabase URL and Key as mandatory parameters, and optionally allows configuring the authentication behavior through the `ClientOptions`. The Supabase client provides access to the full suite of Supabase functionality."
  },
  {
    "chunk_id": "87882f2b-c088-466b-8abe-c6449bbfba10",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Fetch data",
    "content": "<ul><li>By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's <a href=\"/dashboard/project/_/settings/api\">API settings</a>\n    . It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use <code>range()</code> queries to paginate through your data.</li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a></p></li><li><p><code>select()</code> can be combined with <a href=\"/docs/reference/python/using-modifiers\">Modifiers</a></p></li><li><p><code>apikey</code> is a reserved keyword if you're using the <a href=\"/docs/guides/platform\">Supabase Platform</a>\n     and <a href=\"https://github.com/supabase/supabase/issues/5465\">should be avoided as a column name</a>\n    .</p></li></ul><h3>Parameters</h3><ul><li><p>columnsOptionalstring</p><p>The columns to retrieve, defaults to <code>*</code>.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Getting your dataSelecting specific columnsQuery referenced tablesQuery referenced tables through a join tableQuery the same referenced table multiple timesFiltering through referenced tablesQuerying referenced table with countQuerying with count optionQuerying JSON dataQuerying referenced table with inner joinSwitching schemas per query</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nSupabase projects have a default maximum of 1,000 rows, which can be adjusted in the API settings. The `select()` function can be combined with filters and modifiers to query data, and the `apikey` keyword should be avoided as a column name when using the Supabase Platform. The `select()` function allows specifying the columns to retrieve, and the `count` option can be used to get the count of rows returned."
  },
  {
    "chunk_id": "c8891525-4198-4171-aeaa-a88cf7c918b6",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Insert data",
    "content": "<h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Create a recordBulk create</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .insert({\"id\": 1, \"name\": \"Denmark\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Insert data\" section describes the parameters for inserting data into a table using the Supabase library. It covers the `jsonRequired` parameter for passing a single row or multiple rows, the `countOptional` parameter for specifying the property to get the row count, the `returningOptional` parameter for choosing the response format, and the `default95to95nullOptional` parameter for handling missing fields during bulk inserts. It provides an example of how to use the `insert()` method to create a new record."
  },
  {
    "chunk_id": "2621a066-e776-439a-acef-c7f3a7acc5a9",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Update data",
    "content": "<ul><li><code>update()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">Filters</a>\n     to target the item(s) you wish to update.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li></ul><p>Updating your dataUpdating JSON data</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .update({\"name\": \"Australia\"})  _10  .eq(\"id\", 1)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `update()` method in the provided documentation is used to update data in a table, and it must be combined with filters to target the specific item(s) to be updated. The method accepts a dictionary or list of values to be inserted, and an optional count method to retrieve the count of rows returned. An example is provided demonstrating how to update the \"name\" column of a \"countries\" table where the \"id\" is 1."
  },
  {
    "chunk_id": "53e60f40-c996-43e1-a337-1e98eeb0a888",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Upsert data",
    "content": "<ul><li>Primary keys must be included in the <code>values</code> dict to use upsert.</li></ul><h3>Parameters</h3><ul><li><p>jsonRequireddict, list</p><p>The values to insert. Pass an dict to insert a single row or an list to insert multiple rows.</p></li><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li><li><p>ignore\u000295\u0003duplicatesOptionalbool</p><p>Whether duplicate rows should be ignored.</p></li><li><p>on\u000295\u0003conflictOptionalstring</p><p>Specified columns to be made to work with UNIQUE constraint.</p></li><li><p>default\u000295\u0003to\u000295\u0003nullOptionalbool</p><p>Make missing fields default to <code>null</code>. Otherwise, use the default value for the column. Only applies for bulk inserts.</p></li></ul><p>Upsert your dataBulk Upsert your dataUpserting into tables with constraints</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .upsert({\"id\": 1, \"name\": \"Australia\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"upsert\" operation allows inserting or updating data in a database table. Primary keys must be included in the \"values\" dict to use upsert. The operation supports various parameters, such as specifying the columns to use for UNIQUE constraints, defaulting missing fields to null, and controlling the response format. Upsert can be used for both single-row and bulk inserts, and it handles conflicts with existing data based on the provided parameters."
  },
  {
    "chunk_id": "72fed27b-e0f0-4085-b695-e28de3797daa",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Delete data",
    "content": "<ul><li><code>delete()</code> should always be combined with <a href=\"/docs/reference/python/using-filters\">filters</a>\n     to target the item(s) you wish to delete.</li><li>If you use <code>delete()</code> with filters and you have <a href=\"/docs/learn/auth-deep-dive/auth-row-level-security\">RLS</a>\n     enabled, only rows visible through <code>SELECT</code> policies are deleted. Note that by default no rows are visible, so you need at least one <code>SELECT</code>/<code>ALL</code> policy that makes the rows visible.</li><li>When using <code>delete().in_()</code>, specify an array of values to target multiple rows with a single query. This is particularly useful for batch deleting entries that share common criteria, such as deleting users by their IDs. Ensure that the array you provide accurately represents all records you intend to delete to avoid unintended data removal.</li></ul><h3>Parameters</h3><ul><li><p>countOptionalCountMethod</p><p>The property to use to get the count of rows returned.</p></li><li><p>returningOptionalReturnMethod</p><p>Either 'minimal' or 'representation'. Defaults to 'representation'.</p></li></ul><p>Delete recordsDelete multiple records</p><p><code>_10  response = supabase.table('countries').delete().eq('id', 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe `delete()` function in the Supabase API should always be used in combination with filters to target the specific items to be deleted. When using `delete()` with RLS (Row Level Security) enabled, only the rows visible through the defined `SELECT` policies will be deleted. The `delete().in_()` method can be used to efficiently delete multiple records that share common criteria, such as deleting users by their IDs."
  },
  {
    "chunk_id": "d308adb1-3b0b-4cee-8284-ef659302e5cf",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Call a Postgres function",
    "content": "<p>You can call Postgres functions as <em>Remote Procedure Calls</em>, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.</p><p><code>_10  create or replace function hello_world() returns text as $$  _10  select 'Hello world';  _10  $$ language sql;</code></p><h3>Parameters</h3><ul><li><p>fnRequiredcallable</p><p>The stored procedure call to be executed.</p></li><li><p>paramsOptionaldict of any</p><p>Parameters passed into the stored procedure call.</p></li><li><p>getOptionaldict of any</p><p>When set to <code>true</code>, <code>data</code> will not be returned. Useful if you only need the count.</p></li><li><p>headOptionaldict of any</p><p>When set to <code>true</code>, the function will be called with read-only access mode.</p></li><li><p>countOptionalCountMethod</p><p>Count algorithm to use to count rows returned by the function. Only applicable for <a href=\"https://www.postgresql.org/docs/current/functions-srf.html\">set-returning functions</a>\n. <code>\"exact\"</code>: Exact but slow count algorithm. Performs a <code>COUNT(*)</code> under the hood. <code>\"planned\"</code>: Approximated but fast count algorithm. Uses the Postgres statistics under the hood. <code>\"estimated\"</code>: Uses exact count for low numbers and planned count for high numbers.</p></li></ul><p>Call a Postgres function without argumentsCall a Postgres function with argumentsBulk processingCall a Postgres function with filtersCall a read-only Postgres function</p><p><code>_10  response = supabase.rpc(\"hello_world\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nYou can call Postgres functions as Remote Procedure Calls, which allows you to execute database logic from anywhere. Functions are useful for tasks that rarely change, such as password resets and updates. The documentation provides details on calling Postgres functions with various parameters, including passing arguments, bulk processing, filtering, and executing in read-only mode."
  },
  {
    "chunk_id": "0cdca97b-9cb4-46e2-b9d9-63fb4b616861",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Using filters",
    "content": "<p>Filters allow you to only return rows that match certain conditions.</p><p>Filters can be used on <code>select()</code>, <code>update()</code>, <code>upsert()</code>, and <code>delete()</code> queries.</p><p>If a Postgres function returns a table response, you can also apply filters.</p><p>Applying FiltersChainingConditional chainingFilter by values within JSON columnFilter Foreign Tables</p><p><code>_15  # Correct  _15  response = (  _15  supabase.table(\"cities\")  _15  .select(\"name, country_id\")  _15  .eq(\"name\", \"Bali\")  _15  .execute()  _15  )  _15  _15  # Incorrect  _15  response = (  _15  supabase.table(\"cities\")  _15  .eq(\"name\", \"Bali\")  _15  .select(\"name, country_id\")  _15  .execute()  _15  )</code></p><p>Data source</p><p>Notes</p><hr />",
    "summary": "Filters allow you to selectively return rows in Supabase queries (select, update, upsert, delete) that match certain conditions. Filters can also be applied to Postgres functions that return a table response. Proper chaining of filters is demonstrated, where the .select() method should be called after the filtering conditions."
  },
  {
    "chunk_id": "4cf943a9-5ca2-4cba-918b-318ca55ebb89",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is equal to a value",
    "content": "<p>Match only rows where <code>column</code> is equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").eq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The content describes a way to filter a database table by a specific column value using the `eq()` function in the Supabase library. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This functionality can be used to retrieve only the rows where a particular column matches a given value."
  },
  {
    "chunk_id": "4de78f79-81d7-4082-b10a-f99c5bc418f2",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is not equal to a value",
    "content": "<p>Match only rows where <code>column</code> is not equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").neq(\"name\", \"Albania\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `neq()` function in Supabase is used to filter a database table, selecting only rows where a specified column is not equal to a given value. The `columnRequired` parameter specifies the column to filter on, and the `valueRequired` parameter specifies the value to filter by. This is a common operation in data manipulation and querying tasks."
  },
  {
    "chunk_id": "b149e1ed-6c54-4535-a5e0-4c680822d957",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is greater than a value",
    "content": "<p>Match only rows where <code>column</code> is greather than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'greater than' filter allows matching only the rows where the specified column value is greater than a given value. The key parameters are the column name and the value to filter by. This is demonstrated in the example using the Supabase table 'countries' and the 'id' column."
  },
  {
    "chunk_id": "3d7f5b61-d150-46f5-a5fc-8a7af3575a9a",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is greater than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is greater than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").gte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe documentation describes how to filter a database table to include only rows where a specified column is greater than or equal to a given value. The `gte()` function is used to apply this filter, taking the column name and the value to compare as parameters. This functionality is demonstrated in an example using the Supabase library to select data from a \"countries\" table."
  },
  {
    "chunk_id": "e9f955c5-789c-460f-89ae-cc96b4679b2e",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is less than a value",
    "content": "<p>Match only rows where <code>column</code> is less than <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lt(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe 'Column is less than a value' section describes how to filter a database table to only include rows where a specified column has a value less than a given value. It outlines the required parameters, 'column' and 'value', and provides an example using the Supabase library's 'lt()' method to select rows where the 'id' column is less than 2."
  },
  {
    "chunk_id": "281c8ada-b874-422d-91c9-2812508dacb9",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is less than or equal to a value",
    "content": "<p>Match only rows where <code>column</code> is less than or equal to <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valueRequiredany</p><p>The value to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").lte(\"id\", 2).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is: The provided code snippet demonstrates how to use the `lte()` (less than or equal to) function in Supabase to filter a table's rows where a specified column is less than or equal to a given value. The `lte()` function takes two parameters: the column name and the value to filter by."
  },
  {
    "chunk_id": "ac4755c2-0cbc-42bc-b2d9-d9f7ba5570d8",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column matches a pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-sensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").like(\"name\", \"%Alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe \"Column matches a pattern\" feature allows filtering rows in a database table where a specified column matches a provided pattern case-sensitively. The key parameters are the column name and the pattern to match. This can be used in a query to select only the rows where the specified column value matches the pattern, as shown in the example."
  },
  {
    "chunk_id": "7d23de41-2dee-4f2f-ada5-485eb7e8c9ad",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column matches a case-insensitive pattern",
    "content": "<p>Match only rows where <code>column</code> matches <code>pattern</code> case-insensitively.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>patternRequiredstring</p><p>The pattern to match by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").ilike(\"name\", \"%alba%\").execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the content about \"Column matches a case-insensitive pattern\" is as follows:\n\nThis feature allows you to filter rows in a table where a specified column matches a given pattern case-insensitively. The `ilike()` function is used to perform the case-insensitive pattern matching, taking the column name and pattern as parameters. This can be useful for tasks like searching for records where a column value contains a certain substring, regardless of capitalization."
  },
  {
    "chunk_id": "20c501f7-fdf3-4469-bbf6-19ac7035fc95",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is a value",
    "content": "<p>Match only rows where <code>column</code> IS <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The name of the column to apply a filter on</p></li><li><p>valueRequirednull | boolean</p><p>The value to match by</p></li></ul><p>Checking for nullness, True or False</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").is_(\"name\", \"null\").execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe 'Column is a value' feature allows filtering rows based on a column's value, including checking for null, true, or false values. The key parameters are the column name and the value to match. This can be useful for selectively retrieving data from a table based on specific criteria."
  },
  {
    "chunk_id": "a30dbcd9-0944-4350-9972-de40643caf9f",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column is in an array",
    "content": "<p>Match only rows where <code>column</code> is included in the <code>values</code> array.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredarray</p><p>The values to filter by</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .in_(\"name\", [\"Albania\", \"Algeria\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary describes a method to filter rows in a database table based on the values in a specified column. The `in_()` function is used to match rows where the value in the `column` parameter is included in the `values` array. This functionality is demonstrated in an example using the Supabase library to select rows from a \"countries\" table."
  },
  {
    "chunk_id": "e39c2168-c69a-4f69-a77c-b22531b30e97",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Column contains every element in a value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where <code>column</code> contains every element appearing in <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>valuesRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"*\")  _10  .contains(\"tags\", [\"is:open\", \"priority:low\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe `contains` operation is only applicable to `jsonb`, `array`, and `range` columns, and it filters rows where the column contains every element in the provided value. The `columnRequired` parameter specifies the column to filter on, and the `valuesRequired` parameter is the `jsonb`, `array`, or `range` value to filter with. Examples are provided for using the `contains` operation on array, range, and `jsonb` columns."
  },
  {
    "chunk_id": "f8172cf7-3e1e-4c36-9180-a3fb4ab3e908",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Contained by value",
    "content": "<p>Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in <code>column</code> is contained by <code>value</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The jsonb, array, or range column to filter on</p></li><li><p>valueRequiredobject</p><p>The jsonb, array, or range value to filter with</p></li></ul><p>On array columnsOn range columnsOn \u000296\u0003jsonb\u000296\u0003 columns</p><p><code>_10  response = (  _10  supabase.table(\"classes\")  _10  .select(\"name\")  _10  .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Contained by value\" feature applies to jsonb, array, and range columns, allowing you to filter rows where every element in the specified column is contained within the provided value. This can be useful for querying data stored in array or jsonb format, such as filtering classes by the days they are held. The parameters include the column name and the value to filter against."
  },
  {
    "chunk_id": "0a78c9d5-b88a-419b-96ed-54839a2ff29f",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Greater than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Greater than a range\" feature is used to filter rows in a range column, where every element in the column must be greater than any element in the specified range. The key parameters are the column name and the range to filter with. This functionality is demonstrated in the example using the Supabase library, where the \"during\" column is filtered to include only rows where the values are greater than the specified time range."
  },
  {
    "chunk_id": "ed12a447-fc4f-4828-afac-1864e2942aad",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Greater than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is either contained in <code>range</code> or greater than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredstring</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Greater than or equal to a range\" section is as follows:\n\nThis filter is applicable only to range columns. It matches rows where every element in the specified column is either contained within the provided range or greater than any element in the range. The filter is configured using the \"range_gte\" method, which takes the column name and the range as parameters. This functionality is demonstrated in the example using the Supabase library to filter the \"during\" column of the \"reservations\" table."
  },
  {
    "chunk_id": "5fb9ec19-03be-483e-aa69-de2d8d22c2b3",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Less than a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Less than a range\" filter is only applicable to range columns, and it matches rows where every element in the specified column is less than any element in the given range. The key parameters are the column name and the range array, which can be used in a Supabase query to filter the data accordingly."
  },
  {
    "chunk_id": "6c988236-6004-45a5-850b-3aeba189722c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Less than or equal to a range",
    "content": "<p>Only relevant for range columns. Match only rows where every element in <code>column</code> is less than any element in <code>range</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary for the \"Less than or equal to a range\" section is as follows:\n\nThis filter is used for range columns and matches rows where every element in the specified column is less than or equal to any element in the provided range. The filter takes two required parameters: the column name and an array representing the range to filter with. This allows for selective querying of data within a defined range."
  },
  {
    "chunk_id": "3d49e8ec-e292-4175-8f12-da7ca37461fa",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Mutually exclusive to a range",
    "content": "<p>Only relevant for range columns. Match only rows where <code>column</code> is mutually exclusive to <code>range</code> and there can be no element between the two ranges.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The range column to filter on</p></li><li><p>rangeRequiredarray</p><p>The range to filter with</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"reservations\")  _10  .select(\"*\")  _10  .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The \"Mutually exclusive to a range\" feature is only relevant for range columns, allowing you to filter rows where the column value is mutually exclusive to the specified range, meaning there can be no element between the two ranges. It takes two parameters: the column to filter on, and the range to filter with. This functionality can be used with the `range_adjacent()` method in the Supabase query builder to fetch data that meets these criteria."
  },
  {
    "chunk_id": "95d01157-b457-40f6-9f5b-04bbcff3bfb4",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "With a common element",
    "content": "<p>Only relevant for array and range columns. Match only rows where <code>column</code> and <code>value</code> have an element in common.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The array or range column to filter on</p></li><li><p>valueRequiredIterable\u000291\u0003Any\u000293\u0003</p><p>The array or range value to filter with</p></li></ul><p>On array columnsOn range columns</p><p><code>_10  response = (  _10  supabase.table(\"issues\")  _10  .select(\"title\")  _10  .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"With a common element\" feature is only applicable for array and range columns. It allows filtering rows where the specified column and value have an element in common. The parameters include the column to filter on and the value to filter with. This functionality can be used in SQL queries to filter data, such as selecting titles where the \"tags\" column overlaps with the values \"is:closed\" and \"severity:high\"."
  },
  {
    "chunk_id": "3e90fc66-9b10-4fd6-bcd7-1fa297b222cf",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match a string",
    "content": "<p>Only relevant for text and tsvector columns. Match only rows where <code>column</code> matches the query string in <code>query</code>.</p><ul><li>For more information, see <a href=\"/docs/guides/database/full-text-search\">Postgres full text search</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The text or tsvector column to filter on</p></li><li><p>queryRequiredstring</p><p>The query text to match with</p></li><li><p>optionsOptionalobject</p><p>Named parameters</p><p>Details</p></li></ul><p>Text searchBasic normalizationFull normalizationWebsearch</p><p><code>_10  response = (  _10  supabase.table(\"texts\")  _10  .select(\"content\")  _10  .text_search(\"content\", \"'eggs' &amp;amp; 'ham'\", options={\"config\": \"english\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The \"Match a string\" section describes a PostgreSQL full-text search feature that allows filtering rows based on a text or tsvector column matching a specified query string. It provides details on the required parameters, `column` and `query`, as well as optional `options` for configuring the search behavior, such as normalization and language settings."
  },
  {
    "chunk_id": "61ee484d-e600-430b-a3ba-326a08098921",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match an associated value",
    "content": "<p>Match only rows where each column in <code>query</code> keys is equal to its associated value. Shorthand for multiple <code>.eq()</code>s.</p><h3>Parameters</h3><ul><li><p>queryRequireddict</p><p>The object to filter with, with column names as keys mapped to their filter values</p></li></ul><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .match({\"id\": 2, \"name\": \"Albania\"})  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The `match()` method in the provided code allows you to filter a table by matching the values in the `query` object to the corresponding column values in the table. This is a concise way to apply multiple `eq()` (equality) filters in a single operation. The `queryRequired` parameter is an object where the keys represent the column names and the values represent the filter criteria for those columns."
  },
  {
    "chunk_id": "cbab9579-08b0-464a-8822-e3bf7d50776c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Don't match the filter",
    "content": "<p>Match only rows which doesn't satisfy the filter. <code>not_</code> expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .not_.in_('id', '(5,6,7)') # Use `()` for `in` filter  _10  .not_.contains('arraycol', '\\{\"a\",\"b\"\\}') # Use `\\{\\}` for array values</code></p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .not_.is_(\"name\", \"null\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary provides information on how to use the `not_` function in PostgREST to select rows that do not match a given filter. It demonstrates examples of using `not_.in_()` for filtering on a set of values, and `not_.contains()` for filtering on array values. Additionally, it shows how to use the `not_.is_()` function with the `select()` method in Supabase to retrieve rows where a column is not null."
  },
  {
    "chunk_id": "c17ef3bb-9ebf-432e-bf61-2ca4a3d38fbb",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match at least one filter",
    "content": "<p>or\u000295\u0003() expects you to use the raw PostgREST syntax for the filter names and values.</p><p><code>_10  .or_('id.in.(5,6,7), arraycol.cs.\\{\"a\",\"b\"\\}') # Use `()` for `in` filter, `\\{\\}` for array values and `cs` for `contains()`.  _10  .or_('id.in.(5,6,7), arraycol.cd.\\{\"a\",\"b\"\\}') # Use `cd` for `containedBy()`</code></p><h3>Parameters</h3><ul><li><p>filtersRequiredstring</p><p>The filters to use, following PostgREST syntax</p></li><li><p>reference\u000295\u0003tableOptionalstring</p><p>Set this to filter on referenced tables instead of the parent table</p></li></ul><p>With \u000296\u0003select()\u000296\u0003Use \u000296\u0003or\u000296\u0003 with \u000296\u0003and\u000296\u0003Use \u000296\u0003or\u000296\u0003 on referenced tables</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"name\")  _10  .or_(\"id.eq.2,name.eq.Algeria\")  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary for the given content is:\n\nThe or95() method in the documentation expects the use of raw PostgREST syntax for the filter names and values. It supports various filtering options such as in, contains, and containedBy, with the ability to filter on referenced tables and combine multiple filters using or and and operators."
  },
  {
    "chunk_id": "95f180ff-6ca5-48f5-8ea3-611a59a1b126",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Match the filter",
    "content": "<p>filter() expects you to use the raw PostgREST syntax for the filter values.</p><p><code>_10  .filter('id', 'in', '(5,6,7)') # Use `()` for `in` filter  _10  .filter('arraycol', 'cs', '\\{\"a\",\"b\"\\}') # Use `cs` for `contains()`, `\\{\\}` for array values</code></p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to filter on</p></li><li><p>operatorOptionalstring</p><p>The operator to filter with, following PostgREST syntax</p></li><li><p>valueOptionalany</p><p>The value to filter with, following PostgREST syntax</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .filter(\"name\", \"in\", '(\"Algeria\",\"Japan\")')  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nThe `filter()` method in the documentation expects the use of raw PostgREST syntax for filter values. It supports various operators like `in` for filtering on a list of values and `cs` for containing a set of array values. The example demonstrates how to use `filter()` on a foreign table to select data based on specific column values."
  },
  {
    "chunk_id": "37b30abd-abc3-440e-b6fe-538c07898265",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Using modifiers",
    "content": "<p>Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).</p><p>Modifiers must be specified after filters. Some modifiers only apply for queries that return rows (e.g., <code>select()</code> or <code>rpc()</code> on a function that returns a table response).</p><hr />",
    "summary": "Modifiers are used to alter the format of the response, unlike filters which operate at the row level. Modifiers must be specified after filters and are primarily applicable to queries that return row-based responses, such as `select()` or `rpc()` on a function that returns a table."
  },
  {
    "chunk_id": "4f32a361-60f6-4474-a7c5-9311c8a8c8c5",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Order the results",
    "content": "<p>Order the query result by <code>column</code>.</p><h3>Parameters</h3><ul><li><p>columnRequiredstring</p><p>The column to order by</p></li><li><p>descOptionalbool</p><p>Whether the rows should be ordered in descending order or not.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Foreign table name whose results are to be ordered.</p></li><li><p>nullsfirstOptionalbool</p><p>Order by showing nulls first</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .order(\"name\", desc=True)  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The provided content describes the \"Order the results\" feature, which allows users to sort the query results by a specified column. The key parameters are: `column` (the column to order by), `desc` (whether to sort in descending order), `foreign_table` (the name of a foreign table to order results from), and `nulls_first` (whether to show null values first). An example usage with the Supabase library demonstrates ordering the \"countries\" table by the \"name\" column in descending order."
  },
  {
    "chunk_id": "9670d580-c4ae-41b7-9220-ed1517e86d7c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Limit the number of rows returned",
    "content": "<h3>Parameters</h3><ul><li><p>sizeRequirednumber</p><p>The maximum number of rows to return</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the content is as follows:\n\nThe `select()` method in Supabase allows you to limit the number of rows returned from a table with the `limit()` parameter. You can specify the maximum number of rows to return using the `sizeRequired` parameter. Additionally, you can set the `foreign95table` parameter to limit rows from a foreign table instead of the parent table."
  },
  {
    "chunk_id": "070b0d43-59f0-4f8d-8415-3e044b454080",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Limit the query to a range",
    "content": "<p>Limit the query result by starting at an offset (<code>from</code>) and ending at the offset (<code>from + to</code>). Only records within this range are returned. This respects the query order and if there is no order clause the range could behave unexpectedly.</p><p>The <code>from</code> and <code>to</code> values are 0-based and inclusive: <code>range(1, 3)</code> will include the second, third and fourth rows of the query.</p><h3>Parameters</h3><ul><li><p>startRequirednumber</p><p>The starting index from which to limit the result.</p></li><li><p>endRequirednumber</p><p>The last index to which to limit the result.</p></li><li><p>foreign\u000295\u0003tableOptionalstring</p><p>Set this to limit rows of foreign tables instead of the parent table.</p></li></ul><p>With \u000296\u0003select()\u000296\u0003On a foreign table</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").range(0, 1).execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary is:\n\nThe `range()` function in the documentation allows limiting the query result to a specified range of records, defined by a starting offset (`from`) and an ending offset (`from + to`). This respects the query order, and if there is no order clause, the range behavior may be unexpected. The `from` and `to` parameters are 0-based and inclusive, and an optional `foreign_table` parameter can be used to limit rows of a foreign table instead of the parent table."
  },
  {
    "chunk_id": "1fd2fbed-9dd8-4b22-b6b9-6307b7949113",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = supabase.table(\"countries\").select(\"name\").limit(1).single().execute()</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The summary of the provided content is as follows:\n\nThe `select().limit(1).single().execute()` method in Supabase allows retrieving a single row of data from a table, returning the data as a single object instead of an array of objects. This is useful when you only need to retrieve a single record, reducing the overhead of processing an array."
  },
  {
    "chunk_id": "b6df48ad-7037-485a-9b5f-eb84f39374f1",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve zero or one row of data",
    "content": "<p>Return <code>data</code> as a single object instead of an array of objects.</p><p>With \u000296\u0003select()\u000296\u0003</p><p><code>_10  response = (  _10  supabase.table(\"countries\")  _10  .select(\"*\")  _10  .eq(\"name\", \"Albania\")  _10  .maybe_single()  _10  .execute()  _10  )</code></p><p>Data source</p><p>Response</p><hr />",
    "summary": "The content describes how to retrieve zero or one row of data using the `maybe_single()` method in the Supabase client library. This is useful when you expect at most one row to be returned from a query, as it allows you to receive the data as a single object instead of an array. The example provided demonstrates how to use `maybe_single()` to retrieve a country by its name."
  },
  {
    "chunk_id": "2f2a62a4-772a-40cf-b7e1-ab027f212683",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve as a CSV",
    "content": "<p>Return <code>data</code> as a string in CSV format.</p><p>Return data as CSV</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").csv().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The documentation describes the \"Retrieve as a CSV\" feature, which allows retrieving data from a Supabase table as a CSV string. This can be done by calling the `csv()` method on the `select()` operation, and the resulting CSV string can be stored in the `response` variable. This functionality is useful for exporting data in a widely-supported format for further processing or analysis."
  },
  {
    "chunk_id": "3a37c862-2517-4362-ad7a-207425bf63f3",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Using explain",
    "content": "<p>For debugging slow queries, you can get the <a href=\"https://www.postgresql.org/docs/current/sql-explain.html\">Postgres <code>EXPLAIN</code> execution plan</a>\n of a query using the <code>explain()</code> method. This works on any query, even for <code>rpc()</code> or writes.</p><p>Explain is not enabled by default as it can reveal sensitive information about your database. It's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a <code>pre-request</code> function.</p><p>Follow the <a href=\"/docs/guides/database/debugging-performance\">Performance Debugging Guide</a>\n to enable the functionality on your project.</p><h3>Parameters</h3><ul><li><p>walOptionalboolean</p><p>If <code>true</code>, include information on WAL record generation.</p></li><li><p>verboseOptionalboolean</p><p>If <code>true</code>, the query identifier will be returned and <code>data</code> will include the output columns of the query.</p></li><li><p>settingsOptionalboolean</p><p>If <code>true</code>, include information on configuration parameters that affect query planning.</p></li><li><p>formatOptionalboolean</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>formatOptional\"text\" | \"json\"</p><p>The format of the output, can be <code>\"text\"</code> (default) or <code>\"json\"</code>.</p></li><li><p>buffersOptionalboolean</p><p>If <code>true</code>, include information on buffer usage.</p></li><li><p>analyzeOptionalboolean</p><p>If <code>true</code>, the query will be executed and the actual run time will be returned.</p></li></ul><p>Get the execution planGet the execution plan with analyze and verbose</p><p><code>_10  response = supabase.table(\"countries\").select(\"*\").explain().execute()</code></p><p>Data source</p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `explain()` method in Postgres allows developers to view the execution plan of a query, which can be useful for debugging slow queries. While `explain()` is not enabled by default due to potential security concerns, it can be enabled with additional protections in a production environment. The method supports various parameters to customize the output, such as including information on WAL record generation, configuration settings, and buffer usage, as well as executing the query and returning the actual run time."
  },
  {
    "chunk_id": "14d98c60-2fdc-49ef-b9c8-09af3960a324",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a new user",
    "content": "<ul><li>By default, the user needs to verify their email address before logging in. To turn this off, disable <strong>Confirm email</strong> in <a href=\"https://supabase.com/dashboard/project/_/auth/providers\">your project</a>\n    .</li><li><strong>Confirm email</strong> determines if users need to confirm their email address after signing up.<ul><li>If <strong>Confirm email</strong> is enabled, a <code>user</code> is returned but <code>session</code> is null.</li><li>If <strong>Confirm email</strong> is disabled, both a <code>user</code> and a <code>session</code> are returned.</li></ul></li><li>By default, when the user confirms their email address, they are redirected to the <a href=\"https://supabase.com/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    . You can modify your <code>SITE_URL</code> or add additional redirect URLs in <a href=\"https://supabase.com/dashboard/project/_/auth/url-configuration\">your project</a>\n    .</li><li>If sign\u000295\u0003up() is called for an existing confirmed user:<ul><li>When both <strong>Confirm email</strong> and <strong>Confirm phone</strong> (even when phone provider is disabled) are enabled in <a href=\"/dashboard/project/_/auth/providers\">your project</a>\n    , an obfuscated/fake user object is returned.</li><li>When either <strong>Confirm email</strong> or <strong>Confirm phone</strong> (even when phone provider is disabled) is disabled, the error message, <code>User already registered</code> is returned.</li></ul></li><li>To fetch the currently logged-in user, refer to <a href=\"/docs/reference/python/auth-getuser\"><code>get_user()</code></a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignUpWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign up with an email and passwordSign up with a phone number and password (SMS)Sign up with a phone number and password (whatsapp)Sign up with additional user metadataSign up with a redirect URL</p><p><code>_10  response = supabase.auth.sign_up(  _10  {\"email\": \"email@example.com\", \"password\": \"password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Supabase requires users to verify their email address before logging in. This can be disabled by turning off the \"Confirm email\" setting in the project dashboard. When email confirmation is disabled, both a user object and a session are returned upon sign-up, otherwise only the user object is returned. The sign-up process supports various credential options, including email/password, phone number/password, and user metadata."
  },
  {
    "chunk_id": "9acc9b13-b0ab-4fbd-9ac4-a23984488ea9",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create an anonymous user",
    "content": "<ul><li>Returns an anonymous user</li><li>It is recommended to set up captcha for anonymous sign-ins to prevent abuse. You can pass in the captcha token in the <code>options</code> param.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInAnonymouslyCredentials</p><p>Details</p></li></ul><p>Create an anonymous userCreate an anonymous user with custom user metadata</p><p><code>_10  response = supabase.auth.sign_in_anonymously(  _10  {\"options\": {\"captcha_token\": \"\"}}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The function `supabase.auth.sign_in_anonymously()` creates an anonymous user. It is recommended to set up captcha for anonymous sign-ins to prevent abuse, and the captcha token can be passed in the `options` parameter. The function returns an anonymous user with custom user metadata."
  },
  {
    "chunk_id": "469e5d9e-3e40-4b5c-95fb-fa16dc3e2412",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user",
    "content": "<p>Log in an existing user with an email and password or phone and password.</p><ul><li>Requires either an email and password or a phone number and password.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with email and passwordSign in with phone and password</p><p><code>_10  response = supabase.auth.sign_in_with_password(  _10  {\"email\": \"email@example.com\", \"password\": \"example-password\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The summary is:\n\nAllows users to sign in with an email and password or a phone number and password. Requires either an email and password or a phone and password as input parameters. Provides code examples for signing in with email and password, and phone and password."
  },
  {
    "chunk_id": "55455d1e-f952-4715-bdc8-36f9bba871fb",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in with ID Token",
    "content": "<p>Allows signing in with an OIDC ID token. The authentication provider used should be enabled and configured.</p><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithIdTokenCredentials</p><p>Details</p></li></ul><p>Sign In using ID Token</p><p><code>_10  response = supabase.auth.sign_in_with_id_token(  _10  {\"provider\": \"google\", \"token\": \"your-id-token\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The documentation describes the \"Sign in with ID Token\" feature, which allows users to authenticate by providing an OIDC ID token. The feature requires the authentication provider to be enabled and configured. The implementation involves calling the `supabase.auth.sign_in_with_id_token()` function, passing the provider name and the ID token as parameters, and processing the response."
  },
  {
    "chunk_id": "00d2d8b6-155a-4b6b-a6c8-8e48b942bac9",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user through OTP",
    "content": "<ul><li>Requires either an email or phone number.</li><li>This method is used for passwordless sign-ins where a OTP is sent to the user's email or phone number.</li><li>If the user doesn't exist, <code>sign_in_with_otp()</code> will signup the user instead. To restrict this behavior, you can set <code>should_create_user</code> in <code>SignInWithPasswordlessCredentials.options</code> to <code>false</code>.</li><li>If you're using an email, you can configure whether you want the user to receive a magiclink or a OTP.</li><li>If you're using phone, you can configure whether you want the user to receive a OTP.</li><li>The magic link's destination URL is determined by the <a href=\"/docs/guides/auth/redirect-urls\"><code>SITE_URL</code></a>\n    .</li><li>See <a href=\"/docs/guides/auth/overview#redirect-urls-and-wildcards\">redirect URLs and wildcards</a>\n     to add additional redirect URLs to your project.</li><li>Magic links and OTPs share the same implementation. To send users a one-time code instead of a magic link, <a href=\"https://supabase.com/dashboard/project/_/auth/templates\">modify the magic link email template</a>\n     to include <code>\\{\\{ .Token \\}\\}</code> instead of <code>\\{\\{ .ConfirmationURL \\}\\}</code>.</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithPasswordCredentials</p><p>Details</p></li></ul><p>Sign in with emailSign in with SMS OTPSign in with WhatsApp OTP</p><p><code>_10  response = supabase.auth.sign_in_with_otp(  _10  {  _10  \"email\": \"email@example.com\",  _10  \"options\": {\"email_redirect_to\": \"https://example.com/welcome\"},  _10  }  _10  )</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The summary is as follows:\n\nThe sign-in with OTP method allows users to sign in without a password, by sending a one-time password to their email or phone number. This can be used for passwordless sign-in or sign-up flows. Developers can configure whether to send an OTP or a magic link, and can customize the redirect URL for the magic link. The implementation for magic links and OTPs is the same, with the option to send an OTP code instead of a confirmation URL in the email template."
  },
  {
    "chunk_id": "9237ff6a-849a-4150-9e28-9c0be27f7d4c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user through OAuth",
    "content": "<ul><li>This method is used for signing in using a third-party provider.</li><li>Supabase supports many different <a href=\"/docs/guides/auth#configure-third-party-providers\">third-party providers</a>\n    .</li></ul><h3>Parameters</h3><ul><li><p>credentialsRequiredSignInWithOAuthCredentials</p><p>Details</p></li></ul><p>Sign in using a third-party providerSign in using a third-party provider with redirectSign in with scopes</p><p><code>_10  response = supabase.auth.sign_in_with_oauth({  _10  \"provider\": 'github'  _10  })</code></p><hr />",
    "summary": "The provided content describes how to sign in a user through OAuth, a method for authenticating users using a third-party provider. Supabase supports various third-party providers for this purpose. The key technical point is the `supabase.auth.sign_in_with_oauth()` function, which takes the provider name (e.g., 'github') as a parameter and returns the user's authentication credentials."
  },
  {
    "chunk_id": "b2675bbc-1e31-4b63-80cf-9ad791d73eb6",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign in a user through SSO",
    "content": "<ul><li>Before you can call this method you need to <a href=\"/docs/guides/auth/sso/auth-sso-saml#managing-saml-20-connections\">establish a connection</a>\n     to an identity provider. Use the <a href=\"/docs/reference/cli/supabase-sso\">CLI commands</a>\n     to do this.</li><li>If you've associated an email domain to the identity provider, you can use the <code>domain</code> property to start a sign-in flow.</li><li>In case you need to use a different way to start the authentication flow with an identity provider, you can use the <code>provider_id</code> property. For example:<ul><li>Mapping specific user email addresses with an identity provider.</li><li>Using different hints to identity the identity provider to be used by the user, like a company-specific page, IP address or other tracking information.</li></ul></li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredSignInWithSSOCredentials</p><p>Details</p></li></ul><p>Sign in with email domainSign in with provider UUID</p><p><code>_10  response = supabase.auth.sign_in_with_sso({\"domain\": \"company.com\"})</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "To sign in a user through SSO, you first need to establish a connection to an identity provider using the Supabase CLI. You can then use the `sign_in_with_sso()` method, specifying either the email domain associated with the identity provider or the provider's UUID. This allows for more flexible authentication flows, such as mapping specific user email addresses or using different hints to identify the identity provider."
  },
  {
    "chunk_id": "009457cc-4bbb-435e-979b-92987448e2cd",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Sign out a user",
    "content": "<ul><li>In order to use the <code>sign_out()</code> method, the user needs to be signed in first.</li><li>By default, <code>sign_out()</code> uses the global scope, which signs out all other sessions that the user is logged into as well.</li><li>Since Supabase Auth uses JWTs for authentication, the access token JWT will be valid until it's expired. When the user signs out, Supabase revokes the refresh token and deletes the JWT from the client-side. This does not revoke the JWT and it will still be valid until it expires.</li></ul><h3>Parameters</h3><ul><li><p>optionsOptionalSignOutOptions</p><p>Details</p></li></ul><p>Sign out</p><p><code>_10  response = supabase.auth.sign_out()</code></p><hr />",
    "summary": "To sign out a user, the `sign_out()` method must be called after the user is signed in. This revokes the refresh token and deletes the JWT from the client-side, though the access token JWT remains valid until it expires. The `sign_out()` method uses the global scope by default, signing out all other sessions the user is logged into."
  },
  {
    "chunk_id": "5cc6637b-f734-4fca-b250-42d226e7c8ef",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Verify and log in through OTP",
    "content": "<ul><li>The <code>verify_otp</code> method takes in different verification types. If a phone number is used, the type can either be <code>sms</code> or <code>phone_change</code>. If an email address is used, the type can be one of the following: <code>email</code>, <code>recovery</code>, <code>invite</code> or <code>email_change</code> (<code>signup</code> and <code>magiclink</code> types are deprecated).</li><li>The verification type used should be determined based on the corresponding auth method called before <code>verify_otp</code> to sign up / sign-in a user.</li><li>The <code>TokenHash</code> is contained in the <a href=\"/docs/guides/auth/auth-email-templates\">email templates</a>\n     and can be used to sign in. You may wish to use the hash with Magic Links for the PKCE flow for Server Side Auth. See <a href=\"/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr\">this guide</a>\n     for more details.</li></ul><h3>Parameters</h3><ul><li><p>paramsRequiredVerifyOtpParams</p><p>Details</p></li></ul><p>Verify Signup One-Time Password (OTP)Verify SMS One-Time Password (OTP)Verify Email Auth (Token Hash)</p><p><code>_10  response = supabase.auth.verify_otp(  _10  {\"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\"}  _10  )</code></p><p>Response</p><hr />",
    "summary": "The `verify_otp` method is used to verify one-time passwords (OTPs) for different authentication types, such as SMS, email, and password recovery. The verification type should match the corresponding auth method used before `verify_otp`. The `TokenHash` contained in the email templates can be used for signing in, and it can also be used with the PKCE flow for server-side authentication."
  },
  {
    "chunk_id": "5ebcda0d-daa6-4aee-b608-b4ccfe481bb3",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a session",
    "content": "<ul><li>This method retrieves the current local session (i.e in memory).</li><li>The session contains a signed JWT and unencoded session data.</li><li>Since the unencoded session data is retrieved from the local storage medium, <strong>do not</strong> rely on it as a source of trusted data on the server. It could be tampered with by the sender. If you need verified, trustworthy user data, call <a href=\"/docs/reference/python/auth-getuser\"><code>get_user</code></a>\n     instead.</li><li>If the session has an expired access token, this method will use the refresh token to get a new session.</li></ul><p>Get the session data</p><p><code>_10  response = supabase.auth.get_session()</code></p><p>Response</p><hr />",
    "summary": "The method retrieves the current local session, which contains a signed JWT and unencoded session data. However, the unencoded session data should not be relied upon as a trusted source, as it could be tampered with by the sender. If verified, trustworthy user data is required, the `get_user` method should be used instead. The method will also automatically refresh the session if the access token has expired."
  },
  {
    "chunk_id": "f306f9db-22fe-4353-af19-f7ed5cfdb6c2",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a new session",
    "content": "<p>Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh\u000295\u0003session() will attempt to retrieve it from get\u000295\u0003session(). If the current session's refresh token is invalid, an error will be thrown.</p><ul><li>This method will refresh the session whether the current one is expired or not.</li></ul><h3>Parameters</h3><ul><li>refresh\u000295\u0003tokenOptionalstring</li></ul><p>Refresh session using the current session</p><p><code>_10  response = supabase.auth.refresh_session()</code></p><p>Response</p><hr />",
    "summary": "The `refresh_session()` method retrieves a new session, regardless of the expiry status of the current session. It takes an optional refresh token, and if not provided, it will attempt to retrieve it from the existing session. If the current session's refresh token is invalid, an error will be thrown."
  },
  {
    "chunk_id": "0be9cd34-cf9b-4a20-ab67-f6b3bfbf1857",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a user",
    "content": "<ul><li>This method fetches the user object from the database instead of local session.</li><li>This method is useful for checking if the user is authorized because it validates the user's access token JWT on the server.</li></ul><h3>Parameters</h3><ul><li><p>jwtOptionalstring</p><p>Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.</p></li></ul><p>Get the logged in user with the current existing sessionGet the logged in user with a custom access token jwt</p><p><code>_10  response = supabase.auth.get_user()</code></p><p>Response</p><hr />",
    "summary": "The method `supabase.auth.get_user()` retrieves the user object from the database, rather than from the local session. This is useful for verifying the user's authorization by validating the provided access token JWT on the server. The method can be called with an optional JWT parameter, which if not provided, will use the JWT from the current session."
  },
  {
    "chunk_id": "803d00b2-6984-41d8-a433-8ac1c6880d3a",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Set the session data",
    "content": "<p>Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.</p><ul><li>This method sets the session using an <code>access_token</code> and <code>refresh_token</code>.</li><li>If successful, a <code>SIGNED_IN</code> event is emitted.</li></ul><h3>Parameters</h3><ul><li><p>access\u000295\u0003tokenRequiredstring</p></li><li><p>refresh\u000295\u0003tokenRequiredstring</p></li></ul><p>Refresh the session</p><p><code>_10  response = supabase.auth.set_session(access_token, refresh_token)</code></p><p>Response</p><p>Notes</p><hr />",
    "summary": "The `set_session()` method sets the session data from the current session, refreshing it if expired and throwing an error if the refresh token or access token is invalid. It takes an `access_token` and `refresh_token` as parameters and emits a `SIGNED_IN` event upon successful completion."
  },
  {
    "chunk_id": "2c2a8092-fa51-46b1-8ccf-27594749088a",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Auth MFA",
    "content": "<p>This section contains methods commonly used for Multi-Factor Authentication (MFA) and are invoked behind the <code>supabase.auth.mfa</code> namespace.</p><p>Currently, we only support time-based one-time password (TOTP) as the 2nd factor. We don't support recovery codes but we allow users to enroll more than 1 TOTP factor, with an upper limit of 10.</p><p>Having a 2nd TOTP factor for recovery frees the user of the burden of having to store their recovery codes somewhere. It also reduces the attack surface since multiple recovery codes are usually generated compared to just having 1 backup TOTP factor.</p><hr />",
    "summary": "The documentation covers methods for Multi-Factor Authentication (MFA) in the Supabase platform, specifically supporting time-based one-time password (TOTP) as the second factor. It allows users to enroll multiple TOTP factors for recovery, which eliminates the need for separate recovery codes and reduces the attack surface compared to a single backup factor."
  },
  {
    "chunk_id": "b58f2643-a228-4aae-a126-ec9e8307875d",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Enroll a factor",
    "content": "<ul><li>Currently, <code>totp</code> is the only supported <code>factor_type</code>. The returned <code>id</code> should be used to create a challenge.</li><li>To create a challenge, see <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n    .</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li><li>To create and verify a challenge in a single step, see <a href=\"/docs/reference/python/auth-mfa-challengeandverify\"><code>mfa.challenge_and_verify()</code></a>\n    .</li></ul><p>Enroll a time-based, one-time password (TOTP) factor</p><p><code>_10  res = supabase.auth.mfa.enroll({  _10  \"factor_type\": \"totp\",  _10  \"friendly_name\": \"your_friendly_name\"  _10  })</code></p><hr />",
    "summary": "The documentation describes the process of enrolling a time-based, one-time password (TOTP) factor for multi-factor authentication (MFA) using the Supabase authentication API. Currently, TOTP is the only supported `factor_type`, and the returned `id` should be used to create a challenge. The documentation provides references to related API methods for creating, verifying, and combining the challenge and verification steps."
  },
  {
    "chunk_id": "56f63255-b2d0-4a4f-8997-3cd97018d830",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before creating a challenge.</li><li>To verify a challenge, see <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n    .</li></ul><p>Create a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225'  _10  })</code></p><hr />",
    "summary": "To create a challenge, an enrolled multi-factor authentication (MFA) factor is required. The `mfa.challenge()` function can be used to create a challenge for a specific MFA factor, which can then be verified using the `mfa.verify()` function."
  },
  {
    "chunk_id": "dff7b855-0a1d-4a51-bf4c-0fe2c45c4eeb",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Verify a challenge",
    "content": "<ul><li>To verify a challenge, please <a href=\"/docs/reference/python/auth-mfa-challenge\">create a challenge</a>\n     first.</li></ul><p>Verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"challenge_id\": '4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To verify a challenge, users must first create a challenge using the `supabase.auth.mfa.create()` method. The `supabase.auth.mfa.verify()` method is then used to verify a challenge by providing the `factor_id`, `challenge_id`, and the `code` received from the user."
  },
  {
    "chunk_id": "818d0ed1-7dd3-41e3-b8a6-e7c43ebd91e5",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create and verify a challenge",
    "content": "<ul><li>An <a href=\"/docs/reference/python/auth-mfa-enroll\">enrolled factor</a>\n     is required before invoking <code>challengeAndVerify()</code>.</li><li>Executes <a href=\"/docs/reference/python/auth-mfa-challenge\"><code>mfa.challenge()</code></a>\n     and <a href=\"/docs/reference/python/auth-mfa-verify\"><code>mfa.verify()</code></a>\n     in a single step.</li></ul><p>Create and verify a challenge for a factor</p><p><code>_10  res = supabase.auth.mfa.challenge_and_verify({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  \"code\": '123456'  _10  })</code></p><hr />",
    "summary": "To create and verify a challenge, an enrolled factor is required. The `challengeAndVerify()` function executes the `mfa.challenge()` and `mfa.verify()` operations in a single step, allowing the user to authenticate using a factor with a provided code."
  },
  {
    "chunk_id": "4ad6a865-0954-417b-820c-e392b98b9c2f",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Unenroll a factor",
    "content": "<p>Unenroll a factor</p><p><code>_10  res = supabase.auth.mfa.unenroll({  _10  \"factor_id\": '34e770dd-9ff9-416c-87fa-43b31d7ef225',  _10  })</code></p><hr />",
    "summary": "To unenroll a multi-factor authentication (MFA) factor, use the `supabase.auth.mfa.unenroll()` function, passing the `factor_id` of the factor to be unenrolled. This allows users to remove a specific MFA factor from their account, providing more flexibility in managing their authentication methods."
  },
  {
    "chunk_id": "dd9e57a4-dd8c-4f1f-9e64-34eb707fa361",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Get Authenticator Assurance Level",
    "content": "<ul><li>Authenticator Assurance Level (AAL) is the measure of the strength of an authentication mechanism.</li><li>In Supabase, having an AAL of <code>aal1</code> refers to having the 1st factor of authentication such as an email and password or OAuth sign-in while <code>aal2</code> refers to the 2nd factor of authentication such as a time-based, one-time-password (TOTP).</li><li>If the user has a verified factor, the <code>next_level</code> field will return <code>aal2</code>, else, it will return <code>aal1</code>.</li></ul><p>Get the AAL details of a session</p><p><code>_10  res = supabase.auth.mfa.get_authenticator_assurance_level()</code></p><hr />",
    "summary": "The Authenticator Assurance Level (AAL) is a measure of authentication strength in Supabase. AAL1 refers to the first factor of authentication (e.g., email and password), while AAL2 refers to the second factor (e.g., time-based, one-time-password). The `next_level` field indicates whether the user has a verified factor, returning AAL2 if true, or AAL1 if false. The `supabase.auth.mfa.get_authenticator_assurance_level()` function can be used to retrieve the AAL details of a session."
  },
  {
    "chunk_id": "7c5951a9-edc5-4a8c-ad78-5f476feee149",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Invokes a Supabase Edge Function.",
    "content": "<p>Invoke a Supabase Function.</p><ul><li>Requires an Authorization header.</li><li>When you pass in a body to your function, we automatically attach the Content-Type header for <code>Blob</code>, <code>ArrayBuffer</code>, <code>File</code>, <code>FormData</code> and <code>String</code>. If it doesn't match any of these types we assume the payload is <code>json</code>, serialise it and attach the <code>Content-Type</code> header as <code>application/json</code>. You can override this behaviour by passing in a <code>Content-Type</code> header of your own.</li></ul><p>Basic invocationError handlingPassing custom headers</p><p><code>_10  response = supabase.functions.invoke(  _10  \"hello-world\", invoke_options={\"body\": {\"name\": \"Functions\"}}  _10  )</code></p><hr />",
    "summary": "Invokes a Supabase Edge Function, which requires an Authorization header. The function automatically attaches the appropriate Content-Type header based on the data type of the request body, but this behavior can be overridden by providing a custom Content-Type header. The function can be invoked with a request body, and the response can be handled accordingly."
  },
  {
    "chunk_id": "36a26f66-f2d8-4e64-b358-da8727f79acd",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Subscribe to channel",
    "content": "<ul><li>By default, Broadcast and Presence are enabled for all projects.</li><li>By default, listening to database changes is disabled for new projects due to database performance and security concerns. You can turn it on by managing Realtime's <a href=\"/docs/guides/api#realtime-api-overview\">replication</a>\n    .</li><li>You can receive the \"previous\" data for updates and deletes by setting the table's <code>REPLICA IDENTITY</code> to <code>FULL</code> (e.g., <code>ALTER TABLE your_table REPLICA IDENTITY FULL;</code>).</li><li>Row level security is not applied to delete statements. When RLS is enabled and replica identity is set to full, only the primary key is sent to clients.</li></ul><p>Listen to broadcast messagesListen to presence syncListen to presence joinListen to presence leaveListen to all database changesListen to a specific tableListen to insertsListen to updatesListen to deletesListen to multiple eventsListen to row level changes</p><p><code>_10  channel = supabase.channel(\"room1\")  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  def handle_broadcast(payload):  _10  print(\"Cursor position received!\", payload)  _10  _10  channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)</code></p><hr />",
    "summary": "The summary is as follows:\n\nBy default, Broadcast and Presence are enabled for all projects, but listening to database changes is disabled for new projects due to performance and security concerns. Users can receive previous data for updates and deletes by setting the table's REPLICA IDENTITY to FULL. The documentation provides examples of listening to various Realtime events, such as broadcasts, presence sync, and database changes, demonstrating how to subscribe to and handle these events."
  },
  {
    "chunk_id": "151be311-71f3-49c3-956e-70c912e22880",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Unsubscribe from a channel",
    "content": "<ul><li>Removing a channel is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Removes a channel</p><p><code>_10  supabase.remove_channel(myChannel)</code></p><hr />",
    "summary": "Unsubscribing from a Realtime channel is recommended to maintain project performance and database efficiency. The Supabase platform will automatically clean up unused channels 30 seconds after a client disconnects, but leaving channels subscribed can degrade the service as more clients are connected. The `supabase.remove_channel()` function can be used to remove a specific channel."
  },
  {
    "chunk_id": "c9584f27-02a1-4219-bcb2-19828cd6e461",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Unsubscribe from all channels",
    "content": "<ul><li>Removing channels is a great way to maintain the performance of your project's Realtime service as well as your database if you're listening to Postgres changes. Supabase will automatically handle cleanup 30 seconds after a client is disconnected, but unused channels may cause degradation as more clients are simultaneously subscribed.</li></ul><p>Remove all channels</p><p><code>_10  supabase.remove_all_channels()</code></p><hr />",
    "summary": "Unsubscribing from all channels is recommended to maintain the performance of the Realtime service and the database, as unused channels can cause degradation when more clients are subscribed. The `supabase.remove_all_channels()` function allows you to remove all subscribed channels, which Supabase will automatically clean up 30 seconds after the client is disconnected."
  },
  {
    "chunk_id": "2c7a9ce3-a15b-4617-ae4b-8e0ff0e59c21",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve all channels",
    "content": "<p>Get all channels</p><p><code>_10  channels = supabase.get_channels()</code></p><hr />",
    "summary": "The summary is: The code `supabase.get_channels()` retrieves all channels from the Supabase database. This function can be used to retrieve a list of all available channels, which is a common requirement in many applications that work with channel-based data."
  },
  {
    "chunk_id": "041ccb04-c01f-436c-a406-2724eabd7e3c",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Broadcast a message",
    "content": "<p>Broadcast a message to all connected clients to a channel.</p><p>Send a message via websocket</p><p><code>_10  channel = supabase.channel('room1')  _10  _10  def on_subscribe(status, err):  _10  if status == RealtimeSubscribeStates.SUBSCRIBED:  _10  channel.send_broadcast('cursor-pos', { \"x\": random.random(), \"y\": random.random() })  _10  _10  channel.subscribe(on_subscribe)</code></p><p>Response</p><hr />",
    "summary": "The summary is: The documentation describes how to broadcast a message to all connected clients in a channel using the Supabase Realtime API. The example code demonstrates subscribing to a channel, then sending a broadcast message with random cursor position data."
  },
  {
    "chunk_id": "e42ea15a-b896-4305-85a1-f67c67a754d1",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>insert</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create bucket</p><p><code>_10  res = supabase.storage.create_bucket(name)</code></p><hr />",
    "summary": "To create a bucket, the required Roles-Based Access Control (RBAC) permissions are `insert` access to the `buckets` table, while no permissions are needed for the `objects` table. Refer to the Storage guide for more details on access control."
  },
  {
    "chunk_id": "a16b9e7f-c9e0-42b4-91fd-1d954bae5e54",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Get bucket</p><p><code>_10  res = supabase.storage.get_bucket(name)</code></p><hr />",
    "summary": "To retrieve a bucket, the required Supabase RLS policy permissions are `select` on the `buckets` table and no permissions on the `objects` table. Refer to the Storage guide for more details on Supabase's access control system. The code to retrieve a bucket is `supabase.storage.get_bucket(name)`."
  },
  {
    "chunk_id": "6c9bb081-826f-4e37-8a1c-c833916f4b60",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "List all buckets",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List buckets</p><p><code>_10  res = supabase.storage.list_buckets()</code></p><hr />",
    "summary": ""
  },
  {
    "chunk_id": "07962c0d-792c-4151-b27e-dcc0664be1fc",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Delete a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code> and <code>delete</code></li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete bucket</p><p><code>_10  res = supabase.storage.delete_bucket(name)</code></p><hr />",
    "summary": "To delete a bucket in Supabase, you need the `select` and `delete` permissions on the `buckets` table, but no permissions are required for the `objects` table. The deletion operation is performed using the `supabase.storage.delete_bucket(name)` function."
  },
  {
    "chunk_id": "951b61a2-1cf0-4e05-baf4-4d5d2e1dfe92",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Empty a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: <code>select</code></li><li><code>objects</code> table permissions: <code>select</code> and <code>delete</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Empty bucket</p><p><code>_10  res = supabase.storage.empty_bucket(name)</code></p><hr />",
    "summary": "To empty a bucket, the required RLS policy permissions are 'select' on the 'buckets' table and 'select' and 'delete' on the 'objects' table. The Storage guide provides details on how access control works. The code to empty a bucket is `supabase.storage.empty_bucket(name)`."
  },
  {
    "chunk_id": "5b638fea-6986-4d45-a852-25995d0066c7",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Upload a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>insert</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li><li>Please specify the appropriate content <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME type</a>\n     if you are uploading images or audio. If no <code>file_options</code> are specified, the MIME type defaults to <code>text/html</code>.</li></ul><p>Upload file using filepath</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"testbucket\").upload(file=f,path=path_on_supastorage, file_options={\"content-type\": \"audio/mpeg\"})</code></p><hr />",
    "summary": "To upload a file to Supabase Storage, the required RLS policy permissions are `insert` access to the `objects` table. The MIME type should be specified if uploading images or audio, otherwise it defaults to `text/html`. The file can be uploaded using the `supabase.storage.from_(\"testbucket\").upload()` method, providing the file path and optional file options such as content type."
  },
  {
    "chunk_id": "f9c64859-d445-4013-8448-fa57dea18e36",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Download a file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Download file</p><p><code>_10  with open(destination, 'wb+') as f:  _10  res = supabase.storage.from_('bucket_name').download(source)  _10  f.write(res)</code></p><hr />",
    "summary": "To download a file, the required RLS policy permissions are: no permissions for the `buckets` table and `select` permissions for the `objects` table. The code snippet demonstrates downloading a file from a Supabase storage bucket and saving it to a local file."
  },
  {
    "chunk_id": "9311aca6-59f9-4266-be61-cf74c2e9ba25",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "List all files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>List files in a bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').list()</code></p><hr />",
    "summary": "To list all files in a Supabase storage bucket, the `objects` table permissions of `select` are required. The code to perform this operation is `supabase.storage.from_('bucket_name').list()`. Refer to the Storage guide for more information on access control."
  },
  {
    "chunk_id": "79321a0d-cc4a-4109-ab46-d1d0f7e81970",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Replace an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Update file</p><p><code>_10  with open(filepath, 'rb') as f:  _10  supabase.storage.from_(\"bucket_name\").update(file=f, path=path_on_supastorage, file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"})</code></p><hr />",
    "summary": "To replace an existing file in Supabase Storage, the user requires `update` and `select` permissions on the `objects` table. The file can be updated using the `supabase.storage.from_(\"bucket_name\").update()` method, which takes the file, the path on Supabase Storage, and optional file options like cache control and upsert."
  },
  {
    "chunk_id": "12e22643-911d-4cd9-91ba-f88dcaafd985",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Move an existing file",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>update</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Move file</p><p><code>_10  res = supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')</code></p><hr />",
    "summary": "To move an existing file, the required RLS policy permissions are 'update' and 'select' on the 'objects' table. The code snippet `supabase.storage.from_('bucket_name').move('public/avatar1.png', 'private/avatar2.png')` demonstrates how to move a file from the 'public/avatar1.png' location to the 'private/avatar2.png' location within the specified storage bucket."
  },
  {
    "chunk_id": "c0837df3-a4d0-4691-8460-0d06347b9777",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Delete files in a bucket",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>delete</code> and <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Delete file</p><p><code>_10  res = supabase.storage.from_('bucket_name').remove('test.jpg')</code></p><hr />",
    "summary": "To delete a file in a Supabase storage bucket, the user requires `delete` and `select` permissions on the `objects` table. The RLS (Row-Level Security) policy permissions needed are none for the `buckets` table and `delete` and `select` for the `objects` table. Refer to the Supabase Storage guide for more information on access control."
  },
  {
    "chunk_id": "243a7c27-d735-4f9d-9882-2ae4728c991b",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Create a signed URL",
    "content": "<ul><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: <code>select</code></li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Create Signed URL</p><p><code>_10  res = supabase.storage.from_('bucket_name').create_signed_url(filepath, expiry_duration)</code></p><hr />",
    "summary": "To create a signed URL in Supabase, you need the `objects` table permissions set to `select`. The signed URL allows limited, time-based access to a specific file in the storage bucket. This is useful for securely sharing access to files without exposing the entire bucket."
  },
  {
    "chunk_id": "94d9cb6f-9585-4523-9973-c2ba6bf957ce",
    "source_url": "https://supabase.com/docs/reference/python/upsert",
    "main_heading": "Retrieve public URL",
    "content": "<ul><li>The bucket needs to be set to public, either via <a href=\"/docs/reference/python/storage-updatebucket\">updateBucket()</a>\n     or by going to Storage on <a href=\"https://supabase.com/dashboard\">supabase.com/dashboard</a>\n    , clicking the overflow menu on a bucket and choosing \"Make public\"</li><li>RLS policy permissions required:<ul><li><code>buckets</code> table permissions: none</li><li><code>objects</code> table permissions: none</li></ul></li><li>Refer to the <a href=\"/docs/guides/storage/security/access-control\">Storage guide</a>\n     on how access control works</li></ul><p>Returns the URL for an asset in a public bucket</p><p><code>_10  res = supabase.storage.from_('bucket_name').get_public_url('test/avatar1.jpg')</code></p>",
    "summary": "To retrieve a public URL for an asset, the bucket must be set to public either via the `updateBucket()` function or the Supabase dashboard. No specific permissions are required on the `buckets` or `objects` tables. The `get_public_url()` function can be used to retrieve the public URL for an asset in a public bucket."
  }
]